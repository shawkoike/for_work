<p><a href="http://developer.telerik.com/featured/the-rise-of-typescript/" rel="nofollow" title="" class="ext-link">The Rise of TypeScript?</a> （2015-03-30） by <a href="http://developer.telerik.com/author/tvantoll/" rel="nofollow" title="" class="ext-link">TJ VanToll</a></p><p><img width="1170" height="297" src="http://developer.telerik.com/wp-content/uploads/2015/03/rise_typescript_header.jpg" class="attachment-full wp-post-image" alt="rise_typescript_header" scale="0"><br>
JavaScriptのコミュニティがツールやフレームワークを統合する頻度は、ニコラス・ケイジがいい映画を作るのと同じくらいの頻度です。何が言いたいのかというと、<a href="https://www.youtube.com/watch?v=UMlYWZgCIgo" rel="nofollow" title="" class="ext-link">あることはある</a>のですが、あったとしたら注目を集めるぐらい稀だということです。</p><p>だから私は、AngularのチームがAngular 2の開発に使用する言語を自社の<a href="https://docs.google.com/document/d/11YUzC-1d0V1-Q3V0fQ7KSit97HnZoKVygDxpWzEYW0U/edit?pli=1" rel="nofollow" title="" class="ext-link">AtScript</a>から<a href="http://www.typescriptlang.org/" rel="nofollow" title="" class="ext-link">TypeScript</a>に<a href="http://blogs.msdn.com/b/typescript/archive/2015/03/05/angular-2-0-built-on-typescript.aspx" rel="nofollow" title="" class="ext-link">切り換えるという決断をした</a>のは非常に興味深いことだと思いました。これまでも、AngularのチームはTypeScriptのチームと共に開発を行ってきてはいますが、直接TypeScriptを使用するという決断は、TypeScriptのプロジェクトを強く支持しているということに他なりません。</p><p>また、TypeScriptを活用しているプロジェクトはAngularだけではありません。全くの偶然ですが、私たちTelerikはAngularのチームがこの発表をしたのと全く同じ日に、<a href="https://www.nativescript.org/" rel="nofollow" title="" class="ext-link">NativeScript</a>のパブリックベータをリリースしました。NativeScriptプロジェクトの<a href="https://github.com/nativescript/cross-platform-modules" rel="nofollow" title="" class="ext-link">コアとなるJavaScriptフレームワーク</a>と<a href="https://github.com/nativescript/nativescript-cli" rel="nofollow" title="" class="ext-link">CLI</a>は、どちらもTypeScriptで記述されていますし、NativeScriptはTypeScriptのコードを第一級オブジェクトとして扱います。</p><p>この数ヵ月間、TypeScriptはこれらの発表による恩恵を受けてきました。実際、”非常に科学的な”<a href="https://accounts.google.com/ServiceLogin?service=trendspro&amp;continue=https%3A%2F%2Fwww.google.com%2Ftrends%2Fexplore&amp;followup=https%3A%2F%2Fwww.google.com%2Ftrends%2Fexplore&amp;passive=true&amp;go=true#q=TypeScript%2C%20CoffeeScript%2C%20%2Fm%2F0h52xr1&amp;date=1%2F2011%2053m&amp;cmpt=q&amp;tz=" rel="nofollow" title="" class="ext-link">Googleトレンドの比較</a>では、TypeScriptはこれらの発表により、JavaScript互換の他のフレームワークよりも多くの関心を集めていることが分かります。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/tbbsuzI.jpg" alt="tbbsuzI" width="800" height="324" class="alignleft size-full wp-image-41311" scale="0"></p><p>TypeScriptはJavaScript互換言語として初めて開発されたものではありません。むしろ遅い方です。ランタイムとしてのJavaScriptが至る所で用いられているため、様々なプログラミングのバックグラウンドを持つ人々が自分たちの都合のいいようにJavaScriptを改造してきました。実際CoffeeScriptのチームは、JavaScript互換言語を<a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS" rel="nofollow" title="" class="ext-link">笑ってしまうほどたくさん、なんと250以上も保持しています</a>。そうです、250以上の言語ですよ。これをネタに <a href="https://xkcd.com/927/" rel="nofollow" title="" class="ext-link">xkcdコミック</a>に入れてもらえそうなほどぴったりのマンガを描いてみました。</p><p><img src="http://imgs.xkcd.com/comics/standards.png" alt="" scale="0"></p><p>公正を期すためにお伝えしておきますが、これらの言語の中には適当に作られたものや概念実証のために実装され、実際は世間にリリースされていないものもあります（<a href="https://github.com/ajlopez/CobolScript" rel="nofollow" title="" class="ext-link">CobolScript</a>はこれに当たるでしょうね）。しかし多くは開発に多大な労力をかけられ、巨大なエコシステムを持ち、たくさんの企業支援を得ている言語です。ではこれを考慮した上で、TypeScriptを他の多くの言語と差別化しているものとは一体何なのかを考えてみましょう。ここに少し挙げてみます。</p><p>JavaScript互換のフレームワークは一般的に2つのグループに分類できます。JavaScript上に構築するものと、完全にJavaScriptを放棄したものです。大部分のフレームワークが後者（JavaScriptを完全に放棄している方）に属しますが、TypeScriptはJavaScript上に構築する方を選択しており、Microsoftはこのアプローチの正当性を強く主張しています。以下は以前<a href="http://blogs.msdn.com/b/ie_jp/archive/2011/12/27/10251140.aspx" rel="nofollow" title="" class="ext-link">Microsoftが見解を述べたブログ</a>からの引用です。</p><p>TypeScriptはJavaScriptのスーパーセットですから、既存の.jsファイルのファイル名を.tsに変更でき、そうすれば基本的にきちんと機能するということです。これはWebデベロッパにはよくあるパターンで、私たちの多くが既に使用しているCSSプロセッサ（例えばSASSやLESSなど）も全く同じように機能します。</p><p>有効なJavaScriptがTypeScriptでは有効でないというレアなケースもありますが、こういったケースは大抵の場合、容易に検出し修正できます。</p><p>TypeScriptにはオプショナル型システムがあるのですが、JavaScriptの開発者の多くはこれを不要なものだとバカにするかもしれません。しかし多くのサーバ側の開発者は、「神よ感謝します。私には自分の型が必要なのです」と思っています。TypeScriptのオプショナル型システムのすごいところは、自分で選択可能であるという部分です。これは、意味を成す箇所であれば型を使用でき、意味を成さない箇所では除外することができるということであり、各チームがそれを自分たちで決められるのです。</p><p>例えば、以下のTypeScriptのコードは2つのローカル変数を数値として定義し、計算の中で使用しています。</p><p>このような非常にシンプルなシナリオでは、私個人としては型は不要だと思っています。これらの変数を何に使っているのかが非常に明確ですから。TypeScriptは、実際にこの2つの式の右辺からここの型を自動的に推論します。</p><p>しかし、あなたがもしこの機能をアプリケーション全体で使えるような関数にリファクタリングしようとしたら（そしてそれがこの簡単な例よりもずっと複雑なものだったら）どうでしょう。そういった場合のアプローチを以下に示します。</p><p>ここではこの3つのnumberの宣言が、この関数は2つの数値型のパラメータを想定していて、数値を返すということをTypeScriptに教えています（最後の:numberは関数自体の戻り値の型を定義しています）。この関数は再利用可能なAPIとして想定されているものなので、型宣言がより有効だと思います。他のデベロッパはこの関数の使い方を学ぶためにこれらの型宣言を利用できますし、これらの型宣言は自分のコードを長期に渡って保守するのにも役立ちます。</p><p>TypeScriptはこれらの型宣言をコンパイル時に検証します。つまり、もしこの関数を誤った使い方で用いてしまったら（例えば2つの数値ではなく2つの文字列を渡すなど）ビルドが失敗するということです。以下は、私がcalculateArea( “2”, 3 )をコンパイルしようとした時の、<a href="https://www.npmjs.com/package/typescript" rel="nofollow" title="" class="ext-link">TypeScriptのコマンドラインのインターフェース</a>です。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/Rm4Aw57.jpg" alt="Rm4Aw57" width="800" height="187" class="alignleft size-full wp-image-41321" scale="0"><br>
メンテナンスにはこれが役立つでしょう。関数のAPIを変更する時は型を探すコンパイラが関数の全ての使用箇所を即座に知らせてくれるので、検索と置換に頼る必要がなくなります。</p><p>TypeScriptの選択ができるという特徴はこの言語の型システムに関連したものですが、これと同じ設計上の選択が、TypeScriptが提供している全てのものに当てはまります。TypeScriptには<a href="http://www.typescriptlang.org/Handbook#modules" rel="nofollow" title="" class="ext-link">モジュール</a>や<a href="http://www.typescriptlang.org/Handbook#classes" rel="nofollow" title="" class="ext-link">クラス</a>、<a href="http://www.typescriptlang.org/Handbook#interfaces" rel="nofollow" title="" class="ext-link">インターフェース</a>、その他にもいろいろな機能があり、価値があると思えばそれを利用できますし、価値がないと思えば普通のJavaScriptを好きなように使い続ければいいのです。</p><p>TypeScriptはオプショナルな型の先駆けではありません。もっと前からDartなど複数の言語がこの機能を持っています。しかしTypeScriptは、設計においてDartとは違う賢い選択をしたのです。それが、<a href="https://brendaneich.com/files/2011/09/CapitolJS.021.png" rel="nofollow" title="" class="ext-link">JavaScriptに賭ける</a>という選択です。</p><p>TypeScriptは常に最新のECMAScriptの仕様をサポートしており、標準から離れた言語を使うことに不安に感じるJavaScript開発者達を安心させてくれます。<br>
例えば<a href="http://blogs.msdn.com/b/typescript/archive/2015/01/16/announcing-typescript-1-4.aspx" rel="nofollow" title="" class="ext-link">直近のTypeScriptのリリース</a>では、“let”や“const”キーワードと同時に、ES6のテンプレートリテラルをサポートすることが宣言されています。また<a href="https://github.com/Microsoft/TypeScript/wiki/Roadmap" rel="nofollow" title="" class="ext-link">近々リリースされるバージョン1.5</a>では、<a href="https://github.com/Microsoft/TypeScript/issues/2242" rel="nofollow" title="" class="ext-link">ES6のモジュール</a>や、<a href="https://github.com/Microsoft/TypeScript/pull/1346" rel="nofollow" title="" class="ext-link">分割代入</a>、<a href="https://github.com/Microsoft/TypeScript/pull/1931" rel="nofollow" title="" class="ext-link">スプレッド演算子</a>、等の仕様がサポートされます。<br>
TypeScriptの最新バージョンは<a href="https://babeljs.io/" rel="nofollow" title="" class="ext-link">Babel</a>や<a href="https://github.com/google/traceur-compiler" rel="nofollow" title="" class="ext-link">Traceur</a>(下図参照)のようなES6の仕様を現時点で使用可能にするようなソリューションにはまだ遅れをとっていますが、近々リリースされるTypeScript 1.5ではその差を大きく埋めることが目論まれています。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/TjFiOY2.jpg" alt="TjFiOY2" width="750" height="375" class="alignleft size-full wp-image-41331" scale="0"><br>
現在のES6互換性(<a href="https://kangax.github.io/compat-table/es6" rel="nofollow" title="" class="ext-link">https://kangax.github.io/compat-table/es6</a>より)<br>
TraceurやBabelは新しいJavaScriptの仕様をできるだけ多くサポートすることを明確な目標としていますから、TypeScriptが追いつくのは難しいでしょう。しかしTypeScriptを差別化するのは単に新しいAPIの数だけではなく、上述したような軽量言語的な型システムに加えて新しいJavaScriptの仕様を提供してくれるという点にあるのです。<br>
このような型システムを採用する主な理由の1つは、この型システムがVanilla JSでは使えないあらゆる開発者向けツールの使用を可能する点にあります。実例を見てみましょう。</p><p>TypeScriptの最も不評だった点の1つは、ずっとicrosoftのVisual Studioでしか開発者向けツールが使用できないということでした。しかしこれも変わりつつあります。例えば最近WebStormが<a href="https://www.jetbrains.com/webstorm/help/typescript-support.html" rel="nofollow" title="" class="ext-link">TypeScriptをサポート対象に加えました</a>。また<a href="https://github.com/palantir/eclipse-typescript" rel="nofollow" title="" class="ext-link">Eclipseのプラグイン</a>も登場しています。<br>
Sublime Textのユーザとして、私はTypeScriptのプログラムマネージャであるJonathan Turnerが<a href="https://www.youtube.com/watch?v=Xw93oketp18" rel="nofollow" title="" class="ext-link">ng-confでMicrosoftのSublime Textプラグイン</a>を紹介したことに非常に興奮しています。このプラグインは<a href="https://github.com/Microsoft/TypeScript-Sublime-Plugin" rel="nofollow" title="" class="ext-link">GitHubから取得して試すことができます</a>。(<a href="https://twitter.com/robpenner/status/580397071733145600" rel="nofollow" title="" class="ext-link">このことを教えてくれた</a>@jasssonpetと@robpennerに感謝します)。これは非常によくできたプラグインで、この記事のスクリーンショットでは全てこれを使用しています。<br>
TypeScriptがどんな開発者向けツールを使用可能にするかを見るために、calculateArea関数に戻ってみましょう。</p><p>例えばこのメソッドにcalculateArea( “2”, 3 )のように文字列を渡したとしましょう。TypeScriptはメソッドが期待する型を理解していますから、開発者向けツールを通じてそれを教えてくれます。例えばSublime Textでは下図のようなエラーが表示されます。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/giCwLq3.jpg" alt="giCwLq3" width="800" height="229" class="alignleft size-full wp-image-41341" scale="0"><br>
同じように開発者向けツールはメソッドの戻り値の型を取り違えている場合にも知らせてくれます。例えばcalculateArea関数の戻り値を文字列として扱おうとした場合には以下のようなエラーが表示されます。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/BrznULB.jpg" alt="BrznULB" width="1106" height="319" class="alignleft size-full wp-image-41351" scale="0"><br>
この記事のスコープからは外れてしまいますが、TypeScriptは他にも多くの機能を持っています。それらを使えば開発者向けツールがよりスマートになります。例えばインスタンスを生成した時にTypeScriptは使用可能なプロパティやメソッドを教えてくれます。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/3okKB1k.jpg" alt="3okKB1k" width="855" height="314" class="alignleft size-full wp-image-41361" scale="0"><br>
クラス階層のような、より複雑なシナリオにも対応可能です。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/4snpfpZ.jpg" alt="4snpfpZ" width="921" height="419" class="alignleft size-full wp-image-41371" scale="0"><br>
私が気に入っているTypeScriptの機能はヘッダファイルです。詳細については<a href="http://www.typescriptlang.org/Handbook#writing-dts-files" rel="nofollow" title="" class="ext-link">TypeScriptのドキュメント</a>の説明に任せますが、私に言わせればヘッダファイルは外部ライブラリのコード補完を可能にする手段です。<a href="https://github.com/borisyankov/DefinitelyTyped" rel="nofollow" title="" class="ext-link">DifinitelyTypedのGitHubリポジトリ</a>ではダウンロードして使用可能な数百の既存ライブラリのヘッダファイルが提供されています。これらのヘッダファイルはますます知名度を増してきており、Facebook Flowのような静的型チェッカでさえも<a href="http://flowtype.org/docs/coming-soon.html#_" rel="nofollow" title="" class="ext-link">使用を検討しています</a>。<br>
例を示すと、下図のコードはjQueryのヘッダファイルを使用することでjQuery APIのコード補完を実現しています。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/olABd9S.jpg" alt="olABd9S" width="800" height="313" class="alignleft size-full wp-image-41381" scale="0"><br>
このようなコード補完は馴染みのないライブラリを使用する時に特に役立ちます。例えばNativeScriptでは、<a href="http://developer.telerik.com/featured/nativescript-works/" rel="nofollow" title="" class="ext-link">JavaScriptを使用した全てのiOSとAndroidのAPIへのアクセスを提供しています</a>。これは非常にスマートなのですが、残念なことに私はAndroidの開発者でもなければiOSの開発者でもないので、どんなAPIがあるのか分かりません。しかしNativeScriptはTypeScriptのヘッダファイルを提供しているので(<a href="https://github.com/nativescript/cross-platform-modules" rel="nofollow" title="" class="ext-link">このリポジトリにある</a>android17.d.tsとios.d.tsを見てください)、簡単に扱うことができます。下のgifではiOSとAndroidのAPIをSublime Textで探しています。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/dmKU74M.gif" alt="dmKU74M" width="800" height="312" class="alignleft size-full wp-image-41391" scale="0"><br>
まだまだ紹介できる機能はたくさんありますが、これまでお見せしてきたものがTypeScriptを他のJavaScript互換言語と差別化する主な機能だと考えています。こういった機能を持っているのはTypeScriptに限りません。例えばDartもオプショナル型システムを備えていますし、他の多くの言語も開発者向けツールを念頭に置いて記述されています。TypeScriptはこれらの機能を複合的に備えているという点で考慮に値する言語なのです。</p><p>Angularの声明はTypeScriptの誇大広告と言えなくもありませんが、私にとって一番興味深いのはこのような誇大広告が「実際に使えるものになるのか」ということです。いくつかのJavaScript互換のフレームワークはファンを獲得しましたが、一つとして主流になることはできませんでした。例えばよく引用される<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" rel="nofollow" title="" class="ext-link">TIOBEプログラミング言語ランキング</a>ではJavaScript互換言語はトップ50に1つも入っていません。CoffeScriptとDartは50位から100位の間に入っていますが、TypeScriptはランク外です。<br>
JavaScript互換言語が非主流であるさらなる証拠を示すなら、前に示したGoogleのトレンドグラフに<a href="https://www.google.com/trends/explore#q=TypeScript%2C%20CoffeeScript%2C%20%2Fm%2F0h52xr1%2C%20%2Fm%2F054k6n_&amp;date=1%2F2011%2053m&amp;cmpt=q&amp;tz=" rel="nofollow" title="" class="ext-link">既に主流となっている言語であるSASSを加えてみましょう</a>。</p><p><img src="http://developer.telerik.com/wp-content/uploads/2015/03/wnPCH9V.jpg" alt="wnPCH9V" width="800" height="328" class="alignleft size-full wp-image-41401" scale="0"><br>
SASSがどんどん有名になっていくのは非常に興味深い出来事です。5年前に私はJavaScript互換のフレームワークは浸透しないと主張しました。なぜならフロントエンドの開発者は自分のアプリにビルドの手間をかけるのを望まないと考えたからです。しかし今日ではGruntやGulpのようなタスク実行ツールが広まり、ビルドの実行が当たり前になりました。SASSが浸透したことは、フロントエンドの開発者がもはや開発のワークフローにビルドという手順を組み込むことを気にしなくなったのです。そうであるならば、Web開発者がCSSのプリプロセッサは使うけれどもJavaScriptのプリプロセッサは使わないなどと言うことはできないでしょう。</p><p>CSSはJavaScriptよりも短所が多いのだから、プリプロセッサの使用も多くなるのだと主張することはできるかもしれません。しかし私の経験上、それは間違いです。経験上、CSS嫌いと同じくらい多くのJavaScript嫌いが存在しますし、少なくとも両者に大きな違いはありません。</p><p>私の理論を述べましょう。CSSとは違い、JavaScriptはアプリのためのロジックを持つので、プログラマはそのロジックがどのように記述されるかについてより確固たる意見を持っています。開発者は、すでによく知っている慣習に従ってWebコードを書きたいと思うものです。CoffeeScriptはいくつかのRuby的な考え方を借用しているため、Rubyコミュニティでとても人気があります。TypeScriptは、C#を書いたのと同じ人物によって開発され、C#コミュニティで多くの支持を得ています。このように意見や文法が分かれてしまうために、これらのプリプロセッサは複数のコミュニティをつなぐことができず、うまくいかないのです。</p><p>正直に言いましょう。私は、昔からJavaScript互換のフレームワークが不要だと思っているWeb開発者の1人です。神が意図されるように、私はJavaScriptは純度の高いものであってほしいのです。例えばBabelのように、型とか開発者向けツールのようなものを持ち出すものより、できるだけJavaScriptに忠実なままのプリプロセッサに、はるかに興味があります。</p><p>しかし、TypeScriptは、私がすぐに却下しなかった初めてのプリプロセッサです。JavaScript上に構築されるというミニマルなアプローチは驚くほど魅力的ですし、ECMAScriptの仕様を堅守しようとする姿勢にも信頼が置けます。ですが長きに渡ってavaScriptを用いてきた開発者として、思い切ることにためらっています。Douglas Crockfordは、 <a href="https://plus.google.com/+DouglasCrockfordEsq/posts/MgzNUSTwjRt" rel="nofollow" title="" class="ext-link">TypeScriptについてのコメントの中で</a>、私が感じていることを見事に要約してくれています。</p><p>私自身はTypeScriptを積極的には受け入れられませんが、我々JavaScriptコミュニティの人間ばかりがJavaScript互換言語の対象ではないでしょうし、実際TypeScriptは幅広い開発者にとって魅力的なものだと思います。</p><p>興味深いことに、CrockfordはCoffeeScriptについて、うまいことを言っていました。JavaScriptのコミュニティは市民権を得ているのに、CoffeeScriptはまだ主流とは言えません。それでは何がTypeScriptを別格にするのでしょうか？　それはおそらくMicrosoftとAngularです。</p><p>CoffeeScriptはRubyコミュニティではうまくいきましたが、それ以外のコミュニティへ脱することはなかなかできませんでした。TypeScriptは現在MicrosoftとAngularのサポートを得ています。この2大勢力がTypeScriptに巨大な開発者のコミュニティをもたらしています。TypeScriptが、どうにかして両方のコミュニティで定着できたならば、おそらくJavaScript互換のフレームワーク初の主流になることができるでしょう。</p><p>さらに、増加傾向のES6に対する人気を考慮すべきでしょう。ES6が力を得るにつれ、ますます多くのプログラマがJavaScriptの新機能を使うことができるツールを探すことになるでしょう。TypeScriptによってES6を今使用することができるようになりますし、その型システムは他のJavaScript互換のライブラリとは違う開発者向けツールを提供してくれるのです。それは大規模な普及につながるでしょうか？　それは時間が教えてくれるでしょう。</p><p>TypeScriptを勉強し、本記事を書くにあたり、良質な記事と参考資料を見つけました。以下がその資料です。</p><p>*<a href="http://www.typescriptlang.org/Handbook" rel="nofollow" title="" class="ext-link">TypeScriptハンドブック</a><br>
*<a href="http://www.pluralsight.com/courses/typescript" rel="nofollow" title="" class="ext-link">PluralsightにおけるTypeScriptの基本</a><br>
*<a href="https://www.youtube.com/watch?v=Xw93oketp18" rel="nofollow" title="" class="ext-link">ng-confカンファレンスからAngular におけるTypeScriptについてJonathan Turnerの講話</a><br>
*<a href="http://weblogs.asp.net/dwahlin/creating-a-typescript-workflow-with-gulp" rel="nofollow" title="" class="ext-link">ひと息で分かるTypeScriptのワークフローの作り方</a></p><p>ヘッダー画像は<a href="https://www.flickr.com/photos/barmans/3221453397/" rel="nofollow" title="" class="ext-link">NBphotostream</a>のご好意より</p>
