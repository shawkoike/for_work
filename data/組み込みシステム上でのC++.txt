<p><a href="http://bitbashing.io/embedded-cpp.html" rel="nofollow" title="" class="ext-link">C++ On Embedded Systems</a> （2017-02-20） by <a href="http://bitbashing.io/about.html" rel="nofollow" title="" class="ext-link">Matt Kline</a></p><p>去年の10月、私が所属している<a href="http://www.flukenetworks.com/" rel="nofollow" title="" class="ext-link">会社</a>の部署で、組み込みファームウェアの開発をC言語からC++に切り替えました。C++のクラス、リソースの自動クリーンアップ、パラメータ多相、そして強化された型安全性などは、汎用OSをデスクトップ機で稼働している時と同様、リアルタイムOS（RTOS）やベアメタル上でも便利です。C++を使えば、安全で表現豊かなファームウェアを書くことができます。</p><p>しかしC++のこの自動的な魔法は諸刃の剣とも言えます。いくつかの機能は、組み込み環境<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>には搭載したくないシステムのファシリティに依存するからです。ツールチェーン周りをどうするかも厄介です。<code>memcpy</code>やアトミック操作、ハードウェア固有の浮動小数点関数などの重要なファシリティが提供されるので、<code>libgcc</code>と<code>libstdc++</code>を完全に破棄するのではなく、特定の部分を避けて使わなくてはなりません。</p><p>このガイドは、C++にファームウェアを移植するにあたって私たちが学んだことを文書化してみたものです。信頼できる入門書となれば幸いです。</p><p>ラッキーなことに、私たちが組み込み開発<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>に使うARMシステムを含むあらゆるターゲットに対して、GCCがクロスコンパイラとしてうまく機能します。いくつかのバージョンがLinuxディストリビューションのパッケージマネージャからインストールできますが、チーム内で独自のクロスコンパイラを開発し、使用することを大いにお勧めします。下記のような利点があるからです。</p><p>クロスコンパイラのツールチェーン全体を構築するのは大変な作業ですが、<a href="http://crosstool-ng.org/" rel="nofollow" title="" class="ext-link">crosstool-NG</a>を使ってうまくいきました。インターフェースはLinuxの<code>smake nconfig</code>に似ていて、ツールチェーンが構成しやすく、依存関係を管理したりダウンロードしたりして、ビルドしてくれます。最近のバージョン、例えば最新のリリースでは、任意のGCCソースも提供しています。成果物のバイナリは静的にリンクすることができるので、ツールチェーンをターボール化してアクセス可能な場所に配置するだけで簡単にデプロイできます。このツールチェーンを使っているプロジェクトは短いスクリプトを使って引き出したり、抽出したり、実行したりできます。</p><p>私たちの組み込みのプロジェクトには、製造側が提供したドライバやRTOSなど、C言語に依存した要素が多々あります。<code>gcc</code>を使ってビルドし、<code>extern "C" { }</code>でC++に<code>#include</code>したそれらのヘッダをラップします。同様に、非C++環境から呼び出したいC++の関数、例えばRTOSの関数やスタートアップのアセンブリ、などは<code>extern "C"</code>でタグ付けしなくてはなりません。そうすればシンボル名が<a href="https://ja.wikipedia.org/wiki/%E5%90%8D%E5%89%8D%E4%BF%AE%E9%A3%BE" rel="nofollow" title="" class="ext-link">名前修飾</a>されません。通常はされてしまいますが。</p><p>例外処理と実行時型情報（RTTI）は動的なメモリ割り当て（後ほど説明します）なしでは難しいので、<code>-fno-exceptions</code>、<code>-fno-non-call-exceptions</code>と、<code>-fno-rtti</code>を使って無効にするといいでしょう。リブートするにせよ、ファームウェアは決して、ユーザ空間のプログラムと同じように終了するわけではありません。TearDownのコード（グローバルなデストラクタも含む）は<code>-fno-use-cxa-atexit</code>を使って省略できます。他に、組み込み開発に便利なフラグは以下の通りです。</p><p>上記はC++に限った話ではありませんが、ここで述べておく価値のあるものです。</p><p>上述のように、いくつかの便利なC++の機能は下層システムのサポートが必要になります。ベアメタルやRTOS環境では、自分たちで用意しなくてはなりません。</p><p><strong>注意：</strong> これらの多くは、もちろん、実装に依存します。下記に記述することは全て、ARM Cortex-M4の基盤とGCC 6を使った私たちの経験に基づくものです。詳細は違ったとしても、これが有用な出発点となれば幸いです。</p><p>コンストラクタを備えているかもしれないので、グローバルオブジェクトは組み込みシステムのハードウェアリソースに対してインターフェースを定義するのにとても便利です。C++のランタイムは通常、<code>main()</code>に入る前に全てのグローバル（またはファイルローカル）オブジェクトの構築を保証しますが、組み込み環境では、手動でコンストラクタを呼び出さなくてはなりません。</p><p>GCCは<code>.init_array</code>というシンボル名で、オブジェクトを関数ポインタの配列へとグループ分けします。リンカスクリプトにエントリを追加すると以下のようになります。</p><p>このステップをいつ実行するかというのも問題です。ハードウェア初期化の後なのか？　RTOSのセットアップの後でかつ、タスクが実行される前？　最初のRTOSのタスクで実行するのか？</p><p>タイミングによっては、上述のコンストラクタがOSコールやハードウェアの状態（もちろんRAM以外です）を変更しないことを確認した方がいいかもしれません。</p><p>継承やランタイムの多相性を賢く使えば、組み込みシステムではとても便利です。</p><p>しかし、仮想デストラクタを規定クラスに与える時は常に、そのクラス<sup id="fnref:4"><a href="#fn:4" class="footnote-ref">4</a></sup>のオブジェクトを決してヒープ割り当てしないとしても、標準的な方法として<code>operator delete</code>が必要となります。<code>libgcc</code>版ではUNIXなどのユーザ空間を想定するので、独自のものを定義しなくてはなりません。動的メモリ割り当てを避けようとするなら<code>delete</code>を呼び出してしまうのは、パニックになってしまうような重大なバグです。</p><p>仮想デストラクタのオブジェクトがスタックに割り当てられている場合、<code>operator delete</code>のないバージョンのデストラクタが使われます。</p><p><code>static</code>変数を持つ関数について考えてみましょう。</p><p><code>.data</code>や<code>.bss</code>に配置することでオブジェクトが明白に初期化されるなら、問題はありません。問題が起こるのは、<code>someObject</code>を初期化するため、ランタイム中にコンストラクタが呼び出されなくてはならない場合です。C++11はローカルの静的オブジェクトの構築が競合しないことを保証します。つまり、もし複数のスレッドが一度に<code>foo()</code>を呼び出した場合、コンパイラは、そのオブジェクトの初期値が1つのスレッドによって決定されることが保証されるように、何らかの排他制御<sup id="fnref:5"><a href="#fn:5" class="footnote-ref">5</a></sup>を提供しなくてはなりません。</p><p>OSが起動して有効な排他制御を提供する<em>前に</em>関数を呼び出す可能性もあります。また、組み込みシステムでは、可能な限り後続のコードが決定されるように起動時に全ての初期化をしたいので、静的オブジェクトをファイルレベルに配置することをお勧めします。他には、静的オブジェクトを備えた関数が同時に呼び出されないと確信がある場合は、<code>-fno-threadsafe-statics</code>を付けてコンパイルする方法もあります。</p><p>最新の例外処理メカニズムは複雑で<sup id="fnref:6"><a href="#fn:6" class="footnote-ref">6</a></sup>、<code>glibc</code>を含むほとんどの実装で、動的メモリ割り当てや他の私たちが持っていないファシリティを必要とします。</p><p><code>libunwind</code>のようなサードパーティのソリューションも、UNIXなどのユーザ空間の上に配置されることを想定しています。これらの複雑さから、私たちは組み込みプロジェクトに例外処理を使う試みはしませんでした。</p><p>もしそういった障害を乗り越えるつもりがあるなら、<a href="https://www.youtube.com/watch?v=uQSQy-7lveQ" rel="nofollow" title="" class="ext-link">CppCon 2016でのRian Quinnの発表した</a>研究が、いい出発点のように思います。LinuxカーネルでC++コードを実行するため、彼は独自のスタックアンワインドのライブラリをビルドしました。<a href="https://github.com/Bareflank/hypervisor/tree/master/bfunwind" rel="nofollow" title="" class="ext-link">https://github.com/Bareflank/hypervisor/tree/master/bfunwind</a>にあります。</p><p>スタックに記憶域を割り当てる下記の関数を考えてみましょう。</p><p>もし、配列の最後まで行ってしまったら、現在のスタックフレームに続くメモリを破損し、「未定義の動作」の領域に入って、プログラムの状態が全く分からなくなる可能性があります。笑っている場合ではありません。幸い、関数ごとに各1回読み書きするだけで、コンパイラがちょっとしたセイフティネットを作ってくれます。これをフラグの1つに追加すると、GCCが上記の関数を以下のように変換します。</p><p>いろいろなフラグによって、コンパイラがこれらのチェックを追加する頻度をコントロールできます。manページに導く方法は、以下のとおりです。</p><p>これらのガードを使うには、上記の例の中のシンボルを両方提示しなければなりません。1つはカナリアで、もう1つはスタック破損を検出した際に呼び出される関数です。パニックかリブートが、恐らくここでは唯一の健全な対応方法でしょう。</p><p>コンパイラが残りの作業をしてくれます。不運が重なって、カナリアを修正せずに現在のスタックフレームを超えて読み書きしようとする場合、このシステムでは破損に気付かないことに注意が必要です。うまくいかない時もあるのです。</p><p>組み込みシステムにおいては、しばしばコードを最小にしなければというプレッシャーがかかります。インライン化は、目的とは真逆のことに思えるかもしれません。しかし、必ずしもそうではありません。ヘッダに<code>inline</code>関数として小さなコードを置くと、最近のC++コンパイラは信じられないほど小さく効率的なアウトプットを生成してくれます。極端な例としては、CppCon 2016でのJason Turnerの<a href="https://www.youtube.com/watch?v=zBkNBP00wJE" rel="nofollow" title="" class="ext-link">Rich Code for Tiny Computers</a>と題した発表を聞いてください。</p><p>ファームウェアに<code>-Os</code>（つまり、サイズの最適化）を付けて構築するなら、以下のものの追加を検討してください。</p><p>現在のプロジェクトは、<code>-02</code>を使って構築されていますので、”サポートされている最適化で、空間と速度のトレードオフを伴わないもののほとんど全て”を適用します。いつものように、テスト、テスト、さらにテストを行ってください。ARMとその他のRISCのアーキテクチャは、特に可読性の高い分解をします。いろいろなオプションでテストして、コンパイラがどのようなものを生成するかを調べてください。簡単な実験としては、<a href="https://godbolt.org/" rel="nofollow" title="" class="ext-link">Godbolt compiler explorer</a>を試すと良いでしょう。コードのどの行が生成したのかが分かるよう、色分けしてくれます。</p><p>成功を祈ります。</p><p><a href="http://tex.stackexchange.com/questions/42734/does-tex-latex-give-a-headstart-with-other-programming-languages/42749#42749" rel="nofollow" title="" class="ext-link">くそ真面目な</a><a href="https://ja.wikipedia.org/wiki/TeX" rel="nofollow" title="" class="ext-link">1980年代初頭からのPascalプログラム</a>の方が最近のWebレンダラよりもいまだに良いテキストを流すという理由で、これを素晴らしい組版のPDFで欲しければ、<a href="https://www.dropbox.com/s/lmpqoehrcw3ktqb/embedded-cpp.pdf?dl=0" rel="nofollow" title="" class="ext-link">ここ</a>か、そのソースである<a href="https://www.dropbox.com/s/3lh9vmbkietejh9/embedded-cpp.tex?dl=0" rel="nofollow" title="" class="ext-link">ここ</a>からコピーを入手できます。</p>
