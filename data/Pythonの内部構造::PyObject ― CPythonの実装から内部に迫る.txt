<p><a href="http://www.codingfail.com/python-internals-pyobject/" rel="nofollow" title="" class="ext-link">Python Internals :: PyObject (Introduction to Python Internals via CPython implementation)</a> （2015-07-07） by <a href="http://www.gahcep.com/about/" rel="nofollow" title="" class="ext-link">Sergei Danielian</a></p><p>こんにちは、皆さん。</p><p>Python言語の実装に深く踏み込む前に、Pythonの主要な概念を知っておく必要があります。それは非常にシンプルで、<strong>全てがオブジェクトだ</strong>ということです。このことは、Pythonの内部構造を学習する際の最初のステップであり、この旅の入り口でもあります。</p><p>今回の主なテーマは、Pythonのオブジェクトが実装レベルでどのように扱われているかを理解することです。私たちは、<strong>Python 2.7.8</strong>のCPythonの実装について話をしていきます。</p><p>Pythonのソースをダウンロードし、解凍することを想定しているので、ソースコードへの参照は全て、ルートフォルダからの相対的な参照になります。</p><p>Pythonでは全てがオブジェクトです。Pythonで使われている以下のものは文字通り、全て<code>C</code>の<code>PyObject</code>です。</p><p>具体的に、単純なCの構造体を扱うとします。内部的には、Pythonオブジェクトは、任意のPythonオブジェクトを持つ不透明なデータ型<code>PyObject</code>と<code>PyVarObject</code>によって表現されます。後者は、あらゆる可変長のコンテナオブジェクト（これらは<em>可変</em>です）に対して使われ、前者はそれ以外の全てのオブジェクト（<em>不変</em>）に対して使われます。</p><p>全てのビルトイン型およびユーザ定義型は、オブジェクトにラップされている限り、補助情報を自由に追加できます。Pythonも例外ではなく、全てのPythonオブジェクトは、<mark>型オブジェクトへのポインタ</mark>と<mark>参照カウンタ</mark>を持っています。非常に便利ですが、代償を伴います。パフォーマンスが犠牲になるのです。しかし、Pythonがスピードアップを図るために使用する幾つかの技術とアルゴリズム（文字列のインターン、適応数値乗算など）によって、オーバーヘッドを減らすことが可能です。</p><p>以下は、<a href="https://docs.python.org/2/c-api/structures.html#c.PyObject" rel="nofollow" title="" class="ext-link">Python 2.7.10の公式ドキュメント</a>（訳注：現在のバージョンは2.7.12）からの引用です。</p><p><strong>PyObject</strong></p><p><strong>PyVarObject</strong></p><p>上記のマクロや知らない変数名は気にしないでください。おいおい分かってきますから……。</p><p><code>PyObject</code>構造体と<code>PyVarObject</code>構造体はどのようになっているのでしょうか？　以下は、ソースコードからの抜粋です。</p><p><strong><code>..\include\object.h</code></strong></p><p>これで全部ではありません。さらにトレースしてみましょう（分かりやすくするために、細かいところは若干省略しています）。</p><p><strong><code>..\include\object.h</code></strong></p><p>マクロの一部はフィールドを定義するためのもので、その他のマクロは初期化のためのものです。</p><p><code>_PyObject_HEAD_EXTRA</code>マクロと<code>_PyObject_EXTRA_INIT</code>マクロの定義が空であることに気づきましたか？　これは、どのバージョンのPythonでもデフォルトの動作です。唯一空にならないのは、Pythonの”デバッグ”ビルドをコンパイルする時です。しかし、その話は、別の機会に譲るとします。これらのフィールドは常に空で、学習用にこうなっていると思ってください。</p><p>全てのマクロが展開されると<code>PyObject</code>は以下のようになります。</p><p><code>Py_ssize_t</code>型のことは気にせず、ただの<code>int</code>だと思ってください。他のフィールドは見ての通りで、参照カウンタ(<code>ob_refcnt</code>)と、<code>PyTypeObject</code>(<code>ob_type</code>)へのポインタです。この件については、少し後でお話しします。</p><p>次は、<code>PyVarObject</code>を下に示します。</p><p><code>PyObject</code>とほとんど同じように見えますが、フィールドが１つ追加されています。これは<code>ob_size</code>で、<strong>可変長コンテナ</strong>に含まれるアイテムの数を示します。</p><p>では、どうして<code>PyObject</code>と<code>PyVarObject</code>（そして、後で見る全ての他のPythonオブジェクト）は幾つかの共通の特性、つまりフィールド<code>ob_refcnt</code>と<code>ob_type</code>とを共有するのでしょうか？</p><p>共有により、例えば通常の整数や文字列、クラスインスタンスあるいはスライスオブジェクトなど、どんな種類のオブジェクトを処理していたとしても、本質的な型の情報を抽出して、同じやり方でオブジェクトを処理することができます。</p><p>Pythonの型の実装（<code>PyIntObject</code>や<code>PyFloatObject</code>、<code>PyDictObject</code>）はそれぞれ、その最初のメンバ（あるいはその最初のメンバの最初のメンバなど）として<code>PyObject_HEAD</code>を持っています。このメンバのサブオブジェクトは、フルオブジェクトと同じアドレスに位置することが保証されます。</p><p><code>PyObject_HEAD</code>はそのメンバのサブオブジェクトで参照しますが、一旦<code>ob_type</code>が完全な型が何であるかという情報を得るために調べられると、完全な型にキャストされるでしょう。このやり方で、<code>C</code>言語にある程度のOOP（特に軽い継承）を導入しています。</p><p>実際のオブジェクト<code>PyIntObject</code>と<code>PyDictObject</code>がPythonでどのように動作するか見てみましょう。</p><p><strong><code>..\Include\intobject.h</code></strong></p><p><strong><code>..\Include\intobject.h</code></strong></p><p><code>PyObject_HEAD</code>がまたありますね。これは「<code>PyIntObject</code>は、<code>PyObject</code>に幾らかの付加データ（今回の例では<code>long</code>）を付け加えたものとみなすことができる」ということを意味します。<code>PyDictData</code>オブジェクトを確認してみましょう（このオブジェクトはPythonで辞書<code>｛｝</code>を表します）。</p><p><strong><code>..\Include\dictobject.h</code></strong></p><p>辞書の表現は少し複難ですが、<code>PyIntObject</code>を処理するのと同じように、<code>PyObject</code>として扱うことは依然として有効なことです。唯一の違いは、<code>PyDictObject</code>の方が、より多くの追加メンバを持っているという点です。最も重要なのは、これらの全てが<code>PyObject_HEAD</code>セクションの<strong>後ろに必ず</strong>置かれているということです。</p><p><code>PyObject_HEAD</code>セクションの中身と、Pythonで特定の<code>Py*Object</code>オブジェクトの扱い方の情報を全て考慮に入れると、以下のコード断片は自明のものとなるでしょう。それは、Pythonが、現在どの型で動作しているかをどのように決定するのかを示しています。</p><p>Pythonは、コードの可読性を高めようとして、多くのマクロを定義しています。例えば、明示的に<code>ob_type</code>メンバを使う代わりに、<code>PyInt_Check</code>あるいは<code>PyInt_CheckExact</code>といったマクロを使うことができます。以下に示す類似したマクロの定義が、Pythonのオブジェクトの実装の<code>C</code>ファイルの先頭部分に、見つかるでしょう。</p><p>こうして、先ほどのコードは、以下のように書き換えられます。</p><p>幾つかのPythonのオブジェクト実装は、共通のものと同じように、オブジェクト自体の型と特定の型をチェックするものを持っています。全ての共通なものは、<code>..\Include\object.h</code>ファイルに配置されます。例を以下に示します。</p><p><code>PyObject</code>関連で説明すべき最後のものは、<strong>型</strong>です。Pythonにおける型は、名前（”int”や”tuple”）や適切な格納場所であるだけでなく、リンクによって一般的な特性一式を定義して使用可能にする、多くの関連項目（関数、データメンバ）でもあります。</p><p><code>PyObject_HEAD</code>セクションを思い起こしてみましょう。</p><p><code>PyObject_HEAD</code>セクションにある<code>ob_type</code>ポインタは、オブジェクトの型のインスタンスを厳密に参照します。これを詳しく見てみましょう（最も興味深いセクションを選びました）。</p><p><strong><code>..\include\dictobject.h</code></strong></p><p>これは、構造体全体ではありませんが、最も興味深い部分です。ご想像の通り、<code>func</code>の付いた変わった修飾子は、単なるコールバックです。そして、各Pythonオブジェクトは、これをそれぞれの方法で初期化します。</p><p>例えば、<code>cmpfunc tp_compare;</code>の行は、明らかに、オブジェクトの比較に何らかの形で関係します。そして、<code>PyIntObject</code>の比較関数の実装は、<code>PyTupleObject</code>の場合とは異なります。</p><p>別の行の<code>hashfunc tp_hash;</code>は、型のハッシュ関数を定義します。例えば、<code>string</code>は、ハッシュ関数を持っていますが、<code>dictionary</code>は持っていません。なぜでしょうか？</p><p>もし、これらについての詳細が知りたければ、<strong>Python/C API Reference Manual</strong>内<strong>“Object Implementation Support”</strong>の<strong><a href="https://docs.python.org/2/c-api/typeobj.html#type-objects" rel="nofollow" title="" class="ext-link">“Type Objects”</a></strong>セクションを参照してください。</p><p>以下の関数が、<code>PyInt_Type</code>オブジェクト、<code>PyDict_Type</code>オブジェクト、<code>PyTuple_Type</code>オブジェクトでどのように実装されているかを比較します。</p><p>最初の3つの関数と戻り値を見ると、Pythonの<strong><a href="https://docs.python.org/2/c-api/abstract.html" rel="nofollow" title="" class="ext-link">抽象オブジェクトレイヤ</a></strong>を思い出すことでしょう。</p><p><strong>抽象オブジェクトレイヤ</strong>は、各Pythonオブジェクトが実装し、後で実装したプロトコルによって分類されるような、多くの<strong>プロトコルを</strong>定義します。プロトコルは、明確に定義された振る舞いをさせるためにどの関数が実装の型を決めるかという、ある種の規則です。例えば、特定の関数一式（長さ、サイズ、連結など）を実装している場合、型はシーケンスベースに分類されます。</p><p>幾つかのプロトコルがありますが、主に興味を引かれるものは、下記の通りです。</p><p>元の例に戻りましょう。</p><p><strong>PyInt_Type</strong></p><p><strong>PyDict_Type</strong></p><p><strong>PyTuple_Type</strong></p><p>ここまでで、CPythonの値と山の旅を楽しんでいただけましたでしょうか。ざっと見てきただけで深くは踏み込んでいませんが、この記事の情報が、今後Pythonについてより深く学ぶ助けとなればと思います。</p>
