<p><a href="https://juliansimioni.com/blog/https-on-nginx-from-zero-to-a-plus-part-1/" rel="nofollow" title="" class="ext-link">HTTPS on Nginx: From Zero to A+ (Part 1)</a> （2015-02-01） by <a href="https://juliansimioni.com/" rel="nofollow" title="" class="ext-link">Julian Simioni</a></p><p>数年前、Webは全体的に暗号化されていませんでした。HTTPSはWebページの最も重要な部分だけのために確保されていました。暗号化が必要なのは大切なユーザデータだけで、Webページの公開される部分は暗号化せずに送ってもいいということで意見が一致していました。</p><p>しかし、<a href="https://www.eff.org/deeplinks/2014/11/verizon-x-uidh" rel="nofollow" title="" class="ext-link">今は</a><a href="http://en.wikipedia.org/wiki/Global_surveillance_disclosures_%282013%E2%80%93present%29" rel="nofollow" title="" class="ext-link">状況</a>が<a href="http://arstechnica.com/security/2015/01/gogo-issues-fake-https-certificate-to-users-visiting-youtube/" rel="nofollow" title="" class="ext-link">違います</a>。現在では、どんなWebトラフィックでも暗号化されていないのは良くないということが分かっているので、Webサイトを運営する誰もがコンテンツに関係なく強固なHTTPSを設定しなければなりません。</p><p>お恥ずかしい話ですが、私自身のWebサイトは2年近くも全くHTTPSをサポートしていませんでした<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>。</p><p><a href="https://konklone.com/" rel="nofollow" title="" class="ext-link">Eric Mill</a>の<em><a href="https://konklone.com/post/switch-to-https-now-for-free" rel="nofollow" title="" class="ext-link">今すぐ無料でHTTPSに切り替えよう</a></em>という素晴らしい記事が最終的に私に喝を入れてくれました。私は休暇中、HTTPSをセットアップして<a href="https://www.ssllabs.com/ssltest/" rel="nofollow" title="" class="ext-link">Qualys SSL Report</a>で<a href="https://www.ssllabs.com/ssltest/analyze.html?d=juliansimioni.com" rel="nofollow" title="" class="ext-link">A+</a>を獲得できるように設定を微調整することに時間を費やしました。</p><p><img src="https://juliansimioni.com/images/nginx-https/website-aplus.png" alt="A+ score on juliansimioni.com"></p><p>かなりの研究が必要でしたが、ほぼ最適な設定が決まったので、Nginx上でそれを実現した方法を共有したいと思います。実際の構成に加えて、安全な設定における全てのコンポーネントの動作と、なぜその設定が最適なのかについて説明します。</p><p>この記事はパート1です。ここでは基礎を紹介し、証明書をセットアップしていきます。</p><p><a href="https://juliansimioni.com/blog/https-on-nginx-from-zero-to-a-plus-part-2-configuration-ciphersuites-and-performance/" rel="nofollow" title="" class="ext-link">パート2</a>では、Nginxの設定をもっと説明し、特にciphersuiteのセットアップについて見ていきます。</p><p>HTTPSを有効にするだけなら要求されるものはほとんどありませんが、サーバに暗号化鍵と証明書ファイルを設定する必要があります。OpenSSLがインストールされたマシンであれば、両方とも素早く簡単に作成できます。</p><p>このような自己署名証明書は真の安全を保証するものではありませんが<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>、本物の証明書を生成する前に一度セットアップしてみたら、大まかなプロセスを理解できるでしょう。そうすれば、早い段階でできるだけ多くの問題を解決できるので、やってみる価値はあります。</p><p>自己署名証明書の生成に関しては<a href="http://stackoverflow.com/questions/10175812/how-to-create-a-self-signed-certificate-with-openssl" rel="nofollow" title="" class="ext-link">既に</a><a href="https://www.openssl.org/docs/HOWTO/certificates.txt" rel="nofollow" title="" class="ext-link">あまりにも</a><a href="https://devcenter.heroku.com/articles/ssl-certificate-self" rel="nofollow" title="" class="ext-link">多くの</a><a href="https://www.linode.com/docs/security/ssl/ssl-certificates-with-nginx" rel="nofollow" title="" class="ext-link">チュートリアル</a>があるので、ここでは詳細を省きます。次のような簡単なコマンドで十分でしょう。</p><p>基本的なSSL<sup id="fnref:3"><a href="#fn:3" class="footnote-ref">3</a></sup>向けのNginxの設定部分も簡単です。以下の設定をnginxファイルに追加します。</p><p>（上記のコードスニペットは両方とも前述のリンク先<a href="https://www.linode.com/docs/security/ssl/ssl-certificates-with-nginx" rel="nofollow" title="" class="ext-link">Linode認証ガイド</a>からの応用です。最高のチュートリアルの1つです）</p><p>これで有効な証明書が用意できたので、Nginxを再起動すればサイトがHTTPS経由でロードされるようになります。ただ、証明書は自己署名なのでおそらく厄介な警告が出るでしょう。そこで、完全な証明書を使ってやってみる前に、重要な機能に関していくつか初期チェックを行います。</p><p><a href="https://www.openssl.org/" rel="nofollow" title="" class="ext-link">OpenSSL</a>ライブラリは、ほとんどどこにでもあるSSLとTLSライブラリのようなもので、Nginxを含むほぼ全てのWebサーバで使用されています。OpenSSLのバージョンが古い場合、セキュリティの脆弱性が<a href="https://en.wikipedia.org/wiki/OpenSSL#Notable_vulnerabilities" rel="nofollow" title="" class="ext-link">いくつも</a>あるかもしれません。</p><p>中でも最悪なのは、もちろん<a href="http://heartbleed.com/" rel="nofollow" title="" class="ext-link">Heartbleed</a>です。<strong>Webサーバの秘密鍵を含む</strong>あらゆる種類のデータが漏えいしてしまう恐れがあります。Heartbleedは2014年4月に初めて公表されましたが、多くのWebサイトは<a href="http://www.arnnet.com.au/article/564350/more-than-half-all-openssl-remain-vulnerable-heartbleed-cisco/" rel="nofollow" title="" class="ext-link">脆弱なまま</a>です。そんなWebサイトにしてはいけません。</p><p>OpenSSLのWebサイトで最新の安定したバージョンを確認して、自分のサイトでその最新バージョンが使われているか確認してください。</p><p>自己署名証明書はコストやダウンタイムを発生させずに簡単に再生成できるので、この段階で証明書の設定の問題を解決しておく方がいいと思います。無料のStartSSLの証明書ですら取り消すのに<a href="https://www.startssl.com/?app=37" rel="nofollow" title="" class="ext-link">3,000円近くかかる</a>ため、間違えると後でもっとコストと時間がかかります。</p><p>証明書を設定する際に最も重要なのが、どのハッシュアルゴリズムを使ってフィンガープリントを生成するかということです。つい最近まで、ほとんどの証明書は<a href="http://ja.wikipedia.org/wiki/SHA-1" rel="nofollow" title="" class="ext-link">SHA1</a>を使って署名されていました。しかし<a href="http://blog.chromium.org/2014/09/gradually-sunsetting-sha-1.html" rel="nofollow" title="" class="ext-link">Google</a>や<a href="https://technet.microsoft.com/library/security/2880823" rel="nofollow" title="" class="ext-link">Microsoft</a>といった企業や多くの[セキュリティ研究者] (https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)が今や、SHA1の利用を速やかにやめるよう強く推奨しています。コンピュータの処理能力が進化するにつれて、SHA1は危険なレベルにまで安全性が下がってきています。今後新たに発行される証明書は、SHA1ではなく<a href="http://ja.wikipedia.org/wiki/SHA-2" rel="nofollow" title="" class="ext-link">SHA256</a>で署名されなければなりません。</p><p>現時点においては、SHA1に対する実際の攻撃が行われたという事例は報告されていません。しかしChromeや<a href="https://blog.mozilla.org/security/2014/09/23/phasing-out-certificates-with-sha-1-based-signature-algorithms/" rel="nofollow" title="" class="ext-link">Firefox</a>でも早々に、SHA1で署名された証明書については警告またはエラーが出されるようになります。要するに、今後はSHA256以外のハッシュ関数で新しい証明書を生成してはいけないのです。</p><p>RSA暗号の鍵のサイズについても同様です。現在、RSAでは2048ビット鍵が<a href="https://www.rapidssl.com/2048-bit-certificate-compliance/" rel="nofollow" title="" class="ext-link">最適</a><sup id="fnref:4"><a href="#fn:4" class="footnote-ref">4</a></sup>となっています。現在の環境は、十分にパワフルなコンピュータネットワークがあれば、1024ビットでの証明書でも<a href="https://www.schneier.com/blog/archives/2010/01/768-bit_number.html" rel="nofollow" title="" class="ext-link">解読できる</a>レベルに達しています。そしてSHA1に対する対応と同じように、ブラウザ側はこれ以上1024ビット鍵が使われることを防ごうとしています。例えばMozillaは、2014年9月にリリースされたFirefox32では、信頼される証明書リストから1024ビットの認証局鍵を<a href="https://blog.mozilla.org/security/2014/09/08/phasing-out-certificates-with-1024-bit-rsa-keys/" rel="nofollow" title="" class="ext-link">除きました</a>。</p><p>先ほど紹介したコマンドを使って自己署名証明書を生成すれば、SHA256と2048ビットRSA鍵に対応しているはずです。次のコマンドを使えば確認できます。</p><p><em>（ServerFaultで見つけた<a href="https://serverfault.com/questions/325467/i-have-a-keypair-how-do-i-determine-the-key-length" rel="nofollow" title="" class="ext-link">こちら</a>の回答を応用しました）</em></p><p>万が一、<code>sha1WithRSAEncryption</code>や<code>(1024 bit)</code>という結果が出てきた場合は最初に戻ってもう一度正しい設定を確認し、再度証明書を生成してください。</p><p>この段階では、たとえ初期リクエストがHTTPS経由になっていても、JavaScriptやCSS、画像といったWebサイト上のリソースはまだHTTP経由でロードされている可能性が非常に高くなっています。</p><p><img src="https://juliansimioni.com/images/nginx-https/mixed-content.png" alt="Mixed content warning in Firefox"></p><p><em>コンテンツの混在を示す警告の例（Firefox版）</em></p><p>これまでは、ログインページやフォームの送信といったWebサイトの重要な部分だけにHTTPSを使うだけで十分とみなされていましたが、今や状況は変わりました。現在のブラウザは、より危険性を増した様々なコンテンツの混在（つまり、JavaScriptとCSSファイルのこと）を<a href="https://developer.mozilla.org/en-US/docs/Security/MixedContent/How_to_fix_website_with_mixed_content" rel="nofollow" title="" class="ext-link">ブロックする</a>ようになりました。</p><p>これはユーザにとって、大変優れたセキュリティ面での利点となります。なぜならこうしたコンテンツが混在したファイルは、通信されている間に修正を加えられ、結果 <a href="https://developer.mozilla.org/en-US/docs/Security/MixedContent#Mixed_active_content" rel="nofollow" title="" class="ext-link">深刻な被害</a>をもたらす可能性があるからです。大切なユーザ情報が盗まれたり、システムにマルウェアをしかけられたり、といったことが起こりうるのです。</p><p>コンテンツの混在に対する警告を修正する方法は各Webサイトのコードによって様々ですが、たいていの場合リンクの頭を<code>http://</code>から<code>https://</code>に変更するような単純なものです。他のサーバからリソースをロードするようなリンクについても同様です。万が一サーバがHTTPSをまだサポートしていない場合、そのサーバからのリソースは完全に取り除くか、可能であれば自分でホストする必要があります。</p><p>どうしてもHTTPとHTTPS双方をサポートする必要がある場合、<a href="http://www.paulirish.com/2010/the-protocol-relative-url/" rel="nofollow" title="" class="ext-link">protocol-relative URL</a>といった方法もありますが、お勧めできるものではありません。</p><p>基本的な課題がクリアできたところで、ブラウザが信頼していると実際に認識できる証明書を生成してみましょう。この作業はいくつかの理由によってはちょっとした長さのプロセスになります。まずは事前に必要とされる事項を確認しましょう。</p><p>上記の1はおそらく、普通のWebページ用にアカウントを取得するよりは少し面倒な手続きとなるでしょうが、なんとかなるはずです。セキュリティ上の懸念を考慮しているので仕方がないことです。まだどの認証局を使うか決めていなければ、<a href="https://www.startssl.com/" rel="nofollow" title="" class="ext-link">StartSSL</a>が良いでしょう。機能も優れていますし無料です。有料サービスを選ぶならば<a href="http://www.verisign.com/" rel="nofollow" title="" class="ext-link">Verisign</a>か<a href="https://www.comodo.com/" rel="nofollow" title="" class="ext-link">Comodo</a>があります。<a href="http://breakupwithgodaddy.com/" rel="nofollow" title="" class="ext-link">GoDaddyはお勧めできません</a>。</p><p>上記の2は、それぞれのDNSセットアップの状況に応じてやり方が大きく異なるので、ここでは詳細には触れません。DNSが適切に設定されていないと、DNSエントリに変更を反映するのに数時間かかることもありますので、すぐ作業に取り掛かってください。</p><p>しかし私のように、 <a href="https://fastmail.com/" rel="nofollow" title="" class="ext-link">FastMail</a>で自分のドメインを使ってメールを管理している場合は、FastMailが既に全てのセットアップを行ってくれています。もしFastMailを使って<em>いない</em>のでしたら、実に素晴らしいサービスなのでぜひ使用することをお勧めします。</p><p>1と2のステップを完了したらCSRを作成できます。このファイルには、証明書を必要とするドメインやオプションなどの詳細が記述されています。認証局の中には、ブラウザで秘密鍵やCSRを生成する”手助け”をしてくれるものもあります。既に秘密鍵の生成は済んでいるので、認証局の手助けは断ります。セキュリティ違反となる恐れがあるため、必要ありません。</p><p>次のコマンドを使うと、優れたCSRが生成されます。</p><p>認証局のWebページにあるCSR用のフォームに生成した内容を貼り付けると、証明書が返送されます。返送された証明書は、<code>/etc/nginx/ssl/yourwebsite.com.crt</code>のような、自分のサーバ上の安全な場所に格納しておきましょう。</p><p>もしStartSSLを使うことになった場合は、この記事の上の方にリンクを貼ってあるErik Millの<a href="https://konklone.com/post/switch-to-https-now-for-free" rel="nofollow" title="" class="ext-link">チュートリアル</a>を参照してください。全ての手順を完璧に網羅してくれています。</p><p>自己署名証明書の時と同じように、最初に、認証局からした新しい鍵とCRTファイルをNginxに設定するだけで機能するはずです<sup id="fnref:5"><a href="#fn:5" class="footnote-ref">5</a></sup>。おめでとうございます！　これであなたのWebサーバは有効な証明書を取得し、TLSを使えるようになりました。</p><p>もし今すぐWebサイトでSSL Labsのテストを実施したら、以下のような結果が表示されるでしょう。</p><p><img src="https://juliansimioni.com/images/nginx-https/grade-c-immediately-after-certificate-registration.png" alt="freshly-minted-certificate-test"></p><p>悪くはありませんが、Nginxのデフォルトの設定ではCの評価までしか獲得できません。これは、ぎりぎり合格といったレベルです。次回、A+の評価を得るためにはNginxにどのような設定が必要なのか見ていきましょう。お楽しみに！</p>
