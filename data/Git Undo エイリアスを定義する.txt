<p><a href="http://megakemp.com/2016/08/25/git-undo/" rel="nofollow" title="" class="ext-link">Git Undo</a> （2016-08-25） by <a href="http://megakemp.com/about/" rel="nofollow" title="" class="ext-link">Enrico Campidoglio</a></p><p>このような経験はありませんか？「ローカルのコミットをし過ぎてしまったことに急に気づいて<a href="http://megakemp.com/2014/08/14/the-importance-of-a-good-looking-history/" rel="nofollow" title="" class="ext-link">ローカルコミットを書き直している最中</a>、rebaseしすぎてしまい、自分が思い描くような履歴になっていなかった」。どうですか？　私はあります。そのような時、「ただ<code>CTRL</code> + <code>Z</code>で開始時に戻れればいいのに……」と思います。もちろん、決してそんなに単純ではありません。<a href="https://vimeo.com/171317261" rel="nofollow" title="" class="ext-link">GUI</a>でさえもです。</p><p>そんな絶望的な瞬間を経験することがあったので、<code>git undo</code>コマンドを独自に作成する決心をしました。以下に私のアイデアと、そこに行き着くまでの過程を紹介したいと思います。</p><p>Gitのundo操作を行うために私が最初に目を付けたのは、reflogです。「<em>reflogとは何だろう？</em>」と思うかもしれませんね。Gitでは、<em><a href="https://git-scm.com/book/en/v2/Git-Internals-Git-References" rel="nofollow" title="" class="ext-link">ブランチの参照</a></em>が移動する度に<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>、いわばローカルジャーナルと言われる場所に、移動する前の値が記録されます。このジャーナルのことを<em>リファレンスログ</em>、または<a href="https://git-scm.com/docs/git-reflog" rel="nofollow" title="" class="ext-link">reflog</a>と呼びます。</p><p>リポジトリには、<em>各ブランチ</em>に対するreflogが1つずつと、それらとは別に<code>HEAD</code>参照に対するreflogが1つあります。</p><p>ブランチのreflog内のエントリのリストを入手する方法は、<code>git reflog (ブランチ名)</code>と入力するだけの簡単なものです。</p><p>これにより、<code>master</code>ブランチのreflog内のエントリが出力されます。</p><p><img src="http://megakemp.com/assets/git-undo/git-reflog-master.png" alt="Output of git-reflog for the master branch" title="Output of git-reflog for the master branch" class="screenshot"></p><p><code>HEAD</code>自体のreflogを参照したい場合は、引数を省けばいいだけです。</p><p>これで<code>HEAD</code>参照のみに対する同出力が得られます。</p><p><img src="http://megakemp.com/assets/git-undo/git-reflog-head.png" alt="Output of git-reflog for the HEAD reference" title="Output of git-reflog for the HEAD reference" class="screenshot"></p><p>ぱっと見ただけでは分かりませんが、reflog内のエントリは<em>新しいものが順に</em>上から記録されています。</p><p>逆にすぐに分かることは、各エントリにはそれぞれ<em>インデックス</em>が付いていることです。このインデックスを使うことで、特定のreflogのエントリに関連するコミットを直接参照することができるため、実はこれは<em>非常に</em>有用です。ここでは、reflogのエントリを参照するには以下の構文を用いる、ということだけ言っておきましょう。</p><p><code>@</code>マークの両側には以下を入力します。</p><p>例えば、<code>HEAD</code>が<em>2つ前</em>に参照していたコミットを確認したいとしましょう。その場合は、<code>git show</code>コマンドの後に<code>HEAD@{2}</code>と入力します。</p><p>また、<code>master</code>が<em>直前</em>に参照していたコミットを確認したい場合は、以下のようになります。</p><p>重要なことは、<a href="https://git-scm.com/docs/git-reflog" rel="nofollow" title="" class="ext-link">reflog</a>は、ブランチによって参照されたコミットの履歴を追跡するということです。これはWebブラウザがアクセスしたURLの履歴を追跡するのと同じことです。</p><p>つまり、<code>@{1}</code>によって参照されたコミットは、<em>常に</em>現在の値の1つ前に参照したコミットであるということです。</p><p>refloを<code>git reset</code>コマンドと合わせて使う場合の構文は、以下のようになります。</p><p>これによって、<em>インデックス</em>と<em>作業ディレクトリ</em>である<code>HEAD</code>を、ブランチによって参照された直前のコミットに移動することができます。これは、Webブラウザで<em><a href="http://stackoverflow.com/questions/1313788/how-does-the-back-button-in-a-web-browser-work" rel="nofollow" title="" class="ext-link">「戻る」ボタンをクリック</a></em>するのと同じことなのです！</p><p>この時点で、独自の<code>git undo</code>コマンドを実装するのに必要な全てが揃いました。実装する際の<a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases" rel="nofollow" title="" class="ext-link">エイリアス</a>は以下の通りです。</p><p>これではあまりにも長ったらしくて分からりづらいので、1つずつ区切って見ていきましょう。</p><p>このようなオプションのパラメータを使うことの利点は、任意の回数の操作を取り消すことができるということです。何も指定しない場合は、直前の操作を取り消すことができます。</p><p>以下のような履歴があったとします。<sup id="fnref:3"><a href="#fn:3" class="footnote-ref">3</a></sup></p><p><img src="http://megakemp.com/assets/git-undo/git-lg-before.png" alt="History before the rewrite" title="History before the rewrite" class="screenshot"><br>
この履歴にはコミット<code>C</code>で分岐する<code>master</code>と<code>feature</code>の2つのブランチがあります。この例では、<code>master</code>ブランチにある最新のコミット、つまりコミット<code>F</code>を取り除き<code>feature</code>ブランチとマージしたいものとします。</p><p>この時点で、以下のような履歴が出来上がります。</p><p><img src="http://megakemp.com/assets/git-undo/git-lg-after.png" alt="History after the rewrite" title="History after the rewrite" class="screenshot"><br>
ご覧のように、うまくいきました。ですが、まだ満足いく結果ではありません。ある理由で前の履歴に戻りたいとします。つまり実際には、直前の2つの操作、<em>merge</em>と<em>reset</em>を取り消すということです。ここで<code>undo</code>エイリアスの出番です。</p><p>これによって<code>master@{2}</code>で参照されたコミットが<code>HEAD</code>に移動します。このコミットは、<code>master</code>ブランチが2つ前のreflogエントリで差していたコミットです。それではさらに履歴をチェックしてみましょう。</p><p><img src="http://megakemp.com/assets/git-undo/git-lg-restored.png" alt="History restored with the undo alias" title="History restored with the undo alias" class="screenshot"></p><p>全てが元通りになりました。\o/</p><p>では<em>undoを</em>をundoしたい場合は？　簡単ですよ。<code>git undo</code>そのものは、undo操作を1回行うということなので、次のように入力すれば十分です。</p><p>つまり、引数なしで、<code>git undo 1</code>と入力したのと同じ意味になるのです。</p><p>どうです、この記事は役に立ちましたか？　もしこの記事で紹介したのと同じような、別のテクニックも学びたいようであれば、他にも<a href="https://www.pluralsight.com/authors/enrico-campidoglio" rel="nofollow" title="" class="ext-link">Pluralsight</a>の<a href="https://www.pluralsight.com/courses/git-advanced-tips-tricks" rel="nofollow" title="" class="ext-link">Advanced Git Tips and Tricks（さらに進んだGitのコツとテクニック）</a>コースでいくつか記事を書き溜めているので読んでみてください。</p>
