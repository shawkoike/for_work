<p><a href="http://www.martinvigo.com/even-the-lastpass-will-be-stolen-deal-with-it/" rel="nofollow" title="" class="ext-link">Even the LastPass Will be Stolen, Deal with It!</a> By <a href="http://www.martinvigo.com/about-me/" rel="nofollow" title="" class="ext-link">Martin Vigo</a></p><p>私は<a href="https://twitter.com/algillera" rel="nofollow" title="" class="ext-link">Alberto Garcia</a>と一緒に、アムステルダムで開かれたBlackhatで<em>“Even the LastPass Will be Stolen, Deal with It!（LastPassでさえも盗まれるうのです。それでも我慢しましょう）″</em>という調査を口頭発表してきました。その会議は大成功で、聴衆から素晴らしいフィードバックを得ることができました。たくさんの人からビデオやスライドなどの資料が欲しいと言われたので、講演の詳細を記した記事を書くことは価値があると考えました。</p><p>Albertoのチームの1つがペネトレーションテストをした時、彼は複数のコンピュータへのアクセスに成功し、その全てがLastPassを参照するファイルを持っていることを発見しました。彼は私のところへ来て、LastPassの仕組みをチェックし、もし可能ならLastPassの認証情報を盗んでみたら面白いのではないかと言いました。調査に充てられるのは私たちの時間の10パーセントですので、小規模なプロジェクトとして進めることにしました。</p><p>私たちは、認証情報がローカルにどのように保存されるのかを見つけ、危険にさらされた全てのコンピュータからAlbertoがvaultのコンテンツを抽出できるように、Metasploitのプラグインを書きました。モジュールのおかげで、彼は重要なサーバに入るSSHのキーも得ることができました。ペネトレーションテストは成功しました。</p><p>私は<a href="http://www.martinvigo.com/a-look-into-lastpass/" rel="nofollow" title="" class="ext-link">過去にこのことをブログに書き</a>、<a href="https://www.reddit.com/r/netsec/comments/2gvpje/a_look_into_lastpass_extracting_the_master/" rel="nofollow" title="" class="ext-link">redditで非常に人気になりました</a>。たくさんのフィードバックや質問、コメント、提案などをもらいました。セキュリティのコミュニティは、LastPassのセキュリティに対して非常に気にしているということがはっきりしました。そのため、この問題にもう少し時間を割き、適切な調査をする価値があると考えました。</p><p><img class="size-large wp-image-299" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-16-at-10.45.24-PM-1024x451.png" alt="Research focus" width="620" height="273" scale="0"><br>
<em>調査の焦点</em></p><p>私たちは、過去に行われた調査を見てみました。すると、DNSキャッシュポイズニングとインラインフレームの脆弱性を使ったパスワードマネージャに関する調査や、クロスサイトスクリプティング（XSS）を通して特定の認証情報を盗む攻撃ベクトルに関する調査が見つかりました。</p><p>私たちは特定の秘密を漏らすのではなく、vault（保管庫）を直接攻撃するための方法を見つけ、全てのコンテンツにアクセスできるようにすることに焦点を定めました。それを、次の3つのシナリオ全てで実行したいと思いました。</p><p>ここでの目的は、ブラウザのプラグインをリバースエンジニアリングし、システムに保存された全てのファイルを分析し、vault（これ以降はvaultキーとします）を復号するためのキーを手に入れられないか見てみます。</p><p>それを行うための異なる方法を見つけました：</p><p><a href="http://www.martinvigo.com/a-look-into-lastpass/" rel="nofollow" title="" class="ext-link">以前の記事で説明</a>した方法です。</p><p><em>でも、“パスワードを記憶する”がクリックされないときは、どうでしょう？</em></p><p>最初の試みとして、vaultキーを手に入れるために、シンプルにクッキーを使ってみます。これは分かりやすいように思えますが、LastPassの設計方法により、クッキーはLastPassがサーバに保存しているものしか入手できず、そしてみなさんの予想どおり、その中にはvaultキーは含まれていないのです。</p><p><strong>実はvaultキーは、暗号化されてローカルに保存されている</strong>ことが分かりました。vault キーを復号するための復号キーはどこにあるのでしょう？　それをどこから引き出せるかは、LastPassにヒントがあるようです。</p><p><img class="size-large wp-image-300" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-16-at-11.05.15-PM-1024x650.png" alt="Cookie auth flow" width="620" height="394" scale="0"><br>
<em>クッキー認証のフローチャート</em></p><p>このフローチャートで分かるように、LastPassに問い合わせてpwdeckeyの値を得るために、セッションクッキーを使うことができます。一度それを得れば、<strong><em>SHA256(pwdeckey)</em>を実行することでキーを引き出すことができます。</strong>あとはSQLiteDBから暗号化されたvaultキーを取り出し、その引き出したキーを使って復号することが必要なだけです。</p><p><em>しかし、2段階認証（2FA）が有効になっている場合はどうでしょうか？</em></p><p>2FAは、アカウントにもう1段階追加されたセキュリティです。これにより、攻撃者があなたの認証情報を持っていてもあなたのvaultにアクセスできません。認証はあなたが知っていることと、あなたが持っている物、あるいはあなたが誰であるかということに基づいて行われます。今回のケースでは、あなたのマスターパスワードがあなたの知っていることであり、2FAがあなたの持っている物（何らかの機器、トークンなどの形で）ということになります。</p><p>LastPassは膨大な種類の2FAのメカニズム、例えばGoogle Authenticator、Yubikey、Toopherなどをサポートしています。もしも私の過去の記事を読んだことがあれば、どのようにマスターパスワードを盗むかはもうご存知でしょう。しかし被害者が2FAを有効にしていたら、あなたはログインすらできません。そのことに注意しましょう。</p><p><img class="size-large wp-image-267" src="http://www.martinvigo.com/wp-content/uploads/2015/07/2fa-request-1024x550.png" alt="2FA request" width="620" height="333" scale="0"><br>
<em>2FAリクエスト</em></p><p>最初のアプローチは、Burpをスタートし、信頼できるブラウザからのログインのリクエストを確認することです。私たちはLastPassが設定した”信頼できるクッキー”を見ることを期待していましたが、そうはなりませんでした。リクエストパラメータを、2FAと関係のあるものであると特定しようと書き換え、2FAコードに再びプロンプトで指示を求められるまで1つずつ取り去りました。違いを生み出したパラメータは、UUIDでした。</p><p><strong>UUID</strong>は32文字のランダムな文字列で、<strong>0～9、A～Z、a～z、!@#$%^&amp; ()_</strong>の文字から成っています。これは信頼できるトークンとして用いられ、全てのリクエストに送られます。LastPassはサーバ側でこれを比べ、トークンが信頼できる機器のリストの一部であるか確認します。これはプラグインのインストール時に発生し、コンピュータブラウザのローカル記憶装置に保存されます。</p><p>LastPassは2FAの一般的な実装に執着すべきでしたし、信頼できるクッキーを使うべきです。現在のLastPassの実装ではうまくいかないことがたくさんあり、悪い結果となっています。それは以下のようなものです。</p><p><em>しかし、有効なセッションのクッキーがない場合はどうでしょうか？</em></p><p>vaultキーを得る方法をいくつか発見したのですが、まだ問題はありました。ユーザがログインしていなかったり、もしくは保存されている有効なセッションクッキーがない場合、vaultキーを引き出すのに使う何らかのもとをLastPassに問い合わせることができなくなってしまうのです。他にも、複数のLastPassアカウントがある場合は、起動中のアカウントからでしかvaultキーを得ることはできない（他のアカウントはセッションクッキーがない状態です）、という制限があります。</p><p>何か特効薬が必要です。革新的でクリーンなLastPassという装置から全ての秘密を盗むことのできる良い方法が。有効なセッションクッキーがなかったとしても、ユーザが”パスワードを記憶する”をクリックしなくても、2FAがなかったとしても使えるやり方が。</p><p>LastPass他の機能に目を向けたところ、私たちは”アカウント復旧”という機能を見つけました。それはLastPassが提供している機能で、マスターパスワードを忘れてしまってもユーザがvaultを復旧できるようになるものです。皆さんの言いたいことは分かっていますよ。どうしてマスターパスワードが分からずに、vaultを復号できるのでしょうか。何しろ、暗号化キーはマスターパスワードから派生したものなのですから。私たちもこの機能に直面したときは同じ疑問を持ちました。そして、どのような仕組みになっているのか理解したいと思いました。</p><p>マスターパスワードを忘れてしまってvaultを復旧（復号）するときには、<a href="https://lastpass.com/recover.php" rel="nofollow" title="" class="ext-link">アカウントを復元</a>にアクセスし、Eメールアドレスを入力して、続行をクリックしてください。そうすると、即座にLastPassから固有のリンクが張られたメールが届きます。そのリンクをクリックすると、”Press to recover account（アカウントを復元する）”と書かれた大きなボタンのあるページに飛びます。そのボタンを押すと、マスターパスワードを入力したり、2FAを飛び越す必要もなく、復号された全てのvaultを見ることができます。</p><p><img class="wp-image-302 size-large" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-16-at-11.20.37-PM-1024x632.png" alt="Account recovery flow" width="620" height="383" scale="0"><br>
<em>アカウント復旧のフローチャート</em></p><p>Eメールのリンクをクリックすると、以下のようなURLにリダイレクトされます。<em>/recover.php?&amp;time=1412381291&amp;timehash=340908c353c099c9FAKE6b387002c5a4881ebdf1&amp;username=test%40test.com&amp;usernamehash=fc7be7e5f6cbec9FAKE2995bd3331c097</em></p><p>このURLには4つのパラメータを含んでいます。</p><p>私たちは、このURLが私たち自身で生成できるものなのか試してみたくなりました。そうすれば、固有のURLを盗むのに被害者のEメールにアクセスする必要はありません。ただし、問題は2つ。タイムスタンプが正確であることと、そしてそのタイムスタンプとユーザネームを正しくハッシュできるソルトが必要になります。</p><p>私たちにはソルトがありませんので、ユーザの正確なURLを取得し（私が自身でアカウント復旧を実行しました）、そのURLからタイムスタンプとタイムスタンプハッシュを割り出し、再利用しました。これで、うまくいきました！</p><p>この結果から学んだのが以下です。</p><p>ただし、私たちにはソルトが分からないため、正確なユーザネームハッシュは生成できませんでした。では、次のパートではアカウント復旧のプロセスを見ていきましょう。</p><p>復旧ボタンをクリックすると、POSTリクエストが以下のようなURLとともにLastPassで作られます。<br>
<em>/otp.php&amp;hash=ccb2501724FAKE2b575a214e1052d0fa27b0726b6HASHdb2e1da3952e</em></p><p>今回のパラメータは1つで、ハッシュのみです。このパラメータは、生成された”無効にされたワンタイムパスワード”です。そうです。LastPassには2種類のOTP（ワンタイムパスワード）があります。1つは本物のOTP（一度のみ使えるパスワードで、信頼できないコンピュータからログインするときに便利です）で、もう1つはdisabled（無効にされた）OTPで、こちらがアカウント復旧に使用されます。</p><p>無効にされたOTP（これ以降はdOTPキーとします）は<strong>通常デフォルトで設定されています。</strong>ですので、マスターパスワードを盗む攻撃方法(＝被害者に前もって”パスワードを記憶する”をクリックさせる必要がある)よりも、この攻撃が都合のよいことが分かります。</p><p><img class="wp-image-303 size-large" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-16-at-11.23.39-PM-1024x588.png" alt="From dOTP to vault" width="620" height="356" scale="0"><br>
<em>dOTPからvaultまで</em></p><p>上記の図から分かるように、プラグインはローカルストレージからdOTPを得ています。それから、SHA256をユーザネームとバイナリのdOTPに適用します。これをもう一度繰り返した後、前述したハッシュパラメータの値を得ることができます。</p><p>これで、正しいパラメータ値で直接リクエストを生成できるようになったので、randkeyとともにセッションクッキーを元に戻すことができるようになります。</p><p>私たちはまだvaultキーを取得できていません。<strong><em>randkey</em>は暗号化されたvaultキーのことです。</strong>私たちが認証のためにdOTPを使用した際に LastPassが送り返してきたのはこれのことだったのです。ということは、このvaultキーを復号すればいいだけのことなのです。では、どうやるのでしょう。vaultキーは、キーもdOTPから生成されるCBCモードでAES256を使用し暗号化されています。具体的に言えば、<strong>このキーはSHA256（dOTP）のことです。</strong></p><p>考えてみてください。dOTPは強化されたマスターパスワードなのです。</p><p>私たちはこの調査をペネトレーションテスト実施者（ペンテスタ）に役立ててもらいたいと思い、以前に本記事で語ってきたこと全てを自動化するためのpost-exploitationモジュールを書きました。もうすでに<a href="http://www.rapid7.com/db/modules/post/multi/gather/lastpass_creds" rel="nofollow" title="" class="ext-link">私が認証情報を盗むために書いたモジュール</a>を使った人もいるかもしれません。なので、私はさらにアップデートをしました。2FAトークンを盗み、vaultキーを生成するクッキーとdOTPを使用し、復号化のvaultを奪い、vaultの中に保存されている全ての秘密を割り出すサポートを追加したのです。今やこれら全てがあなたの元に！</p><p>このアップデートされたモジュールは私の<a href="https://github.com/martinvigo/metasploit-framework/blob/lastpass_creds/modules/post/multi/gather/lastpass_creds.rb" rel="nofollow" title="" class="ext-link">githubのリポジトリ</a>にあります。すぐに公式なリポジトリにプルリクエストを作るつもりですので、皆さんがMetasploitを次にアップデートしたときには、このモジュールは皆さんがより使いやすいようになっているはずです。</p><p>6月にLastPassサーバへの侵入があり、そしてその時LastPassは顧客のデータにはアクセスされていないと主張したので、私たちは、LastPassと同じデータを持っていたら事前に何ができたのかを検証することにしました。特に私たちが知りたかったのは、誰がvaultを復号することが可能なのかということです。LastPassの人間はどうか、もしくはサーバにアクセスが可能であれば誰でもなのか、それともLastPassのデータベースにアクセスする権限を強要している国家安全保障局はどうだろうか、調べます。</p><p>LastPassはこのように主張しています。顧客のデータを復号することなんてできるはずはないし、サーバに侵入してきたハッカーたちは成功させるのが難しいオフラインの攻撃を成功させるためにデータを捨てました。そして、国家安全保障局でも、10万回のPBKDF2に対しては何もできなかったはずだ、と言っています。</p><p>このまま続ける前に、1つ言っておきます。<strong>私は、これから説明するどの攻撃もLastPassが実行したものであるとは、言ってもないし、ほのめかしてもないし、提唱しているわけでもありません。</strong>彼らは決してそんなことしていませんし、私がLastPassを攻撃者としている場面があってもそれは説明がしやすいからという理由だけです。私が意図するところは、「LastPassの社員の怠慢が原因で、ハッカーが彼らのサーバに侵入した場合はどうか」「政府がLastPassに圧力をかけた場合は」という可能性は否定できないということです。</p><p>では、一緒に妄想しましょう。</p><p><img class="size-large wp-image-313" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-17-at-12.05.46-AM-1024x381.png" alt="Auth flow" width="620" height="231" scale="0"><br>
<em>認証のフローチャート</em></p><p>LastPassによって公開されているデータを見ると、認証するために、<strong>“認証ハッシュ”は1回のvaultキーのPBKDF2を実行することによって作成されています。</strong>PBKDF2は、認証情報からvaultキーを引き出し、LastPassサーバに認証ハッシュを保存しておくのに使用されます。しかし、<strong>実際のところ、LastPassはPBKDF2で暗号化キーを保護していません。</strong>ただし、ここで勘違いしないでほしいのは、256ビットの総当たり攻撃はいまだにとても困難であるということです。</p><p>LastPassは暗号化されたvaultキーを何種類か保存しています。その中の1つはdOTPでの認証を説明した際に登場しましたね。dOTPsは32文字なので、256ビットで保護されています。しかし、通常のOTPを使った場合、LastPassは以下のような暗号化されたvaultキーのコピーを持つことになります。</p><p><em>SHA256( SHA256(username+OTP) + OTP)</em></p><p>OTPは<strong>16のランダムなバイト</strong>です。ユーザネームが知られていて、キーを暗号化するのに使われるPBKDF2がないことを考えれば、<strong>誰でもLastPass側なら256ではなくOTP（128バイト）のみを総当たり攻撃すればいいことになります。</strong>ここでも勘違いしないでほしいのは、128ビットの総当たり攻撃もまたとても困難であるということです（今日でも）。しかし256よりはかなり楽になります。</p><p><img class="size-large wp-image-314" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-17-at-12.20.52-AM-1024x580.png" alt="Encrypted vault" width="620" height="351" scale="0"><br>
<em>暗号化されたvault</em></p><p>上記の画像は暗号化されたvaultのスクリーンショットです。きっと想像していたよりも暗号化されているようには見えないでしょう。つまり<strong>vaultは暗号化された大量のデータではなく、いくつかの暗号化された値が入った平文のメタデータなのです。</strong></p><p><img class="size-large wp-image-316" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-17-at-12.41.29-AM-1024x563.png" alt="custom_js parameter" width="620" height="341" scale="0"><br>
custom_jsのパラメータ</p><p>これまで説明したものはどれも不安にさせますが、まだvaultから全ての秘密を盗む方法を見つけるという目標を達成していません。LastPass APIをいじっていると、暗号化されたvaultをXMLで返すリクエストを偶然見つけました。そのおかげで、全てのアカウントノードの一部である”custom_js”という興味深いパラメータを発見することができました。</p><p>LastPassがログインページに認証情報を送るための入力ノードをDOMの中から必ずしも見つけることができるわけではない、ということが判明しました。これは、フォームや送信ボタンのないflashコンテンツで構成したサイトや手の込んだログイン画面をWebマスターが作成することで起こります。LastPassでは、認証情報を送れないと推測されたアカウントにJavaScriptペイロードを送り込むことでこの問題を解決しています。</p><p>つまり、LastPassは、JavaScriptペイロードを平文として暗号化されたvaultに追加するのです。このJavaScriptのプログラムは、ページが読み込まれるたびにドメインのコンテキストに送られ実行されます。正当な機能ではあるものの、LastPassが全ての認証情報を盗めるようにしてしまう可能性があります。</p><p><img class="size-large wp-image-317" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-17-at-12.49.25-AM-1024x504.png" alt="Stealing creds with custom_js" width="620" height="305" scale="0"><br>
custom_jsで認証情報を盗む</p><p>上記の図から分かるように、暗号化されたvaultのLastPass側に追加されたペイロードは、ブラウザプラグインによって処理され、DOMに送られます。クライアント側でバリデーションされることはありません。しかも、ログインページだけでなく、全てのページで実行されます。</p><p>最悪なのは、<strong>LastPassプラグインは、実行中のサイトの平文の認証情報を含む、lpcurruserとlpcurrpassの2つの変数を宣言するため、認証情報が盗みやすくなってしまうことです。</strong></p><p>vaultに保存されていないアカウントのサイトからLastPassがデータを盗もうとした場合はどのようなことが起きるのでしょうか。vaultは暗号化された大量のデータではなく、いくつかの暗号化された値が入ったメタデータなので、問題なく盗むことができます。下記の図のように、<strong>暗号化されたvaultに好きなペイロードで新しいアカウントを追加して、セッションのクッキーやデータなどを盗むことができます。</strong></p><p><img class="size-large wp-image-318" src="http://www.martinvigo.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-17-at-12.55.26-AM-1024x629.png" alt="custom_js manipulation use case" width="620" height="381" scale="0"><br>
custom_jsでデータを操作したときのケース</p><p>Firefoxの動作は他のブラウザとは異なります（ここでは詳細に触れませんが、講演では触れていますので、ビデオが公開されたら見てみてください）。大きく異なるのは、FirefoxがSQLiteのデータベースをストレージに使用していない点です。代わりに、データを複数の異なるファイルとして保存します。LastPassの暗号化された認証情報が保存されているファイルは<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Preferences/A_brief_guide_to_Mozilla_preferences" rel="nofollow" title="" class="ext-link">prefs.js</a>です。このファイルに認証情報を含め、Firefoxの設定や構成が保存されています。</p><p><img class="aligncenter size-large wp-image-271" src="http://www.martinvigo.com/wp-content/uploads/2015/07/firefox_prefs_js_file-1024x507.png" alt="prefs.js file" width="620" height="307" scale="0"></p><p>上記の図から分かるように、認証情報は次のとおり保存されています。</p><p>上を念頭に、<a href="https://www.google.co.jp/search?q=extensions.lastpass.loginpws&amp;ie=utf-8&amp;oe=utf-8&amp;gws_rd=cr&amp;ei=qKtfVsyYGMTFmQWl0qvoDA" rel="nofollow" title="" class="ext-link">Googleで”extensions.lastpass.loginpws”を検索したらどうなるか考えました</a>。推測どおりでした。知らぬうちに、暗号化されたLastPass認証情報は世界中で共有されているのです。さらに、<a href="http://pastebin.com/search?cx=013305635491195529773%3A0ufpuq-fpt0&amp;cof=FORID%3A10&amp;ie=UTF-8&amp;q=extensions.lastpass.loginpws&amp;sa.x=0&amp;sa.y=0" rel="nofollow" title="" class="ext-link">pastebin</a>でも認証情報を見つけることができます。最悪なのは、<a href="http://www.martinvigo.com/a-look-into-lastpass/#plugin" rel="nofollow" title="" class="ext-link">復号の方法が分かっている</a>ため、欲しい情報は全てここで取得できるということです。</p><p>ここでの問題は、壊れたFirefox構成の修復方法や、スパイウェアやツールバーの削除方法をインターネット上で問い合わせる際に、自らのprefs.jsをフォーラムなどで公開してしまう人がいることです。また、同時に復号キーを引き出すヒントを含め、LastPassの認証情報をさらしてしまっているのです。私たちは、アンチウィルス・アンチスパイウェアのサイトやフォーラムでダンプファイルを目にしたことがあります。</p><p>Windowsでバイナリのプラグインを使用していた幸運なユーザの情報は復号できない場合があります。つまり、<a href="https://msdn.microsoft.com/en-us/library/ms995355.aspx" rel="nofollow" title="" class="ext-link">データ保護API(DPAPI)</a>を使用して認証情報が暗号化されているため、コンピュータの外では復号できません。私たちの意図は、人の情報をさらすことではなく、可能性を指摘することです。そして、その可能性を良く説明しているのが、この例でしょう。影響のあるユーザに注意を促し、リンクを外せるようLastPassにはこの危険な状況を報告しました。</p><p>パスワードマネージャは誰もが使うべき素晴らしいツールです。LastPassの弱点を明らかにしましたが、信頼できるツールであり、最後の文字だけを変えたパスワードを転用するよりは良い選択だと思います。ここで説明したような攻撃がされないようLastPassの設定を強化する方法はあります。詳細については、講演やスライドをご覧ください。最後に、<strong>私たちの報告に対してLastPassは迅速に対応してくれたこと、問題が数日で修正されたことを言っておきます。LastPassとのコミュニケーションは非常に取りやすく、作業もスムーズに行うことができました。</strong></p><p>メディアやツイートで私たちが”LastPassをハッキングした”と書かれているのを目にしました。私たちはLastPassをハッキングしていません。このように言われるのは心外です。私たちが行ったことは、バグや悪しき慣行、デザイン問題を発見し、それらを使用してあらゆるシナリオでvaultキーの取得やパスワードの復号を試したにすぎません。バグのないパスワードマネージャソフトウェアは今までもこれからも存在することはありません。そのため、新しいソフトウェアで同じような調査を実施しても、同じような結果を得ることができるでしょう。</p><p>よかったら<a href="https://www.blackhat.com/docs/eu-15/materials/eu-15-Vigo-Even-The-Lastpass-Will-Be-Stolen-deal-with-it.pdf" rel="nofollow" title="" class="ext-link">スライド</a>を参照してください。講演のビデオは、Blackhatが近々公開してくれるでしょう。ご質問やご意見がある場合は、お気軽にコメントしください。パスワードマネージャは何を使用した方が良いかと聞かれても答えられませんが、パスワードマネージャを使用することはお勧めします。</p>
