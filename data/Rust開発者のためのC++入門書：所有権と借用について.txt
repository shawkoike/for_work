<p><a href="http://nercury.github.io/c++/intro/2017/01/22/cpp-for-rust-devs.html" rel="nofollow" title="" class="ext-link">Short intro to C++ for Rust developers: Ownership and Borrowing</a> （2017-01-22） by <a href="http://nercury.github.io/about/" rel="nofollow" title="" class="ext-link">Nerijus Arlauskas</a></p><p>今日、ソーシャルサイト「reddit」を見ていたら、“<a href="https://www.reddit.com/r/rust/comments/5pfytf/going_after_c_with_rust_basics/" rel="nofollow" title="" class="ext-link">Rustの基礎を学んでからC++を始める場合</a>、何を勉強すればいいか”と問う投稿があり、私は自分のブログを復活させ、その中で質問への答えを書いたら面白いのではと考えました。</p><p>私にはRustを学んだ後にC++を扱う仕事に就いた経験があるため、Rustの経験を持つ人がC++に移行していく様子をまとめてみたいと思ったのです。</p><p>本稿はC++の構文と特徴を既に知っていて、RustからC++の世界に移行する方法に興味を持っている読者を対象とします。</p><p>しかし、私は全てに精通しているわけではないので、本稿では所有権（ownership）、借用（borrowing）、ライフタイム（lifetime）に焦点を当てて説明していきます。</p><p>Rustの一番大きな特徴は所有権です。所有権は、プリミティブ型ではない値に対するデフォルトの動作として、コピーではなく移動することを示します。</p><p>例えば、Rustで<code>String</code>を生成して別の関数に渡した場合、文字列はその関数に移動し、破壊されるでしょう。</p><p>C++のコードも見てみましょう。</p><p>C++でもコピーは減らしたいはずです。</p><p>C++には<code>lvalues</code>、そして対となる<code>rvalues</code>という概念があります。</p><p>C++では、実際に型に移動命令を実装した場合、<code>rvalues</code>が移動できるのに対し、<code>lvalues</code>はコピーされます（色々ある細かい点は、割愛します）。</p><p>C++の<code>std</code>ライブラリには、どんな<code>lvalue</code>も<code>rvalue</code>に変えられる<code>std::move</code>という関数があります。</p><p>そのため、<code>std::move</code>で<code>val</code>をラッピングすることで不要なコピーを避け、既存のC++プログラムをRustと同じような挙動に変更することができます。</p><p><code>std::move</code>は実際に何かを動かす関数ではない、ということを覚えておいてください。これは、ある特定の場所において、コンパイラが値を扱う方法を変更するだけです。今回は<code>std::string</code>が移動命令を実装しているため、移動したのです。</p><p>C++では、移動した値を間違って<em>使う</em>ことがあります。そのため、通常の移動命令では元のコンテナサイズをゼロに設定します。</p><p>以上のことから、不要な値のディープコピーをすることになったとしても、移動した値を間違って使わないために移動を<strong>避ける</strong>というのはC++では有効な方法です。</p><p>値のコピーが実際に危険で、それをコピーすべきでない場合は、<code>unique_ptr</code>（<code>Box</code>など）や<code>shared_ptr</code>（<code>Arc</code>など）にラッピングするのが有効です。こうすれば、ヒープ領域で値のシングルインスタンスを保持します。このような場合、<code>move</code>への依存は非常に弱く、正しいプログラムを維持するためのコストが発生します。</p><p>Rustでは、値を借用するために変更不可能な関数を作れます。</p><p>Rustのコンパイラは、String上で、そのStringの内容を変更するメソッドや操作を呼び出すことを許可しません。またRustでは、変更可能な文字列の借用や、文字列の所有権を必要するメソッドの呼び出しを許可しません。</p><p>C++で同じことができます。</p><p><code>const T&amp;</code>というコードはRustの<code>&amp;T</code>と似ています。C++のコンパイラは、<code>const T&amp;</code>オブジェクトの内容の変更を許可しません。またC++では、非constな文字列上でのメソッドの呼び出しを許可しません。</p><p>Rustに構造体<code>Person</code>があって、関数<code>print_full_name</code>のパラメータとして使うとしましょう。</p><p>この関数はPerson上のメソッドとなり得ます。</p><p><code>print_full_name</code>は不変なアクセスでしか<code>&amp;self</code>参照にアクセスできないことを覚えておいてください。</p><p>C++では、メソッド上の<code>const</code>修飾子を使えば同じことができます。</p><p>Rustでは、<code>Person</code>の不変借用な場所で、<code>print_full_name</code>メソッドを使えます。</p><p>C++では、<code>Person</code>が<code>const</code>となり得る場所で、<code>print_full_name</code>メソッドを使えます。</p><p>Rustでは、参照を変更するメソッドは、必ず<code>&amp;mut</code>参照を使います。例として<code>Person</code>に実装されたメソッドを見てみましょう。</p><p>または、スタンドアローンなメソッドは次のようになります。</p><p>C++では、単純に、<code>const</code>修飾子を持たないメソッドの場合は、全て以下のようになります。</p><p>非const参照を持つメソッドの場合は、全て以下のようになります。</p><p>前述のとおり、C++で所有権を保持することは可能ですが、よくないものとされており、所有権の移動はコンパイラに委ねるべきです。</p><p>しかし、手動の<code>std::move</code>が問題ない場合も多少あります。その1つがsetter関数です。<br>
nameを変更するRustのメソッドを考えてみましょう。</p><p>これをnameの所有権を持つ関数<code>foo</code>の中に呼び出すことができます。</p><p>Rustでは、<code>set_name</code>がnameの所有権を保持するのがデフォルトです。しかしC++では、nameはデフォルトでコピーされます。<br>
以下にC++のメソッドを示します。</p><p>既にコピーされたパラメータがあるので、セッタの中を安全に移動できます。しかし、呼び出す場所でコピーを避けることはしませんでした。</p><p>ここで<code>std::move</code>を使えます。</p><p>しかし、fooの呼び出し元は移動を確実にするために同じことをしなければならず、このサイクルが続いていきます。</p><p><code>std::move</code>を使う時に探すのは、可変参照です。では関数<code>foo</code>の中に可変参照があるとして、値を移動してみましょう。</p><p>そうすると、fooの呼び出し元は突然名前が消えてしまったことを知ります。</p><p>この特殊なケースでは、<code>const T&amp;</code>の参照をセッタまでずっと使う方がいいでしょう。これで最小限のコストでセッタ内に名前のコピーを作成するのです。</p><p>しかし、<code>name</code>がとても大きな文字列の場合はどうでしょう。例えばファイルのコンテンツなどで、さらにパフォーマンスの理由からコピーをしてはいけないという場合などには、<code>unique_ptr</code>や<code>shared_ptr</code>が役立ちます。</p><p>コピーは残ることをお忘れなく。しかしコピーするのは同じメモリのコンテンツを参照する<code>Arc</code>ポインタだけです。</p><p>Rustを書く人々がよくやるのが、値のコンテンツを露出して外部を変化させることです。Rustの全てのイテレータは、多くの標準ライブラリ関数と同様にこのコンセプトのもとに構築されています。</p><p>例えば、誰かが名字や名前を変更できるようにする<code>Person</code>のメソッドを追加すると、以下のようになります。</p><p>これで文字列の参照に“foo”を追加する関数を持つことができます。</p><p>それから、外部関数が<code>Person</code>内の<code>String</code>の内容を変更できるようにするコードを書くことができます。</p><p>ご存知かもしれませんが、Rustのコンパイラはライフタイムの省略を理解できます。つまり、毎回ライフタイムへの参照に注釈をつけなくても、参照する場所が分かるのです。</p><p>例えば、<code>Person</code>の<code>impl</code>が3つのライフタイムの注釈を持っているとしましょう。</p><p>参照は基本的にポインタと同じです。ライフタイムの構文<code>&amp;'a mut</code>は、返される値が関数の引数として<code>'a</code>と同じ、もくしくはより狭い記憶場所を参照しなければならないとコンパイラに伝えます。</p><p><code>'a</code>の外にある値に参照を返そうとすると、以下のようにコンパイラが文句を言います。</p><p>というわけで、呼び出しをする場所では、コンパイラは<code>append_foo</code>の呼び出しの時は常に<code>Person</code>が借用されることを知っており、おかしなことができないようになっています。以下がその例です。</p><p>一方C++は、ポインタや参照が指し示す場所を機械的に理解していませんし、助けてくれません。しかし、C++でも同じことを実装することは可能です。</p><p>まず、<code>Person</code>では以下のようになります。</p><p>セッタと同じように、コピーを回避するためコンストラクタで<code>std::move</code>のトリックを使います。<br>
これはC++では常に使われる実用例です。<br>
次に<code>append_foo</code>を作りますが、これは驚くようなものではありません。</p><p>そして最後に、main関数です。</p><p>ただし、C++のコンパイラはライフタイムを追跡してメモリの安全を保証することはできません。</p><p>コンパイラがこうした検証をしてくれることに慣れている人にとっては、これは問題ですね。ここまで書いてきたオブジェクトがもっと複雑になるかもしれませんし、<code>Person</code>にあれこれ加えた変更を追跡するのはさらに大変になるでしょう。</p><p><code>Person</code>の記憶場所を上書きしてしまっていましたが、大丈夫でした。これは本当にずっとうまくいくかもしれません。しかしリリースビルドの中でダメになる可能性もあります。もしくは、他の開発者が<code>Person</code>をshared_ptrの中にラッピングした時にダメになるかもしれません。</p><p>これで、解放済みメモリを修正しました。これはうまくいきましたが、もし前の記憶場所に何か別のことが書いてあったら、機能していないかもしれません。</p><p>C++では、可変な参照を返すメソッドを回避した方がよいでしょう。代替案としては、フィールドに直接アクセスすることができます（その代わりプライバシーが侵されます）。</p><p>もしくは別のコピーを作成します。これは難しいものではりません。</p><p>RustからC++に戻る時の大きなハードルは、デフォルトで所有権を移動する機能がなくなることです。ということは、C++の世界で使われる他の慣用的なパターンを学ばなければならず、場合によっては、全てのコードが効率性と保守性を両立できている必要はないと認めなければならないということです。</p><p>多くの場合、保守性が優先されます。そして、「早まった最適化」を避けることが、C++では本当に必要不可欠なのです。</p>
