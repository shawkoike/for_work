<p><a href="https://sprint.ly/blog/your-developers-arent-slow/" rel="nofollow" title="" class="ext-link">Your developers aren’t slow</a> by <a href="https://sprint.ly/" rel="nofollow" title="" class="ext-link">Sprintly members and Justin Jackson</a></p><p>我々マネージャが、納期に遅れることを自分のチームのせいにするのは簡単です。しかし、納期に遅れる原因は本当に開発者の仕事が遅いせいでしょうか？</p><p><a href="https://sprint.ly/" rel="nofollow" title="" class="ext-link"><strong>Sprintly</strong></a>は、開発者のサイクルタイムに関する膨大なデータを保有しています。当社は、タスクのサイズごと（S、M、L、XL）、また種類ごと（ストーリー、テスト、バグ）に、完了までにどれくらいの期間がかかるかを追跡しています。</p><p>1点目：開発者は非常に平均的です。ユーザ全体で見たサイクルタイムはほぼ同じであることを当社のチケットデータが示しています。システム内の全チケットの75%は、開始後およそ175時間で完了しています。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup></p><p>2点目：変動があるのは、ほとんどがチケットが開始される前（SomedayからBacklogまで）の段階です。これは、関係者が仕様を理解して作業の優先順位を決定する段階です。“かんばん”の世界では、一般的にリアクションタイム（チケットが作成されてから優先順位を設定するまでの時間の合計）と呼ばれます。この段階で多くの時間が費やされます。</p><p><img src="https://sprint.ly/blog/wp-content/uploads/2014/11/variability.png" alt="Developer cycle time variability by Sprint.ly" class="alignnone size-full wp-image-241"></p><p>3点目：チームは、“完了”から“テスト済み、デプロイ準備完了”に移るときにも苦労する傾向が見られます（上の図のCompletedからAcceptedを参照）。</p><p>あなたのチームが納品までに時間がかかりすぎると感じていますか？　もしかすると、開発者たちに責任はないのかもしれません。</p><p>開発が遅れるのが開発者のせいでないとすると、原因は一体何でしょうか？　<em>ヒントはあなたのプロセスにあります。</em></p><p>良い仕様書を書くのは重要なことです。もし開発者が機能の内容を理解していなかったら、どうやって開発を始められるでしょう？</p><p>関係者が機能についてきちんと検討していないことはよくあります。開発者は、ユーザはなぜその機能が必要なのか、それはどんな機能で、どうやって使われるのかを理解する必要があります。</p><p><a href="https://sprint.ly/" rel="nofollow" title="" class="ext-link"><strong>Sprintly</strong></a>では、Mad Libsスタイルを用いた以下のフォームを使ってユーザストーリーを作成します。</p><p><img src="https://sprint.ly/blog/wp-content/uploads/2013/04/user-story-on-dashboard-cropped-1024x373.png" alt="User story in Sprintly dashboard" class="alignnone size-large wp-image-178"></p><p>このフォームを使えば、特定の機能の方向性を具体的に定めることができます。また、ストーリーのスコープを確実に絞り込むことができます。</p><p>当社の調査によれば、開発者が2番目に不満に思うのは、仕事が始まったとたんに仕様が何度も変更されることです。</p><p>Hacker Newsのユーザ、cognivoreがこれを説明する<a href="https://news.ycombinator.com/item?id=8169462" rel="nofollow" title="" class="ext-link">良い例え話</a>をしています。</p><p>こうなる主な原因は、ワークキューに入れる前に機能のプランニングを適切に行わないからです。</p><p>開発途中で要件が変更されるのを避ける1つの方法は、実際の開発が始まる前にインタラクティブなモックアップを作成することです。</p><p>迅速に仕事を進めることが求められるからといって、いつでも自由にスコープを変更していいわけではありません。理想としては、途中で学んだことは将来的に反復できるように全て把握、考察しておきたいところです。</p><p>要件の変更（及びスコープクリープ）をとどまらせるもう1つの方法は、進捗に焦点を当てることです。Sprintlyには、1つの機能の開発を終えるまでにあと何日かかるかを予測できる機能があります。</p><p><img src="https://sprint.ly/blog/wp-content/uploads/2014/11/progress.gif" alt="progress" class="alignnone size-full wp-image-242"></p><p>新たなタスクが追加された場合は、開発が何日延びるかをProgress機能が教えてくれます。</p><p>開発スピードを鈍化させる最後の要因は、コンテキストスイッチでしょう。これには複数の形があります。</p><p>例えば当社には、多くのコードレビューやペアリング、ミーティングへの参加、トラブル対応などを行うリード・デベロッパがいます。</p><p>以下のグラフは当社のチームにおける開発者のサイクルタイムを示しています。</p><p><img src="https://sprint.ly/blog/wp-content/uploads/2014/11/dev-who-switches-contexts1.png" alt="Lead developer who switches contexts" class="alignnone size-full wp-image-244"></p><p>この場合、さまざまなことに対応するリード・デベロッパという仕事の性質が、タスク完了に要する時間に影響を与えています。</p><p>問題は、あなたがマネージャとして、開発者を途中で新たなタスクに移らせた時に起こります。あなたの中の優先順位が常にコロコロ変わると、<a href="https://dl.dropboxusercontent.com/u/25009451/ProgrammerInterrupted.pdf" rel="nofollow" title="" class="ext-link">チームに莫大なコスト</a>をもたらすことになるのです。</p><p>Joel Spolskyは<a href="http://www.joelonsoftware.com/articles/fog0000000022.html" rel="nofollow" title="" class="ext-link">彼の投稿</a>の中でコンテキストスイッチを激しく非難しています。</p><p>マネージャとして、開発者の仕事がうまくいく環境を整えることが我々の仕事です。開発者たちを指差して納期の遅れを責める前に、自分自身はどうなのかを省みるべきです。</p><p>以下のステップを踏めば、あなたがチームの仕事を遅くすることは確実になくなります。</p><p>とにかく、開発者を“遅い”と責め立てることには、くれぐれも慎重になってください。彼らの仕事を遅くしているのは、あなたの<em>ワークフロー</em>である可能性がとても高いのです。</p>
