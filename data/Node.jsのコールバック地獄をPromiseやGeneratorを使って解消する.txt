<p><a href="http://strongloop.com/strongblog/node-js-callback-hell-promises-generators/" rel="nofollow" title="" class="ext-link">Managing Node.js Callback Hell with Promises, Generators and Other Approaches</a> by <a href="https://twitter.com/wavded" rel="nofollow" title="" class="ext-link">Marc Harter</a></p><p>下のようなコードが、親しみをこめて「コールバック地獄」とか「死のピラミッド」とか呼ばれているのはご存じですよね。</p><p>この状態がコールバック地獄かどうかは、意見の分かれるところでしょう。ネストがいくら深くても全く問題がないコードもあるからです。非同期のコードでフロー管理ができないほど複雑になってしまった場合は悪夢ですが。自分のコードがどの程度”ひどい”状態に陥っているかを確認するには、こう自問してみてください。「<code>doAsync1</code>の前に<code>doAsync2</code>が実行された場合、リファクタリングにどこまで労力がかけられるか」と。ここでのゴールはネストの階層を減らすことではなく、モジュール化された（もちろんテスト可能な）、論理的で耐障害性の高いコードを書くことです。</p><p>この記事では、複数のツールやライブラリを使ってモジュールを作成し、どのようにフロー制御が動作するのかを検証してみようと思います。さらにN ode.jpの次バージョンで導入される予定のソリューションについても触れるつもりです。</p><p></p><p>それでは、特定のディレクトリ内で最もサイズの大きいファイルを探すモジュールを実装することにしましょう。</p><p>コードを書く前に手順をリストアップしてみます。</p><p>どこかでエラーが発生した場合は、ファイル名ではなくエラー値を返します。また、コールバック処理の呼び出しは一度だけとします。</p><p>最初にネストを使ったアプローチを試してみましょう。もちろん”ひどい”ネストではありませんよ。ロジックを内向きに書いていくのです。</p><p>このアプローチで十分問題を解決できそうですが、並列処理の扱いと、コールバックが一度しか呼ばれないようにする処理は、注意が必要そうです。これらの注意点を扱う方法は後で触れることにして、まずは同じ処理を小さいモジュールに分けて考えてみましょう。</p><p>先ほどのネストを使ったアプローチは、以下の3つのモジュールに分けることができます。</p><p>最初のタスクは基本的に<code>fs.readdir()</code>で事足りますから、わざわざ関数を書く必要はありませんね。まずは、順序を保持しつつ対象となるパスの<code>stats</code>を返す関数を書いてみましょう。</p><p>さて次に必要なのは、statsとfilesを使って最大のファイルの名前を返す関数です。</p><p>では、これらを統合してみましょう。</p><p>モジュールを使ったアプローチでは、コードが再利用がしやすく、テストも容易になります。メインのエクスポートが分かりやすいというメリットもあります。しかし、statを取得する並列処理の管理は自前で実装していましたね。これをフロー制御モジュールを使った処理に変更してみましょう。</p><p><a href="https://github.com/caolan/async" rel="nofollow" title="" class="ext-link">async</a>モジュールは幅広く使われていて、Nodeコアにも親和性のある方法です。では早速、今回のプログラムをasyncモジュールを使って実装してみましょう。</p><p>asyncモジュールを使えば、コールバック関数は間違いなく一度しか呼ばれません。また、私たちの代わりにエラーを伝播し、並列処理を管理してくれます。</p><p><a href="http://www.html5rocks.com/en/tutorials/es6/promises/" rel="nofollow" title="" class="ext-link">promise</a>は、エラー処理と<a href="http://strongloop.com/strongblog/how-to-compose-node-js-promises-with-q/" rel="nofollow" title="" class="ext-link">関数型プログラミング</a>を得意とします。promiseを使って、今回の問題にアプローチしてみましょう。ここでは<a href="https://github.com/kriskowal/q/wiki/API-Reference" rel="nofollow" title="" class="ext-link">Q</a>モジュールを使います（もちろんpromiseを使った他のライブラリを採用してもかまいません）。</p><p>これまでの例と違い、promiseチェーン（つまり<code>then</code>）内で投げられた例外はキャッチされて処理されます。では、クライアントAPIもpromise仕様に変更しましょう。</p><p>promiseのスコープについては、ここではこれ以上掘り下げません。詳細については、<a href="http://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/" rel="nofollow" title="" class="ext-link">こちら</a>をお読みになることをお勧めします。</p><p>記事の冒頭で触れたように、Node v0.11.2から新機能が仲間入りします。そう、generatorです。</p><p>generatorはJavaS cript向けの軽量版のコルーチンです。<code>yield</code>キーワードを使って関数を一時停止したり、再開したりできます。generator関数は<code>function* ()</code>という特殊な構文を使います。その威力をもってすれば、prom iseや「サンク」を使った非同期処理を一時停止したり、再開したりすることもできるのです。 つまり”同期風”の非同期コードが書けるというわけですね。</p><p>それでは非同期処理を制御するフローに、generatorを活用した例を見てみましょう。今回はTJHolowaychuk氏のcoモジュールを紹介します。この<a href="https://github.com/visionmedia/co" rel="nofollow" title="" class="ext-link">co</a>モジュールを使って、今回の最大のファイルを返すプログラムを実装しました。</p><p>このgeneratorを使った関数は、記事の冒頭で紹介したコールバックAPIでも利用できます。coモジュールには優れたエラー処理能力があり、すべてのエラー（例外発生を含む）をコールバック関数に引き渡してくれるのです。またgeneratorでは、yieldステートメントをtry/catchブロックで囲むことができ、coモジュールではこの特性を利用しています。</p><p>coモジュールは、配列、オブジェクト、ネストされたgenerator、promiseなどをサポートするたくさんの機能があります。</p><p>今回は、「コールバック地獄」を解消するため、つまりアプリケーションのフローを制御するために、さまざまなアプローチを検証しました。個人的にはgeneratorを使ったアプローチがお勧めです。generatorが今後<a href="https://github.com/koajs/koa" rel="nofollow" title="" class="ext-link">koa</a>のような新しいフレームワークでどのような展開を見せるのか、楽しみですね。</p><p>サードパーティのモジュールを検討した箇所では触れませんでしたが、モジュールを使ったアプローチは、どんなフロー制御ライブラリ（async、promise、generator）にも適用することができます。今回のプログラムをよりモジュール形式に修正するは、どうすればいいでしょうか。使えそうなライブラリやテクニックを知っている方がいたら、ぜひコメント欄に書き込んでください。</p><p>イベントループの監視、Nodeクラスタの管理、メモリリークの追跡に関心があるあなたに朗報です。ローカル環境でもお好みのクラウド上でも、すぐに<a href="http://strongloop.com/node-js-performance/strongops/" rel="nofollow" title="" class="ext-link">StrongOps</a>を始められますよ。<a href="http://strongloop.com/get-started/" rel="nofollow" title="" class="ext-link">npmで簡単にインストール</a>できます。</p><p><img src="/wp/wp-content/uploads/2014/06/1.png" alt='"Screen Shot 2014-02-03 at 3.25.40 AM"'></p>
