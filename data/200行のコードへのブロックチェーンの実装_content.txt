A blockchain in 200 lines of code （2017-3-04） by Lauri Hartikkaブロックチェーンの基本的な概念は非常にシンプルです。分散型データベースで、順序付けられたレコードのリストが連続的に増加していきます。しかしシンプルとは言え、ブロックチェーンやそれを使うことで解決しようとしている問題について話をする際に、頭を悩まされることがよくあります。これは、ビットコインやイーサリアムといった、一般にもよく知られているブロックチェーンベースのプロジェクトでよく聞かれる話です。「ブロックチェーン」は、取引やスマートコントラクト、または暗号通貨といったコンセプトと強い結びつきがあります。そのため、本来シンプルであるべきブロックチェーンの理解がより困難になってしまっています。抜け目のないソースコードであれば尚更です。
そこで、NaiveChainという、200行のJavascripitに実装した、非常にシンプルなブロックチェーンを紹介したいと思います。まず行うべき作業は、ブロックの構造を決めることです。可能な限りシンプルにするため、最低限必要となる、インデックス、タイムスタンプ、データ、ハッシュ値、そして1つ前のブロックのハッシュ値のみを構造に含めます。
チェーンの安全性を維持するために、ブロックの中には、1つ前のブロックのハッシュ値が含まれていなくてはなりません。ブロックはデータの安全性を確保するため、ハッシュ化されている必要があり、SHA-256によって、ブロック内のコンテントが引き継がれます。ここには回答すべきプルーフ・オブ・ワークの問題はないので、このハッシュは「マイニング」とは何の関係もないということを覚えておいてください。ブロックを生成するには、1つ前のブロックのハッシュ値を知っていなければならず、その上で、その他、必要なコンテンツ（インデックス、ハッシュ値、データ、タイムスタンプ）を作成します。ブロックデータは、エンドユーザによって提供されます。ブロックチェーンを保存するには、インメモリのJavascriptの配列が使用されます。ブロックチェーンの最初のブロックは常に「ジェネシスブロック」と呼ばれ、ハードコーディングされています。いかなる場合でも、ブロックもしくはブロックのチェーンが安全性を満たしているか確認しなければなりません。特に他のノードから新しいブロックを受け取ったときや、承認すべきかどうかの決断をしなければならないときは尚更です。どんな場合でも、チェーンには明確なブロックのセットが1つでなくてはなりません。矛盾する点（例えば、2つのノードがどちらもブロック番号72を生成している）があった場合、ブロックの数が多いチェーンを選択します。
注釈：当初の矛盾点、解決済み、最長チェーンが優位ノードに不可欠なのは、ブロックチェーンを他のノードと共有、また同期する点です。以下は、ネットワークが常に同期されるために必要なルールです。
(上から下、左から右の順)
注釈：
ノード1はノード2と連結し、同期する
最新のブロックにクエリを行う
最新のブロックを送信する
全てのブロックに対してクエリを行う
全てのブロックを送信するノード1がブロックを生成し、送信する
最新のブロックを送信する
最新のブロックを送信する
最新のブロックを送信するノードが表示されているプロトコルに従う際の一般的な連絡の流れ。自動的にピアを発見するプロトコルは使用されていないので、ピアの場所（URL）は手動で追加しなくてはなりません。何らかの方法で、ユーザはノードを制御する必要があります。これはHTTPサーバを設定することで可能です。以下の方法で、ユーザはノードとの情報交換が可能となります。ノードを制御する最も単純な方法は、cURLなどを使用することです。curl http://localhost:3001/blocksノードは、2つのWebサーバを露出することに注意してください。1つは、ノードを制御するためのユーザ向けのサーバ（HTTPサーバ）、もう1つは、ノード同士のピア・ツー・ピア連絡用サーバ（Websocket HTTPサーバ）です。
（上から下、左から右の順）
注釈：
ブロックチェーン
HTTPインターフェース、ノードの制御用
Websocketインターフェース、他のノードとのP2P連絡用NaiveChainの主なコンポーネントNavieChainは、デモンストレーションおよび学習目的で作成されました。このブロックチェーンには「マイニング」アルゴリズム（プルーフ・オブ・ワークのプルーフ・オブ・ステーク）は含まれていないので、パブリックネットワークで使用することはできませんが、ブロックチェーンを動かすための基本的な機能は実装されています。技術的な詳細を知りたい方は、GitHubレポジトリをご覧ください。
