<p><a href="http://elm-lang.org/blog/Blazing-Fast-Html.elm" rel="nofollow" title="" class="ext-link">Blazing Fast HTML – Virtual DOM in Elm</a> by <a href="http://evan.czaplicki.us/" rel="nofollow" title="" class="ext-link">Evan Czaplicki</a></p><p>新たな<a href="https://github.com/evancz/elm-html" rel="nofollow" title="" class="ext-link">elm-html</a>ライブラリでは、HTMLとCSSをElmで直接使用できます。FlexBoxも使ってみたいし、既存のスタイルシートも使い続けたいですか？　Elmは使いやすくなり、処理が<em>速く</em>なりました。例えば、<a href="http://evancz.github.io/elm-todomvc/" rel="nofollow" title="" class="ext-link">TodoMVC</a>アプリを再作成する場合、Elmの<a href="https://github.com/evancz/elm-todomvc/blob/master/Todo.elm" rel="nofollow" title="" class="ext-link">コード</a>はとても単純で、<a href="https://evancz.github.io/todomvc-perf-comparison" rel="nofollow" title="" class="ext-link">事前のベンチマーク</a>でも、他の人気ライブラリに比べ処理速度が極端に速いという結果が出ています。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2014/08/sampleResults.png" width="500" height="392" class="alignnone size-full wp-image-930"></p><p><a href="https://github.com/evancz/elm-html" rel="nofollow" title="" class="ext-link">elm-html</a>とMercuryは、どちらも<a href="https://github.com/Matt-Esch/virtual-dom" rel="nofollow" title="" class="ext-link">virtual-dom</a>プロジェクトを基にしているので、パフォーマンスが優れています。この記事では、前半で“仮想DOM”とは何か、<b>純粋性</b>と<b>不変性</b>によっていかに処理速度が上がるかということについて詳しく検証します。この検証によって、なぜOm、Mercury、Elmがベンチマークでこのような素晴らしい数字を出したかが分かるでしょう。</p><p>パフォーマンスは人を引きつける良い材料ですが、本当の利点は、このアプローチによりコードが読みやすく維持しやすいものになることです。要するに、再利用可能なHTMLウィジェットを作成し、共通パターンを抽象化するのが、かなり簡単になるのです。そのため、大きなコードベースを使う人はきっと仮想DOMアプローチに興味を持つでしょうね。</p><p>このライブラリは、Elmの使用を考えていた人たちにとっても朗報です。つまり、Elmも使える上に、使い慣れたCSSとデザイナ／ディベロッパのワークフローも使い続けられるということです。かつてないほど簡単に、プロジェクトでElmの効果を得ることができます。では、実際に見てみましょう。</p><p>このライブラリは“仮想DOM”を基にしています。DOMを直接触るのではなく、フレームごとにDOMの抽象化バージョンを構築します。求めるものを簡単に表現するためにノード<code>node</code>関数を使います。</p><p>これにより、タグ、HTML属性のリスト、CSS特性のリスト、子要素のリストを特定できます。例えば、ノード<code>node</code>を使って、ユーザの写真や名前を表示するプロフィール<code>profile</code>ウィジェットを構築することができます。</p><p>クラスを設定すると、すべてCSSでスタイル付けされます。Elmのモジュールシステムと組み合わせると、共通パターンの抽象化とコードの再利用が簡単になります。全APIと参考文献については<a href="http://library.elm-lang.org/catalog/evancz-elm-html/latest/" rel="nofollow" title="" class="ext-link">ここ</a>で確認できます。さらなる具体例については、<a href="http://elm-lang.org/blog/Blazing-Fast-Html.elm#reusable-widgets" rel="nofollow" title="" class="ext-link">再利用可能なウィジェット</a>のセクションで検証します。</p><p>仮想DOMというと、処理速度がとても遅そうな感じがしますよね。フレームごとに新しいシーンを作成するのでしょうか？　実は、この技術は<a href="http://en.wikipedia.org/wiki/Scene_graph" rel="nofollow" title="" class="ext-link">ゲーム業界で広く使われていて</a>、2つの比較的簡単な技術を使えば、DOM更新が驚くほど高速で行えます。その技術とは差分検出と遅延です。</p><p>ReactはDOMをどのように変更する必要があるか把握するために“差分検出”の概念を広めました。<b>差分検出とは、現在の仮想DOMと新しい仮想DOMを比較して、違いを探すことです。</b>初めは少し手の込んだ方法に思えるかもしれませんが、処理はとても簡単です。まず、誰かが特定の<code>&lt;div&gt;</code>の色を変更したとか、新しい<code>&lt;div&gt;</code>を追加したというような違いのリストを作成します。すべての違いを見つけたら、その違いをインストラクションとして使用して、DOMを変更します。<a href="https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame" rel="nofollow" title="" class="ext-link">requestAnimationFrame</a>を使って、まとめてバッチ処理するのです。つまり、DOMを変更したり、処理速度が速いか確認したりするなどの手間をかかる作業を自分でやらなくてもいいのです。あなたは、読みやすく維持しやすいコードを書くことに集中できます。</p><p>このアプローチは、Elmに最適な方法でHTMLとCSSを完全にサポートする明確な方法を切り開きました。しかも、Elmは既に純粋性と不変性という優れた機能を備えており、それらは差分検出を飛躍的に速くする最適化に必要不可欠なものです。</p><p>ReactとOmによって見出されたとおり、データが不変の場合は特に、差分検出を遅延させると、パフォーマンスを大幅に改善することができます。例えば、タスクリストを表示しているとしましょう。</p><p>しかし、恐らく何度更新しても変更しているタスクはないと思っていいでしょう。タスクが変更していない場合、ビューも変更していないはずです。このタイミングで遅延させるのが理想的です。</p><p>あらゆるフレームで<code>todoList</code>関数を呼び出すのではなく、<code>state.tasks</code>に変更があったかを確認するのです。変更がなければ、すべてをスキップできます。関数を呼び出す必要もありませんし、差分検出を行う必要もDOMを触る必要もありません。この最適化は安全です。なぜなら、Elmの関数は<a href="http://en.wikipedia.org/wiki/Pure_function" rel="nofollow" title="" class="ext-link">純粋</a>であり、データは<a href="http://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB" rel="nofollow" title="" class="ext-link">不変</a>だからです。</p><p>なので、最終フレームとして<em>リファレンス</em>で古い値と新しい値を比較し、todoListとstate.tasksが同じであるかを確認すればいいのです。非常に簡単ですし、同じであれば大抵の場合、遅延(lazy)関数は大量の作業を避けられます。これにより作業が大幅にスピードアップします。</p><p>Elmをしばらく使っている人であれば、あるパターンに気がつくでしょう。関数が純粋であることと、データが不変であることは、非常に重要だということです。これについては、<a href="http://elm-lang.org/blog/Interactive-Programming.elm" rel="nofollow" title="" class="ext-link">Elmでホットスワップ</a>と<a href="http://debug.elm-lang.org/" rel="nofollow" title="" class="ext-link">タイムトラベル・デバッガ</a>を読み、理解を深めてください。</p><p>このアプローチによって、再利用可能なウィジェットを驚くほど簡単に作ることができます。例えばユーザプロフィール一覧も、以下のように見事に抽象化できます。</p><p>ユーザ一覧を抜き出しHTMLを返しているプロフィール<code>profile</code>のウィジェットがありますね。このウィジェットはどこでも容易に再利用できますし、テンプレート言語とは違い、Elmでは柔軟にこうしたウィジェットを作ることができます。共通のウィジェットやパターン用のコミュニティライブラリを作ることも可能です。</p><p>複雑なスタイルを作りたい場合も、それらを抽象化し再利用することが可能です。以下の例では、どんなノード上でもミックスおよび一致が可能なフォント<code>font</code>と背景<code>background</code>を定義しています。</p><p>今や再利用可能なウィジェットを作り共通パターンを抽象化するのは極めて簡単なことですが、それをはるかに上回ることができるのです。</p><p>私が後にElmとなるプロジェクトに取り組み始めた当時、HTML誕生から約20年が経っていましたが、人々は垂直方向にセンタリングする方法を調べるために、ブログを3つ読み、Stack Overflowに上げられた質問を5つ参照しているような状況でした。私がElmで掲げた最初の目標は、GUIをゼロから見直すことでした。<b>もしやり直せるなら、ウェブプログラミングはどう変わるでしょうか？</b></p><p>この目標を追求するにあたり、<a href="https://github.com/evancz/elm-html" rel="nofollow" title="" class="ext-link">elm-html</a>には、非常に重要な2つの強みがあります。1つ目はHTMLとCSSにアクセスできるので、いつでも最新の機能をフルに利用できる点、そして2つ目は新たに抽象化を行うことができる点です。</p><p>つまり<b>HTMLとCSSは、よりよい抽象化のための基本的な要素になると言えます。</b>例えば、このライブラリを使ってElmのエレメント(Element)の抽象物を再作成することは可能でしょう。ですが何よりも重要なのは、モジュール形式でより見栄えのいいビューにするために、誰もが新しい方法で試すことができることです。Paul Chiusanoは<a href="http://pchiusano.github.io/2014-07-02/css-is-unnecessary.html" rel="nofollow" title="" class="ext-link">CSSに関する挑発的な記事</a>の中で、これについてとても上手に説明しています。</p><p>今も私のElmの目標は、一風変わった、ひねくれた視点からウェブプログラミングを見直すことです。その中で、HTMLとCSSが大きなステップであるという考えも100%支持しています。<a href="https://github.com/evancz/elm-html" rel="nofollow" title="" class="ext-link">elm-html</a>の可能性を見るのが楽しみです。</p><p>新しいアプローチにはつきものですが、「大規模なプロジェクトになったらどうなる？」という質問をまず最初に投げかけられます。一般的なアプローチはOmやFacebookのFluxを用いた大規模なアプリケーション設計と大体同じです。　<a href="https://gist.github.com/evancz/2b2ba366cae1887fe621" rel="nofollow" title="" class="ext-link">Elmでどう機能するか</a>については概要を紹介しましたが、近いうちに、より正式な形で文書や例を作成するつもりです。</p><p>これらの技術を発見し普及させたReactとOmに感謝します。私の理解に手を貸してくれたSebastian Markbage、David Nolen, Matt Esch、そしてJake Verbatenには特に感謝しています。</p><p>また、このライブラリのベースとなっている<a href="https://github.com/Matt-Esch/virtual-dom" rel="nofollow" title="" class="ext-link">virtual-dom</a> と<a href="https://github.com/Raynos/mercury" rel="nofollow" title="" class="ext-link">mercury</a>を作成したMatt EschとJake Verbatenにはもう一度感謝の意を送ります。Elmがあるのは彼らのおかげでです。</p>
