<p><a href="http://www.benjamintd.com/blog/spynet/" rel="nofollow" title="" class="ext-link">Teaching an AI to write Python code with Python code</a> （2016-07-06） by <a href="http://www.benjamintd.com/" rel="nofollow" title="" class="ext-link">Benjamin Tran Dinh</a></p><p><img src="http://www.benjamintd.com/blog/images/posts/lstm.png" alt="Mapbox Drive"></p><p>ここでは少しの間、自律走行車のことは忘れてください。物事は深刻になってきています。この記事では、独自のコードを書くマシンを作ることに的を絞って話を進めていきたいと思います。</p><p><del>GlaDoS</del> <del>Skynet</del> Spynetを使用します。</p><p>具体的に言うと、Pythonのソースコードを入力することで、自分でコードを書くように、文字レベルでのLong Short Term Memoryニューラルネットワークを訓練していきます。この学習は、TheanoとLasagneを使って、EC2のGPUインスタンス上で起動させます。説明が曖昧かもしれませんが、分かりやすく説明できるように頑張ってみます。</p><p>この試みは、<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" rel="nofollow" title="" class="ext-link">こちらの素晴らしいブログ記事</a>に触発され行うに至りました。皆さんもぜひ読んでみてください。</p><p>私はディープラーニングのエキスパートではありませんし、TheanoやGPUコンピューティングを扱うのも初めてです。この記事を皆さんが読むことによって、いかにこの取り組みが簡単であるかを証明できたらと思います。</p><p>ニューラルネットワークは機械学習アルゴリズムの一種で、インプットを人工的なニューロンのレイヤを通して処理し、アウトプットを生成します。期待されるアウトプットとネットワークの出力結果を比較し、ニューロン間での重みを変更することで結果ができるだけ近づくようにする、というやりかたで学習が行われます。計算には大量の行列の乗算が含まれるのですが、GPUはこれらを高速で処理する能力にたけています。そのため、近年のGPUコンピューティングの進歩によって、ディープラーニングは高い評価を受け、より効率的になってきています。</p><p>多くの研究では、学習が容易で、特定のタイプのタスクに効率的であるネットワークアーキテクチャを設計しています。例えば、畳み込みニューラルネットワークのようなフォードフォワードアーキテクチャは、画像認識処理を行うのに適しています。ここでは、シーケンスを処理するのに適している<a href="https://en.wikipedia.org/wiki/Recurrent_neural_network" rel="nofollow" title="" class="ext-link">リカレントニューラルネットワーク(RNN)</a>について話をしていきます。RNNの中でも高い評判を得ているアーキテクチャの1つが、<a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" rel="nofollow" title="" class="ext-link">Long Short Term Memory (LSTM)</a>です。&lt;- LSTMで何ができるのか、そしてなぜこれが長いシーケンスを処理するのに適しているのか知りたい方は、この記事を読んでみてください。</p><p>ここでは、文字シーケンスでLSTMを使用していきます。何が起こるかというと、ネットワークに文字シーケンスを与えると、ネットワークが次にどの文字がくるかを推測するのです。例えば、インプットが”chocol”であれば、次にくる文字は”a”であると予測します。LSTMの素晴らしいところは、長期依存が学習できるところにあります。例えば、文字列”(“があった場合、LSTMは閉じ丸括弧が必要になるということを学習することができます。また、それよりも前に何千もの開き丸括弧があっても同様です。</p><p>前述した通り、GPUはこのようなニューラルネットワークを素早く学習させることができます。GPUコンピューティング向けで最も評判を得ているフレームワークは、Nvidiaが提供している<a href="https://ja.wikipedia.org/wiki/CUDA" rel="nofollow" title="" class="ext-link">CUDA</a>です。ほとんどのディープラーニングのライブラリには、CUDAに対するいくつかのインターフェースが用意されており、GPUの計算を実行することが可能です。私がPythonでコードを書く際に選択するのは<a href="http://deeplearning.net/software/theano/" rel="nofollow" title="" class="ext-link">Theano</a>です。テンソルの計算をする場合に、とても効率の良いライブラリです。Theanoに加えて利用するのが<a href="https://github.com/Lasagne/Lasagne" rel="nofollow" title="" class="ext-link">Lasagne</a>です。ニューロンのレイヤを定義するのが容易で、LSTMネットワークを設定するためのシンプルなAPIを持つPythonのライブラリです。</p><p>コードを実行するために、g2.2xlargeインスタンスを開始し、必要なものを全てインストールします。インストラクションの大部分は<a href="http://markus.com/install-theano-on-aws/" rel="nofollow" title="" class="ext-link">こちら</a>で見つけることができるので、書き換える必要はありません。また、Notebookを用いてコードを書くために、<a href="https://github.com/Lasagne/Lasagne" rel="nofollow" title="" class="ext-link"><strong>Lasagne</strong></a>、<a href="https://ipython.org/" rel="nofollow" title="" class="ext-link"><strong>IPython</strong></a>、<a href="http://jupyter.org/" rel="nofollow" title="" class="ext-link"><strong>Jupyter</strong></a>をインストールしました。結果のAMI（残りのコードも含む）は、AWSのN.Californiaゾーンから<code>ami-64f6b104</code>のIDを使って入手することができます。詳しいAWSアカウントの設定方法、AMIの開始方法は、Amazonの<a href="http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html" rel="nofollow" title="" class="ext-link">ドキュメントページ</a>をご確認ください。</p><p>コードを書くのには、Jupyter Notebookを使います。ノートパソコンで起動させるために、Notebookのサーバの設定を許可するbashスクリプトを作成しました。直接ブラウザにコードを書くことができ、インスタンスでの起動が可能になります。<a href="http://efavdb.com/deep-learning-with-jupyter-on-aws/" rel="nofollow" title="" class="ext-link">ここに記載されているインストラクション</a>に従って作成しました。スクリプトの24行目を自分のパスワードに書き換えることを忘れないでください。</p><p>Pythonコードを書くことをニューラルネットワークに学習させるために、まず、可能な限り入手可能なPythonコードを探します。幸いにも、Pythonのオープンソースプロジェクトが多く存在します。</p><p>以下に挙げるライブラリの、ファイル名に<code>test</code>が含まれない<code>.py</code>ファイルを連結させました。：Pandas、NumPy、SciPy、Django、scikit-learn、PyBrain、Lasagne、Rasterio。これにより、27MBの単一のファイルを得ました。これは、学習データとして程よい容量ではありますが、より大きい方が最適であることは確かです。</p><p>ここでようやくPythonコードを用いてLSTMネットワークを学習させるコードを書くことができます。<a href="https://github.com/Lasagne/Recipes/blob/master/examples/lstm_text_generation.py" rel="nofollow" title="" class="ext-link">Lasagne receipe</a>にコードが掲載されていますが、学習データは別として、ほんの少し変更する点があります。</p><p>ネットワークは学習するのに数時間かかります。cPickleを使ってネットワークの重みを保存します。</p><p>その後、我々の小さなSpynetの出力する数行のコードを楽しむことができるのです。</p><p>Spynetはすでに疲れ切っているようですね。</p><p><code>__init__</code>関数を定義し、コメントを追加しています。</p><p>NumPyを使うことを、 -ほぼ- 学びました。</p><p>…そして、ほぼ正しい配列（小さな構文エラーが1つありますが）を定義することも学びました。複数行にわたるコードについて、正しいインデントがされていることに注目してみてください。</p><p>独自にコードを書くコンピュータとはかけ離れているかもしれませんが、読み込んでいるコードの例から全てを学習しなければならないネットワークとして、そう悪くありません。文字から次に何の文字がくるかを推測するということだけを考えた場合は、特にです。インデントはほぼ正しく、丸括弧と角括弧を閉じることを忘れませんでした。</p><p>しかしながら、docstringテキストとコードが混在しており、アウトプットには実際にコンパイルできるであろう関数を見つけることができませんでした。<a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" rel="nofollow" title="" class="ext-link">この</a>記事に掲載されているネットワークのように大きなネットワークを学習させることで、これは改善されるでしょう。加えて、学習を止めても損失は依然として悪化していきました。ですから、もう少し待っていれば、アウトプットが改善する余地はまだありました。</p><p>学習に使用した完全なスクリプトは<a href="https://gist.github.com/benjamintd/2de2e9a156fe619dbdad762fe1cf84e1" rel="nofollow" title="" class="ext-link">こちら</a>で確認することができます。AMIを自由に使って、改善を試みてください！</p>
