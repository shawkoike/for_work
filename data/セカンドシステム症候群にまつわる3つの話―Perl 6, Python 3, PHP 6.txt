<p><a href="http://blog.brentlaabs.com/2015/05/three-tales-of-second-system-syndrome.html" rel="nofollow" title="" class="ext-link">Three Tales of Second System Syndrome</a> （2015-05-03） by <a href="http://www.brentlaabs.com/about" rel="nofollow" title="" class="ext-link">Brent Laabs</a></p><p>この10年間で、3つのメジャーなプログラミング言語が、それぞれPerl 6、Python 3、PHP 6へと大幅なバージョンアップに乗り出しました。ところが、Unicodeのサポート問題などの表面的な類似点があるにも関わらず、根本的に異なった展開を見せています。</p><p>今年Perl 6.0.0が公式にリリースされるのに伴い、いま一度振り返って、リリース後の展開について考えてみるのに、今はちょうどいいタイミングでしょう。</p><p>これを書いていることが自分でも信じられないのですが、PHPから学ぶべきことがあるかどうか見ていきましょう。Zend TechnologiesのCEOであるAndi Gutmans氏は2008年2月の<a href="http://www.itjungle.com/tlb/tlb021208-story09.html" rel="nofollow" title="" class="ext-link">インタビュー</a>でこう答えています。</p><p>これに対し、PerlBuzzのAndy Lester氏は以下のように<a href="https://web.archive.org/web/20140802224335/http://perlbuzz.com/2008/02/tell-us-how-to-do-it-andi.html" rel="nofollow" title="" class="ext-link">答えています</a>。</p><p>この予想がどう転がったでしょうか？　そうです、6年以上にわたる開発の末、私たちは結局<a href="https://philsturgeon.uk/php/2014/07/23/neverending-muppet-debate-of-php-6-v-php-7/" rel="nofollow" title="" class="ext-link">PHP 6を見ることはかないませんでした</a>。Perl 6やPHP 6の開発にどれだけ時間がかかったかを見ていると、6という数字は失敗の象徴のような気がしてきました。そこでPHP 6をやめて、名前をPHP 7に変えれば全て解決！　これは実際に6から7のRFC上で行われた推測の一例です（ブラウザに被害が降りかかる前に誰かES6仲間へ伝えた方がいいですよ）。</p><p>しかし、ここでバージョン番号を変える最大の意図は、PHPの次のメジャーバージョンアップに含まれる新機能が削減されたことの正当化です。<a href="http://www.phpclasses.org/blog/post/242-PHP-7-Features-and-Release-Date.html" rel="nofollow" title="" class="ext-link">PHP 7は以下を加える予定です</a>。</p><p>編集: このブログや<a href="https://news.ycombinator.com/item?id=9484939" rel="nofollow" title="" class="ext-link">Hacker News</a>を閲覧している人は、上記の機能リストは適切でないところから引用され、PHP 6の大半は5.3に取り込まれたと指摘してきました。ジェネレータの改良や、<code>??</code>のような新しい演算子を含め、<a href="https://blog.engineyard.com/2015/what-to-expect-php-7" rel="nofollow" title="" class="ext-link">PHP 7の機能についてよくまとめられているこちらの記事</a>を見てください。しかしながら、同じような分析のほとんどに当てはまるのが、「最終的な結果は極めて少ない後方互換性のない変換であり、約束されていたUnicodeの改良を含む改訂ではない」ということです。</p><p>一方で6.0.0のリリースに15年かかったPerl 6は<em>今年</em>のクリスマスにリリースが予定されています。リリース時期については心許ない引用元が幾らかありますが、とても古いものにはなりますが「2027年にPerl 6のリリース準備ができている」という<a href="http://blogs.perl.org/users/steven_haryanto/2013/03/dont-wait-for-perl-6-to-build-your-product-on.html" rel="nofollow" title="" class="ext-link">このブログの予想</a>をリンクしたいと思います。</p><p>現状では、Perl 6は以下の新しい機能が予定されています。</p><p>正直に言いますと、上記に挙げた機能はほんの一部でしかありません。サブルーチンシグネチャやスマートマッチングといった、Perl 5のコア機能としてすでに作られているものもここからは除かれています。そしてこれらは全て、<em>現在</em>動いている機能です。</p><p>気味が悪いことに、Andyが軽々しく予言した内容は全て現実となりました。最終的にPerl 6はリリースされ、PHPは、いまだに古いバージョンのまま存在しています。繰り返し言いますが、<em>Perl 6はリリースされた</em>のです。問題なく動作していますし、今年にはメジャーバージョンアップを控えています。そのバージョンには、もともと約束されていたものよりも、多くの機能が存在しています。</p><p>しかし今もなお、Perl 6に疑念を抱く人たちが存在します。実際、Perl 6はPerl 6と名乗っても構わないけれども、<a href="http://blogs.perl.org/users/ovid/2013/02/perl-7.html" rel="nofollow" title="" class="ext-link">Perl 5の次のバージョンはPerl 7であるべきだ</a>と、まじめに言う人々もいるのです。そのとおりです。この考え方は、一般的なPerlコミュニティでは受け入れられませんでしたが、PHPはその1年後に実際にバージョンを1つスキップしました。私自身は、これはPHPがPerlの最悪な考え方を真似したという、もう1つの例だと考えています。</p><p>一方で、Pythonのグループは、健全なPython 3を維持してきました。そしてアップデートし続けるため、互換性のない変更は最小限にとどめたのです。Python 3は2009年の初め、つまり6年前にリリースされた言語です。</p><p><a href="https://docs.python.org/release/3.1.2/whatsnew/3.0.html" rel="nofollow" title="" class="ext-link">Python 3の新たな機能</a>を以下に挙げましょう。</p><p>では、この機能を入れた結果は、どうなったのでしょうか？　私のMacBookは完全にアップデートされているのですが、そのMacBookにプリインストールされているPythonのバージョンは、2.7.6です。一方、Ubuntuにインスト－ルされているバージョンは少なくとも3.4.0です。確かに、OSSアップデートの点において、Appleの対応はひどいと言われています。Python 3に関しては、XCodeにプリインストールするため、Appleの中にいる誰かが6年間十分にPythonのことを気に懸けたのだろうと、あなたは思っているもしれませんが、結局、Pythonは<a href="https://news.ycombinator.com/item?id=3559990" rel="nofollow" title="" class="ext-link">命取りになる</a>GPLv3ライセンスを持っていないのです。</p><p>有効性とは、開発者に選ばれることの裏返しでもあります。Python 3はその点で、よい話がありません。<a href="https://blog.newrelic.com/2014/01/21/python-3-adoption-web-apps/" rel="nofollow" title="" class="ext-link">昨年</a>と<a href="http://lwn.net/Articles/640181/" rel="nofollow" title="" class="ext-link">今年4月の統計</a>を見てみると、開発者によるPython 3の選択率は非常に低くなっています。あろうことか、Pythonコミュニティ内の23パーセントもの人々さえもが、<a href="https://wiki.python.org/moin/2.x-vs-3.x-survey" rel="nofollow" title="" class="ext-link">いまだにPython 3は失敗だったと考えている</a>のです。言語としては明らかに改善されているにもかかわらず、失敗作という評判を覆すのは難しいでしょう。</p><p>つまり、今まで書いてきたことをまとめると、<a href="http://ja.wikipedia.org/wiki/%E4%BA%BA%E6%9C%88%E3%81%AE%E7%A5%9E%E8%A9%B1#.E3.82.BB.E3.82.AB.E3.83.B3.E3.83.89.E3.82.B7.E3.82.B9.E3.83.86.E3.83.A0.E7.97.87.E5.80.99.E7.BE.A4.EF.BC.88.E7.AC.AC.E4.BA.94.E7.AB.A0.EF.BC.89" rel="nofollow" title="" class="ext-link">セカンドシステム症候群</a>は重要な問題だと言えるでしょう。しかし問題はそれだけではありません。プログラミング言語の大幅な修正を達成するのは難しいことですが、そのような互換性のない変更を加えるのと同じように、その新しいバージョンが世間に幅広く<em>受け入れられる</em>ことも困難です。<em>セカンドデプロイメント症候群</em>は、新たなシステムを最初に作るのと同じくらい、既存の言語に大幅な修正を加えることは困難を伴うものであるということを示しています。</p><p>その結果、セカンドシステムを根本的に異なる方法で構築する3つのソフトウェアコミュニティがあるのです。PHPは<a href="http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/" rel="nofollow" title="" class="ext-link">ひどいデザインがぎゅうぎゅう詰めになっている状態</a>なので、使いやすくなることを願うばかりです。しかしPHPのコミュニティは実質的にPHP 6を諦めることを決め、PHP 6の第一の問題であるUnicodeサポートと関係ない、追加の変更だけを提供しています。Pythonは、達成可能な変更をいくつか加えることを決め、それを3年以内に実行に移し、出荷しました。本当に役に立つ改良があったにもかかわらず、ごくわずかの人しか使っていません。</p><p>Perlは“一気に全てを壊す”というビジョンにこだわることを決め、バージョンアップに15年の年月を費やしています。これはHTML 5の開発期間に匹敵する長さです。この間にデザインは進化し続け、失敗しがちだったコードのマルチスレッド化を簡単にするといったような、より現代的なニーズを組み込んできました。“決定的な仕様がない”ことに関する不満は多くありますが、仕様は最後まで完成させるべきではないということを、苦い経験から学んでいます。</p><p>15年もの年月を開発に費やすなんてバカげている、と言うのは簡単ですが、他のスクリプト言語のセカンドシステムを見ると、Perl 6はこのような大がかりな転換を10年以内に成し遂げようと考えていなかったのは明らかです。この転換がPerlにうまく働くかということは、まだはっきりしていません。</p><p>Perl 5のバックグラウンドからPerl 6を試した人はほぼ誰でも、Perl 6の転換をとても気に入りますが、大抵はその後、“ここまで<em>遅い</em>必要はないんじゃないか？”と思いはじめます。Perl 6の最適化は未熟ではありませんが、いまだに未完成です。一般的に言えば、評価はプラスではありません。そして他の言語で導入されたような互換性のない変化とは異なり、Inline::Perl 5は同じプログラム内で複数のバージョンのPerlが共存することを許します。</p><p>これで十分でしょうか？　結論を出すのは早すぎます。Perl 5 は、何世代も前のプログラマが書いたシェルスクリプトからのテキスト出力に変更を加えながら、永遠にとは言わないにしても、最低でもあと5年は続きます。Perl 6は遍在性や年代もののコード、言語の親しみやすさをめぐって苦しい戦いをすることになるでしょう。</p><p>どのくらい受け入れられるかは、Perl 6が次に直面する大きな試練です。今から6年後、減少し続けるPerlユーザの間で、Perl 5がまだ絶大な支持を集めている可能性は大いにあります。結局、Pythonも<a href="http://en.wikipedia.org/wiki/TIOBE_index" rel="nofollow" title="" class="ext-link">同じ状況</a> にあるのかもしれません。Perlは、すでに下向きになっている傾向を覆す必要があります。これはそもそも、少なくとも部分的には、Perl 6のあり得ないほど長い開発期間がもたらしたものです。</p><p>Perl 6の成功を確実にするためにできる最良のアドバイスは、開発者がPerl 6で<strong>コードを書き始めること</strong>です。それも、今すぐに。Perl 6は十分に安定しています。リリースから1年以内の利用可能な全てのモジュールは、人々に新しいバージョンについて議論を巻き起こすことになるでしょう。状況を冷静に見つめ、効率的に仕事をこなせば、多くの議論に勝つことができます。</p><p>その後は、つらい仕事になるでしょう。コードを配布するにあたり、十分な場所をデプロイしましたか？　より多くの場所をデプロイするにあたり十分なコードは書かれていますか？　aptやHomebrewのようなパッケージ管理システムはユーザベースのブートストラップを助けています。Perl 6が勝利するためには、そのようなキラーアプリを手に入れなくてはなりません。</p><p>今のところは、これは大きな賭けです。ポーカーの用語で例えれば、Python 3はコール、PHP 6はフォールド、Perl 6はオールインでしょう。圧倒的な改良のためには、わずらわしいアップグレードを行う価値があると人々が考えるなら、Perl 6の嘘みたいに長い開発プロセスが、皆に受け入れられるセカンドシステムを作るのに適しているでしょう。</p><p>この結果は、6年以内にお伝えしましょう。</p>
