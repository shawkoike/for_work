<p><a href="https://keylocation.sg/our-tech/debugging-nodejs-in-docker-using-node-inspector" rel="nofollow" title="" class="ext-link">Debugging node.js in Docker using Node Inspector</a> （2016-05-28） by <a href="https://twitter.com/rarkins" rel="nofollow" title="" class="ext-link">Rhys Arkins</a></p><p>本記事では、Node.jsのDockerコンテナをライブラリの<a href="https://github.com/node-inspector/node-inspector" rel="nofollow" title="" class="ext-link">Node Inspector</a>を使ってデバッグする便利な方法について説明します。コンテナを扱う際には少し違った考え方をすることがいかに重要かということを学べる、非常に興味深いケーススタディになりました。</p><p>お気に入りのIDEを使ってNode.jsをデバッグすることも可能ですが、データやコードを徹底的に調べようとするなら、ブラウザベースの方法が相変わらず便利です。そこで、Node Inspectorを使えるようにしたかったのです。</p><p>この目的を達成する方法は、理論的にはいくつかの選択肢があります。このうち、うまくいく方法をご紹介する前に、まず私が選ばなかった方法、あるいはうまく機能しなかった方法について説明したいと思います。</p><p>これを行う方法で最も明快なものは、Node.jsの同じコンテナ内でNode Inspectorを実行することです。しかし、次の2つの理由から、私はこの方法を好みません。</p><p>こうした理由から、本番環境でのコンテナの開始方法が開発環境と似たものになるよう、「<code>node-app</code>コンテナの開発環境での開始方法に変更が必要」という解決策を方法を除外しようと考えたのです。</p><p>これが次のアイデアでした。Node Inspectorを<code>node-app:5858</code>に接続するためにDocker内のDNSを使うというものです。これは問題ないはずです。ただし、残念ながらNode Inspectorは実際、リモートでは動きません。そのため、これはできません。<code>debugger</code>コンテナと<code>node-app</code>コンテナは別々のIPアドレスであるため、うまく動かすことができなかったのです。</p><p>次に検討したのは以前に使ったことのある方法で、全てのコンテナが”ホスト”のネットワークを使って実行するというものでした。そうすると、Node Inspectorを実行する際、node.jsのプロセスをデバッグするために、簡単に<code>localhost:5858</code>に接続することができます。しかし、ホストのネットワークにはいくつかの欠点があるため、デバッグとは関係ない理由ではありますが、これも避けることにしました。</p><p>実は、このようなタイプのネットワークの存在自体、まさにこのNode Inspector問題の解決策を探して初めて知りました。この方法を実際に使っている例はGitHubの@seelio氏で、リポジトリは<a href="https://github.com/seelio/node-inspector-docker" rel="nofollow" title="" class="ext-link">seelio/node-inspector-docker</a>です。</p><p>「コンテナ」のネットワーキングという言い方は少々紛らわしいので、ここではseelioさんのdocker-compose.ymlの例を挙げます。</p><p>ご覧のとおり、ここで重要なトリックは<code>network_mode: "container:node-app"</code>です。これは、基本的に「Node InspectorコンテナはNode.jsコンテナのネットワークに寄生できる」ということを意味し、結果として「Node.jsアプリがバインドされれば、Node Inspectorが<code>localhost:5858</code>に接続できる」ということを意味します。ここで注意すべき重要な点は、その際Node Inspectorのポート（例えば、デフォルトなら8080）をNode.jsコンテナのコンフィギュレーションで設定する必要があるということです。Node Inspectorコンテナのコンフィギュレーション上ではなくです。例えば、次のとおりです。</p><p>この方法を採ったところ、2つの問題がありました。1つ目は、Docker Composeのバグの<em>ようなのです</em>。というのは、このタイプのコンフィギュレーションを持つコンテナをコールドスタートしようとした際に、以下のエラーが出たからです。</p><p><em>訳<br>
エラー：「デバッガ」サービスは、存在しないコンテナ「node-app」のネットワークスタックを使用しています。</em></p><p>デバッガ用に別々の<code>docker-compose.yml</code>ファイルを使うことにより、これを打開することもできますが、それでも1つ端末の問題が残っています。開発におけるワークフローの一部として、Node.jsの<code>node-app</code>コンテナは再起動されます。残念ながら、どういうわけかこれが同時にNode Inspectorからの寄生ネットワークを「壊して」しまいました。つまり、node-appが再起動するたびに、Node Inspectorを再起動しなければならなくなってしまったのです。これはできないことはないのですが、私としては、あまりやりたいことではありませんでした。</p><p>最終的な解決策は、後になってみると、非常に明快なものでした。本番環境のコンテナ（Node.js、postgresなど）は全て、ブリッジネットワーキングを使っていますが、だからと言ってNode Inspector用のホストネットワーキングを使えないというわけではありません。</p><p>デバッガのためのDocker Composeの設定は、以下のとおり、プロジェクト固有の設定がほとんどなので、とにかくシンプルです。</p><p>求められるのは、node-appコンテナにマッピングするポート5858を追加するというちょっとしたトリックです。これは、Node Inspectorからはホストのポート5858として見えるようにするためです。</p><p>注意すべき重要なことは以下のとおりです。</p><p>本記事では、主にプロジェクト固有のところに関しては、まだ詳細まで説明しきれていません。もしご不明な点がございましたら、ご質問くださればより詳細にお答えすることができます。</p>
