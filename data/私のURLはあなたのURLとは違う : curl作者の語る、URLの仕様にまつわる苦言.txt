<p><a href="https://daniel.haxx.se/blog/2016/05/11/my-url-isnt-your-url/" rel="nofollow" title="" class="ext-link">MY URL ISN’T YOUR URL</a> （2016-05-11） by <a href="https://daniel.haxx.se/blog/author/daniel/" rel="nofollow" title="" class="ext-link">Daniel Steinberg</a></p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/06/URLs.jpg"><img src="http://postd.cc/wp/wp-content/uploads/2016/06/URLs.jpg" alt="URLs" width="1388" height="570" class="alignnone size-full wp-image-7010"></a></p><p>1996年にcurlプロジェクトの先駆けとなるhttpgetを始めたとき、私は初めてURLパーサを書きました。当時はまだ、ユニバーサルアドレスは<a href="https://www.ietf.org/rfc/rfc1738.txt" rel="nofollow" title="" class="ext-link">URL</a>:<em>Uniform Resource Locators</em>と呼ばれていました。その仕様は1994年にIETFによって発行されたものでした。この”URL”という用語からインスピレーションを得てツールとプロジェクトに命名したのが<a href="https://curl.haxx.se/" rel="nofollow" title="" class="ext-link">curl</a>でした。</p><p>URLという用語は後に事実上、<a href="https://www.ietf.org/rfc/rfc3986.txt" rel="nofollow" title="" class="ext-link">URI</a>:<em>Uniform Resource Identifiers</em>(2005年発行)に変わりましたが、「オンラインでリソースを指定する文字列のための構文と、そのリソースを得るためのプロトコル」という、基本的な点は変わりませんでした。curlでは、この構文仕様RFC 3986の定義に従う”URL”を許容するとうたっていますが、それは厳密には正しくありません。その理由を、これから説明します。</p><p>また、この仕様の仲間に、<a href="https://www.ietf.org/rfc/rfc3987.txt" rel="nofollow" title="" class="ext-link">IRI</a>:Internationalized Resource Identifiersのために発行されたRFCがありました。IRIは基本的にはURIですが、非ASCII文字列の使用が許可されます。</p><p>後に、<a href="https://whatwg.org/" rel="nofollow" title="" class="ext-link">WHATWGコンソーシアム</a>が独自の<a href="https://url.spec.whatwg.org/" rel="nofollow" title="" class="ext-link">URL仕様</a>を作成し、これは基本的にはURIとIRIの書式と概念を、（驚くようなことではありませんが）ブラウザを強く意識して組み合わせたものでした。WHATWGが<a href="https://url.spec.whatwg.org/#goals" rel="nofollow" title="" class="ext-link">表明した目標</a>の1つは、<em>「現時点の実装にRFC3986とRFC3987を沿わせ、その過程の中で廃止していく」</em>ということです。URIとIRIという用語は混同しやすく、きちんと理解している人は誰もいない（多くの人は、その存在すら知らない）という、彼らの主張は正当でした。</p><p>WHATWGの仕様は、「何を許容するかについて寛容であれ、ユーザの意図を推察してそれを満たせるよう尽力せよ」という、古き良きブラウザの信条に従っています。（今では誰もが、この場合には<a href="https://en.wikipedia.org/wiki/Robustness_principle" rel="nofollow" title="" class="ext-link">ポステルの法則</a>は間違ったやり方だと知っていますが）。つまり、スラッシュ、埋め込まれた空白、それに非ASCII文字を、あまりにも多く処理しなければならないのです。</p><p>私の考えでは、この仕様もまた読み辛く、使いにくいものです。その理由は、この仕様は構文や書式の説明は少ないのに、<strong>ある構文解析アルゴリズムを強制する</strong>からです。試しに、この仕様ではURL内のホスト名にドットが続くとどうなのか考えてみれば、私の主張がお分かりになると思います。</p><p>このような標準と仕様に加えて、ブラウザには「アドレスバー」（UIの一部で、他の名前で呼ばれることもある）があり、ユーザはこれを使って、ありとあらゆる変な文字列を入力することができ、その文字列がURLに変換されるのです。アドレスバーに”http://localhost/%41″と入力するとパーセントエンコーディングされた部分が’A’に変換されます（16進数の41はASCIIでは大文字のAだからです）が、”http://localhost/A A”と入力すると、実際には、”/A%20A”（パーセントエンコーディングされた空白が入る）がHTTP GET要求で送信されます。私がこの点についてふれた理由は、人は普通、入力が可能なら、それを”URL”と考えがちだからです。</p><p>ここまでは基本的に、現在までに使ってきた仕様と標準についての私の（歪んだ）考えです。ここで現実性を考えて、<strong>私のURLがあなたのURLと違う</strong>とどんな問題が起こるのかについて考えてみましょう。</p><p>もっと具体的に言うなら、どうやってURLを書けばいいのでしょうか。どんな構文を使うのでしょうか。</p><p>WHATWGの仕様が犯した最大の過ち（そして、「<strong>間違っている</strong>のは彼らだ」という強烈な信念をもって、私が現在の形の仕様に反対する理由）の1つは、彼らがURLを「自分たちが取り組んで規定する、自分たちのもの」であると信じ、URLをブラウザ、HTML、およびアドレスバー向けに限定して考えていることだと思います。もちろん、WHATWGのメンバーはほとんどの人々が使うブラウザの背後にある大企業であり、URLはブラウザによって広く使われていますが、URLには、それより<strong>ずっと</strong>大きな目的があります。</p><p>URLに対するWHATWGの考え方はブラウザ以外では広く受け入れられていません。</p><p>プロトコルやウェブの経験を特に持たない一般のユーザは、URLとは何かと問われると、何と答えるでしょうか？　何年も前、ブラウザにURLがはっきりと表示されていた頃には、リストで://（コロン-スラッシュ-スラッシュ）を目にすることが多かったと思われます。それを見れば、その文字列をURLだと思うのです。</p><p>ユーザだけではありません。ユーザの代わりにURLを検出して、そのURLに対する操作を可能にしてくれるEメールクライアント、ターミナルエミュレータ、テキストエディタ、Perlスクリプト、その他のものが世界中に既に無数に存在します。ブラウザ内でURLを開いたり、生成したHTML内でクリック可能なリンクにURLを変換したり、多くの操作があるでしょう。そういった膨大な量のスクリプトやプログラムが、URLの目印としてコロン-スラッシュ-スラッシュ文字列を使うのです。</p><p>WHATWGの仕様では、スラッシュ-スラッシュは<em>ひとつ</em>とみなす必要があり、構文解析プログラムは無限にスラッシュを許容しなければならないのです。”http:/example.com”と”http:////////////////////////////////////example.com “はどちらも問題ありません。しかし、RFC3986や多くの人はそうは思っていないようです。Web関連の仕事をしている人も中にいるのですが、最近これについて話した人の多くは、URLにはスラッシュが2つあると言ったり、思ったり、信じたりしているのです。この記事の上部にあるGoogleの画像検索のスクリーンショットを見てください。”URL”の画像検索の結果をスクリーンショットにしています。</p><p>URLに2つスラッシュがあるのは分かっています（file:パスの場合のURLはスラッシュが3つありますが、ここでは無視しましょう）。1つでもなく、3つでもなく、2つなのです。しかし、WHATWGでは異を唱えています。</p><p>“file:以外のURLに3つ以上のスラッシュを許容する根拠は本当にあるのでしょうか？　　”(WHATWGに対するいら立ちを質問にしました)。</p><p><a href="https://github.com/whatwg/url/issues/118#issuecomment-217866196" rel="nofollow" title="" class="ext-link">“事実上、すべてのブラウザが3つ以上のスラッシュを許容している”</a></p><p><strong>ブラウザは仕様どおりに実装されているので、仕様にはそう書かれているはず。</strong></p><p>多くのブラウザが3つのスラッシュを許容していないことを指摘した後も、納得できる説明はされていません。上のスレッドは勉強になると思いますよ。</p><p>curlプロジェクトでは、スラッシュが2つではない”URL”をどのように扱うべきなのか、最近になって話し始めました。実際にサーバによっては、2つではないURLを<a href="https://tools.ietf.org/html/rfc7231#section-7.1.2" rel="nofollow" title="" class="ext-link">Location:ヘッダ</a>で返し、ブラウザによっては許容しています。ブラウザの中にはスラッシュが2つではないURLを許容するものもありますが、curlでは許容していませんし、他の多くのライブラリやコマンドラインツールでも許容されていません。curlプロジェクトはスラッシュが2つ以外でも許容するべきなのでしょうか、それともスラッシュが2つ以外のURLは許容しないとするべきなのでしょうか。</p><p>空白文字（ASCIIコード32、16進数では0x20）はURLに含むことができません。送信したい場合は他の禁則文字を含む時と同じようにパーセントエンコーディングをします。パーセントエンコーディングとは、16進数のバイトの値の前に％を付けて表記する方法です。空白の場合は%20となります。つまり、構文解析プログラムがURLのテキストをスキャンした時、空白などの禁則文字に到達すればURLの最後であることが分かります。</p><p>大抵の場合ブラウザは見栄えのため、アドレスバーに全ての%20インスタンスを空白に変換してアドレスを表示します。しかし、アドレスバーに表示されたアドレスをクリップボードにコピーし、テキストエディタに貼り付けても、期待どおりに空白は%20として表示されます。</p><p>これが理由かは定かではありませんが、ブラウザがURLの一部として空白を許容する場合があります。例としては、HTTPレスポンスでリダイレクトを受信する場合などです。サーバからクライアントに渡す時にURLを含むLocation:ヘッダを使用します。この場合、ブラウザは問題なくURLの空白を許容し、%20と符号化し、次のリクエストを送信します。このことから、curlでもリダイレクトされた”URL”の空白を許容せざるを得なくなりました。</p><p>非ASCII言語もURLでサポートする必要はもちろんあります。特に、非西洋社会においては、IRI仕様では十分ではないことを理解しています。私はこれらにおける国際化（i18n）のエキスパートとは到底言えないので、他の人から聞いたことしか分かりません。しかし、アルファベット以外の文字を使用、タイプする場合でも”インターネットアドレス”をリソースに付けリンクとして使用できないといけません。</p><p>理想的な世界においては、i18nバージョンはユーザには見え、ユーザの見えないところでは、送受信を可能にするべくASCIIベースのバージョンに符号化されるのです。</p><p>国際化ドメイン名（IDN）では、非ASCII文字の名前の取り扱いができない通常のシステムネームリゾルバを使っても解決できるように、ドメイン名は”punycode”に変換されます。URIには国際化ドメイン名（IDN）はなく、IRIやWHATWG URLにはあります。curlでもIDNホスト名をサポートしています。</p><p>WHATWGでは、URLはUTF-8とされていますが、URIは単なるASCIIとしています。curlはパス部分に非ASCII文字があれば混乱しますが、ASCII文字のバイト値はパーセントエンコードしてリクエストとして送信します。すると、Windowsでは標準となっているUTF-8以外の方式で非ASCII文字が符号化された場合、”面白い”副作用が引き起こされます。</p><p>非ASCIIのバイト値をパーセントエンコードして送ると、サーバも同様にブラウザが許容できるようHTTPヘッダの中に非ASCIIバイトコードを入れて返します。ブラウザ以外のものは苦労してそれを処理しなければなりません。</p><p>問題や相違点の決定的なリストを書くというよりは、最近ぶち当たった多くの問題を挙げてみただけです。1つの場所に与えられた”URL”は”URL”として他の場所で必ずしも許容される、理解されるとは限りません。</p><p>curlでさえ最近では仕様書に厳密ではなく、”Webの互換性”のために少しずつ脱線してきています。</p><p>URLの統一された標準はなく、統一に向けた進捗も見られません。WHATWGの仕様も閉鎖的なグループで書かれていて、広いコミュニティを巻き込む試みもないため、統一に向けた取り組みとは言えません。</p><p><em>WHATWGのメンバーでもあるMozillaで働いて、WHATWGのURL仕様や関係のWHATWGに関係のある作業をしている同僚もいますが、ここに書いた内容に変わりはありません。IETFにも参加していて、RFC 1738やRFC 3986の著者との交友関係もありますが、それでも内容に変わりはありません。これはあくまでも私個人の意見であり、私個人のブログなのです。</em></p>
