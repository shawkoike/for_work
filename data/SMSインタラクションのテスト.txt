<p><a href="https://robots.thoughtbot.com/testing-sms-interactions" rel="nofollow" title="" class="ext-link">Testing SMS Interactions</a> （2015-07-27） by <a href="https://twitter.com/joelquen" rel="nofollow" title="" class="ext-link">Joël Quenneville</a></p><p>SMS送信機能を含むアプリケーションを開発するにあたっては、実際にメッセージ送信を行う必要があります。その際、私たちが好んで使うのは<a href="https://www.twilio.com/" rel="nofollow" title="" class="ext-link">Twilio</a>のような外部サービスです。SMSと連携する部分の単体テストを行う時は、実際のSMS送信機能をスタブに置き換えるだけで、テストの独立性を保つことができます。では、feature specはどうなるでしょうか。</p><p>次の2人のユーザの話を例にとりましょう。</p><p>そして</p><p>2人とも、SMSメッセージによる情報のやりとりを要求しています。この場合、理想的なfeature specは以下のようになるでしょう。</p><p>テストの段階から、送信済みのメッセージにアクセスできる仕組みがあれば、どんなに楽なことでしょう。しかしSMSクライアントのライブラリには、そういった機能はありません。理由はおそらく、開発段階で送信されるメッセージを全て保存しておくのは、ただのメモリの無駄遣いだからです。</p><p>この場合、テスト用のSMSクライアントを独自で作成するのが望ましい解決策です。 SMSメッセージを送信してメモリに保存する代わりに、実際のクライアントのAPIを再現するのです。<br>
例えば、<a href="https://github.com/twilio/twilio-ruby" rel="nofollow" title="" class="ext-link">Twilio Ruby gem</a>の公式資料を見ると、そのAPIが以下のようになっていることが分かります。</p><p>このAPIを再現し、疑似クライアントを作成してみましょう。</p><p>ここでは以下のことを行っています。</p><p>疑似クライアントを実際のSMSクライアントの代わりに使う場合、いくつか選択肢があります。</p><p>RSpecは、spec内に定数をスタブ化できる<a href="http://rspec.info/blog/2012/06/constant-stubbing-in-rspec-2-11/" rel="nofollow" title="" class="ext-link">stub_constメソッド</a>を提供しています。</p><p>spec helperでは次のようなことができます。</p><p>こうすることで、<code>FakeSMS</code>を参照するために、かわりに<code>Twilio::REST::Client</code>に別名をつけます。</p><p>定数のスタブ化がしっくりこなければ、Railのクラスローディングシステムを利用する方法があります。Railsは、既に別のものをポイントしているのでなければ、必ず定数をロードしようとするでしょう。Twilloのgemがロードされる<em>前に</em><code>Twilio::REST::Client</code>を定義することで、定数の再定義に関するあらゆるエラーを避けられます。</p><p>保持していないコードを分離するためにTwilloのコードをアダプタ内にラップした場合は、他のオプションがあります。以下のアダプタのケースを見てみましょう。</p><p>異なるクライアントを受容できるよう、アダプタは簡単に変更できます。</p><p>そしてspec_helper内でコンフィギュレーションを変更できます。</p><p>各テストの間に<code>FakeSMS.messages</code>をリセットしたい場合は、以下のコードを<code>spec_helper</code>に追加してください。</p><p>上記の選択肢のいずれかを選んで少し微調整すれば、feature specは問題なく動くはずです。</p><p>疑似SMSクライアントを使うやり方は、SMSメッセージとのインタラクションを要求するフローをfeature specによってテストする良い方法です。ここではTwilloのクライアントを再現する方法を紹介しましたが、このアプローチはどんなSMSプロバイダにも使えます。</p>
