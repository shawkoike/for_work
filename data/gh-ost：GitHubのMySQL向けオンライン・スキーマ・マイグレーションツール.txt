<p><a href="http://githubengineering.com/gh-ost-github-s-online-migration-tool-for-mysql/" rel="nofollow" title="" class="ext-link">gh-ost: GitHub's online schema migration tool for MySQL</a> （2016-08-01） by <a href="https://github.com/shlomi-noach" rel="nofollow" title="" class="ext-link">Shlomi Noach</a></p><p>本日、<a href="http://github.com/github/gh-ost" rel="nofollow" title="" class="ext-link">gh-ost</a>のオープンソース・リリースを発表します。GitHubの、トリガーレスなMySQL向けオンライン・スキーマ・マイグレーション・ツールです。</p><p><code>gh-ost</code>は、MySQLテーブルの修正が必要な、進行中の継続的なプロダクション変更に伴って私たちが直面する問題に答えるために、ここ数ヶ月で開発されました。<code>gh-ost</code>は、負担が小さく、制御しやすく、監査しやすく、操作が簡単なソリューションを提供することによって、現在のオンライン・テーブル・マイグレーションのパラダイムを様変わりさせます。</p><p>MySQLテーブルのマイグレーションは、よく知られた問題で、2009年からはオンライン・スキーマ変更ツールによって対処されてきました。ハイペースで成長するプロダクトに伴って、データベース構造の変更が必要になります。列やインデックスなどの追加・変更・削除は、デフォルトのMySQLの動作を妨げる操作です。私たちはそのようなスキーマ変更を1日に何度も行うので、ユーザにかかる負担を最小限に抑えたいと望んでいます。</p><p><code>gh-ost</code>について説明する前に、既存のソリューションについて、そして、新しいツールを手がける理由について考えてみましょう。</p><p>現在、オンライン・スキーマ変更は、主に次の3つの方法のどれかを使って行われています。</p><p>その他の方法にGalera Clusterを使うRolling Schema Upgradeがあり、それ以外には、InnoDBではないストレージエンジンがあります。GitHubでは、共通マスター&amp;レプリカ・アーキテクチャを使って、信頼性の高いInnoDBエンジンを利用します。</p><p>では、なぜ私たちは、上記の方法のどれかではなく、新しいソリューションを手がけようとしたでしょうか。既存のソリューションは、すべて、方法に限界があり、その欠点のいくつかについて、下記に簡単に説明します。特に、トリガベースのオンライン・スキーマ変更ツールの欠点については、後に深く掘り下げて考えます。</p><p>オンライン・スキーマ変更ツールはすべて、類似した様式で動作します。元のテーブルと類似したghostテーブルを作成し、そのテーブルを空白の状態で移行させ、元のテーブルからghostテーブルにデータをゆっくりと、徐々にコピーします。その間に、進行中ghostテーブルへの変更（テーブルに行われる<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>）を反映させます。テーブルが同期したとの確信が得られると、ツールは元のテーブルをghostテーブルに置き換えます。</p><p><code>pt-online-schema-change</code>、<code>LHM</code>、<code>oak-online-alter-table</code>などのツールは同期的な手法を使用します。この手法では、テーブルに加えられた変更は毎回、直ちに、同じトランザクション空間を使用して、<em>ghost</em>テーブルに反映された変更へと移行します。Facebookのツールは非同期的な手法を使用して変更を変更ログ・テーブルに書き込んでから、その書き込みと<em>ghost</em>テーブルへの変更適用を繰り返します。このようなツールはすべて、現在テーブルに加えられている変更を特定するために、トリガを使用します。</p><p>トリガとは、行ごとの、テーブルへの<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>操作時に呼び出される、保管されたルーチンです。トリガはクエリのセットを含んでいてもよく、これらのクエリは、テーブルを操作するクエリと同じトランザクション空間で実行します。これにより、テーブルに対する元の操作とトリガで呼び出される操作の両方に不可分性が得られます。</p><p>一般的にトリガの使用には、具体的にはトリガベースのマイグレーションには、次の問題があります。</p><p><code>gh-ost</code>は、 “GitHub’s Online Schema Transmogrifier/Transfigurator/Transformer/Thingy” (GitHubのオンライン・スキーマ変形（変形、変身など）ツール)の頭文字です。</p><p><img alt="gh-ost light logo" src="http://githubengineering.com/images/announcing-gh-ost/gh-ost-general-flow.png"></p><p><code>gh-ost</code>には次の特徴があります。</p><p><code>gh-ost</code>はトリガを使用しません。バイナリログを追うことによってテーブルデータへの変更を捕捉します。したがって、その動作は非同期方式であり、変更がコミットされてから、いくらかの時間の経過後に<em>ghost</em>テーブルに変更を適用します。</p><p><code>gh-ost</code>では、バイナリログがRBR（行ベースのレプリケーション）フォーマットであると期待されますが、SBR（ステートメントベースのレプリケーション）で動作するマスターをマイグレーションするために<code>gh-ost</code>を使えないという意味ではありません。実際、私たちはそれを行っています。<code>gh-ost</code>は、SBRをRBRに変換するレプリカからバイナリログを簡単に読み出せますし、レプリカを簡単に再構成してマイグレーションを行います。</p><p>トリガを使わないことによって、<code>gh-ost</code>は、マイグレーションの作業負荷を、全体的なマスター作業負荷から切り離します。マイグレーションされたテーブルで実行するクエリの同時性や競合には無関係です。そのようなクエリによって加えられた変更は、バイナリログの中に無駄なく並べられ、<code>gh-ost</code>は、それらを読み込んで<code>gh-ost</code>テーブルに適用します。実際には、<code>gh-ost</code>は、バイナリログ・イベントの書き込みと共に行コピーの書き込みも1列に並べます。よって、マスターは、ただ1つの接続だけに注意すればよく、その接続は連続的に<em>ghost</em>テーブルに書き込みを行っています。ETLと似たようなものです。</p><p>すべての書き込みは<code>gh-ost</code>によって管理され、また、バイナリログの読み込みはそもそも非同期の動作なので、<code>gh-ost</code>は、スロットリングするときマスターへのすべての書き込みを一時停止することができます。スロットリングすると、マスターでの行コピーが一切なく、<em>また</em>、行のアップデートもありません。<code>gh-ost</code>は内部のトラッキングテーブルを生成し、スロットリングしている時でさえ、ハートビートイベントをテーブルに少量、書き込み続けます。</p><p><code>gh-ost</code>はスロットリング管理をさらに洗練させ、スロットリングの管理法もいくつも提供します。</p><p>上記の方法では、マイグレーションが実行されている間でさえも、<em>大幅に変更されてしまう</em>可能性があります。</p><p>既存のツールではマイグレーションの負荷が大きくなったら、DBAがより小さな<code>chunk-size</code>を再設定し、マイグレーションを止め、最初から再開させます。これは無駄な作業だと私たちは考えます。</p><p><code>gh-ost</code>はUNIXソケットのファイルと（設定可能な）TCPを介してリクエストをリッスンします。マイグレーションが実行中でも<code>gh-ost</code>に命令することができます。以下が例です。</p><p><code>gh-ost</code>に<em>状態情報</em>を要求するにも同じインターフェースが使えます。<code>gh-ost</code>は現在の進行状況や、主なコンフィギュレーションパラメータ、関係するサーバのIDなどさまざまなことを進んで報告してくれます。この情報はネットワークを通してアクセス可能なので、進行中のオペレーションの可視性を高めます。これがなければ、今のところ共有スクリーンを使うか、ログファイルを追っていくしかありません。</p><p>バイナリログの内容はマスターの作業負荷からは分離されているので、レプリカでマイグレーションを適用することは、真のマスター・マイグレーションにより類似しています（ただし、完全ではなくので、ロードマップ上でもう少し作業が必要です）。</p><p><code>gh-ost</code>は<code>--test-on-replica</code>を使ったテストのビルトインサポートが付いてきます。これによってレプリカでマイグレーションを実行でき、マイグレーションの最後で、<code>gh-ost</code>がレプリカを止め、テーブルをスワップし、そのスワップを戻し、両方のテーブルを同期して所定の場所に置きます。これでレプリケーションが終了します。2つのテーブルを簡単に分析し比べることができます。</p><p>GitHubで稼働中の<code>gh-ost</code>をテストする方法は次の通りです。テスト用に指定された複数のプロダクションレプリカがあります。そのレプリカは、トラフィックへのサービスは行いませんが、代わりにすべてのテーブル上のマイグレーションテストを継続的に実行します。それぞれのプロダクションテーブルは、それが空っぽでも数百GBでも、ストラクチャを変更しない普通のステートメント（<code>engine=innodb</code>）を使ってマイグレーションさせることができます。どのマイグレーションも、レプリケーションを終了させることで終わります。私たちは、オリジナルのテーブルと<em>ghost</em>テーブルの両方からのテーブルデータ全体の完全なチェックサムを使います。それらは同一であることが期待されます。そして、レプリケーションを再開し、次のテーブルへと進んで行きます。どのプロダクションテーブルも、レプリカ上で<code>gh-ost</code>を使っていくつもマイグレーションを成功させてきたということは<em>言うまでもないでしょう</em>。</p><p>今まで述べてきた特徴、そしてさらに他の機能も、すべては<code>gh-ost</code>の動作の信頼性を高めるためのものです。今まで何年もの間、同じツールを使い続けていた環境下では、<code>gh-ost</code>は新しいツールなのです。</p><p><code>gh-ost</code>は、複数のサーバと接続し、そのサーバの中の1つから直接バイナリログ･イベントをストリームするためにレプリカとして接続することで、動作します。動作モードにはさまざまな種類がありますが、セットアップや、設定、そしてマイグレーションをどこで実行するかによって選択するのがよいでしょう。</p><p><img alt="gh-ost operation modes" src="http://githubengineering.com/images/announcing-gh-ost/gh-ost-operation-modes.png"><br>
<em>注釈：gh-ostのオペレーションモード<br>
a.  レプリカと接続<br>
b.  マスターと接続<br>
c.  レプリカでマイグレーション、もしくはテストする</em></p><p>このモードは<code>gh-ost</code>のデフォルトの設定です。<code>gh-ost</code>はレプリカを調査し、トポロジーのマスターを見つけ、接続します。マイグレーションは以下のようになります。</p><p>マスターが、SBRで動作しているならば、このモードが最適です。レプリカは実行可能なバイナリログ（<code>log_bin</code>、<code>log_slave_updates</code>）で設定され、<code>binlog_format=ROW</code>を持っているはずです（<code>gh-ost</code>は後者を適用します）。</p><p>しかしRBRであっても、マスターが関係する動作モードには、このモードをおすすめします。</p><p>レプリカがないか、使いたくない場合は、マスターで直接動作させることもできます。<code>gh-ost</code>はすべてのオペレーションをマスターで直接実行できます。ただ、レプリケーション遅延のことを考えて依頼することもできます。</p><p>このモードはレプリカでマイグレーションを実行します。<code>gh-ost</code>はマスターに簡単に接続しますが、その後、マスター上では何の変更をすることなく、レプリカですべてのオペレーションを実行します。オペレーションの中で、<code>gh-ost</code>は、レプリカが最新の状態になるようにスロットリングします。</p><p><code>gh-ost</code>はこれで、本番移行ができる準備が整いました。技術的なリクエストが来ると、<code>gh-ost</code>を毎日実行させます。1日に複数回、実行させる日もあるでしょう。監査し、性能を管理して、ChatOpsと統合させます。技術者は、マイグレーションの進行をしっかりと観察し、動作を管理することができます。メトリクスとイベントが集められ、稼働中のマイグレーション動作に対して、しっかりとした見通しを提供してくれます。</p><p><code>gh-ost</code>は <a href="https://github.com/github/gh-ost/blob/master/LICENSE" rel="nofollow" title="" class="ext-link"><code>MIT</code>のライセンスのもと</a>、オープンソースコミュティで<a href="https://github.com/github/gh-ost" rel="nofollow" title="" class="ext-link">リリース</a>されました。</p><p><code>gh-ost</code>は安定していることは分かったが、まだ改良したい点があります。今回のリリースで、コミュティへの参加と貢献を歓迎します。今後、しばしばコミュニティへの貢献に関しての提案をアップしていくかもしれません。</p><p><code>gh-ost</code>は積極的にメンテナンスをしています。ぜひ使って、テストしてみてください。大きな力を注いで作り上げましたので、自信をもってお勧めします。</p><p><code>gh-ost</code>は、GitHubのデータベースインフラクチャ・エンジニアリング・チームによって、デザインされ、開発され、レビューされ、テストされました。</p><p><a href="https://github.com/jonahberquist" rel="nofollow" title="" class="ext-link">@jonahberquist</a>、<a href="https://github.com/ggunson" rel="nofollow" title="" class="ext-link">@ggunson</a>、<a href="https://github.com/tomkrouper" rel="nofollow" title="" class="ext-link">@tomkrouper</a>、<a href="https://github.com/shlomi-noach" rel="nofollow" title="" class="ext-link">@shlomi-noach</a></p><p>貴重な情報と助言をくれたGitHubの技術者たちに感謝します。また、このプロジェクトの試作段階でレビューやコメントを残してくれたMySQLのコミュニティの友人たちにも感謝します。</p>
