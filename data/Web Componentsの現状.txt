<p><a href="https://hacks.mozilla.org/2015/06/the-state-of-web-components/" rel="nofollow" title="" class="ext-link">The state of Web Components</a> （2015-06-09） by <a href="https://twitter.com/wilsonpage" rel="nofollow" title="" class="ext-link">Wilson Page</a></p><p><a href="http://twitter.com/slightlylate" rel="nofollow" title="" class="ext-link">Alex Russell</a>が<a href="https://fronteers.nl/congres/2011/sessions/web-components-and-model-driven-views-alex-russell" rel="nofollow" title="" class="ext-link">Fronteers Conference 2011</a>で初めて発表したWeb Componentsは、長きにわたり開発者の注目を集めてきました。その概念はコミュニティに衝撃を与え、発表以来、講演や議論のテーマとして多く取り上げられています。</p><p>2013年<em>Google</em>は、Web Componentsをベースとするフレームワーク、<em>Polymer</em> をリリースしました。その目的は、新規APIの動作を簡易的にチェックし、コミュニティからフィードバックをもらい、さらなる資金や評価を得ることでした。</p><p>導入から4年が経った今、Web Componentsは十分に普及している<em>はず</em>です。ところが実際は、”あるバージョン”のWeb Componentsに対応したブラウザは<em>Chrome</em>しかないという現状です。Polyfillがあっても、大半のブラウザでサポートしない限り、Web Componentsはコミュニティに十分に受け入れてもらえないことがよく分かります。</p><p>簡単に言うと、ベンダの合意を得られなかったからです。</p><p>Web Componentsを作り上げた<em>Google</em>は、それを世に出す前に、他のブラウザベンダとほとんど話し合いをしませんでした。大抵の交渉事がそうであるように、自分が当事者であると感じられない場合、人は意欲に欠け、賛成しない傾向にあります。</p><p>Web Componentsは野心的な提案でした。初期のAPIは高水準で、（正当な理由はあるにせよ）実装するのに手間がかかるものでした。そのため、ベンダと意見が合わず、論争を招く結果に終わったのです。</p><p>それでも<em>Google</em>は方向性を変えようとはしませんでした。彼らはフィードバックを求め、最終的にはコミュニティの賛同を得たのです。しかし、他のベンダが参入するまでは、ユーザビリティ面で行き詰っていたことが後になって分かりました。</p><p>Web Componentsは理論上、Polyfillがあれば、実装実績のないブラウザ上でも動くとされていました。しかし、それらが”製品に適している”と受け止められたことは一度もありません。</p><p>一方で<em>Microsoft</em>は、（完成間近の）<em><a href="http://www.microsoft.com/en-us/windows/browser-for-doing" rel="nofollow" title="" class="ext-link">Edge</a></em>の作業に追われて、新たなDOM APIを次々と追加するような状況にはありませんでした。<em>Apple</em>はと言うと、<em>Safari</em>用の代替機能にずっと注力しています。</p><p>Web Componentsにまつわる技術の中で、最も異論が少ないのが、カスタム要素です。UIパーツの見せ方や振る舞いを定義することができ、それをクロスブラウザやクロスフレームワークに配布できる点については、一般的に評価されています。</p><p>“アップグレード”という用語は、古い簡素な<code>HTMLElement</code>を、定義されたライフサイクルと<code>prototype</code>によって、美しいカスタム要素に作り変えることを意味します。現在は、要素がアップグレードされる際には<code>createdCallback</code>が呼び出されます。</p><p>現時点で複数のベンダから<a href="https://wiki.whatwg.org/wiki/Custom_Elements#Upgrading" rel="nofollow" title="" class="ext-link">5つの提案</a>が挙がっています。そのうちの2つは、非常に期待できるものとして注目されています。</p><p>ES6クラスでうまく機能する<code>createdCallback</code> のパターンを進化させたバージョンです。<code>createdCallback </code>の概念は引き継がれていますが、サブクラス化は、より従来型に近くなっています。</p><p>現状の実装のように、まずカスタム要素は<code>HTMLUnknownElement</code>として生成されます。その後、このプロトタイプは登録済みのプロトタイプと入れ替えられ（”スウィズル”され）、<code>createdCallback </code>が呼び出されます。</p><p>このアプローチの難点は、プラットフォーム自体の振る舞いとは動きが異なるということです。最初の段階では”未知”だった要素が、ある時点で最終形に変換されるため、開発者の混乱を招くのです。</p><p>生成されたカスタム要素がツリーに挿入された時点で、パーサは開発者が登録したコンストラクタを呼び出します。</p><p>これは一見理にかなっているようですが、実際は違います。<code>registerElement</code>の定義を含むスクリプトが非同期的にロードされていると、 最初にダウンロードしたドキュメントにある全てのカスタム要素が、アップグレードに失敗してしまいます。非同期型のES6モジュールに移行していく上で、これは好ましくないことです。</p><p>さらに同期型のコンストラクタには、<code>.cloneNode()</code>に関連する<a href="https://lists.w3.org/Archives/Public/public-webapps/2015JanMar/0731.html" rel="nofollow" title="" class="ext-link">プラットフォームの問題</a>がついて回ります。</p><p>2015年7月のベンダ間の会合で、方向性が決定されることになっています。</p><p>開発者は<code>is</code>属性によって、標準でビルトインされている要素に、カスタム要素の挙動を加えることができます。</p><p>カスタム要素の仕様上、<code>is</code>は”欠点”だと多くの人が思っています。<em>Google</em>はすでに<code>is</code>を実装済みで、下位レベルのプリミティブが公開されるまでの応急処置として<code>is</code>を捉えています。そして<em>Mozilla</em>と<em>Apple</em>は今、早急にCustom Elements V1をリリースし、プラットフォームを”欠点”で汚さずに、V2でこの問題に適切に対処するのが良いと考えています。</p><p>Domenic Denicolaが率いる<em><a href="https://github.com/domenic/html-as-custom-elements" rel="nofollow" title="" class="ext-link">HTML as Custom Elements</a></em>というプロジェクトでは、プラットフォームに不足しているDOMプリミティブを明らかにするため、カスタム要素を用いて、ビルトインされているHTML要素を再構築しようと努めています。</p><p>ベンダの間で、Shadow DOMは群を抜いて多くの議論を生みました。そのため、少しでも迅速に合意に達するには、機能を”V1″と”V2″のアジェンダに分けなければなりませんでした。</p><p>分散はシャドウホストの子が視覚的にホストのShadow DOM内のスロットに”投影”されるフェーズです。これは、ユーザが内部でネストするコンテンツを、コンポーネントが利用できるようにするという機能です。</p><p>現在のAPIは完全な宣言型です。Shadow DOMの中では、ホストの子を視覚的に挿入したい場所を定義するのに、特別な<code>&lt;content&gt;</code>要素を使用できます。</p><p><em>Apple</em>も<em>Microsoft</em>も、複雑化とパフォーマンス低下を心配して、このアプローチには賛同していません。</p><p><a href="https://www.w3.org/wiki/Webapps/WebComponentsApril2015Meeting" rel="nofollow" title="" class="ext-link">顔を突き合わせて会合を行っても</a>、宣言型APIについては合意に至りませんでした。ですからどのベンダも強制的な解決策の追求に賛同しました。</p><p>2015年の7月を締め切りとして、全4ベンダ（<em>Microsoft</em>、<em>Google</em>、<em>Apple</em>、<em>Mozilla</em>）が、この新たなAPIの仕様策定に取り組むことになりました。そして現在までに<a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Imperative-API-for-Node-Distribution-in-Shadow-DOM.md" rel="nofollow" title="" class="ext-link">3つの提案</a>がなされています。3つの中で最もシンプルなのは以下のようなものです。</p><p>主な障害は、<strong>タイミング</strong>です。ホストノードの子が変わり、<code>MutationObserver</code>コールバックが呼び出された際に再分散を行うと、レイアウトプロパティの要求は誤った結果を返します。</p><p>offsetTopの呼び出しを行うと、分散の<em>前に</em>同期したレイアウトが実行されてしまいます。</p><p>これは大した問題には見えないかもしれませんが、スクリプトとブラウザの中身が多数の異なる処理を行うためには、<code>offsetTop</code>の値の正確性が鍵になります。例えば、要素をビューでスクロールして見る場合などです。</p><p>これらの問題が解決されないと、宣言型APIについての議論に逆戻りになってしまうかもしれません。この形式は、現在の<code>&lt;content select&gt;</code>のスタイルか、新たに（<em>Apple</em>から）提案された<a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md" rel="nofollow" title="" class="ext-link">“named slot”</a>APIのどちらかになるでしょう。</p><p>この”named slot”の提案は、現在の”content select”のAPIがよりシンプルになったもので、コンポーネントのユーザはこれを使って希望の分散先のスロットを持つコンテンツに分かりやすく名前をつけなければなりません。</p><p>&lt;x‐page&gt;のシャドウ・ルート:</p><p>＜x-page＞の用法</p><p>構成ツリー／レンダツリー（ユーザに見えるもの）</p><p>ブラウザはシャドウホストの直接の子（<code>myXPage.children</code>）を見ており、子の中に、ホストの<code>shadowRoot</code>内の<slot>要素の名前とマッチするスロット属性を持つものがないかを監視しています。</slot></p><p>マッチするものが見つかれば、ノードは対応する<slot>要素の場所に<em>視覚的に</em>“分散”されます。このマッチングの工程を終えた段階で分散されずに残った子要素があれば、それらはデフォルトの（名前のない）<slot>要素に分散されます（もしあれば）。</slot></slot></p><p><strong>賛成意見：</strong></p><p>1.分散がより明確で理解しやすくなり、”何が起こったか分からない”という状況が改善される。</p><p>2.エンジンが処理するのに分散がよりシンプルになる。</p><p><strong>反対意見：</strong></p><p>1.＜select＞のようなビルトインの要素がどのように動作するのか説明されていない。</p><p>2.スロット属性でコンテンツを装飾するのは、ユーザの仕事が増えることにつながる。</p><p>3.表現力が低い。</p><p><code>shadowRoot</code>が”クローズド”だと、<code> myHost.shadowRoot</code>を介してアクセスすることができません。これによりコンポーネントの作成者は、ユーザから実装の詳細に干渉されることがないという<em>ある程度の</em>保証を得られます。これは、何かしらを切り分けておくのにクロージャを使うのと同じようなものです。</p><p><em>Apple</em>は、ブロックする機能は重要であるという考えを強めています。実装詳細は外に露呈させるべきではないこと、また”クローズド”モードは<a href="https://github.com/w3c/webcomponents/wiki/Isolated-Imports-Proposal" rel="nofollow" title="" class="ext-link">“独立した”カスタム要素</a>が求められる時に必要な機能になることを、主張しています。</p><p>一方<em>Google</em>は、”クローズド”なシャドウ・ルートはアクセシビリティやコンポーネントを利用したユースケースの妨げになると考えています。偶然に<code>shadowRoot</code>に何かしてしまうというのはあり得ないことで、意図を持って何かしようとしているならば、そこには正当な理由があるはずだと主張しています。JS/DOMは今のオープンな状態のままにしておくべきだというのが彼らの意見です。</p><p><a href="https://www.w3.org/wiki/Webapps/WebComponentsApril2015Meeting" rel="nofollow" title="" class="ext-link">4月の会合</a>では、前進のためには”モード”機能が必要であるという点では一致しましたが、デフォルトを”オープン”にするのか”クローズド”にするのかという点では、各ベンダの意見が割れました。結果として、V1では”モード”が必須パラメータになるため、特定のデフォルトは必要ないということで合意に至りました。</p><p>“ピアシング・コンビネータ”は特別なCSSの”コンビネータ”で、シャドウ・ルートの中にある要素を、外側からも検索対象とすることができます。以下は/deep/を<code> &gt;&gt;&gt;:</code> に書き換えた例です。</p><p>Web Componentsの仕様が最初に定められた時は、これは必要だと考えられていましたが、<a href="https://github.com/KarstenB/csstransform/blob/master/bootstrap_deep.css" rel="nofollow" title="" class="ext-link">実際の使われ方</a>を見ると、Web Componentsを非常に魅力的なものにするはずのスタイル境界がいとも簡単に壊れ、単に問題を引き起こしただけのようでした。</p><p>スタイルの計算については、エンジンが外部のセレクタや状態を考慮に入れる必要がなければ、緻密に調査されたShadow DOM内では非常に速いです。まさにピアシング・コンビネータの存在が、この種の最適化を禁じているのです。</p><p>シャドウ・ピアシングのコンビネータをドロップするということは、ユーザがコンポーネントの外側から見た目をカスタマイズできないということではありません。</p><p><em>Firefox OS</em>では、特定のスタイルのプロパティを提示するために、<a href="https://drafts.csswg.org/css-variables/" rel="nofollow" title="" class="ext-link">CSSカスタムプロパティ</a>を使います。これは、外部から定義（あるいはオーバーライド）することができます。</p><p>外部（ユーザ）：</p><p>内部（プログラム作成者）：</p><p>カスタム疑似セレクタを定義する能力の再導入に、複数のベンダが興味を示してきました。擬似セレクタは、与えられた内部パーツのスタイルを決めるものです（<code>&lt;input type=”range”&gt;</code>の部分にスタイルを付ける方法と似ています）。</p><p>これはShadow DOM V2の仕様で検討される可能性が高いでしょう</p><p><a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extend" rel="nofollow" title="" class="ext-link">SASSの@extend</a>をCSSで働かせるための<a href="https://tabatkins.github.io/specs/css-extend-rule/" rel="nofollow" title="" class="ext-link">仕様が提案</a>されています。これはコンポーネントのシステム作成者にとっては、ユーザに特定の内部パーツを適用するためのプロパティの”袋”を提供するのに役立つはずです。</p><p>外部（ユーザ）：</p><p>内部（プログラム作成者）：</p><p><em>同じ要素の中に、どうして複数のシャドウ・ルートが必要なのでしょうか？</em>　皆さんは不思議に思いますよね。その答えは、<strong>継承</strong>です。</p><p>例えば、私が<code>&lt;x-dialog&gt; </code>コンポーネントを書いているとしましょう。このコンポーネントの中では、私はマークアップ、スタイル付け、ダイアログウィンドウを開いたり閉じたりするためのインタラクションを全て書きます。</p><p>
</p>
<p>このシャドウ・ルートは、<code>&lt;content&gt;</code>の挿入によって<code>div.inner</code>の中にユーザに提供されたコンテンツを引き込みます。</p><p>
</p>
<p>私は、<code>&lt;x-dialog-alert&gt;</code>も作りたいと思っています。これは見た目も機能も<code>&lt;x-dialog&gt;</code>のようですが、より制限の多いAPIでは、<code> alert('foo')</code>に似たものになります。</p><p>新しいコンポーネントは、独自のシャドウ・ルートを持ちますが、親クラスのシャドウ・ルートの<em>上位で</em>機能するようにデザインされています。<code>&lt;shadow&gt;</code>はより”古い”シャドウ・ルートを代表し、内部にあるコンテンツの投影を可能にします。</p><p>
</p>
<p>一度、複数のシャドウ・ルートについて理解してしまえば、強力な概念となります。欠点は、複雑な点が多いことと、特異な状況で起こるエッジケースが多く導入されてしまうことです。</p><p>継承は複数のシャドウ・ルートがなくても可能です。しかし、スーパークラスのシャドウ・ルートを手動で変換しなくてはいけません。</p><p>この方法の欠点は、次のようなものです。<br>
1.エレガントではない。</p><p>2.サブコンポーネントは、スーパーコンポーネントの実装の詳細に依存する。</p><p>3.スーパーコンポーネントのシャドウ・ルートが”クローズド”だった場合、<code>this.shadowRoot</code>が<code>undefined</code>となるため使えない。</p><p>HTML Importsは、.htmlドキュメントで定義される全てのアセットを、他のスコープにインポートする方法を提供します。</p><p><a href="https://hacks.mozilla.org/2014/12/mozilla-and-web-components/" rel="nofollow" title="" class="ext-link">以前お伝えした</a>ように、<em>Mozilla</em>は<em>今のところ</em>、HTML Importsを実装する予定はありません。これは、外部のアセットを導入するための方法を取り入れる前に、ES6のモジュールがうまくいくかどうかを確かめたいからでもあり、今以上にできることが大幅に増えるとは感じていないからでもあります。</p><p>私たちはこの1年以上、Firefox OSにおけるWeb Componentsを研究してきました。その結果、依存関係の解決や、普通の<code>&lt;script&gt;</code>タグでロードすることによる要素の登録は、既存のモジュール構文（AMDあるいはCommon JS）を使うことで十分成し遂げられると分かりました。</p><p>HTML Importsは、より古い<code>&lt;element&gt;</code>や<a href="https://www.polymer-project.org/1.0/docs/migration.html#registration" rel="nofollow" title="" class="ext-link"><em>Polymer</em>の進行中の</a>登録の構文など、より単純、あるいはより宣言的なワークフローに自身をうまく加えます。</p><p>この単純化は、Importsが独立したマネジメントの解決法としてきちんと受け取られるのに十分なコントロールを提供していないため、コミュニティからの<a href="http://tjvantoll.com/2014/08/12/the-problem-with-using-html-imports-for-dependency-management/" rel="nofollow" title="" class="ext-link">批判</a>となります。</p><p>数ヶ月前に決定がなされる前に、<em>Mozilla</em>にはフラグの裏で機能している実装がありましたが、不完全な仕様に苦労していました。</p><p><em>Apple</em>の<a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Isolated-Imports-Proposal.md" rel="nofollow" title="" class="ext-link">Isolated Custom Elements</a>の提案は、documentのスコープ内に自身のカスタム要素を提供するために、HTML Importsスタイルのアプローチを利用します。おそらく、そこに未来はあるでしょう。</p><p><em>Mozilla</em>では、カスタム要素の定義のインポートが、間もなく登場するES6モジュールAPIとどのように提携するかを模索したいのです。これにより、現在できないことを開発者ができるようになるなら、その時には私たちは実装する準備はできています。</p><p>Web Componentsは、今日のブラウザに大きな機能を加えるのがどれほど難しいかを表すいい例です。追加された全てのAPIは不明瞭な状態で生きており、身近な障害として残っています。</p><p>からまって巨大なボールになってしまったヒモをほぐそうとして、さらにからまるようなものです。このからまり、つまりプラットフォームは、より大きく、より複雑に成長しています。</p><p>Web Componentsの開発には3年以上がかかっていますが、まもなく終わりが来るのではないかと、我々は楽観視しています。主要なベンダは全て仕事を続けていますし、熱心で、残った問題を解決するのにかなりの時間を投資しています。</p><p><strong>Webのコンポーネント化に備えていきましょう。</strong></p>
