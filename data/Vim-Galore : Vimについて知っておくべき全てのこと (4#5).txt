<p><a href="https://github.com/mhinz/vim-galore" rel="nofollow" title="" class="ext-link">Everything you need to know about Vim</a> by <a href="https://github.com/mhinz" rel="nofollow" title="" class="ext-link">Marco Hinz</a></p><p>(訳注: 2016/2/26、記事タイトルを変更いたしました。)</p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/02/vim-galore.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/02/vim-galore.png" alt="vim-galore" width="1500" height="278" class="alignnone size-full wp-image-6066"></a></p><p>特定のトピックについての記述をご希望ですか？ <a href="https://github.com/mhinz/vim-galore/issues" rel="nofollow" title="" class="ext-link">Issue</a>を立てるか、<a href="https://twitter.com/_mhinz_" rel="nofollow" title="" class="ext-link">Twitter</a>で私までお知らせください！ありがとう！</p><p><code>n</code>と<code>N</code>の方向は、前方検索の<code>/</code>または後方検索の<code>?</code>のどちらが使われるかによって決まります。これにはとても混乱させられます。<br>
<code>n</code>を前方へ、<code>N</code>を後方へと固定したい場合には以下のようにします。</p><p>
</p>
<p>私みたいな人間は、「次項へ」は<code>&lt;c-n&gt;</code>、「前項へ」は<code>&lt;c-p&gt;</code>をよく使います。デフォルトでは、同じ機能がコマンドラインでも働き、過去や最近のコマンドラインを履歴から呼び出します。<br>
これで及第点でしょう。しかし、<code>&lt;up&gt;</code>と<code>&lt;down&gt;</code>がもっと気が利いています。この2つは、先頭が現在のコマンドラインと一致するコマンドラインを呼び出しします。例えば<code>:echo &lt;up&gt;</code>は<code>:echo "Vim rocks!</code>に変化します。<br>
もちろん、矢印キーは使って欲しくないので、代わりにこんなふうにマッピングしてください。</p><p>私は日に何度もこの動作に頼っています。</p><p>
</p>
<p>デフォルトの<code>&lt;c-l&gt;</code>は画面をクリアにして再び表示します（<code>:redraw!</code>と同じです）。以下のマッピングも同じ動きをします。その上、<code>/</code>や<code>?</code>などで見つかった一致のハイライトを消し、さらに、構文のハイライト箇所を修正し（複雑なハイライトのルールのせいで、Vimは時々ハイライトしそこないます）、そして、差分モードにおける構文のハイライトをアップデートさせます。</p><p>
</p>
<p><a href="http://vim.wikia.com/wiki/Disable_beeping" rel="nofollow" title="" class="ext-link">Vim Wiki: ビープ音の無効化</a>を見てください。</p><p>
</p>
<p>時には、現在の行を上か下へ、てっとり早く動かす方法が必要になります。</p><p>このマッピングでは行も指定できます。<code>2]e</code>は現在の行を2行下へ移します。</p><p>
</p>
<p><code>5[&lt;space&gt;</code>は現在の行の上に空白行5行を挿入します。</p><p>
</p>
<p>これぞ本当の宝ですよ！　マッピングはレジスタ（あるいは、デフォルトでは<code>*</code>）を使い、コマンドラインのウィンドウ内でレジスタをオープンします。レジスタの編集や設定が終わったら<code>&lt;cr&gt;</code>と打ち込んでください。<br>
私は、マクロの記録中にやってしまったタイポを修正するのに下記を使っています。</p><p>上のマクロを<code>&lt;leader&gt;m</code>または<code>"q&lt;leader&gt;m</code>のように使ってください。<br>
<code><c-r><c-r></c-r></c-r></code>を使って<code>&lt;c-r&gt;</code>が文字通り確実に挿入されていることに注意してください。<code>:h c_^R^R</code>を見てください。</p><p>
</p>
<p>このテクニックは多くのファイルタイプに使えるかもしれません。ソースファイルやヘッダファイルから離れるときに、これは<em>ファイルマーク</em>（<code>:h marks</code>を見てください）をセットします。おかげで、<code>'C</code>か<code>'H</code>を使って最後にアクセスしたファイルへ一足飛びで戻れます（<code>:h 'A</code>を参照）。</p><p>注：　この情報はviminfoのファイルにありました。<code>:set viminfo?</code>に<code>:h viminfo-'</code>があるかどうかを確かめてください。</p><p>
</p>
<p>以下はtpopeのコンフィグから持ってきたと思います。</p><p>
</p>
<p>ノーマルモードではブロックカーソル、挿入モードではI型のカーソル、上書きモードではアンダーライン型のカーソルを使っています。中間でtmuxを使っている時も同じです。</p><p>上記は、挿入モードに入る前と出た後にVimがある種の文字のシーケンス(<a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9" rel="nofollow" title="" class="ext-link">エスケープシーケンス</a>)を画面に表示することを単純に指示しています。端末側が処理し評価します。</p><p>しかし、短所がひとつあります。多数の端末エミュレータが実装されていますが、全てのエミュレータが同じ処理をするのに必ず同じシーケンスを使っているというわけではありません。上記のシーケンスも実装された端末が違えばと同様には動きません。異なる形のカーソルのサポートすら実装されていないかもしれません。ドキュメントを確認して下さい。</p><p>上記の例はiTerm2で使えます。</p><p>
</p>
<p>1つ以上の行を選択した場合に、<code>&lt;</code>や<code>&gt;</code>で横へ移動させることができます。不運にも、そのあと、あっという間にセレクションを見失います。</p><p><code>gv</code>を使って直近のセレクションを再び選択できます（<code>:h gv</code>を見てください）。そうすれば下記のような感じで回避することができます。</p><p>これで、問題なく画面上のセレクションで<code>&gt;&gt;&gt;&gt;&gt;</code>が使えるようになります。</p><p>注：　<code>.</code>を使うと同じことができ、直近の変更を繰り返し使えます。</p><p>
</p>
<p>autocmdを使うと保存動作の最中に何でもできます。例えば、dotfileの中を確かめたり、ソースコードの構文エラーをチェックするためにLinterを走らせたりできます。</p><p>
</p>
<p>カーソルラインは大好きですが、使いたいのは現在のウィンドウの中で、挿入モードではない時だけです。</p><p>
</p>
<p>キーワードの補完（<code>&lt;c-n&gt;</code>/<code>&lt;c-p&gt;</code>）は、<code>'complete'</code>オプション中にリストされたものすべてを補完しようとします。デフォルトでは、（煩わしくもなる）タグや（とても時間がかかる）全てのインクルードファイルのスキャンが含まれています。もし、これらがなくとも大丈夫なら無効にしてください。</p><p>
</p>
<p>知っておくと良い便利なコマンドです。もっと詳しく知りたい方は、例えば、<code>:h :global</code>のように、<code>:h :&lt;command name&gt;</code>を利用してください。</p><p>
</p>
<p>条件にマッチする全ての行にコマンドを実行します。例えば、<code>:global /regexp/ print</code>は、”regexp”が含まれている全ての行で、<code>:print</code>を実行します。</p><p>面白い事実： おそらく皆さんは、Ken Thompsonによって書かれたフィルタプログラムの古き良きgrepをご存知でしょう。grepは何を行うものでしょう。grepは、特定の正規表現にマッチする全ての行を出力します！　では、<code>:global /regexp/ print</code>の短縮形でしょうか。そのとおりです！　これは、<code>:g/re/p</code>です。Ken Thompsonは、viの<code>:global</code>に触発されてgrepを書いたのです。</p><p><code>:global</code>は、デフォルトでは、その名の通り全ての行が対象ですが、範囲を指定することもできます。現在の行から次の空白行（正規表現<code>^ $</code>と一致する行）までの範囲で、”foo”が含まれる全ての行を<code>:delete</code>したい場合は、次のように記述します。</p><p>
</p>
<p>この2つのコマンドは、一般的にVimスクリプトで使用されます。</p><p><code>:normal</code>コマンドを使うと、コマンドラインからノーマルモードへのマッピングを行うことができます。例えば、<code>:normal! 4j</code>はカーソルを4行下に移動させます（”!”を付けると”j”へのカスタムマッピングは行われません）。</p><p><code>:normal</code>は範囲も指定できるので、<code>:%norm! Iabc</code>とすると、全ての行の先頭に “abc”が追加されることを忘れないでください。</p><p><code>:execute</code>コマンドを使うと、式と一緒にコマンドを実行できます。C言語のソースファイルを編集していて、そのヘッダファイルに切り替えたい場合は、次のように記述します。</p><p>2つのコマンドは、よく一緒に使われます。カーソルを”n”行下に移動させたい場合は、次のように記述します。</p><p>
</p>
<p>メッセージを出力するコマンドはいろいろありますが、<code>:redir</code>は、その出力をリダイレクトすることができます。ファイル、レジスタまたは変数にリダイレクトすることができるのです。</p><p>関連するヘルプ： <code>:h :redir</code></p><p>
</p>
<p>
</p>
<p>おかしな振る舞いが発生した場合は、次のとおり実行しても再現するかどうか確認してください。</p><p>これを実行すると、vimrcなし（つまりデフォルトの設定）で、かつ非互換モード（viのデフォルトではなく、Vimのデフォルトを使うようになります）でVimが起動されます（起動時にロードするものの組み合わせに関しては、<code>:h --noplugin</code> を参照してください）。</p><p>それでもおかしな振る舞いが再現する場合、Vim自体のバグの可能性が最も高いです！　<a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow" title="" class="ext-link">vim_dev</a>のメーリングリストに報告してください。大抵の場合、問題がその時点ですぐに解決されることはありません。さらに調査する必要があるでしょう。</p><p>プラグインはよく、新しい/変更された/障害のある振る舞いを見せることがあります。例えば、保存中に発生した場合は、考えられる原因をリストアップするために<code>:verb au BufWritePost</code>をチェックして下さい。</p><p>プラグインマネージャを使用している場合は、原因が分かるまで、それらをコメントアウトしてください。</p><p>問題はまだ解決されていませんか？　原因がプラグインでない場合は、オプションやautocmdなど、他の設定に違いありません。</p><p>そこで、二分探索の出番です。原因の行を見つけるまで繰り返し探索空間を2分割します。2分割するので、ステップ数が少なくて済みます。</p><p>実際に行うのは以下のようなことです。：<code>:finish</code>コマンドをvimrcの真ん中に入れます。 Vimはそれ以降の全てをスキップします。まだ問題が発生する場合は、問題はアクティブな上半分の中にあるので、<code>:finish</code>を<em>その上</em>半分の真ん中に移動させます。そうでなければ問題は非アクティブな下半分の中にあるので、<code>:finish</code>を<em>その下</em>半分の真ん中に移動させます。それを繰り返します。</p><p>
</p>
<p>Vimの起動が遅いと感じますか？　では、いくつか計算をしてみましょう。</p><p>最初の列が一番重要で、絶対的な経過時間を表示するためのものです。2つの行の間の時間に大きな開きがある場合、2行目は非常に大きなファイルか、または調査に値する障害のあるVimLコードを持つファイルのいずれかです。</p><p>
</p>
<p>必要な機能：　<code>+profile</code></p><p>Vimは、実行中にプロファイルするための組み込み機能を提供しています。この素晴らしい方法を使えば、自分の環境で遅いコードを見つけられます。</p><p><code>:profile</code>コマンドには、プロファイルするものを指定するためのサブコマンドがたくさんあります。</p><p><em>全て</em>をプロファイルする場合は、次の操作を行います。</p><p>Vimはメモリ内にプロファイル情報を保持し、終了する時にのみログファイルに書き出します（Neovimは、<code>:profile dump</code>を使えるようにしたことで、この点を修正しました）。</p><p><code>/tmp/profile.log</code>を見てください。プロファイル中に実行された全てのコードが書かれています。各行ごとに実行頻度と実行時間を見ることができます。</p><p>ほとんどはユーザの知らないプラグインコー​​ドですが、特定の問題を調査している場合は、ログの一番下に飛んでください。そこには、<code>FUNCTIONS SORTED ON TOTAL TIME</code>と<code>FUNCTIONS SORTED ON SELF TIME</code>という、とても役に立つ2つの異なるセクションがあります。特定の関数にかなり時間がかかっていれば、一目で分かります。</p><p>
</p>
<p>Vimが現在何をしているかを監視するための別の便利な方法は、verboseのレベルを上げることです。Vimは現状、9つの異なるレベルをサポートしています。<br>
全リストは<code>:h 'verbose'</code>を実行して確認してください。</p><p>これは、情報として得られる全てのファイルを表示します。例えばアンドゥファイルや保存時に動作するいろいろなプラグインなどです。</p><p>もし、単一コマンドでverboseの値を上げたいのであれば、<code>:verbose</code>があり、どのコマンドの前にでも置くことができます。verboseのレベルは数値で表され、そのデフォルト値は1です。</p><p>オプションが最後にセットされた箇所を示すために、verboseのデフォルト、レベル1は頻繁に使われます。</p><p>もちろん、verboseレベルが高ければ高いほど、アウトプットはかなり大きなものになります。しかし心配する必要はありません。アウトプットを簡単にファイルにリダイレクトすることができます。</p><p>
</p>
<p>これまで、コマンドラインデバッガーを使っていたなら、<code>:debug</code>にはすぐに親しみがわくでしょう。</p><p>他のコマンドの先頭に<code>:debug</code>と入力するだけで、デバッグモードに入れます。つまり、実行しようとしている最初の行で実行が止まり、その行が表示されるのです。</p><p><code>:h &gt;cont</code>と以下の6つのデバッガーコマンドを実行して確認してください。gbdや類似のデバッガーと同様に、6つの短い書式、<code>c</code>、<code>q</code>、<code>n</code>、<code>s</code>、<code>i</code>、<code>f</code>が使用できます。</p><p>この6つ以外にも、Vimコマンドはどれでも自由に使うことができます。例えば、<code>:echo myvar</code>ならコードの現在の位置のコンテキストにおいて実行されます。</p><p><code>:debug 1</code>を使えば、基本的には<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow" title="" class="ext-link">REPL</a> になります。</p><p>最後の行までシングルステップで実行しなければならないのは、辛いでしょう。なので、もちろんブレイクポイントを設定することもできます。（ブレイクポイントは、ヒットした時点で実行が止まるのでブレイクポイントと呼ばれています。関係ないコードを簡単にスキップできます）。詳細については、<code>:h :breakadd</code>、<code>:h :breakdel</code> 、<code>:h :breaklist</code>を実行して確認して下さい。</p><p>例えば、ファイルを保存するたびに、どんなコードを実行しているのかを知りたいとしましょう。</p><p>ご覧のように、<code>&lt;cr&gt;</code>を使うと直前のデバッガーコマンドの繰り返しになります。この例では<code>s</code>を繰り返しています。</p><p><code>:debug</code>はverboseのオプションと組み合わせて使えます。</p><p>
</p>
<p>誤ったandやorの複雑な正規表現のせいで、構文ファイルは頻繁に速度低下の原因となります。もし<code>+profile</code>機能が組み込まれていれば、Vimにはとても役に立つコマンド<code>:syntime</code>が準備されています。</p><p>アウトプットには重要な指標が含まれています。例えば、処理時間が長く最適化しなければならないregexpや、常に使われているのにマッチさえしないregexpを見つけることができます。</p><p><code>:h :syntime</code>を実行して確認してください。</p>
