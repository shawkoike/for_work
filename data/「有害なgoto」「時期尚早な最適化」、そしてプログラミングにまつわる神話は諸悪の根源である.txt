<p><a href="http://videlalvaro.github.io/2015/02/programming-myths.html" rel="nofollow" title="" class="ext-link">Harmful GOTOs, Premature Optimizations, and Programming Myths are the Root of all Evils</a> （2015-02-13） by <a href="https://twitter.com/old_sound" rel="nofollow" title="" class="ext-link">Alvaro Videla</a></p><p>以下のプレゼンテーションは、私がPapers We Love Madridの初会議で発表したものです。講演のテーマは、Donald Knuthの論文「Structured Programming with Go To Statements」（goto文を用いた構造化プログラミング）でした。</p><p><script async class="speakerdeck-embed" data-id="3ab49362d8434ad29937726e29a1533d" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script></p><p>この記事では、神話についてお話ししたいと思います。Googleで<em>神話（myth）</em>の定義を検索してみると「広く信じられているが誤った信念や観念」とあり、dictionary.comを見ると「立証されていないか誤った共通的信念であり、社会制度を正当化するために用いられる」と説明されています。ここで問いたいのは、21世紀の人々が神話を信用しているかということです。</p><p>Umberto Ecoは著書『The Book of Legendary Lands』（伝説の地の本）において、「神話の中には社会で広く信じられているため、真実ではないことを話しているとさえ気づかれないものもある」ということを示すべく、簡単なテストを提案しています。それは、誰かに「コロンブスが西へ航海してインドを目指した時に証明しようとしていたことは何か？」、また「当時サラマンカの学者たちに広く信じられていた説は何か？」と尋ねてみることです。多くの人は、コロンブスが、<a href="https://ja.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E5%B9%B3%E9%9D%A2%E8%AA%AC%E3%81%A8%E3%81%84%E3%81%86%E7%A5%9E%E8%A9%B1" rel="nofollow" title="" class="ext-link">地球は平らである</a>という当時一般的に信じられていた説に反して、地球は丸いことを証明したかったと答えるでしょう。しかし実は、Ecoが著書の中で説明しているように、中世の人たちは、地球が平らではないことをよく知っていました。コロンブスのインドまでの航海日数を確認するために、地球の直径さえ算出されていたのです。学者たちがコロンブスの計画に反対した真の理由は、距離が長いため物資があまりにも多く必要となるのを懸念していたからでした。</p><p>では、なぜそんな神話が広がったのでしょうか？　Washington Irvingが書いた『<em><a href="https://archive.org/details/ahistorylifeand08irvigoog" rel="nofollow" title="" class="ext-link">A History of the Life and Voyages of Christopher Columbus</a></em>』（クリストファー・コロンブスの生涯と航海の歴史）という本は、コロンブスの歩みについて書き留めつつ、楽しめる作品とするため、話に<em>スパイス</em>を加えたものでした。Irvingの書籍が普及しつつあった頃、科学界では創造論に反対して進化論を広めようとする動きがありました。もし教父が地球の形状を誤って認識していたとすれば、このような19世紀の一般思想家は教会の創造論が誤りだったことも示せた、ということなのでしょう。彼らは、地球は平らであるとの主張を3世紀に展開していたラクタンティウスやコスマス・インディコプレウステスの理論を引き合いに出しました。こうして、一方では文筆家が著書の中で<em>事実</em>をあちこちに散りばめて内容の向上を図り、他方では一般思想家が進化論を広めようと試みたことで、地球平面説という神話が作り出され、あるいは広まっていったのです。</p><p><a href="http://en.wikipedia.org/wiki/A_History_of_the_Life_and_Voyages_of_Christopher_Columbus" rel="nofollow" title="" class="ext-link"><img src="http://videlalvaro.github.io/images/myths/Life_and_Voyages_of_Columbus.jpg" alt="A History of the Life and Voyages of Christopher Columbus"></a></p><p>事実に反するながらも広く信じられていた神話がいまだに残っている一例ですね。<em>根拠</em>を示そうとする人たちによって広められた神話であり、<em>嘘も方便</em>のようなケースです。疑似事実が書籍に掲載され、その真実性が検証されることもなく学者たちに用いられ、加速度的に肥大化して現在に至っている流れは興味深いものです。コロンブスの航海から400年以上を経た今、<em>地球平面説という神話</em>が現代人を惑わせることはもはやなさそうですが、問題は、コンピュータサイエンス分野の状況はどうなのかということです。ソフトウェアエンジニアリングでも似たようなケースはあるのでしょうか？　現在にも存続している神話のうち、生み出された起源や背景を知られることもなく、真実性が実は見過ごされているようなものは？　きっとあると思いますが、むしろ誰もが必ず従うべき<em>格言</em>のような形で存在するのではないでしょうか。そこで注目したいのが、今回検証するDonald Knuthの論文「<a href="http://dl.acm.org/citation.cfm?id=356640&amp;dl=ACM&amp;coll=DL" rel="nofollow" title="" class="ext-link">Structured Programming with Go To Statements</a>」です。</p><p><img src="http://videlalvaro.github.io/images/myths/structured_programming_with_goto_statements.png" alt="Structured Programming with Go To Statements"></p><p>この論文に興味を持ったきっかけは、あるPHPライブラリの<a href="https://github.com/igorw/retry/issues/3" rel="nofollow" title="" class="ext-link">GitHub issue</a>として投稿された、次の簡単な質問でした。</p><p>質問者が指しているのは、以下のプログラムの17行目にあるgoto文です。</p><p>このライブラリの作成者は、<a href="https://github.com/igorw/retry/issues/3#issuecomment-56448334" rel="nofollow" title="" class="ext-link">PHPインタプリタの動作を詳しく説明し</a>、質問者の示唆した再帰ではなくgotoを選択した理由を答えています。インターネットですから案の定、激しいやり合いが始まりました。あるユーザはgoto文の使用に反対しただけでなく、Dijkstraの有名な論文「<a href="https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF" rel="nofollow" title="" class="ext-link">Go To Statement Considered Harmful</a>」（goto文は有害である）へのリンクを張っています。この問題に関して非常に様々な意見があることが分かり、もっと詳しく知りたいと思うようになりました。</p><p><img src="http://videlalvaro.github.io/images/myths/flamewar.gif" alt="flamewar dot gif"></p><p>Googleで単純に検索してみると、Stack Overflowで交わされている議論「<a href="http://stackoverflow.com/questions/46586/goto-still-considered-harmful" rel="nofollow" title="" class="ext-link">goto文有害論は健在？</a>」が見つかりました。その中ではDijkstraの論文が前述のDonald Knuthの論文と対比されており、これが今回お話しするメインテーマとなります。</p><p>Dijkstraの論文は、goto文があるとそのプログラムを理解しにくくなるという理由で、goto文をなくすことを提唱しています。この論文を巡っては注目すべき話があります。Dijkstraは”<a href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD13xx/EWD1308.html" rel="nofollow" title="" class="ext-link">A case against the goto statement</a>“（goto文を使うべきでないケース）というタイトルで投稿したのですが、出版を急いだ編集者が「編集者への手紙」の欄に、<em>より興味を引きそうな</em>タイトルを新たにつけて掲載したのです。その編集者とは、Pascalの創始者Niklaus Wirthでした。</p><p><img src="http://videlalvaro.github.io/images/myths/a_case_against_goto.png" alt="A Case against the Go To Statement"></p><p>この論文は当時、多くの議論を呼んだようです。批判の矛先は、gotoを誤用している人だけでなく、優れた構造化プログラムを書きながらたまたまgotoを使ったという人にも向けられます。そのような人たちは、下手なプログラマとまで言われるようになりました。</p><p>Knuthの論文「<em>Structured Programming with Go To Statements</em>」に出会う前の私は、コロンブスが地球は平らであることを証明しようとしていたと思っていました。つまり、Dijkstraがgoto文のあらゆる使用に反対していると考えていたのです。Knuthの論文を何段落か読んでいくと、KnuthとDijkstraの私的なやり取りから重要なことが見えてきました。Knuthによれば、Dijkstraは以下のように述べたそうです。</p><p>興味深い言葉が使われていますが、特に注目したいのは「<em>宗教</em>」と「<em>たった一つの仕掛け</em>」です。どういうわけか、私たち開発者はいつも、あらゆる問題を解決できる理想的手段を探し求めています。例えば、<a href="http://ferd.ca/beating-the-cap-theorem-checklist.html" rel="nofollow" title="" class="ext-link">CAP定理を破った</a>と主張するブログ記事をよく見かけますよね。数学的な定理を……破ったとは。しかし、Frederick Brooks Jr.が論文「<a href="http://worrydream.com/refs/Brooks-NoSilverBullet.pdf" rel="nofollow" title="" class="ext-link">No Silver Bullet</a>」（銀の弾丸は存在しない）で述べているように、ソフトウェア開発における万能の解決策は存在しません。</p><p>いろいろ証拠をつきつけられても、私たちはいまだに、自分を助けてくれる銀の弾丸を探し求めています。</p><p>Knuthの論文に戻りましょう。Knuthは前置きに続いて徹底的な歴史的見直しを行います。プログラミングの歴史上、gotoに反対の立場を取っていた人物を調べ上げており、古くは1959年の話にまでさかのぼると言及しています。</p><p>そして、論文は最初のメインセクション「goto文の除去」に突入します。ここでKnuthは、goto文を使ったforループやwhileループが含まれている様々なアルゴリズムをあちこちで示し、そのgoto文を除去する方法を論じています。ここでプログラム自体の他に興味深いのは、それらが<code>for</code>や<code>while</code>といった最も基本的なプログラム構造だけで出来ており、例えばクラスどころかプロシージャさえ使われていないということです。そこで疑問が湧いてきました。この論文を読むに当たって、プログラミングのどんな時代背景を考慮すべきなのでしょうか？</p><p>Knuthの論文が出版されたのは1974年です。ここで2つ目のコード例「<em>Example 1a</em>」をご覧ください。</p><p><img src="http://videlalvaro.github.io/images/myths/example_1a_knuth.png" alt="Example 1a"></p><p>上記で興味深いのは、アルゴリズム自体ではなく、その次の部分です。</p><p>つまりKnuthは話を中断し、現在は大抵のプログラミング言語を使う際に当然のことと見なされている<code>AND</code><a href="https://ja.wikipedia.org/wiki/%E7%9F%AD%E7%B5%A1%E8%A9%95%E4%BE%A1" rel="nofollow" title="" class="ext-link">短絡演算子</a>について説明しているのです。ではちょっと脇道に入って、この論文が出版された当時のコンピューティング業界の状況を見てみましょう。</p><p>先ほど、Knuthの論文に掲載されている例について、<code>if</code>や<code>for</code>、<code>while</code>といった基本的なプログラミング構造が使われていると述べました。論文の出版年は1974年で、ちょうどBarbara Liskovの重要な論文「<a href="http://dl.acm.org/citation.cfm?id=807045&amp;dl=ACM&amp;coll=DL" rel="nofollow" title="" class="ext-link">Programming with Abstract Data Types</a>」（抽象データ型を用いたプログラミング）が発表されたところでした。Liskovは<a href="http://www.infoq.com/presentations/programming-abstraction-liskov" rel="nofollow" title="" class="ext-link">InfoQ</a>で行った最近の講演の中で、当時は抽象化を行う手段といえばプロシージャであり、モジュールとは何であるかさえ知られていなかったと述べています。</p><p><img src="http://videlalvaro.github.io/images/myths/abstract_data_types_liskov.png" alt="Programming with Abstract Data Types"></p><p>論理プログラミングは<em>形</em>になり始めたばかりでした。<a href="http://dspace.mit.edu/handle/1721.1/6171" rel="nofollow" title="" class="ext-link">PLANNER</a>は1969年に設計され、<a href="http://dl.acm.org/citation.cfm?doid=155360.155362" rel="nofollow" title="" class="ext-link">Prolog</a>は1972年に欧州で誕生しました。</p><p><img src="http://videlalvaro.github.io/images/myths/the_birth_of_prolog.png" alt="The Birth of Prolog"></p><p>それ以前の1964年に<a href="http://web.archive.org/web/20120716185629/http:/www.bitsavers.org/pdf/dartmouth/BASIC_Oct64.pdf" rel="nofollow" title="" class="ext-link">BASIC</a>が開発され、1968年にはALGOLが登場しています。ALGOLは、<code>begin</code>と<code>end</code>をブロックデリミタとして導入した言語です。</p><p><img src="http://videlalvaro.github.io/images/myths/basic.png" alt="BASIC"></p><p>1973年にはUNIXが発表され、<a href="http://www.computerhistory.org/timeline/?year=1973" rel="nofollow" title="" class="ext-link">イーサネット</a>も考案されました。また、Carl Hewittによる<a href="http://worrydream.com/refs/Hewitt-ActorModel.pdf" rel="nofollow" title="" class="ext-link">アクターモデル</a>もこの年に開発されています。</p><p><img src="http://videlalvaro.github.io/images/myths/ethernet.png" alt="Ethernet"></p><p>Knuthの論文でもう一つ特徴的なのは、演算数を数えることでアルゴリズムの計算量を算出するという古い手法を取っていることです。1976年になって初めて、Knuthがアルゴリズム計算量の解析手法としてプログラミング界に<a href="http://www.phil.uu.nl/datastructuren/10-11/knuth_big_omicron.pdf" rel="nofollow" title="" class="ext-link">ビッグオー記法</a>を導入したのです。ビッグオー記法とは、1894年から数学の分野で用いられていた概念です。背景をさらにご紹介すると、1976年はApple Iが発表された年でもありました。</p><p><img src="http://videlalvaro.github.io/images/myths/big_omicron_knuth.png" alt="Big Omicron Knuth"></p><p><a href="https://archive.org/stream/dieanalytischeza00bachuoft#page/400/mode/2up" rel="nofollow" title="" class="ext-link"><img src="http://videlalvaro.github.io/images/myths/big_o_notation.png" alt="Big Oh Notation in Die analytische Zahlentheorie"></a></p><p>セキュリティの分野では、1977年に<a href="http://www.google.com/patents/US4405829" rel="nofollow" title="" class="ext-link">RSA暗号アルゴリズム</a>が発明されています。</p><p><img src="http://videlalvaro.github.io/images/myths/rsa_patent_scheme.png" alt="RSA Original Scheme"></p><p>翌1978年には、Robin Milnerが「<a href="https://courses.engr.illinois.edu/cs421/sp2013/project/milner-polymorphism.pdf" rel="nofollow" title="" class="ext-link">A Theory of Type Polymorphism in Programming</a>」（プログラミングにおける型多相性の理論）を発表しました。また同年、Leslie Lamportは分散システムに関する重要な論文「<a href="http://web.stanford.edu/class/cs240/readings/lamport.pdf" rel="nofollow" title="" class="ext-link">Time, Clocks, and the Ordering of Events in a Distributed System</a>」（訳注：リンク切れ）（分散システムにおける時間、クロック、およびイベントの順序づけ）を発表しています。</p><p><img src="http://videlalvaro.github.io/images/myths/type_polymorphism_milner.png" alt="RSA Original Scheme"></p><p>つまり当時は、PCが一般に普及するには程遠く、今日知られている公開鍵暗号法が登場しつつあり、抽象データ型のような今日一般的に使われているプログラミング手法が学術界で議論され始めたという時代だったのです。そうした背景を踏まえて考えてみると、なぜKnuthの論文に掲載されている例が、for文やgotoを使うループをいかに改善するかということに終始しているのか、あるいはなぜKnuthが<code>if</code>節内の<code>AND</code>の意味を説明する必要があったのかが見えてきます。</p><p>コンピュータリソースが乏しかった背景を考慮すれば、Knuthがプログラムから最大限のパフォーマンスを引き出すことに関心を持っていた理由も理解できます。Knuthは「I/Oバウンドでないプログラムにおける実行時間の大部分は、ソーステキストの約3％に集中している」こと、そしてある「内側のループ」の速度を10％上げればプログラム全体も同じだけ速くなるようなケースがしょっちゅうあるということを述べています。</p><p>Knuthが問題視しているのは、彼がチューリング賞受賞講演「<a href="http://dl.acm.org/citation.cfm?id=361612" rel="nofollow" title="" class="ext-link">Computer Programming as an Art</a>」（芸術としてのコンピュータプログラミング）で述べたように、プログラマがプログラムの見当違いの部分を速くしようと取り組んでいることです。</p><p>Knuthは、「例えば97％ぐらいの時間は、ささいな効率のことは忘れるべきだ」と述べ、有名な下記の言葉を続けています。</p><p>この最後の文は文脈から切り離されて引用されるケースが多く、この言葉自体が神話を生み出してきました。つまり、プログラムの最適化に際し何をすべきで何をすべきでないかについての、完全なる宗教のように捉えられているのです。最適化の議論における<a href="https://ja.wikipedia.org/wiki/%E3%82%B4%E3%83%89%E3%82%A6%E3%82%A3%E3%83%B3%E3%81%AE%E6%B3%95%E5%89%87" rel="nofollow" title="" class="ext-link">ゴドウィンの法則</a>のような状況です。問題なのは、論文では次に続いている下記の内容が、引用時には大抵省略されてしまうことです。</p><p>この文章の鍵となるのは、「そのコード（クリティカルコード）が認識されたあとに限った話である」という部分です。それからKnuthは次のように注意しています。</p><p>Knuthが最適化の実行を禁じているわけではないことは明らかです。最適化は行うのですが、それが有効であると分かっている場合に限って行うべきなのです。そしてもちろん、有効か否かを知る唯一の方法は、プログラムのベンチマークを測定、実行することです。</p><p>格言「<em>諸悪の根源</em>」が文脈から切り離されて引用されている状況で問題なのは、これがあらゆる種類の最適化を禁じるために使われているようだということです。まるでダモクレスの剣によって、コードを改善しようと試みることさえ妨げられているような状況なのです。</p><p>Knuthは論文の中で、gotoを除去できるプログラムの例を繰り返し示しています。ただし除去後のプログラムはどれも、元のプログラムと同じか非常に近いパフォーマンス指標しか示していません。けれども、プログラムに何らかのリファクタリングが必要か判断する際、プログラムの読みやすさと分かりやすさはKnuthにとって鍵となる要素です。なぜKnuthはプログラムの効率をそんなに気にかけているのかと不思議に思われるかもしれません。もちろんそれには理由があります。</p><p>Knuthの論文に示されている情報の背景がつかめてきました。そう考えてみると、ひょっとしたら今日使われている基本的アルゴリズムの大部分は、Knuthが書籍『The Art of Computer Programming』（コンピュータプログラミングの芸術）シリーズで述べていることに何らかの影響を受けているのかもしれません。</p><p>Knuthはこの論文で、追って以下のように述べています。</p><p>「我々が人間として抱える最大の問題は、信念と現実を混同することである」 – Alan Kay（「<a href="http://www.tele-task.de/archive/video/html5/14029/" rel="nofollow" title="" class="ext-link">Programming and Scaling</a>」＜プログラミングとスケーリング＞）</p><p>本来の文脈から脱して元々発表された論文よりも目立つようになった文章や論文名という、2つのケースしか示していませんが、<a href="https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%BC%E3%82%B4%E3%83%BB%E3%82%AB%E3%83%AB%E3%83%88%E3%83%BB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0" rel="nofollow" title="" class="ext-link">プログラミング界の神話</a>の例としてはこれで十分ではないでしょうか。</p><p>Alan Kayは<a href="https://queue.acm.org/detail.cfm?id=1039523" rel="nofollow" title="" class="ext-link">インタビュー</a>の中で、なぜ他の言語より技術上のメリットが多いと思われながら注目を失っていく言語があったり、一方で他の言語より普及するプログラミング言語があったりすると思うかについて語っています。Kayは、我々自身がプログラマとして受けた教育に問題があると理解しているようです。</p><p>Kayは、上記の状況からプログラミングが大衆文化であるかのような風潮が生み出され、この分野の基礎が無視されるようになったといい、こう付け加えています。</p><p>これは、今日のプログラミング文化に見られる2つの現象につながっています。TwitterとHacker Newsです。両サイトで起こる議論を見ていると、<a href="https://news.ycombinator.com/item?id=5473558" rel="nofollow" title="" class="ext-link">記事のタイトルを読んだだけ</a>で意見を出している人が多いように思えます。現在は<a href="http://en.wikipedia.org/wiki/Clickbait" rel="nofollow" title="" class="ext-link">クリックベイト</a>があまりにもはびこっているため、そういった誘惑的なタイトルをなくすことだけを目的とする<a href="http://www.vice.com/read/this-guy-hates-click-baity-headlines-heres-why" rel="nofollow" title="" class="ext-link">Twitterアカウント</a>さえあります。</p><p>私は以前、ふざけて「140文字に収まらない考えは、取るに足りない考えだ」と言ったことがあります。すると同僚が、140文字以内の論文を募集しているコンピュータサイエンス研究のグループがあるよ、と教えてくれました。それが下記のサイトです。</p><p><a href="http://tinytocs.org/" rel="nofollow" title="" class="ext-link"><img src="http://videlalvaro.github.io/images/myths/tiny_tocs.png" alt="Tiny TOCS"></a></p><p>この傾向によって、私たちのコンピュータサイエンス離れは進んでいるのではないでしょうか。過去に何があったかはもはや知られていません。再考案された手法には、<a href="http://thinking-forth.sourceforge.net/" rel="nofollow" title="" class="ext-link">アジャイル</a>、<a href="https://arialdomartini.wordpress.com/2012/07/20/you-wont-believe-how-old-tdd-is/" rel="nofollow" title="" class="ext-link">テスト駆動開発（TDD）</a>、<a href="http://www.isi.edu/~johnh/RESEARCH/ucla/#ficus_replication" rel="nofollow" title="" class="ext-link">オフラインファースト</a>（訳注：リンク切れ）といった新たな名前が与えられています。</p><p>Dijkstraはこの問題を十分<a href="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD13xx/EWD1308.html" rel="nofollow" title="" class="ext-link">認識</a>していました。</p><p>Dijkstraの論文は、数え切れないほどの議論の場で”ゴドウィンの法則化”している最たるものです。多くの場合は、タイトルしか言及されず、文脈や後にDijkstra自身がこの件について述べた内容は完全に無視されているのです。</p><p>知識がこのように扱われている状況を見ていると、『Fahrenheit 451』（邦訳書『華氏451度』）の一節を思い出します。消防隊長がモンターグに、本の禁じられている理由を説明する場面です。</p><p>なぜ私たちは、過去の優れた論文や考えのこうした<em>要約</em>だけを広め、神話を作り上げてしまうのでしょうか？　それには単純な答えと、より複雑で関連の強い答えがあるように思います。単純な理由は、無精なため、そして気の利いた感じに見せたいためでしょう。議論が沸騰してきたら、相手の主張に屈するよりも論文のタイトルを持ち込んだ方がいいですよね。これはもちろん皮肉です。</p><p>複雑な方の理由は、Richard Dawkinsが著書『<a href="http://en.wikipedia.org/wiki/The_Selfish_Gene" rel="nofollow" title="" class="ext-link">The Selfish Gene</a>』（邦訳書『<a href="https://ja.wikipedia.org/wiki/%E5%88%A9%E5%B7%B1%E7%9A%84%E9%81%BA%E4%BC%9D%E5%AD%90" rel="nofollow" title="" class="ext-link">利己的な遺伝子</a>』）で説明しているように、ミームに関係があるのではないでしょうか。ご紹介したようなプログラミングにまつわる一文の格言は、実際にその方法論の全容を学ぶことよりも、伝えたり従ったりする方が簡単です。Knuthも論文の中で次のように述べています。</p><p>プログラマの書いたコードの質を評価するよりも、コードを何行書いたかを数える方が簡単ですから。</p><p>結局のところ、私たちは重要なことに注意を向けるべきであり、自分が常に様々なトレードオフに直面し選択を行っているということを認識すべきなのです。なお、プログラミングの場合は、複雑なプログラムより分かりやすいプログラムの方が成功するでしょう。</p><p>最後に、この分野に関するDijkstraの言葉を引用して締めくくりたいと思います。</p><p>「コンピュータ産業がコンピューティングサイエンスを駄目にすることのないよう注意しなければならない」 – Dijkstra（「<a href="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD12xx/EWD1284.html" rel="nofollow" title="" class="ext-link">Computing Science: Achievements and Challenges</a>」＜コンピューティングサイエンス：業績と挑戦＞）</p><p><a href="http://www.meetup.com/Papers-We-Love-Madrid/" rel="nofollow" title="" class="ext-link">Papers We Love Madrid</a>での発表の機会を与えてくれた<a href="https://twitter.com/miguelinlas3" rel="nofollow" title="" class="ext-link">Miguel Pastor</a>と<a href="https://twitter.com/flopezluis" rel="nofollow" title="" class="ext-link">Félix López</a>に感謝を述べたいと思います。</p><p>同時に、本記事の草稿を校正してくれた<a href="https://twitter.com/leifwalsh" rel="nofollow" title="" class="ext-link">Leif Walsh</a>に感謝を述べたいと思います。この記事に間違いや誤植が残っていた場合は、全て私の責任です。</p>
