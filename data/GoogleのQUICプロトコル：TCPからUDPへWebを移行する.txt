<p><a href="https://ma.ttias.be/googles-quic-protocol-moving-web-tcp-udp/" rel="nofollow" title="" class="ext-link">Google’s QUIC protocol: moving the web from TCP to UDP</a> （2016-07-30） by <a href="https://ma.ttias.be/" rel="nofollow" title="" class="ext-link">Mattias Geniar</a></p><p>こんにちは！私の名前はMattias Geniarといいます。Belgiumの<a href="https://www.nucleus.be/en/" rel="nofollow" title="" class="ext-link">Nucleus Hosting</a>のサポートマネージャーであり、ごく普通のwebギークであり、<a href="https://ma.ttias.be/public-speaking/" rel="nofollow" title="" class="ext-link">講演</a>や<a href="http://podcast.sysca.st/" rel="nofollow" title="" class="ext-link">Podcast</a>も行っています。もし私の情報を受け取ることに興味があれば、Podcastと週刊ニュースレターも見てみてください。<br>
<a href="http://podcast.sysca.st/" rel="nofollow" title="" class="ext-link">SysCast podcast</a> : SysCast podcastではLinuxやオープンソースプロジェクトについて話したり、システム管理者や開発者にインタビューしたり、ウェブ関連技術について議論したりしています。ギークによるギークのためのショーです！<br>
<a href="https://www.cronweekly.com" rel="nofollow" title="" class="ext-link">cron.weekly newsletter</a> : 毎週日曜日に配信される、Linuxのシステム管理者やオープンソースユーザ向けのニュースレターです。オープンソースプロジェクトやLinuxのガイド・チュートリアルや最新ニュースなどについて、情報を追う助けになります。</p><p>QUIC（Quick UDP Internet Connections）プロトコルは、TCPではなくUDPをベースとして開発された、全く新しいWeb向けのプロトコルです。</p><p>（冗談で）<a href="https://daniel.haxx.se/blog/2016/07/27/workshop-day-two/" rel="nofollow" title="" class="ext-link">TCP/2</a>と呼ぶ人までいます。</p><p>私がQUICについて知ったのは数週間前のことです。<a href="http://podcast.sysca.st/podcast/4-curl-libcurl-future-web-daniel-stenberg/" rel="nofollow" title="" class="ext-link">SysCast Podcastのcurlとlibcurlについてのエピソード</a>を聞いていた時でした。</p><p>QUICプロトコルの本当に面白い点は、UDPへの移行というところだと思います。</p><p>現在、Webの伝送プロトコルは、信頼性を確保するため、TCP上に構築されています。このTCP接続を開始するためには、<em>3wayハンドシェイク</em>が行われています。つまりこれは、接続を開始するたびにラウンドトリップ<em>（ネットワークパケットの往復）</em>が追加されるということであり、新たな接続先に対し大幅な遅延を生じさせているのです。</p><p><img class="alignnone size-full wp-image-8056" src="https://ma.ttias.be/wp-content/uploads/2016/07/tcp_3_way_handshake.png" alt="tcp_3_way_handshake" width="346" height="294" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/tcp_3_way_handshake.png 346w, https://ma.ttias.be/wp-content/uploads/2016/07/tcp_3_way_handshake-300x255.png 300w" sizes="(max-width: 346px) 100vw, 346px"></p><p><span class="source-mention"><em>（出典：<a href="https://www.nanog.org/sites/default/files/meetings/NANOG64/1051/20150603_Rogan_Quic_Next_Generation_v1.pdf" rel="nofollow" title="" class="ext-link">UDPを介した次世代多重トランスポート（PDF）</a>）</em></span></p><p>それに加えて、暗号化された安全なHTTP接続を行うために、TLSとのネゴシエーションも必要ということになると、さらに多くのパケットをネットワーク間でやり取りしなければなりません。</p><p><img class="alignnone size-full wp-image-8057" src="https://ma.ttias.be/wp-content/uploads/2016/07/tcp_3_way_handshake_with_tls.png" alt="tcp_3_way_handshake_with_tls" width="388" height="388" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/tcp_3_way_handshake_with_tls.png 388w, https://ma.ttias.be/wp-content/uploads/2016/07/tcp_3_way_handshake_with_tls-150x150.png 150w, https://ma.ttias.be/wp-content/uploads/2016/07/tcp_3_way_handshake_with_tls-300x300.png 300w" sizes="(max-width: 388px) 100vw, 388px"></p><p><span class="source-mention"><em>（出典：<a href="https://www.nanog.org/sites/default/files/meetings/NANOG64/1051/20150603_Rogan_Quic_Next_Generation_v1.pdf" rel="nofollow" title="" class="ext-link">UDPを介した次世代多重トランスポート（PDF）</a>）</em></span></p><p><a href="https://en.wikipedia.org/wiki/TCP_Fast_Open" rel="nofollow" title="" class="ext-link">TCP Fast Open</a>のような革新はTCPの状況を改善するとは思いますが、これはまだ広く普及しているわけではありません。</p><p>一方、UDPは<em>Fire and Forget（撃ちっ放しの）</em>プロトコルだと言えます。メッセージがUDPで送信されると、後は宛先に到達するものだと<em>想定されています</em>。これの利点は、ネットワークでパケットを検証するために費やされる時間が少ないということです。欠点は、信頼性を確保するには、パケットのデリバリ確認ができるよう、UDP<em>の上に</em>何かを構築しなければいけないということです。</p><p>そこで、GoogleのQUICプロトコルが登場します。</p><p>QUICプロトコルは、接続を開始<em>すると</em>、全てのTLS（HTTPS）パラメータを1つか2つのパケットでネゴシエートすることができます（パケット数は、接続先が初めて接続する新しいサーバか、既に接続したことのあるホストかによります）。</p><p><img class="alignnone size-full wp-image-8058" src="https://ma.ttias.be/wp-content/uploads/2016/07/udp_quic_with_tls.png" alt="udp_quic_with_tls" width="356" height="281" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/udp_quic_with_tls.png 356w, https://ma.ttias.be/wp-content/uploads/2016/07/udp_quic_with_tls-300x237.png 300w" sizes="(max-width: 356px) 100vw, 356px"></p><p><span class="source-mention"><em>（出典：<a href="https://www.nanog.org/sites/default/files/meetings/NANOG64/1051/20150603_Rogan_Quic_Next_Generation_v1.pdf" rel="nofollow" title="" class="ext-link">UDPを介した次世代多重トランスポート（PDF）</a></em></span></p><p>これにより、最初の接続とページの読み込みに大きな差が出ることになります。</p><p>QUICプロトコル開発チームがやろうとしていることは、それはもう衝撃的なことです。チームは、UDPプロトコルの持つ速さと<em>発展性</em>に、TCPプロトコルの持つ信頼性を組み合わせた新しいプロトコルを開発しようとしています。</p><p>これについてはWikipediaがうまく説明しています。</p><p>上記の中で強調したい部分があります。「<strong>QUICの機能が有効なものだと判明すれば、そうした機能をTCP</strong>とTLS（とりわけデプロイサイクルが長い）<strong>の後継バージョンに移行することができる</strong>」というところです。</p><p>今やTCPプロトコルは非常に高度に統制されています。WindowsやLinuxカーネルばかりでなく、個々のスマートフォンのOSにも実装されています。あらゆる低レベルデバイスでも、ほとんど実装されているのです。TCPがうまく機能しているところでそれを改善しようとすれば、TCPが実装されている先述のデバイスもそれに対応しなければならないわけですから、険しい道のりになります。</p><p>一方、UDPは設計においては比較的シンプルです。GoogleがTCPについて考えている理論のいくつかを証明するには、UDPの上に新しいプロトコルを実装する方が<em>速く</em>進められるのです。そうしてネットワークの輻輳や、ストリームのブロックなどについて、理論を実証できれば、後はQUICの利点をTCPプロトコルへ移行することについて検討できるようになります。</p><p>とは言え、TCPスタックを変更するとなると、それぞれのTCPスタックをアップデートするために、LinuxカーネルやWindows、仲介するミドルボックス、ユーザなどによる作業も必要になります。UDPでも同じことを行うのは、プロトコル開発者にとってはもっと難しいものにはなりますが、ただ開発者は工程の繰り返しをずっと高速に行うことができ、<em>数年、数十年</em>とかかるわけではなく、<em>数カ月</em>で、こうした理論を実装することができます。</p><p>現代のHTTPS接続を構成する層で言うと、QUICはTLSスタックとHTTP/2の一部を置き換えることになります。</p><p>QUICプロトコルは、既存のTLS 1.2を使わないため、<a href="https://docs.google.com/document/d/1g5nIXAIkN_Y-7XJW5K45IblHd_L2f5LTaDUDwvZ5L6g/edit" rel="nofollow" title="" class="ext-link">独自の暗号化層</a>を実装しています。</p><p><img class="alignnone size-full wp-image-8094" src="https://ma.ttias.be/wp-content/uploads/2016/07/tcp_udp_quic_http2_compared.png" alt="tcp_udp_quic_http2_compared" width="1344" height="636" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/tcp_udp_quic_http2_compared.png 1344w, https://ma.ttias.be/wp-content/uploads/2016/07/tcp_udp_quic_http2_compared-300x142.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/tcp_udp_quic_http2_compared-768x363.png 768w, https://ma.ttias.be/wp-content/uploads/2016/07/tcp_udp_quic_http2_compared-1024x485.png 1024w" sizes="(max-width: 1344px) 100vw, 1344px"></p><p>TCPの位置にはUDPが置き換わり、QUICの上にはリモートサーバとの通信に使われる、より小さなHTTP/2 APIが置かれています。より小さい理由は、多重化および接続管理はQUICで処理されるためです。後は、HTTPプロトコルの解釈です。</p><p>SPDYと<a href="https://ma.ttias.be/?s=http2" rel="nofollow" title="" class="ext-link">HTTP/2</a>では現在、ページのアセットそれぞれに対し複数の接続を確立するのではなく、サーバに接続する1つのTCP接続だけを確立しています。その1つのTCP接続は独立してリソースを要求して受け取ることができます。</p><p><img class="alignnone size-full wp-image-8064" src="https://ma.ttias.be/wp-content/uploads/2016/07/spdy_multiplexed_assets.png" alt="spdy_multiplexed_assets" width="850" height="228" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/spdy_multiplexed_assets.png 850w, https://ma.ttias.be/wp-content/uploads/2016/07/spdy_multiplexed_assets-300x80.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/spdy_multiplexed_assets-768x206.png 768w" sizes="(max-width: 850px) 100vw, 850px"></p><p><span class="source-mention"><em>（出典：<a href="https://docs.google.com/presentation/d/13LSNCCvBijabnn1S4-Bb6wRlm79gN6hnPFHByEXXptk/present?slide=id.g17a0599c4_1164" rel="nofollow" title="" class="ext-link">QUIC：UDPを介した次世代多重トランスポート</a>）</em></span></p><p>全てがその1つのTCP接続に依存しているため、ある欠点が生じています。それが<strong>ヘッドオブラインブロッキング（Head-of-Line Blocking、HOLブロッキング）</strong>です。</p><p>TCPでは、パケットは正しい順序で<strike>到達する</strike>処理される必要があります。パケットがサーバに、あるいはサーバから送られる途中でパケットロスが生じた場合、それは再送されなければなりません。TCP接続では、<strong>TCPパケットが処理される順序が重要である</strong>ため、残りのパケットの処理を続けるのではなく、ロスが起きたTCPパケットを待つ（または”ブロックする”）必要があるのです。</p><p><img class="alignnone size-full wp-image-8066" src="https://ma.ttias.be/wp-content/uploads/2016/07/spdy_multiplexed_assets_head_of_line_blocked.png" alt="spdy_multiplexed_assets_head_of_line_blocked" width="745" height="256" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/spdy_multiplexed_assets_head_of_line_blocked.png 745w, https://ma.ttias.be/wp-content/uploads/2016/07/spdy_multiplexed_assets_head_of_line_blocked-300x103.png 300w" sizes="(max-width: 745px) 100vw, 745px"></p><p><span class="source-mention"><em>（出典：<a href="https://docs.google.com/presentation/d/13LSNCCvBijabnn1S4-Bb6wRlm79gN6hnPFHByEXXptk/present?slide=id.g17a0599c4_1164" rel="nofollow" title="" class="ext-link">QUIC：UDPを介した次世代多重トランスポート</a>）</em></span></p><p>QUICでは、もはやTCPを利用しないことにより、この問題は解決されます。</p><p><strong>UDPはパケットを受信する順序に左右されることはありません。</strong>パケットの送信中にロスが生じる可能性はありますが、それは（1つのCSS/JSファイルに含まれているような）個々のリソースに影響を及ぼすだけでしょうし、接続全体をブロックすることはありません。</p><p><img class="alignnone size-full wp-image-8068" src="https://ma.ttias.be/wp-content/uploads/2016/07/quic_multiplexing.png" alt="quic_multiplexing" width="860" height="233" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/quic_multiplexing.png 860w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_multiplexing-300x81.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_multiplexing-768x208.png 768w" sizes="(max-width: 860px) 100vw, 860px"></p><p><span class="source-mention"><em>（出典：<a href="https://docs.google.com/presentation/d/13LSNCCvBijabnn1S4-Bb6wRlm79gN6hnPFHByEXXptk/present?slide=id.g17a0599c4_1164" rel="nofollow" title="" class="ext-link">QUIC：UDPを介した次世代多重トランスポート</a>）</em></span></p><p>QUICの本質は、ブロッキングを行わないトランスポート層プロトコルの上に構築した、SPDYとHTTP2（多重化）のいいとこ取りをしたプロトコルだと言えます。</p><p>あなたが幸運にも高速インターネットを使っているのなら、あなたとリモートサーバ間のレイテンシは10～50msの範囲です。あなたがネットワーク経由で送信する全てのパケットが受信されるには、そのくらいの時間がかかっています。</p><p>レイテンシが50ms未満では、利点はすぐには分からないかもしれません。</p><p>しかし、例えば別の大陸にあるサーバや、あるいはEdgeや3G/4G/LTEを使うモバイルキャリアを介して、あるサーバにアクセスするときには、レイテンシは見過ごせないものになります。ヨーロッパからアメリカのサーバにアクセスするには、大西洋を横断しなければなりません。行き来しなければならない物理的な距離があるため、それだけですぐさま<strong>100ms</strong>以上のレイテンシが加わるという不利益を受けることになります。</p><p><img class="alignnone size-full wp-image-8073" src="https://ma.ttias.be/wp-content/uploads/2016/07/network_round_trip_europe_london.png" alt="network_round_trip_europe_london" width="973" height="437" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/network_round_trip_europe_london.png 973w, https://ma.ttias.be/wp-content/uploads/2016/07/network_round_trip_europe_london-300x135.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/network_round_trip_europe_london-768x345.png 768w" sizes="(max-width: 973px) 100vw, 973px"></p><p><span class="source-mention"><em>（出典：<a href="https://docs.google.com/presentation/d/13LSNCCvBijabnn1S4-Bb6wRlm79gN6hnPFHByEXXptk/present?slide=id.g17a0599c4_1164" rel="nofollow" title="" class="ext-link">QUIC：UDPを介した次世代多重トランスポート</a>）</em></span></p><p>同種のレイテンシはモバイルネットワークにもあります。接続が低速な場合、電波と経由するネットワークだけが原因で携帯電話とリモートサーバの間のレイテンシが100～150msになることは、なくもありません。4G/LTEなら、50msほどのレイテンシになります。</p><p>モバイルデバイスを使った長距離ネットワークの場合は、4つのパケット（TCPとTLSの場合）を送受信するのと1つのパケット（QUICの場合）を送受信するのとでは、初期の接続のために省ける時間が最大300msも違うことがあるのです。</p><p>QUICで巧みな機能は、<strong>前方誤り訂正（FEC）</strong>です。再送信しなくても欠落したパケットを復元できるよう、送信された全てのパケットにも他のパケットの十分なデータが含まれています。</p><p><strong>これは本質的に、ネットワークレベルのRAID 5です。</strong></p><p>そのため、トレードオフも発生します。このように、より簡単に復元できるよう、欠落パケットの<em>ポテンシャル</em>が付加されるので、各UDPパケットには厳密に必要となる以上の<em>ペイロード</em>が含まれるのです。</p><p>現行の割合は10パケットぐらいでしょう。つまり、10個のUDPパケットが送信されるたびに、欠落したパケットを再現するために十分なデータが用意されるということです。言ってみれば10％のオーバーヘッドです。</p><p>FECを、ロスしたパケットの再送を不要にするために生じる、”<em>UDPパケット1個当たりのデータ</em>“という形の犠牲と見なすとよいでしょう。ロスしたパケットを再送する方が、ずっと時間がかかるからです<em>（受信側は欠落したパケットを確認し、再要求し、応答を待つ必要があるため）</em>。</p><p>UDPへの切り替えでは、もう一つの素晴らしいメリットがもたらされます。接続の<em>送信元IP</em>に依存しなくなるということです。</p><p>TCPでは、接続が成立するためには4つのパラメータが必要です。いわゆる<strong>四つ組</strong>です。</p><p>新たなTCP接続を開始するには、送信元IP、送信元ポート、宛先IP、宛先ポートの情報が必要です。Linuxサーバでは、この四つ組を<code>netstat</code>コマンドで確認できます。</p><p>パラメータ（送信元IP、送信元ポート、宛先IP、宛先ポート）のいずれかが変わった場合は、新たなTCP接続が必要となります。</p><p>そういう訳で、モバイル端末では、WiFiと3G/LTEを絶えず切り替える可能性があることから、安定した接続を維持するのが非常に難しいのです。</p><p><img src="https://ma.ttias.be/wp-content/uploads/2016/07/quic_parking_lot_problem.png" alt="quic_parking_lot_problem" width="1720" height="902" class="alignnone size-full wp-image-8102" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/quic_parking_lot_problem.png 1720w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_parking_lot_problem-300x157.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_parking_lot_problem-768x403.png 768w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_parking_lot_problem-1024x537.png 1024w" sizes="(max-width: 1720px) 100vw, 1720px"></p><p><span class="source-mention"><em>（出典：<a href="https://docs.google.com/presentation/d/13LSNCCvBijabnn1S4-Bb6wRlm79gN6hnPFHByEXXptk/present?slide=id.g17a0599c4_1164" rel="nofollow" title="" class="ext-link">QUIC：UDPを介した次世代多重トランスポート</a>）</em></span></p><p>QUICはUDPを使用しますので、四つ組がありません。</p><p>QUICは、一意の接続に対する独自の識別子「<strong>Connection UUID</strong>」を実装しています。WiFiからLTEに切り替えてもConnection UUIDを維持することができるので、接続やTLSを再ネゴシエートする必要がありません。前回の接続は引き続き有効です。</p><p>これは<a href="https://mosh.mit.edu/" rel="nofollow" title="" class="ext-link">Mosh Shell</a>と同様の仕組みです。Mosh Shellは、ローミングとモバイルエクスペリエンスを向上させるために、UDP上でSSH接続を維持します。</p><p>またこの仕組みのおかげで、複数の送信元からコンテンツを取得する可能性が生まれます。Connection UUIDがWiFi<em>および</em>セルラー接続を越えて共有できるのなら、理論上は、コンテンツのダウンロードに両方の媒体を使うことが可能です。利用可能なあらゆるインターフェースを使って、コンテンツのストリーミングやダウンロードを事実上並列で実行できるということです。</p><p>理論上の段階ではあるものの、UDPを使えば、そうした新たなことが可能になるのです。</p><p>Chromeブラウザは、2014年からQUICを（試験的に）サポートしています。QUICを試してみたい方は、<a href="https://ma.ttias.be/enable-quic-protocol-google-chrome/" rel="nofollow" title="" class="ext-link">Chromeでこのプロトコルを有効にすることができます</a>。QUICプロトコルをテストできるのは実際上、Googleのサービスに限られています。</p><p>Googleの最大の強みは、<em>ブラウザ</em>と<em>サーバ</em>の両方で市場シェアを持っていることです。QUICをクライアント（Chrome）とサーバ（YouTubeやGoogle.comといったGoogleサービス）の両方で有効にすることで、Googleは新しいプロトコルの大規模な試験を<em>本番環境で</em>実施できるのです。</p><p>HTTP/2とQUICプロトコルをブラウザ内のアイコンとして表示する、便利なChromeプラグインがあります。<a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en" rel="nofollow" title="" class="ext-link">HTTP/2 and SPDY indicator</a>です。</p><p><code>chrome://net-internals/#quic</code>タブを開くと、QUICの現在の使用状況を確認することができます（前述した<strong>Connection UUID</strong>も表示されます）。</p><p><img class="alignnone size-full wp-image-8079" src="https://ma.ttias.be/wp-content/uploads/2016/07/quic_net_internals_sessions.png" alt="quic_net_internals_sessions" width="936" height="260" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/quic_net_internals_sessions.png 936w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_net_internals_sessions-300x83.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_net_internals_sessions-768x213.png 768w" sizes="(max-width: 936px) 100vw, 936px"></p><p>下位レベルの詳細に興味があれば、<code>chrome://net-internals/#events&amp;q=type:QUIC_SESSION%20is:active</code>で全てのライブ接続を表示し、個々のパケットごとのキャプチャを見ることも可能です。</p><p><img class="alignnone size-full wp-image-8080" src="https://ma.ttias.be/wp-content/uploads/2016/07/quic_debug_packets_chrome.png" alt="quic_debug_packets_chrome" width="1010" height="355" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/quic_debug_packets_chrome.png 1010w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_debug_packets_chrome-300x105.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_debug_packets_chrome-768x270.png 768w" sizes="(max-width: 1010px) 100vw, 1010px"></p><p>SPDY接続やHTTP/2接続の内部を見る手順と似ています。</p><p>この記事はTCPではなくUDPを使うQUICがテーマですので、システム管理者やネットワークエンジニアの方は、冒頭でちょっと肩をすくめたことでしょう。それももっともだろうと思います。</p><p>例えば、私たち<a href="https://www.nucleus.be/en/" rel="nofollow" title="" class="ext-link">Nucleus Hosting</a>では、Webサーバのファイアウォールを設定する際、以下のようなルールを適用しています。</p><p><img class="alignnone size-full wp-image-8082" src="https://ma.ttias.be/wp-content/uploads/2016/07/firewall_http_https_incoming_allow.png" alt="firewall_http_https_incoming_allow" width="881" height="119" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/firewall_http_https_incoming_allow.png 881w, https://ma.ttias.be/wp-content/uploads/2016/07/firewall_http_https_incoming_allow-300x41.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/firewall_http_https_incoming_allow-768x104.png 768w" sizes="(max-width: 881px) 100vw, 881px"></p><p><strong>プロトコルの列に「TCP」</strong>とあることに注目してください。</p><p>当社のファイアウォールは、他の大勢のシステム管理者が運用しているものとさほど変わりません。現時点では、Webサーバで<code>80/TCP</code>や<code>443/TCP</code>以外を許可する理由がないのです。つまりTCPのみであり、UDPは使用していません。</p><p>そしてQUICプロトコルを許可するには、<code>443/UDP</code>も許可する必要が出てきます。</p><p>サーバとしては、Webサーバで外からの<code>443/UDP</code>を通すことになります。クライアントとしては、インターネットで内からの<code>443/UDP</code>を許可することになります。</p><p>このことは、大企業では問題となりそうです。通常TCPのみを使っているポートでUDPを許可するためにセキュリティを通過させるというのは、<em>疑わしい</em>感じがするからです。</p><p>接続性に関して、私はこの点が最大の問題になると思ったのですが、Googleが行った実験では、<a href="https://www.ietf.org/proceedings/96/slides/slides-96-quic-3.pdf" rel="nofollow" title="" class="ext-link">そうではない</a>という結果が出ています。</p><p><img class="alignnone wp-image-8083 size-medium" src="https://ma.ttias.be/wp-content/uploads/2016/07/quic_connection_statistics-300x195.png" alt="quic_connection_statistics" width="300" height="195" srcset="https://ma.ttias.be/wp-content/uploads/2016/07/quic_connection_statistics-300x195.png 300w, https://ma.ttias.be/wp-content/uploads/2016/07/quic_connection_statistics.png 598w" sizes="(max-width: 300px) 100vw, 300px"></p><p><span class="source-mention"><em>（出典：<a href="https://www.ietf.org/proceedings/96/slides/slides-96-quic-3.pdf" rel="nofollow" title="" class="ext-link">GoogleにおけるQUICデプロイ実験</a>）</em></span><br>
<em>注釈<br>
QUICが動作：93％<br>
UDPのレートが制限されている：0.3％<br>
UDPがASに対してブロックされている：0.2％<br>
UDPがユーザに対してブロックされている：4.5％<br>
Chromeが使われていない：2％</em></p><p>上記の数字は、スウェーデンで最近開催されたHTTP関連のワークショップで示されたものです。ここでいくつか重要な点があります。</p><p>QUICはTLS相当の働きもしますので、心配する必要があるのはUDPの443番ポートだけです。UDPの80番ポートが近々用いられるようになるとは考えにくいところです。</p><p>暗号化された通信だけを行うのが有利な理由は、ディープ・パケット・インスペクションのミドルウェア（侵入防止システムとも呼ばれます）がTLSトラフィックを復号してプロトコルを修正することはできず、バイナリデータをファイアウォール越しに参照し（願わくは）単に通過させるということにあります。</p><p>現在、QUICが利用できるWebサーバはバージョン0.9以降の<a href="https://github.com/mholt/caddy/wiki/QUIC" rel="nofollow" title="" class="ext-link">Caddy</a>のみです。</p><p>しかし、クライアント側とサーバ側のサポートはいずれも試験的なものとされていますので、実行は自己責任となります。</p><p>QUICサポートがデフォルトで有効になっているクライアントはないので、QUICを実行して自分のブラウザでQUICを有効にしても今のところ安全上の問題はないでしょう。<br>
（<strong>追記：Chrome 52以降では、ホワイトリストに掲載されていないドメインに対しても、QUICはデフォルトで有効になっています</strong>）</p><p>QUICのデバッグを進めるために、curlがQUICを早く実装してほしいものですが、<a href="https://daniel.haxx.se/blog/2016/07/20/curl-wants-to-quic/" rel="nofollow" title="" class="ext-link">curlがQUICに関心を持っていることは間違いありません</a>。</p><p>Googleは<a href="http://blog.chromium.org/2015/04/a-quic-update-on-googles-experimental.html" rel="nofollow" title="" class="ext-link">2015年のブログ記事</a>で、QUICの実装結果をいくつか公開しています。</p><p>YouTubeの統計値は特に興味深い結果です。このような改善が可能なのであれば、Vimeoや”成人向け動画配信サービス”などの動画配信サービスに採用される日も近いでしょう。</p><p>QUICプロトコルは本当に魅力的だと思います。</p><p>QUICに多大な労力がつぎ込まれていること、そして最大のWebサイトで既に動いていて<em>効果を挙げている</em>ということに衝撃を受けています。</p><p>QUICの仕様が固まって、他のブラウザやWebサーバで実装されるようになる日が待ち遠しい限りです。</p><p>Jim Roskindがこの記事にコメントを寄せてくれましたので（<a href="https://ma.ttias.be/googles-quic-protocol-moving-web-tcp-udp/#comment-36462" rel="nofollow" title="" class="ext-link">こちらを参照</a>）、ぜひ紹介させてください。</p><p>Jim、コメントをいただきありがとうございます。QUICプロトコルの開発者から感想を聞くことができて大変うれしいです。</p><p>さらに詳しく知りたい方は、以下の資料をご参照ください。</p><p>この取り組みを進めているGoogleに感謝しています。</p>
