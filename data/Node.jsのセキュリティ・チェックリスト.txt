<p><a href="https://blog.risingstack.com/node-js-security-checklist/" rel="nofollow" title="" class="ext-link">Node.js Security Checklist</a> （2015-10-13） by <a href="https://blog.risingstack.com/author/gergely/" rel="nofollow" title="" class="ext-link">Gergely Nemeth</a></p><p><small>(訳注：2016/1/5、いただいた翻訳フィードバックを元に記事を修正いたしました。)</small></p><p><strong>セキュリティ – 誰もが見て見ぬふりをする問題</strong>。セキュリティが重要だということは、誰もが認識していると思いますが、真剣にとらえている人は少数だと思います。我々、RisingStackは、皆さんに正しいセキュリティチェックを行っていただきたいと考え、チェックリストを用意しました。皆さんのアプリケーションが何千人というユーザやお客様に使用される前にセキュリティチェックを行ってください。</p><p>ここに挙げたリストのほとんどは概略的なもので、Node.jsに限らず、全ての言語やフレームワークに適用することができます。ただし、いくつのツールは、Node.js固有のものとなりますので、ご了承ください。<a href="https://blog.risingstack.com/node-js-security-tips" rel="nofollow" title="" class="ext-link">Node.jsセキュリティ</a>に関するブログ記事も投稿してありますので、こちらも是非読んでみてください。</p><p>Webサイトには、設定しておくべきセキュリティに関連するHTTPヘッダがあるので、ご紹介しておきます。</p><p>Node.jsでは、<a href="https://www.npmjs.com/package/helmet" rel="nofollow" title="" class="ext-link">Helmet</a>モジュールを使用することで、これらのヘッダを簡単に設定できます。</p><p><a href="http://koajs.com/" rel="nofollow" title="" class="ext-link">Koa</a>には、<a href="https://www.npmjs.com/package/koa-helmet" rel="nofollow" title="" class="ext-link">koa-helmet</a>が使えます。</p><p>また、多くのアーキテクチャでは、実際のアプリケーションのコードを変更することなく、これらのヘッダをWebサーバのコンフィギュレーション（Apache, nginx）で設定することができます。Nginxでの設定は、以下のようになります。</p><p>全ての例は、<a href="https://gist.github.com/plentz/6737338" rel="nofollow" title="" class="ext-link">nginx configurationファイル</a>をご覧ください。</p><p>あなたのWebサイトに必要なヘッダが含まれているかどうかを確認したいようであれば、<a href="http://cyh.herokuapp.com/cyh" rel="nofollow" title="" class="ext-link">http://cyh.herokuapp.com/cyh</a>オンラインチェッカーが利用できます。</p><p>フロントエンドのアプリケーションをデプロイする場合、ソースコードに含まれるAPI secretやAPI認証が、絶対に露呈されないこと、そして誰にも解読できないようにすることに注意を払ってください。</p><p>自動でこれらを確認する良い方法はありませんが、クライアント側のセンシティブ情報が誤って露呈されてしまうリスクを軽減する、いくつかのオプションがあります。</p><p>総当たり攻撃は、体系的に考えられる暗号をリストアップし、各暗号が問題のステートメントに適合しているかを試します。Webアプリケーションでは、ログインのエンドポイントが、まさにこの攻撃の対象と言えるでしょう。</p><p>これらの攻撃からアプリケーションを保護するには、rate-limitingといったような機能を実装する必要があります。Node.jsでは、<a href="https://www.npmjs.com/package/ratelimiter" rel="nofollow" title="" class="ext-link">ratelimiter</a>パッケージが利用できます。</p><p>もちろん、これをミドルウェアに含め、アプリケーションに入れ込むこともできます。ExpressとKoaの両フレームワークには、これに対応する素晴らしいミドルウェアがあります。Koaの場合の例を見てみましょう。</p><p>ここでは、与えられた時間内でユーザがログインを試すことができる回数を制限しました。これによって、総当たり攻撃されるリスクを軽減することができます。<em>注意する点として、これらのコンフィギュレーションは、各アプリケーションに合わせて設定する必要がありますので、コピー&amp;ペーストはしないでください。</em></p><p>このシナリオが、あなたのWebサイトでどのように振る舞うのか試したい場合は、<a href="https://github.com/vanhauser-thc/thc-hydra" rel="nofollow" title="" class="ext-link">hydra</a>を利用することができます。</p><p><strong>セキュアなクッキーを使うことの重要性を軽視することはできません。HTTPのようなステートレスなプロトコルを経由して状態を維持する必要があるような動的なWebアプリケーションでは特に重要となります。</strong></p><p>以下は、各クッキーに対して設定することができる属性とその意味を説明しています。</p><p>Node.jsでは、<a href="https://www.npmjs.com/package/cookies" rel="nofollow" title="" class="ext-link">cookie</a>パッケージを使うことで、このクッキーを簡単に作成することができます。これには、マシン語が使われているので、恐らく、<a href="https://www.npmjs.com/package/cookie-session" rel="nofollow" title="" class="ext-link">cookie-session</a>といったような、ラッパーを使うことになるでしょう。</p><p><em>（この例は、<a href="https://www.npmjs.com/package/cookie-session" rel="nofollow" title="" class="ext-link">cookie-session</a>モジュールのドキュメンテーションから抜粋しています。）</em></p><p>CSRF（Cross-Site Request Forgery）とは、ユーザがアクセスしているWebアプリケーション上で、望んでいないアクションの実行を強制する攻撃です。攻撃者は、偽造されたリクエストに対してのレスポンスを見ることができないので、この攻撃は、データ盗用ではなく、特に状態を変更するリクエストを対象としています。</p><p>こういった攻撃を軽減するために、Node.jsでは<a href="https://www.npmjs.com/package/csrf" rel="nofollow" title="" class="ext-link">csrf</a>モジュールを利用することができます。これもまたマシン語が使われているので、異なるフレームワーク向けのラッパーがあります。例として、<a href="https://www.npmjs.com/package/csurf" rel="nofollow" title="" class="ext-link">csurf</a>モジュールがあります。これは、CSRFプロテクション向けのExpressミドルウェアです。</p><p>ルートのハンドラーレベルでは、以下のようにする必要があります。</p><p>ビューレイヤでは、以下のようにCSRFトークンを使う必要があります。</p><p><em>（この例は、<a href="https://www.npmjs.com/package/csurf" rel="nofollow" title="" class="ext-link">csurf</a>モジュールのドキュメンテーションから抜粋しています。）</em></p><p>ここでは、防御しなければならない、類似しつつも異なったタイプの攻撃を2つご紹介します。1つは、反射型クロスサイトスクリプティング、もう1つは蓄積型クロスサイトスクリプティングです。</p><p><strong>Refrected(反射型) クロスサイトスクリプティング</strong>は、攻撃者が巧妙に作成したリンクを用いて、実行可能なJavaScriptのコードをHTMLレスポンスに注入することで発生します。</p><p><strong>Stored(蓄積型) クロスサイトスクリプティング</strong>は、適切にフィルタされていないユーザの入力内容をアプリケーションが保存している際に発生します。なお、これが実行されるのは、Webアプリケーションの管理下にあるユーザのブラウザ上です。</p><p><strong>このような攻撃を防ぐために、常にユーザの入力内容をフィルタして、サニタイズを行うようにしましょう。</strong></p><p>SQLインジェクションとは、ユーザからの入力を通じて、断片的または完全なSQLクエリを注入することです。これにより、機密情報の入手や破壊が可能になります。</p><p>以下の例を見てみましょう。</p><p>この例では、<code>$id</code>はユーザが入力する内容です。では、ユーザが<code>2 or 1=1</code>と入力したら、どうなるでしょう？　この場合、クエリは以下のようになります。</p><p>このような攻撃を最も簡単に防ぐには、パラメータ化クエリやプリペアドステートメントを使うのが良いでしょう。</p><p>Node.jsのPostgreSQLを使用している場合は、恐らく<a href="https://www.npmjs.com/package/pg" rel="nofollow" title="" class="ext-link">node-postgres</a>モジュールを使っているはずです。パラメータ化クエリは、以下のようにするだけで作成できます。</p><p><a href="http://sqlmap.org/" rel="nofollow" title="" class="ext-link">sqlmap</a>は、オープンソースの侵入テストツールです。データベースサーバにおいて、SQLインジェクションの弱点とデータベースサーバ乗っ取りを検出・利用するのを自動化します。自身のアプリケーションにおいて、SQLインジェンクションの脆弱性をテストする際は、このツールを使ってみてください。</p><p>コマンドインジェクションは、遠隔WebサーバからOSコマンドを実行するために攻撃者が使うテクニックです。この手法で、攻撃者はシステムのパスワードまで取得できてしまう可能性があります。</p><p>例として、以下のURLがあるとしましょう。</p><p>これは以下のように変更されることがあります。</p><p>この例では<code>%3B</code>がセミコロンになるので、複数のOSコマンドが実行される恐れがあります。</p><p><strong>このような攻撃を防ぐために、常にユーザの入力内容をフィルタして、サニタイズを行うようにしましょう。</strong></p><p>Node.jsについても触れておきましょう。</p><p><code>child_process.exec</code>は内部で、<code>/bin/sh</code>を実行するために呼び出しを行います。これはbashインタプリタであって、プログラムランチャではありません。</p><p>ユーザの入力内容がこのメソッドに渡されので、バッククォートや<code>$()</code>を混入される可能性があるので厄介です。そうなると、攻撃者に新しいコマンドを注入される恐れがあるのです。</p><p>この問題は、<code>child_process.execFile</code>を使うだけで解決できます。</p><p>HTTPはクリアテキストのプロトコルなので、HTTPSとして知られるSSL/TLSのトンネルによって保護されていなくてはなりません。近頃は、高度な暗号が一般的に使用されていますが、サーバの設定を間違えると、強制的に弱い暗号を使用している状態になったり、最悪の場合には何も暗号がかかっていない状態になったりする恐れがあります。</p><p>そのため、以下の内容をテストする必要があります。</p><p>このテストは、<a href="https://nmap.org/" rel="nofollow" title="" class="ext-link">nmap</a>や<a href="https://github.com/iSECPartners/sslyze" rel="nofollow" title="" class="ext-link">sslyze</a>というツールを使うと、簡単に行えます。</p><p><strong>認証情報の確認</strong></p><p><strong>sslyzeでSSL/TSLの脆弱性をテストする</strong></p><p>これについては設定管理のパートでも少し触れましたが、<strong>Strict Transport Security</strong>ヘッダは、サーバへの安全な(SSL/TLS経由のHTTP)接続を強制しています。以下のTwitterの例を見てみましょう。</p><p>この<code>max-age</code>は、ブラウザが自動的に全てのHTTPリクエストをHTTPSに変換する秒数を定義します。</p><p>これは以下のようにすると、とても簡単にテストできます。</p><p>アカウントのロックアウトは、総当たり推測攻撃を軽減するためのテクニックです。実際には、何回かログインに失敗したら、システム側で一定の期間（元々は数分でしたが、この期間は急激に長くなっています）ログインの試行を禁止します。</p><p>これらの攻撃からアプリケーションを守るには、前述のRate Limiterパターンを使いましょう。</p><p>この手の攻撃は、正規表現の実装によって極端に動作が重くなり、最悪の状況に陥る可能性に付け込んでいます。以下は、不正な正規表現と呼ばれています。</p><p><code>([a-zA-Z]+)*</code>、<code>(a+)+</code>、<code>(a|a?)+</code>はは全て脆弱な正規表現です。なぜなら、<code>aaaaaaaaaaaaaaaaaaaaaaaa!</code> のような単純な入力に対して、非常に重いCPU処理をしうるからです。詳細は<a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS" rel="nofollow" title="" class="ext-link">Regular expression Denial of Service – ReDoS</a>をご覧ください。</p><p>自身の正規表現について、これらの内容をチェックするには、<a href="https://www.npmjs.com/package/safe-regex" rel="nofollow" title="" class="ext-link">safe-regex</a>というツールが便利です。ただし、誤検出されることもあるので注意して使ってください。</p><p>他のエラー・シナリオでは、<code>X-Powered-By:Express</code>のような基盤となるインフラストラクチャの機密情報が、アプリケーションから漏れる可能性もあります。</p><p>スタックトレースだけでは脆弱性として扱われることはありませんが、攻撃者が興味を持ちそうな情報を明かしてしまうことは頻繁にあります。ある操作でエラーが発生した場合、そのデバッグ情報を提供するのは良いことではありません。常にログは取っておくべきですが、ユーザにはそれを公開しないようにしましょう。</p><p>大いなる力には大いなる責任が伴うものです。NPMは、すぐに使えるパッケージがたくさんある分、コストが高くつきます。それは、「重大なセキュリティの問題が潜んでいるパッケージを使っているかもしれない」というコストです。自分のアプリケーションに必要なものを確認するようにしましょう。</p><p>幸い、Node Security Projectには、使用しているモジュールに対して既知の脆弱性をチェックできる素晴らしいツールがあります。</p><p><a href="https://requiresafe.com/" rel="nofollow" title="" class="ext-link">requireSafe</a>も役立ちます。</p><p></p><p>このリストを作成する上で、<a href="https://blog.risingstack.com/node-js-security-checklist/www.owasp.org" rel="nofollow" title="" class="ext-link">OWASP</a>が管理する<a href="https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet" rel="nofollow" title="" class="ext-link">Web Application Security Testing Cheat Sheet（Webアプリケーションのためのセキュリティテスト用チートシート）</a>の内容を大いに参考にさせていただきました。</p><p><em>Open Web Application Security Project (OWASP)は、ソフトウェアのセキュリティ向上を目的とした世界規模の非営利組織です。</em></p><p><strong>このリストに不足している内容があれば追加しますので、ご連絡ください。</strong></p>
