<p><a href="http://www.sitepoint.com/12-little-known-css-facts-the-sequel/" rel="nofollow" title="" class="ext-link">12 Little-Known CSS Facts (The Sequel)</a> (2015-07-14) by <a href="https://twitter.com/ImpressiveWebs" rel="nofollow" title="" class="ext-link">Louis Lazaris</a> from <a href="http://www.sitepoint.com/" rel="nofollow" title="" class="ext-link">SitePoint</a></p><p>1年以上前に、私は最初の<a href="http://www.sitepoint.com/12-little-known-css-facts/" rel="nofollow" title="" class="ext-link">12 Little-known CSS Facts（あまり知られていないCSSの12の事実）</a>を発表しました。SitePointで最も人気の高い記事となりました。この記事を書いた後も、私はCSSのアドバイスやちょっとした情報の収集を続けました。だって、大ヒット映画も必ず続編を制作するじゃないですか。</p><p><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/07/1436815997css-facts.png" alt="12 Little-known CSS Facts: The Sequel" width="800" height="407" class="size-full wp-image-110386"><br>
<em>注釈<br>
SitePoint/<a href="http://scncf-lab.com/" rel="nofollow" title="" class="ext-link">Natalia Balska</a>によるイラスト</em></p><p>それでは、早速今年も開発のヒントになる12の事実について話しましょう。もちろん、中にはもうすでにご存じのこともあると思いますが、この中で初めて知ったという事実がありましたら、コメントでお知らせください。</p><p>このプロパティについてはSitePointに4年以上<a href="http://www.sitepoint.com/setting-css3-border-radius-with-slash-syntax/" rel="nofollow" title="" class="ext-link">前に書いた</a>のですが、この機能が存在することを、未だに多くの初心者や経験の豊富な開発者でさえ知らない人がいます。</p><p>まさかと思うでしょうが、次の<code>border-radius</code>コードは有効です。</p><p>初めて見る方には分かりにくいと思いますので、仕様書の説明を確認してみましょう。</p><p>次の画像も仕様書に掲載されています。</p><p><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/07/1436312214border-radius-slash.png" alt="Multiple Radii on each corner with border-radius" width="290" height="180" class="aligncenter size-full wp-image-109950"><br>
画像の説明には、”<code>border-top-left-radius: 55pt 25pt</code>の2つの値は隅の曲率を定義する”と記載されています。</p><p>このようにスラッシュで値を区切ることで、非対称的に隅を丸めることができます。さらに詳しく知りたい場合は、先ほど紹介した記事を読むか、できたら、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Tools/Border-radius_generator" rel="nofollow" title="" class="ext-link">handy little interactive demo from MDN（役に立つMDNによるちょっとしたインタラクティブデモ）</a>をお読みください。</p><p><iframe class="live-sample-frame" height="800px" src="https://mdn.mozillademos.org/en-US/docs/Web/CSS/Tools/Border-radius_generator%24samples/border-radius-generator?revision=516167" width="100%"></iframe><br>
ほとんどの<code>border-radius</code>ジェネレータでは、このような値の設定はできません。私の知る限り、MDNの<code>border-radius</code>ジェネレータでのみ設定が可能です。</p><p>通常、<code>font-weight</code>プロパティの定義では、値は<code>normal</code>か<code>bold</code>のどちらかです。時には100 を一段階とする変数で指定されているのを目にすることがあると思います。<code>100</code>や<code>200</code>など、最高で<code>900</code>までが指定できます。</p><p>しかし、忘れられがちな値が2つあります。<code>bolder</code>と<code>lighter</code>です。</p><p>仕様書によると、この2つは継承値よりboldなウェイトあるいはlightなウェイトを指定します。ただの”bold”よりboldだったり、普通のテキストよりlightだったりする複数のウェイトを持つフォントを使用した時に最も効果を発揮します。</p><p>100を一段階とする値で、”bold”は<code>700</code>をマッピングし、”normal”は<code>400</code>をマッピングします。もし、ウェイトが<code>300</code>のフォントだった場合、継承値が<code>400</code>であれば、”lighter”の値は<code>300</code>を作ります。よりlightなウェイトがない（例えば、<code>400</code>が最もlightなウェイトだった）場合、値は<code>400</code>のままで、”lighter”の値は無効になります。</p><p>次のCodePenデモをご覧ください。</p><p><iframe id="cp_embed_domZLx" src="//codepen.io/SitePoint/embed/domZLx?height=504&amp;theme-id=6441&amp;slug-hash=domZLx&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="504" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>この例では、18種のスタイルを指定することが可能な<a href="https://www.google.com/fonts/specimen/Exo+2" rel="nofollow" title="" class="ext-link">Exo 2</a>という、フォントを使用しています。私のデモは、100を一段階としたウェイトにしているので、斜体ではないスタイルだけを埋め込んでいます。</p><p>デモに、”bolder”や”lighter”など、異なる<code>font-weight</code>の値を持つネスト化した”box”要素が12個含まれていること分かると思います。これで、異なる継承値を持つテキストのウェイトにどう影響するか分かると思います。次はCSSコードの例になります。コード内の構文にお気づきたと思いますが、後続の”box”は前の要素にネスト化されていることを覚えておいてください。</p><p>ここでは、”bolder”と”lighter”のキーワードは、<code>100</code>、<code>400</code>、<code>700</code>、<code>900</code>の値にのみマッピングします。9種の異なるスタイルを持つこのキーワードでは、<code>200</code>、<code>300</code>、<code>500</code>、<code>600</code>、<code>800</code>の値にマッピングすることはありません。</p><p>このような結果になる理由は、ブラウザにコードの中から次に”bold”あるいは”light”なフォントを選択するよう指示しているからです。つまり、次に最もboldあるいは最もlightなフォントを選択しているのではなく、単に継承値よりboldあるいはよりlightなフォントを選択しているのです。しかしながら、最もlightなフォントの値が（例えば<a href="https://www.google.com/fonts/specimen/Open+Sans" rel="nofollow" title="" class="ext-link">Open Sans</a>みたいに）<code>300</code>で、継承値が<code>400</code>の場合は、”lighter”の値は<code>300</code>をマッピングします。</p><p>初めは分かりにくいでしょうが、デモをいじっていくうちにこれらのキーワードの効果が分かってくると思います。</p><p>デバッギングに役に立つため、<code>outline</code>プロパティは広く知られています（<a href="http://www.impressivewebs.com/css-things-that-dont-occupy-space/" rel="nofollow" title="" class="ext-link">ページの実行に影響はありません</a>）。しかしながら、<code>outline-offset</code>プロパティが仕様書に追加されていることはどうでしょう。名前どおりの動きをするこのプロパティは、要素からどれだけアウトラインをオフセットするのか定義します。</p><p><iframe id="cp_embed_VLXyZw" src="//codepen.io/SitePoint/embed/VLXyZw?height=412&amp;theme-id=6441&amp;slug-hash=VLXyZw&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="412" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>先ほどのデモでは、数値の範囲をスライダーで左右に動かせばアウトラインオフセットの変化を見ることができます。この例で使用している数値の範囲は<code>0px</code>から<code>30px</code>ですが、CSSでは好きなだけ大きくすることが可能です。CSSの<code>outline</code>プロパティはショートハンドプロパティですが、<code>outline-offset</code>プロパティは含まれていないため、別途<code>outline-offset</code>を定義する必要があることに注意してください。</p><p>唯一の大きなデメリットは、<code>outline-offset</code>プロパティがInternet Explorerで (IE 11でさえ）サポートされていないことです。他のブラウザではサポートされています。</p><p>いまさら、と思っているかもしれません。<em><code>display: table</code>のことは全て知っている、簡単にページ中央を垂直にする方法</em>、とも思っているかもしれません。しかし、私が話しているのはこのことではありません。私が話しているのは、<code>table-layout</code>プロパティで<code>display</code>プロパティではありません。</p><p><code>table-layout</code>プロパティはCSS機能の中でも説明が難しいので、まずは、仕様を見てから例を見てみましょう。仕様書の説明は次のとおりです。</p><p>恐らく、今までのW3C(World Wide Web Consortium)の仕様の中で初めて理解しにくいのではないでしょうか。冗談です（笑）。</p><p>しかし、いつものように例を見た方が分かりやすいのは本当です。次のデモでは、CSSで<code>table-layout: fixed</code>をテーブルに追加しています。トグルボタンをクリックして、トグルを無効にしたり有効にしたりして比べてみてください。</p><p><iframe id="cp_embed_vORpYN" src="//codepen.io/SitePoint/embed/vORpYN?height=382&amp;theme-id=6441&amp;slug-hash=vORpYN&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="382" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>この例を見れば、デフォルト設定に<code>auto</code>を使用する代わりに、<code>table-layout: fixed</code>を使用するメリットが分かると思います。必ずしも、最適な選択とは限りませんし、必要ないかもしれません。しかし、幅の異なるセルが混在する表を使用する上で覚えておくと便利だと思います。</p><p>昨年、Chris Coyierが<a href="https://css-tricks.com/fixing-tables-long-strings/" rel="nofollow" title="" class="ext-link">このプロパティについて</a>分かりやすく説明していますので、さらに詳しく理解したい場合は、ぜひお読みください。</p><p>2000年代中盤もしくはそれ以前からWebサイトのコーディングを行っていたり、HTMLメールを多く手掛けていたりすれば、おそらくどこかの時点で<code>vertical-align</code>プロパティが従来の<a href="http://www.w3.org/TR/html401/struct/tables.html#adef-valign" rel="nofollow" title="" class="ext-link">HTML4のvalign属性</a>に対する標準的なアップグレードに相当していることにお気づきでしょう。これは現在の<a href="http://www.w3.org/TR/html5/obsolete.html#non-conforming-features" rel="nofollow" title="" class="ext-link">HTML5では廃止され、非準拠の機能</a>とされています。</p><p>しかし、実はCSSの<code>vertical-align</code>は異なる動きをします。テーブルの場合はまた異なります。おかしな話ですが、このプロパティがテーブルに対してまったく無効となるよりは、納得できる話です。</p><p>ではこのプロパティが通常の要素に適用される際、テーブルセルに適用される場合とはどのように異なるのでしょうか。</p><p>テーブルセルに適用されない場合、<code>vertical-align</code>プロパティは以下の基本的なルールに準じます。</p><p>次のデモをご確認ください。</p><p><iframe id="cp_embed_zGWpxy" src="//codepen.io/SitePoint/embed/zGWpxy?height=336&amp;theme-id=6441&amp;slug-hash=zGWpxy&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="336" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p><code>vertical-align</code>プロパティは<code>input</code>要素で定義されます。どれかのボタンを押すと、ボタンに表示されている値に変更できます。いずれも<code>input</code>の位置を変更するものであることはお分かりですね。</p><p>これは、このプロパティと値を確認する非常に基本的な例です。さらに詳しく見てみたい方は<a href="http://christopheraue.net/2014/03/05/vertical-align/" rel="nofollow" title="" class="ext-link">Christopher Aueの2014年の記事</a>を参照してください。</p><p>さて、これがテーブルに適用されるとなると、<code>vertical-align</code>はまったく異なる動きをします。プロパティ/値を、1つまたは幾つかのテーブルセルに適用した場合、テーブルセルの中身は、選択された整列位置の影響を受けます。</p><p><iframe id="cp_embed_KpoZdo" src="//codepen.io/SitePoint/embed/KpoZdo?height=352&amp;theme-id=6441&amp;slug-hash=KpoZdo&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="352" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>今のデモでお見せしたように、テーブルセルに対しては4つの値のみが適用できます。<code>baseline</code>を押した場合にのみ、分割されたセルにも影響がありますが、基本的には<code>vertical-align</code>を適用したセルの中身の配置のみが影響を受けます。</p><p>
</p>
<p><code>::first-letter</code>疑似要素を使うと、指定した要素の第一文字目のスタイルを変更でき、印刷業界では長年常識とされている<a href="https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%8B%E3%82%B7%E3%83%A3%E3%83%AB" rel="nofollow" title="" class="ext-link">ドロップキャップ</a>効果が得られます。</p><p>これを使用する利点は、要素の”一文字目”を構成するものに対して、ブラウザが適切な水準を備えているということです。このことは、<a href="https://twitter.com/andrewsmatt/status/497704502167076864" rel="nofollow" title="" class="ext-link">Matt Andrewsのツイート</a>で初めて見ました。しかし、彼はこれを喜ばしいとは思っていないようでした。彼が挙げた例を以下のCodePenで見てみましょう。</p><p><iframe id="cp_embed_KpoZjE" src="//codepen.io/SitePoint/embed/KpoZjE?height=533&amp;theme-id=6441&amp;slug-hash=KpoZjE&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="533" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>私が見たところ、4大ブラウザはどれも同様の扱いをするようなので、これは正しい挙動だと考えられますし、素晴らしいです。開き括弧が”1文字目”として認識されているのはいささか妙ではありますが。”1キャラクタ目”と言った方がふさわしいかもしれませんし、これ自体まったく新しい疑似クラスになり得ると思います。</p><p>このコンセプトは<a href="http://beneverard.co.uk/blog/using-slashes-within-the-html-class-attribute/" rel="nofollow" title="" class="ext-link">Ben Everardによって2013年に</a>論じられましたが、私は更に詳しく追求する意義があると考えます。</p><p>Benの投稿は、HTMLクラスをグループに分割する際にスラッシュ（”/”）を使用することで、コードを読みやすくし、可読性を上げるための方策でした。彼が指摘しているように、エスケープ処理されていないスラッシュは無効文字ではありますが、ブラウザはそれを問題として扱うことなく、単に無視します。</p><p>次のHTMLの例を見てみましょう。</p><p>
</p>
<p>スラッシュを入れて以下のような記述にします。</p><p>
</p>
<p>無効文字であるかどうかに関わらず、どのような文字を挿入した場合でも同じ結果を得られます。</p><p>
</p>
<p>いずれのコード記述でも正常に作用するようです。以下の例で試してみてください。</p><p><iframe id="cp_embed_NqYyNe" src="//codepen.io/SitePoint/embed/NqYyNe?height=309&amp;theme-id=6441&amp;slug-hash=NqYyNe&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="309" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>もちろん、これらの区切り文字はスタイルシートでクラスとしては使用できません。そういう意味で私は”無効”としています。従って次のような記述はルールに準じておらず、特定のスタイルには適用できないでしょう。</p><p>もし、CSS内でこれらの無効文字をHTMLクラスで使用し、ターゲットにしなければならない場合は、<a href="https://mothereff.in/css-escapes" rel="nofollow" title="" class="ext-link">こちらのツールを使ってスラッシュを挿入し、エスケープすることができます</a>。先ほどの例でいうと、CSSは次のような記述になります。</p><p>さらに言うと、Unicode文字はまったくエスケープ処理される必要がないので、以下のようなことさえもできるのです。</p><p>
</p>
<p>そして、CSSでは次のような記述になるでしょう。</p><p>あるいは、これらの文字も、直接挿入せずに、先ほどと同様にエスケープできます。以下の例は、上のコードブロックと同じことを意味します。</p><p>CSSでキーフレームのアニメーションを記述する際、<code>animation-iteration-count</code>プロパティを使用してアニメーションの再生回数を指定することは、おそらくご存知でしょう。</p><p>この例では、アニメーションをフルタイムで3回実行することが整数値で指定されています。しかし、分数値を指定できることはご存知ないのではないでしょうか。</p><p>この場合、アニメーションは半数回実行されます（つまり、最初の再生の途中で停止します）。以下の例では、ページ上で2つのボールが動作します。上のボールは再生回数を”1″に指定していますが、下のボールの再生回数は”0.5″と指定しています。</p><p><em>追記：コメントで指摘をされましたが、これらのデモはデスクトップ版およびモバイル版のSafariでは正常に動作しません。これはfill modeに関係するバグのためで、既に<a href="https://bugs.webkit.org/show_bug.cgi?id=146996" rel="nofollow" title="" class="ext-link">こちらに報告し</a>、修正されました。次の更新版で反映されるはずです。</em></p><p><iframe id="cp_embed_VLXQmM" src="//codepen.io/SitePoint/embed/VLXQmM?height=545&amp;theme-id=6441&amp;slug-hash=VLXQmM&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="545" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>この例で興味深いのは、再生間隔が描画のプロパティ/値に基づいているわけではないという点です。つまり、何かを100pxで描画する場合、中間点は必ずしも50pxではないのです。例えば、先ほどのアニメーションは<code>linear</code>というタイミング関数を使用しているので、下のボールが横軸上の中間で止まったように見えます。</p><p>以下は、同じ2つのボールのアニメーションですが、<code>ease</code>というタイミング関数を使用した例です。</p><p><iframe id="cp_embed_PqRxov" src="//codepen.io/SitePoint/embed/PqRxov?height=523&amp;theme-id=6441&amp;slug-hash=PqRxov&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="523" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>今度は下のボールが中間点を超えてから停止していますね。繰り返しになりますが、これは異なるタイミング関数を使用したことによって起きています。</p><p>タイミング関数を理解していれば、<code>ease-in-out</code>で値を指定した場合も<code>linear</code>を使用したときと同じボールの位置になることにお気づきでしょう。いろいろな結果が得られますので分数値とタイミング関数で試して遊んでみてください。</p><p>これは数人の開発者が偶然見つけた事象で、仕様で注意喚起されています。例えば次のようなアニメーションコードがあるとします。</p><p>ここでは<code>reverse</code>というアニメーション名を使ってみました。一見問題なさそうですが、実際にこのコードを動かしてみるとどのような結果になるのか確認してみましょう。</p><p><iframe id="cp_embed_OVvayK" src="//codepen.io/SitePoint/embed/OVvayK?height=404&amp;theme-id=6441&amp;slug-hash=OVvayK&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="404" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>アニメーションは動きません。なぜなら、”reverse”という値が、<code>animation-direction</code>プロパティの値にも指定できるキーワードに相当しているからです。ショートハンドシンタックスで有効なキーワード値とアニメーション名が一致する場合には、常に同様の事象が起こります。ロングハンドの場合には問題ありません。</p><p>このようにショートハンドシンタックスを壊すアニメーション名としては、例えば<code>infinite</code>、<code>alternate</code>、<code>running</code>、<code>paused</code>といった<a href="https://drafts.csswg.org/css-transitions-1/#single-transition-timing-function" rel="nofollow" title="" class="ext-link">タイミング関数のキーワード</a>も含まれます。</p><p>誰が最初にこの方法を使い始めたのかは分かりませんが、私が最初にこのやり方を見たのは<a href="https://twitter.com/g16n" rel="nofollow" title="" class="ext-link">Gunnar Bittersmann</a>による<a href="http://bittersmann.de/samples/08-15" rel="nofollow" title="" class="ext-link">こちらのデモ</a>です。20個の要素を持つ順リストがあり、このうち7番目から14番目までの要素を全て選択したい、としましょう。この場合次のように、セレクタ1つで実行することができます。</p><p><iframe id="cp_embed_wamQGv" src="//codepen.io/SitePoint/embed/wamQGv?height=590&amp;theme-id=6441&amp;slug-hash=wamQGv&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="590" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p><em>追記：　コメント欄でのご指摘の通り、Safariにはこのテクニックの実行を妨げるバグがあります。幸いなことに、Matt Pomaskiの提案方法でこの問題を解決することができるようです。コードチェーンの順番を次のように単純に入れ変えてみてください。<code>ol li:nth-child(-n+14):nth-child(n+7)</code>となります。この方法で今のところWebKitではバグは出てきていませんので、Safari上でも問題なくこの方法を使うことができる、と言えるでしょう。</em></p><p>このコードには、構造疑似クラスが連鎖して使われています。少し分かりづらい式になっていますが、選択したい範囲が式の中の数値で示されているのが確認できます。</p><p>どのように実行しているか正確に見てみましょう。連鎖の最初にある式には、”7番目の要素を選び、その後に続く全ての要素も選択する”と書かれています。次のパートには、”14番目の要素を選び、その前にある全ての要素も選択する”と書かれています。2つのセレクタは連鎖しているので、各パートはそれぞれのスコープを限定します。すなわちこの場合、2番目に出てきたパートは、最初のパートが14番目より先にある要素を選択することを許容しません。また最初のパートは、2番目のパートが7番目より前にある要素を選択することを許容しません。</p><p>こういったタイプのセレクタや式に関する詳細は、<a href="http://www.impressivewebs.com/css3-pseudo-class-expressions/" rel="nofollow" title="" class="ext-link">以前こちらの記事</a>にまとめましたので、ご確認ください。</p><p>もしかしたら皆さんも私のように、疑似要素をイメージやフォームのインプットに当ててみようと考える時があるかもしれません。しかし疑似要素とは置換要素に対しては機能しないものなので、この試みはうまく動きません。そこで開発者の皆さんの多くは、全ての空要素（終了タグを持たない要素）には疑似要素が適用できない、と想定されるかと思います。しかしそれは正解ではありません。</p><p>置換要素ではない<a href="http://www.w3.org/TR/html5/syntax.html#void-elements" rel="nofollow" title="" class="ext-link">いくつかの空要素</a>には、疑似要素が適用できるものもあるのです。次のデモで見られる<code>hr</code>要素もこのケースの1つです。</p><p><iframe id="cp_embed_ZGxmpK" src="//codepen.io/SitePoint/embed/ZGxmpK?height=251&amp;theme-id=6441&amp;slug-hash=ZGxmpK&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="251" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>この例における色付きエリアは、水平方向のルール（<code>hr</code>要素）に従っています。そしてこの要素には、<code>::before</code>と<code>::after</code>という疑似要素が適用できています。でも面白いことに、同じく置換要素ではない空要素である<code>br</code>要素を使った場合には、適用可能という結果は得られません。</p><p>メタタグと<code>link</code>要素に対しても疑似要素を加えることができます。そのためには次のデモのように、これらの要素を<code>display: block</code>になんとかうまく変換することが必要です。</p><p><iframe id="cp_embed_KporNg" src="//codepen.io/SitePoint/embed/KporNg?height=352&amp;theme-id=6441&amp;slug-hash=KporNg&amp;default-tab=result&amp;user=SitePoint" scrolling="no" frameborder="0" height="352" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe undefined" style="width: 100%; overflow: hidden;"></iframe></p><p>最後に取り上げるこの事実は、改めて特筆するべきものではないかもしれません。次に挙げるHTMLがあるとしましょう。</p><p>
</p>
<p>属性セレクタを使えば、次のようにこれらの要素をスタイリングすることができます。</p><p>これはうまく動くようですが、では次のコードではどうでしょう？</p><p>2番目の例では、属性の値はどちらも大文字で書かれています。この場合、<code>.box</code>要素にはスタイルが適用されません。なぜなら<code>class</code>の属性は大文字と小文字を区別する、いわゆるケース・センシティブなものだからです。一方<code>type</code>の属性値はケース・センシティブではないので、emailのフィールドには正しくスタイルが適用されます。この場で取り上げる必要はなかったかもしれませんが、でももしかしたら皆さんが気づいていなかったかもしれない事実です。</p><p>これで幕は下りました。この続編が皆さんにとっては、そんなに安っぽいものではなかったことを祈ります。私は毎週のように、このようなちょっとしたユニークなCSS豆知識を学んできました。この記事の中から少しでも目新しいものを、多くの皆さんが見つけることを願っています。CSSのあいまいなトリックにテクニック、皆さんのお気に入りの情報はどれだったのか、気になっています。あまりご存知なかったけれども、実際ブラウザはサポートしていた素敵なプロパティや機能が見つかったかどうか、教えて下さい。コメントをお待ちしています。</p>
