<p><a href="https://medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf#.toi0vx6di" rel="nofollow" title="" class="ext-link">The Inner Workings at Virtual DOM</a> （2016-12-12） by <a href="https://twitter.com/rajaraodv" rel="nofollow" title="" class="ext-link">Raja Rao DV</a></p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/2000/1*TF0TZszVwpYc1Pba7Dbk7Q.png" alt="" data-src="https://cdn-images-1.medium.com/max/2000/1*TF0TZszVwpYc1Pba7Dbk7Q.png"><br>
<em>PreactでVDOMがどのように機能するかを示すフローチャート</em></p><p>仮想DOM（VDOMあるいはVNode）は魅力的です✨　しかし複雑で、理解が難しいものでもあります😱　<a href="https://facebook.github.io/react/" rel="nofollow" title="" class="ext-link">React</a>や<a href="https://preactjs.com/" rel="nofollow" title="" class="ext-link">Preact</a>、その他同様のJSのライブラリでは、これをコアで使っています。残念ながら私は、これを詳細かつ分かりやすく説明している優れた記事や資料を見つけられませんでした。ですから、自分で書こうと思い立ったのです。</p><p>このブログではシンプルな例を取り上げ、これらが実際にはどのように機能するのかが理解できるような様々なシナリオを見ていきます。特に、以下の点に焦点を当てましょう。</p><p>アプリは、”<strong>FilterdList</strong>“と”<strong>List</strong>“という2つのコンポーネントを含んだ、<a href="http://codepen.io/rajaraodv/pen/BQxmjj" rel="nofollow" title="" class="ext-link">フィルタリングできるシンプルな検索アプリ</a>です。Listはアイテムのリスト（初期値は”California”と”New York”です）をレンダリングします。アプリは、検索フィールドに入力された文字に基づいてリストにフィルタリングする検索フィールドを持っています。非常に単純ですね。</p><p><a href="https://cdn-images-1.medium.com/max/900/1*VKN_mqVAzDfqcTU1PM47wg.png" rel="nofollow" title="" class="ext-link"><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*VKN_mqVAzDfqcTU1PM47wg.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*VKN_mqVAzDfqcTU1PM47wg.png"></a><br>
<em>アプリを図式化したもの（クリックすると拡大できるので、詳細が分かります）</em></p><p>大まかな流れについて言うと、私たちはJSX（JSのhtml）を使ってコンポーネントを書き、CLIのツールである<a href="http://babeljs.io/" rel="nofollow" title="" class="ext-link">Babel</a>によってピュアJSに変換されます。そしてPreactの”<strong>h</strong>“（<a href="https://github.com/dominictarr/hyperscript" rel="nofollow" title="" class="ext-link">hyperscript</a>）関数が、VDOMツリー（別名VNode）に変換します。そして最後に、Preactの仮想DOMアルゴリズムが、私たちのアプリを作るVDOMから実DOMを作ります。</p><p><a href="https://cdn-images-1.medium.com/max/900/1*imVzO1P2k1cIuf04_rGYGw.png" rel="nofollow" title="" class="ext-link"><br>
<img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*imVzO1P2k1cIuf04_rGYGw.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*imVzO1P2k1cIuf04_rGYGw.png"></a><br>
<em>全体像</em></p><p><strong>VDOMのライフサイクルの詳細に入る前に、ライブラリの起点となるJSXを理解しておきましょう。</strong></p><p>Preactに似たライブラリであるReactでは、HTML表記ではなく、<strong>全てがJavaScriptです。</strong>ですから、JavaScriptでHTMLを書く必要があるのです。しかし、ピュアJSでDOMを書くのは、まるで悪夢です。</p><p>私たちのアプリでは、以下のようにHTMLを書く必要があります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*KExHlJcp3om5h1JFA09Ahw.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*KExHlJcp3om5h1JFA09Ahw.png"></p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*uOSYO2xCEcuGWNzKNjKUnA.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*uOSYO2xCEcuGWNzKNjKUnA.png"></p><p>ここでJSXの出番です。JSXは本質的に、JavaScriptでHTMLを書くことを可能にしてくれるものなのです。さらに、波括弧｛｝を使うことで、内部でJSを使えるようにもなります。</p><p>JSXを使うことで、以下のように簡単にコンポーネントを書くことができます。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*zUYkQpIdUdPp_SIOnEX8Bg.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*zUYkQpIdUdPp_SIOnEX8Bg.png"></p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*Xc92YmYZeaJ6oX0PCGYfyw.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*Xc92YmYZeaJ6oX0PCGYfyw.png"></p><p>JSXは使い勝手のいい言語ではあるのですが有効なJSではありません。とは言え、最終的に私たちは”実”DOMが必要になるので、JSXは実DOMを書くのに役立ちます。その他においては活用できません。</p><p>ですから、同様のJSONオブジェクト（VDOMツリー）に変換する方法が必要となってきます。そうすることで、実DOMを作成することができる入力データとして最終的に使用することができるのです。まずは、この作業を行うための関数が必要です。</p><p>その関数とは、Preactの<a href="https://github.com/developit/preact/blob/master/src/h.js" rel="nofollow" title="" class="ext-link">“h”関数</a>で、Reactの<a href="https://facebook.github.io/react/docs/react-api.html#createelement" rel="nofollow" title="" class="ext-link">“Readct.createElement”</a>と同様の働きをします。</p><p>では、どのようにJSXを”h”関数の呼び出しに変換すればいいのでしょう？　そこで<a href="http://babeljs.io/" rel="nofollow" title="" class="ext-link">Babel</a>の出番です。Babelは各JSXノードを探索し、”h”関数を呼び出すように変換してくれます。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*TC2uwjc4mBrVHzOd0AeShw.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*TC2uwjc4mBrVHzOd0AeShw.png"></p><p>BabelはJSXをReact.createElementの呼び出しに変換する初期設定になっています。これは、Reactが既定値となっているためです。</p><p><a href="https://cdn-images-1.medium.com/max/900/1*ylur5c7_DCWyJ_RHS_ndYg.png" rel="nofollow" title="" class="ext-link"><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*ylur5c7_DCWyJ_RHS_ndYg.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*ylur5c7_DCWyJ_RHS_ndYg.png"></a><br>
<em>左：JSX　右：JSのReactバージョン（クリックすると拡大できます）</em></p><p>ですが、<a href="https://babeljs.io/docs/plugins/transform-react-jsx/" rel="nofollow" title="" class="ext-link">“Babel Pragma”</a>を追加することで、関数名を好きな名称（例えばPreactの”h”）へと簡単に変更することができます。以下がその方法です。</p><p><a href="https://cdn-images-1.medium.com/max/1125/1*LmJWuVB_5OIXOW99b5_Yfg.png" rel="nofollow" title="" class="ext-link"><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*LmJWuVB_5OIXOW99b5_Yfg.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*LmJWuVB_5OIXOW99b5_Yfg.png"></a><br>
<em>Babel Pragmaを追加した”h”関数（クリックすると拡大できます）</em></p><p>コンポーネントの”render”メソッドにあるコードが”h”関数に変換されるだけでなく、マウントも開始します。</p><p><strong>ここでコードの実行がスタートし、全てが始まります！</strong></p><p>“h”関数はJSXの出力を取り、”VNode”と呼ばれるものを作成します（Reactでは”createElement”がReactElementを作成します）。Preactでの”VNode”（またはReactでの”Element”）は単純なJSオブジェクトで、プロパティや子要素を含んだ単一のDOMノードを表現しています。</p><p>このような感じです。</p><p>例えば、私たちのアプリの入力では、VNodeは以下のようになります。</p><p>では、仮想DOMがどのように機能するのか見ていきましょう。</p><p>以下のフローチャートでは、コンポーネント（そして子コンポーネント）がPreactでどのように作成、更新、削除されるかを示しています。また、”componentWillMount”などのライフサイクルイベントが呼び出された時のフローも示しています。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*TF0TZszVwpYc1Pba7Dbk7Q.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*TF0TZszVwpYc1Pba7Dbk7Q.png"><br>
一度に全てを理解することは難しいと思いますので、フローチャートを部分ごとに区切って、いくつかのシナリオを交えながら順を追って説明していきましょう。</p><p>ハイライトされた部分は、与えられたコンポーネントに対してVNode（仮想DOM）ツリーを作成する最初のループを示しています。ただし、これはサブコンポーネントに対するVNodeの作成は含んでいないことに注意してください（これは別のループになります）。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*JVwKJe82S1wHFqzr17DQ4g.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*JVwKJe82S1wHFqzr17DQ4g.png"><br>
<em>黄色のハイライト部分は、VNodeの作成を示しています。</em></p><p>以下の画像は、アプリが最初に読み込みをした時に何が起こるかを示しており、ライブラリがメインのFilteredListコンポーネントに対して、最終的にVNodeとその子要素ならびに属性を作成しています。</p><p><a href="https://cdn-images-1.medium.com/max/900/1*CI75nMf-7j4ldxPJQ8nciQ.png" rel="nofollow" title="" class="ext-link"><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*CI75nMf-7j4ldxPJQ8nciQ.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*CI75nMf-7j4ldxPJQ8nciQ.png"></a><br>
<em>（クリックすると拡大できます）</em></p><p>この段階では、”<strong>div</strong>“という親ノードを持ったVNodeしかありません。”<strong>div</strong>“には、”<strong>input</strong>“と”<strong>List</strong>“という子ノードが含まれています。</p><p>このステップでは、単純に親ノード（div）に対する実DOMを作成し、子ノード（”input”と”List”）に対してはプロセスを繰り返します。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*X1tcv3n47OuAExoTBu3Q5A.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*X1tcv3n47OuAExoTBu3Q5A.png"><br>
<em>ハイライト部分のループは、子コンポーネントに対する実DOMの作成を示しています。</em></p><p>この段階では、以下の画像が示すように、”div”しかありません。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*l-FmgMheFRYFuhCJQA4gcQ.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*l-FmgMheFRYFuhCJQA4gcQ.png"></p><p>この段階で、ループは全ての子ノードに対して繰り返しの処理が行われます。私たちのアプリでは、”input”と”List”の子ノードだけが繰り返されます。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*XadPNReNXRQyIl6FJOpPlQ.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*XadPNReNXRQyIl6FJOpPlQ.png"><br>
<em>各子ノードに対するループ</em></p><p>このステップでは、リーフを処理します。”input”には親ノード（”div”）があるので、divの子ノードとしてinputを追加します。その後、制御を停止させ、”List”（”div”の2つ目の子ノード）の作成に戻ります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*iLQQTuRdKIhlsh5Vgaox0w.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*iLQQTuRdKIhlsh5Vgaox0w.png"><br>
<em>リーフの処理を完了させる</em></p><p>この時点で、私たちのアプリは以下のようになります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*uyA28eM-UBnU0SSX8vPSdg.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*uyA28eM-UBnU0SSX8vPSdg.png"></p><p>制御はステップ1.1に戻り、”List”コンポーネントに対する処理を1から開始します。しかし、”List”はコンポーネントなので、新たなVNodeのセットを得るために、”List”コンポーネントの<strong>render</strong>メソッドを呼び出します。フローは以下のようになります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*XadPNReNXRQyIl6FJOpPlQ.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*XadPNReNXRQyIl6FJOpPlQ.png"><br>
<em>子”コンポーネント”に対して全てをリピートする</em></p><p>ループがListコンポーネントに対する処理を完了し、ListのVNodeが返却されると、以下のようになります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*PbgdX1qNPoHh5Ok3yY83gQ.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*PbgdX1qNPoHh5Ok3yY83gQ.png"></p><p>全ての子ノードに対して、1.1から1.4までのステップが繰り返されます。リーフノードに達したら、ノードの親にそれを追加して、処理を繰り返します。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*Pwkyw7P2bbpEL9zQB1YaMA.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*Pwkyw7P2bbpEL9zQB1YaMA.png"><br>
<em>全ての子と親が作成、追加されるまで同じ処理を繰り返します。</em></p><p>以下の画像は、各ノードがどのように追加されるかを示しています（ヒント：深さ優先探索）。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/2000/1*e6rihM5IE3PRedd311iinA.png" alt="" data-src="https://cdn-images-1.medium.com/max/2000/1*e6rihM5IE3PRedd311iinA.png"><br>
<em>VDOMアルゴリズムによって作成される実DOMツリー</em></p><p>これで処理は完了です。全てのコンポーネント（子コンポーネントから親コンポーネントに至るまで）に対して”componentDidMount”だけが呼び出され、停止します。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*xRspRlx0WM-y2Au0zyegog.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*xRspRlx0WM-y2Au0zyegog.png"></p><p>“cal”とタイプしEnterを押してみます。すると、2つ目のListノードであるリーフノード（New York）が削除されますが、他の親ノードは保持されます。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*AyQmTTZFnfC_VKv23D8FrA.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*AyQmTTZFnfC_VKv23D8FrA.png"></p><p>このシナリオのフローがどのようになっているのか見ていきましょう。</p><p>最初のレンダリングを終えた後に実行する変更は、”更新”となります。VNodeを作成する場合、更新のサイクルは、サイクルを作成したり、<strong>VNodeを再度作成</strong>したりするのと非常によく似ています。</p><p>しかし、これはコンポーネントの更新（作成ではありません）なので、各コンポーネントとサブコンポーネントに対して”componentWillReceiveProps”、”shouldComponentUpdate”、”componentWillUpdate”を呼び出します。</p><p><strong>さらに、DOMの要素がすでに存在する場合、更新サイクルではDOMの要素を再度作成することはありません。</strong></p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*pCYNGbZL_zT1gbMtXYVt9A.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*pCYNGbZL_zT1gbMtXYVt9A.png"><br>
<em>コンポーネント更新のライフサイクル</em></p><p>前述したように、各コンポーネントには、初期のローディング中に作成された実DOMツリーに対応する参照があります。下記の画像は、今の時点で、どのように参照がアプリを探索するかを示しています。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*JjV4E5Ag9ogDvH9ILWDO2Q.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*JjV4E5Ag9ogDvH9ILWDO2Q.png"><br>
<em>前のDOMと各コンポーネント間の参照を示しています</em></p><p>VNodeが作成されると、それぞれのVNodeの属性は、そのノードの実DOMの属性と比較されます。<strong>実DOMが存在する場合、ループは次のノードに移ります。</strong></p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*fHYrhlaGOJKnWTzn0YrQ8g.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*fHYrhlaGOJKnWTzn0YrQ8g.png"><br>
実DOMが（更新中に）”すでに存在する”場合のサイクル</p><p>下記の画像は実DOMとVNodeの違いを示しています。</p><p><a href="https://cdn-images-1.medium.com/max/900/1*ALjitFLcW_lIHvaswCp0GA.png" rel="nofollow" title="" class="ext-link"><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*ALjitFLcW_lIHvaswCp0GA.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*ALjitFLcW_lIHvaswCp0GA.png"></a><br>
<em>（クリックすると拡大できます）</em></p><p>違いがあるのは、実DOMの”New York”ノードがアルゴリズムによって削除されているからです。その様子を下記のワークフローで示しました。また、このアルゴリズムは、全てが終了すると、”componentDidUpdate”ライフサイクルイベントを呼び出します。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*m74VaQdTuuonA_R-LkT3xw.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*m74VaQdTuuonA_R-LkT3xw.png"><br>
<em>DOMノード削除のライフサイクル</em></p><p>ユースケース：<strong>blabla（何とかかんとか）</strong>と打ちこんだとしましょう。これは”California”や”New York”と合いませんので、子コンポーネントの”List”はレンダリングしません。つまり、全てのコンポーネントをアンマウントする必要があるということです。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*Ki5tKGKiRI4P_ma_fz3chQ.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*Ki5tKGKiRI4P_ma_fz3chQ.png"><br>
<em>検索結果がゼロの場合は、Listコンポーネントは削除されません</em></p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*5GheZk3dZ7st_mvBcWG4nw.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*5GheZk3dZ7st_mvBcWG4nw.png"><br>
<em>FilteredListの”render”メソッド</em></p><p>コンポーネントを削除するのは、1つのノードを削除するのとほぼ同じです。ただし、コンポーネントへの参照を持っているノードを削除する場合は、フレームワークが”componentWillUnmount”を呼び出し、そして、DOMの要素全てを再帰的に削除します。実DOM からすべての要素が削除されると、参照されたコンポーネントの”componentDidUnmount”メソッドを呼び出します。</p><p>下記の画像は、実DOM”ul”の”List”コンポーネントへの参照を示しています。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/900/1*yZ3TSnTRf95mGSoR-HiwHw.png" alt="" data-src="https://cdn-images-1.medium.com/max/900/1*yZ3TSnTRf95mGSoR-HiwHw.png"><br>
<em>sadf</em></p><p>下記の画像では、コンポーネントの削除とアンマウントが行われるフローの部分をハイライトしてあります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1125/1*QGGL_W7zEr3FtR1VODXt_w.png" alt="" data-src="https://cdn-images-1.medium.com/max/1125/1*QGGL_W7zEr3FtR1VODXt_w.png"><br>
コンポーネントの削除とアンマウント</p><p>この記事で、仮想DOMが（少なくともPreactでは）どのように機能するか理解していただけたら幸いです。</p><p>今回用いたシナリオでは、主要な部分の説明に留めています。コードの最適化のいくつかは省略していますので、ご了承ください。</p><p><strong>なお、何か間違いを見つけましたら、ぜひお知らせください。喜んで修正します。そして、さらに知りたいことがあれば、それもまたぜひお知らせください。</strong></p><p>以上です！ 🙏🏼 👍</p><p><strong>🎉🎉🎉もしこの記事を気に入っていただけたのなら、2つお願いしたいことがあります。1つは、Mediumで💚（いいね）をしてください。2つめは、Twitterでシェアをお願いします🎉🎉🎉</strong></p><p>私のアカウントはこちらです：<a href="https://twitter.com/rajaraodv" rel="nofollow" title="" class="ext-link">https://twitter.com/rajaraodv</a></p>
