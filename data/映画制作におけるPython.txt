<p><a href="http://dgovil.com/blog/2016/11/30/python-for-feature-film/" rel="nofollow" title="" class="ext-link">Python For Feature Film</a> （2016-11-30） by <a href="http://twitter.com/DhruvGovil" rel="nofollow" title="" class="ext-link">Dhruv Govil</a></p><p><img width="750" height="422" src="http://dgovil.com/wp-content/uploads/2016/11/1009476_7f51_2.jpg" class="attachment-large size-large wp-post-image" alt="" srcset="http://dgovil.com/wp-content/uploads/2016/11/1009476_7f51_2.jpg 750w, http://dgovil.com/wp-content/uploads/2016/11/1009476_7f51_2-200x113.jpg 200w, http://dgovil.com/wp-content/uploads/2016/11/1009476_7f51_2-300x169.jpg 300w" sizes="(max-width: 750px) 100vw, 750px"><br>
<em>Python</em>は、近年、映画を作成する上で不可欠なものになってきているプログラム言語の1つです。スクリーンに絶大な効果を与えることになるPythonを活用していない長編アニメーションやVFXを用いた映画はほとんどないと言っていいでしょう。</p><p>映画について考える際、プログラマは映像を生み出す芸術性について考えることがあります。しかし、映画業界の技術面を気にする人はほとんどいません。</p><p>そのようなこともあり、これまで幸運にも私が携わることのできたいくつかの有名な映画でどのようにPythonを使用したかを記事にまとめ、ブログに投稿してきました。これにより、Pythonがどれだけ映画全般に貢献しているかを示すことができれば幸いです。</p><p>また、最近私は、アーティストに<strong><a href="http://dgovil.com/blog/2016/11/18/python-for-maya-course/" rel="nofollow" title="" class="ext-link">Python For Maya（Mayaで使うPython)</a></strong>のオンライン講座を<strong><a href="https://www.udemy.com/courses/?siteID=TnL5HPStwNw-.LHMSdGJX1jZfY4CQB6nfw&amp;LSNPUBID=TnL5HPStwNw" rel="nofollow" title="" class="ext-link">udemy</a></strong>に公開しました。この業界でのスキルの重要性が高まってきているためです。私が投稿してきたブログは、この講座への手引書としても役に立ちます。</p><p>前置きはこのくらいにして、先に進みましょう。</p><p>Pythonに馴染みのない方もいるかと思います。</p><p>Pythonは、簡単に読み書きができるようデザインされたプログラミング言語で、長編映画業界のみならず、数学、科学、機械学習といった分野で非常に人気があります。</p><p>Pythonについて、詳しく学習したい方は<strong><a href="https://www.python.org/" rel="nofollow" title="" class="ext-link">公式サイト</a></strong>をご覧ください。</p><p>なお、重要な点として、映画業界ではPython 3ではなくPython 2.7が主に使われています。Python 2は積極的な開発がすでに行われていませんし、Python 3には多くの役立つ機能があるのですが、大々的なコード開発はPython 2で行われてきたこともあり、現段階でバージョンを切り替えるのは容易ではないのです。</p><p>Pythonは、長編映画のパイプラインで最も活用されます。</p><p>以下の図は、主要な映画製作会社でのパイプラインを説明したものです。<br>
各部門をつないでいる矢印が<strong>パイプライン</strong>で、部門間でデータが滞りなく受け渡しされ、関係者全員が協力して作業ができることを確認する役割があります。また、各部門でのツールセットの責任も担っており、アーティストが効率よく仕事ができるようなっています。ここでは、部門間のフローに注目して見ていきましょう。</p><p><img src="http://dgovil.com/wp-content/uploads/2016/12/pipeline-1.jpg" alt="A diagram of the feature film pipeline" title="The Feature Film Pipeline"><br>
Pixarが作成した『レミーのおいしいレストラン』のメイキングで、この図をより可視化したデモがご覧いただけます。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/WyQZ--fBNfc" frameborder="0" allowfullscreen></iframe></p><p>この映像には、ビジュアルエフェクトまたは長編アニメーション映画における、様々なワークフローのステージがあったのがお分かりになったと思います。制作会社により多少異なりますが、これが一般的なフローです。</p><p>絵コンテやフィルム映像、プリビズは、初期段階で用意されるデータで、最終的にコンポジットやライティングを行って映像を仕上げます。<br>
ビジュアルエフェクトが施された映画の場合、プレートのフィルム映像に含まれた追加要素への処理が必要となるので、アニメーション映画の場合とは事情が少し異なります。</p><p>パイプラインは、部門間でのデータの受け渡しに対して責任を負っています。以下はパイプラインがどのように機能するかをまとめたものです（上記で説明したものよりも本質的なプロセスとなっています）。</p><p>私たちはこれらの作業を連携するのにPythonを使用しています。<br>
次の項目では、まずパブリッシングに触れて、その後、各部門でPythonがどのように使われるのかを説明します。</p><p>ここでは私が携わった映画とこれらの映画でPythonがどのような役割を担っていたかを書いた記事を紹介します。</p><p>パブリッシングについては、ケーススタディの後に続きます。</p><p><img src="http://dgovil.com/wp-content/uploads/2016/11/Suicide-Squad-banner-e1480549848108-400x250.jpg" alt="Working on Suicide Squad" width="400" height="250"></p><p>映画そのものはイマイチかもしれませんが、この作品で私たちはいくつかの素晴らしい仕事をしました。<br>
<a href="http://dgovil.com/blog/2016/11/30/working-suicide-squad/" rel="nofollow" title="" class="ext-link">続きを読む</a></p><p><img src="http://dgovil.com/wp-content/uploads/2016/11/ht2banner-400x250.jpg" alt="Working on Hotel Transylvania 2" width="400" height="250"></p><p>『モンスター・ホテル2』とこの映画で私たちが行った仕事をおさらいしてください。<br>
<a href="http://dgovil.com/blog/2016/11/27/working-hotel-transylvania-2/" rel="nofollow" title="" class="ext-link">続きを読む</a></p><p><img src="http://dgovil.com/wp-content/uploads/2016/11/Spidey_crawl-400x250.jpg" alt="Working on The Amazing Spider-Man 2" width="400" height="250"></p><p>私が最初に携わったスーパーヒーロー映画を振り返ってみましょう。<br>
<a href="http://dgovil.com/blog/2016/11/27/amazingspiderman2/" rel="nofollow" title="" class="ext-link">続きを読む</a></p><p><img src="http://dgovil.com/wp-content/uploads/2016/11/cloudy-with-a-chance-of-meatballs-2-whysoblu-banner-400x250.jpg" alt="Working on Cloudy With a Chance of Meatballs 2" width="400" height="250"></p><p>私が最初に携わった長編アニメーション映画を振り返ってみましょう。<br>
<a href="http://dgovil.com/blog/2016/11/26/working-cloudy-chance-meatballs-2/" rel="nofollow" title="" class="ext-link">続きを読む</a></p><p><img src="http://dgovil.com/wp-content/uploads/2016/11/Percy-Jackson-2-Sea-of-Monsters-Film-400x250.jpg" alt="Working on Percy Jackson" width="400" height="250"></p><p>私が携わった最初の長編映画から勉強してください。<br>
<a href="http://dgovil.com/blog/2016/11/18/working-percy-jackson/" rel="nofollow" title="" class="ext-link">続きを読む</a></p><p>これはまさに、従来のパイプラインの中核となる部分です。部門間でアセットが共有されているか、追跡されているかを確認します。</p><p>まずは、アセットのパブリッシングからです。</p><p>部門が担当する作業が完了し、パブリッシングできると判断されたら、次の部門が仕事を引き継ぎます。例えば、モデリング部門ではモデルをエクスポートします。では、アニメーション部門ではアニメーションをエクスポートするのでしょうか？　それは誰がこれを引き継ぐかによって異なります。</p><p>ジオメトリの場合、私たちは<a href="http://www.alembic.io/" rel="nofollow" title="" class="ext-link">Alembic</a>を使用して、ジオメトリキャッシュとして単にパブリッシュすることがよくあります。AlembicはImageworksとILMによって開発された業界標準の共有フォーマットなのですが、こうすることで、一貫性のあるキャッシュフォーマットにすることができます。<br>
点群データの場合は、Alembicもしくは<a href="http://www.openvdb.org/" rel="nofollow" title="" class="ext-link">OpenVDB</a>を使用し、<strong>TIFFファイル形式の画像の場合は<a href="http://graphics.pixar.com/usd/docs/index.html" rel="nofollow" title="" class="ext-link">OpenEXR</a></strong>を使用します。<br>
もう少しすると、<strong><a href="http://graphics.pixar.com/usd/docs/index.html" rel="nofollow" title="" class="ext-link">OpenUSD</a></strong>と呼ばれるPixarが使用しているユニバーサルシーン形式が、業界での標準となってくるでしょう。</p><p>とにかく、簡単に置き換えができつつ、可能な限り最も効率的な形式でデータを保持するというのが、本来の意図です。キャッシュデータは多くの場合で最適な形式と言えます。なぜなら、安価なI/Oのヒットだけで済むからです。それに対して変形のヒットは高くつく可能性があります。</p><p>しかし、これは非常に複雑になります。アーティストはデータの出所や、データが届いた過程など知る必要はありません。データを読み込むことができ、パブリッシュができればいいのです。</p><p>これがパイプラインです。私たちはこれらを行うのに非常に使い勝手の良い、UIとツールを開発しました。</p><p>データをパブリッシュするには、ユーザはいくつかのテストに対してアセットの検証を行ってくれるパブリッシュのUIを単に開けばいいだけです。そして、オープンフォーマットが行われる仕様へと変換するマシンのセンターにデータを送信します。</p><p>パブリッシュデータを取り込むには、こちらも単にアセットブラウザを使用し、選択したいアセットをアーティストに選ばせるだけです。稀にサムネイルやディスクリプションが表示されることがありますが、ほとんどのアーティストにとってこれらの詳細は重要ではありません。</p><p>これらのパブリッシングやアセットマネージメントシステムは、様々なアプリに共通している必要があるので、私たちはこれらをPythonとPt (PyQTまたはPySide)で開発しました。これにより、各アプリケーションに対して再度コンパイルをすることなくコードを再利用することができ、必要に応じて迅速に機能を追加することが容易になります。</p><p>これはどの部門にもほぼ共通しているので、それぞれで繰り返すしせず、ここで各セクションに許可を与えることにしました。</p><p><img src="http://dgovil.com/wp-content/uploads/2016/11/30c3d28c-3648-11e6-8361-84f04113af4b.gif" alt=""></p><p>これは、多くの映画制作会社が独自に開発したものに類似したオープンソースのパブリッシングシステム、<strong><a href="http://pyblish.com/" rel="nofollow" title="" class="ext-link">Pyblish</a></strong>です。</p><p><img src="http://dgovil.com/wp-content/uploads/2016/12/big_buck_bunny-e1480809421920.png" alt=""><br>
Blenderで作成されたショートムービー『Big Buck Bunny』のワイヤフレームを見ると、モデルがポリゴンで構成されているのが分かります（各四角形がポリゴンです）。</p><p>モデリングは、他の全ての部門で使われる3Dソースジオメトリの作成を担当する部門です。<br>
多くの場合、ジオメトリの配置や編集、または場面の管理という点において、繰り返し作業がかなりの回数に上ります。</p><p>Pythonが役に立つのはこの部分です。ほとんどの3DパッケージにはPython APIが含まれているため、手動で行う全てのことをプログラム可能です。</p><p>つまり、簡単なアセットに10分を費やす代わりに、この作業工程をスクリプト化すれば、次に必要になった時にクリックするだけでいいという環境を作れます。この10分の節約は、プロジェクトの工程全体で見ると数百時間の節約につながるはずです。この時間は、芸術的な感性を要する、より複雑なアセットに充てることができます。</p><p>例えば私のコースでは（<strong><a href="http://dgovil.com/blog/2016/11/18/python-for-maya-course/" rel="nofollow" title="" class="ext-link">Python For Maya</a></strong>）、Pythonを使ってシンプルな歯車を作成し、同様にUIを作成して、歯車の歯数と長さを指定することができるようにします。</p><p>ただし、これについては、Pythonを使ってカスタムのデフォーマやインタラクティブツールを作成する場合、以下の<strong>Hans Godard</strong>のデモ映像でも分かるように、より複雑になる可能性があります。</p><p><iframe src="https://player.vimeo.com/video/166291982" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p><p><a href="https://vimeo.com/" rel="nofollow" title="" class="ext-link">Vimeo</a>に公開された<a href="https://vimeo.com/user14195390" rel="nofollow" title="" class="ext-link">Hans Godard</a>の<a href="https://vimeo.com/166291982" rel="nofollow" title="" class="ext-link">Plugin and Nodal Demo Reel 2016</a></p><p>リギングでは、実際の人間と同じように形を変えることができるようキャラクタージオメトリのスケルトンを作成します。</p><p>しかし、これだけでは十分な説明とは言えません。<br>
リギングでは基本的に、キャラクターに命を吹き込むためにアニメーターが使用するインターフェイスを作成しますが、動きが自然であるかの確認も行います。<br>
つまり、アニメーターがキャラクターの腕を動かすと、リガーは肩が適切に変形しているかを確認しなければなりません。</p><p>リギングにおいてPythonは重要な役割を果たしています。以下はその使用例の一部です。</p><p>私のコースでは（<strong><a href="http://dgovil.com/blog/2016/11/18/python-for-maya-course/" rel="nofollow" title="" class="ext-link">Python For Maya</a></strong>）、コントローラのライブラリを作成します。コントローラは、名前からも分かるように、アニメーターがリグをコントロールするために使うオブジェクトです。ジオメトリを直接使用する代わりに制御ポイントを使ってスケルトンを動かし、それによってジオメトリが変形します。</p><p>私はQtを使ってユーザインターフェイスを開発し、コントローラを外部保存してインポートで簡単に再利用できるようにしています。</p><p>リギングの学習に興味がある方は、<strong><a href="http://jasonschleifer.com/afr/" rel="nofollow" title="" class="ext-link">Animator Friendly Rigging</a></strong>もチェックしてみてください。業界の多くのリガーもこれを使って学んでいます。</p><p><img src="http://dgovil.com/wp-content/uploads/2016/12/shhLIFE_header2_small.png" alt=""></p><p><iframe src="https://player.vimeo.com/video/176249957" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p><p>ティーザー映像：<a href="https://vimeo.com/" rel="nofollow" title="" class="ext-link">Vimeo</a>に公開された<a href="https://vimeo.com/user6371427" rel="nofollow" title="" class="ext-link">Fabric Engine</a>の<a href="https://vimeo.com/176249957" rel="nofollow" title="" class="ext-link">Siggraph 2016 Kraken Workshop</a></p><p>KrakenはFabric上に構築されたリギングフレームワークですが、フロントエンドのUIにPythonが使われています。</p><p><a href="https://www.amazon.ca/Stop-Staring-Facial-Modeling-Animation/dp/0470609907/" rel="nofollow" title="" class="ext-link">Stop Staring</a>は顔のリギングとモデリングに関する本で、これもリギングの優れたリソースです。</p><p><img src="http://dgovil.com/wp-content/uploads/2016/12/41DhC-aZFL._SX359_BO1204203200_-e1480811421772.jpg" alt=""></p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/33UpWWyaMtg" frameborder="0" allowfullscreen></iframe></p><p>アニメーターのリグの使い方、および使用するツールの種類を示すデモ映像</p><p>アニメーションは、皆さんに一番馴染みのある部門です。動きのないリグに動きと生気を与えます。基本的には、実写版でいうところの俳優と言ってもいいでしょう。</p><p>ご想像の通り、アニメーターは多くの反復作業を行う必要がありますが、Pythonのスクリプトでこれを代行したり軽減したりすることが可能です。</p><p>以下にその例を挙げます。</p><p>私たちはこうしたツールの多くをPythonで開発しており、ほとんどのインターフェイスはPyQtまたはPySideのいずれかを介したQtを使って開発しています。</p><p>私のコースでは（<strong><a href="http://dgovil.com/blog/2016/11/18/python-for-maya-course/" rel="nofollow" title="" class="ext-link">Python For Maya</a></strong>）、スライダをドラッグして2つのポーズ間のキーの重みを選択できるようにするTweenアニメーション用のUIを作成します。</p><p>キャラクターのアニメーション化は終わりましたが、場面により深みを与える筋肉や髪の毛や服装などといった技術的な問題点についてはまだ考慮の余地があります。</p><p>『塔の上のラプンツェル』の風に揺れるドレスや『モンスター・ホテル2』のクレイジーな髪の毛、あるいは『スーサイド・スクワッド』の筋肉シミュレーションなどは、全てキャラクターエフェクト部門で処理されています。</p><p>他の部門と同様、この部門でもPythonは幅広く活用されています。</p><p>以下はその例です。</p><p>見過ごされがちですが、キャラクターエフェクトはスクリーン上でリアルさを表現するために、なくてはならないステップです。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/HADov1B66us" frameborder="0" allowfullscreen></iframe></p><p>『モンスター・ホテル2』の服装がどのようにシミュレートされたかを示す舞台裏の映像</p><p><iframe src="https://player.vimeo.com/video/169599296?color=949494&amp;title=0&amp;byline=0&amp;portrait=0" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p><p><a href="https://vimeo.com/" rel="nofollow" title="" class="ext-link">Vimeo</a>に公開された<a href="https://vimeo.com/methoddesign" rel="nofollow" title="" class="ext-link">Method Studios</a>の<a href="https://vimeo.com/169599296" rel="nofollow" title="" class="ext-link">2016 AICP Sponsor Reel – ディレクターズカット版</a></p><p>このビデオは、入力モーションキャプチャデータで手続き型エフェクトを生成するHoudiniを使って作成されました。</p><p>エフェクト部門が担当するのは主に手続き型エフェクトで、キャラクターエフェクトとはまったく異なります。</p><p>建物の破壊、爆発、魔法の粒子、さらには海全体、こうしたものに動きを与えるのがエフェクト部門です。</p><p>ここでも、例えば手続き型エフェクトグラフの設定やパラメータの記述など、手作業では時間がかかる多くの工程においてPythonが使われています。</p><p>Pythonを使用して手続き型ノード全体を作成すれば、興味深い効果を生み出すことも可能で、非常にパワフルなツールと言えます。</p><p>これで3Dジオメトリが全て作成されたので、画面で表示できる画像に変換する必要があります。しかし、もしこのまま変換をすると画面は真っ暗になるでしょう。</p><p>ライティング部門は場面に光を追加し、映画として面白く見せることを担当しています。その場面のムードを決めるのは彼らの仕事で、何も起こっていなくても、暗くすれば陰鬱に、明るくすれば幸せで活気に満ちた映像になるはずです。</p><p>場面の中には多くの光とたくさんの3Dアセットが含まれることがあるため、ここでもPythonは大活躍です。UIを作成すれば、これらの場面の管理が容易になります。</p><p>例えば数十億、または数兆のオブジェクトを持つような場面も、シンプルなユーザインターフェイスで対応可能です。</p><p>私のコースでは（<strong><a href="http://dgovil.com/blog/2016/11/18/python-for-maya-course/" rel="nofollow" title="" class="ext-link">Python For Maya</a></strong>）、PyMelとQtを使ってライティングマネージャを作成し、場面内の全ての光を制御するUIを作り上げます。また、それらを場面間または制作者間で共有できるようJSONファイルとしてインポートおよびエクスポートする方法にも触れます。</p><p>ライティングが終わると、ついに場面を画像に変換します。この作業に使うのは、Arnold、Renderman、Vrayなどのレンダラです。</p><p><iframe src="https://player.vimeo.com/video/173931862?title=0&amp;byline=0&amp;portrait=0" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p><p><a href="https://vimeo.com/" rel="nofollow" title="" class="ext-link">Vimeo</a>に公開された<a href="https://vimeo.com/pixarsrenderman" rel="nofollow" title="" class="ext-link">Pixar’s RenderMan</a></p><p>RendermanはPixarが開発したレンダリングエンジンであり（実際には映画会社としてPixerが設立される前から開発されていました）、多くのスタジオで使用されています。</p><p><a href="https://renderman.pixar.com/view/non-commercial-renderman" rel="nofollow" title="" class="ext-link">非商用目的で利用</a>する場合、こちらのリンクからダウンロード可能です。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/bTMVVjv5zQ0" frameborder="0" allowfullscreen></iframe></p><p>全ての結果がどのようにまとめられるかを示す例</p><p>工程の最後を受け持つのがコンポジットです。</p><p>ここでは、最終的な映像とレンダリングされた素材（存在する場合）を集めて一緒に組み合わせます。ただし、全てのパーツが適切に統合され、連続的なイメージに見えるようにしなければならないため、単に組み合わせればいいわけではありません。</p><p>多くの人はビジュアルエフェクトという言葉で、ど派手な爆発や不条理な生物などを想像しがちですが、背景の配置や群衆の追加などといった微妙なこともその範疇にあるのです。</p><p>『フォレスト・ガンプ』のような一見シンプルな映像に、どれほど多大な作業が費やされているのか、把握できる人はそう多くないと思います。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/c3EGgJXD8iU" frameborder="0" allowfullscreen></iframe></p><p>コンポジットでもPythonの有用性は変わりません。</p><p>Nukeのようなアプリケーションで合成ノードグラフの設定を自動化できる他、<a href="http://opencolorio.org/" rel="nofollow" title="" class="ext-link">OpenColorIO</a>やPillowのようなライブラリを使えば画像処理全体を行うことも可能です。</p><p>また、Computer VisionでPythonを使えば、場面内のオブジェクトを追跡できるようにもなります。<br>
その可能性の高さには本当に興奮させられます。</p><p>このブログの記事を通じて、プログラミングがいかに今日の映画にとって不可欠であるか、より具体的には、Python自体がいかに有用であるかを示すことができれば幸いです。</p><p>Pythonを使うことで、動きのあるオブジェクトの複雑な関係性をよりシンプルにできますし、各部門の作業効率を上げることができるようにもなります。</p><p>アーティスティックなプロセスとは言えませんし、直接的な結果を画面で確認できるわけでもないので見過ごされがちですが、近年ますます複雑になってきた映画制作において、その存在はますます大きくなっています。</p>
