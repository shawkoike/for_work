<p><a href="https://www.dataquest.io/blog/apartment-finding-slackbot/" rel="nofollow" title="" class="ext-link">How I built a Slack bot to help me find an apartment in San Francisco</a> （2016-07-21） by <a href="http://twitter.com/vikparuchuri" rel="nofollow" title="" class="ext-link">Vik Paruchuri</a></p><p>私は、BostonからBay Areaに数カ月前に引っ越してきました。Priya（彼女です）と私は、賃貸市場についてありとあらゆる怖い話を聞いていました。「San Franciscoでアパートを探す方法」をGoogleで検索すると、<a href="https://www.google.co.jp/search?q=how+to+find+an+apartment+in+san+francisco&amp;gws_rd=cr&amp;ei=A80OWJ3MLoKM8wW72Y7ACw" rel="nofollow" title="" class="ext-link">たくさん</a>のアドバイスがヒットすることからも、アパート探しの大変さがよく分かります。</p><p><img class="full-width" src="https://www.dataquest.io/blog/images/slack/boston.jpg"><br>
Bostonは寒いです。でも、San Franciscoのアパート探しは怖いです。</p><p>大家さんが見学会を開くと、そこに必要な書類を全て持って行き、検討するだけでも自分から進んですぐに保証金を支払わなければならないと書いてありました。私たちが賃貸契約に関するプロセスを徹底的に調べてみると、アパート探しの多くはタイミングがカギだということが分かりました。何が何でも見学会を開きたいと考えている大家さんもいますが、そうでない人の場合、最初にアパートを見に来た人に貸す場合が多いです。成功のカギは、物件を見つけ、それが自分の条件に合うかを素早く判断し、大家さんに連絡してその部屋を見せてもらう約束を取り付けることです。</p><p>インターネットの口コミで評価の高かった<a href="https://www.padmapper.com/" rel="nofollow" title="" class="ext-link">Padmapper</a>や<a href="https://livelovely.com/" rel="nofollow" title="" class="ext-link">LiveLovely</a>といったいくつかの賃貸アパートサイトを見てみましたが、どのサイトも掲載している情報がリアルタイムではなく、実際に見学して検討できるような物件は1つもありませんでした。また、地域を限定したり、駅に近いなどの追加条件を指定したりできるサイトもありませんでした。Bay Areaのアパートの物件情報のほとんどは、最初に<a href="https://sfbay.craigslist.org/" rel="nofollow" title="" class="ext-link">Craigslist</a>に掲載され、その後他のサイトがその情報を収集していくので、恐らく全ての物件が転載されているわけではないでしょうし、リアルタイムの情報が確認できるほどすぐに転載されるとは思えません。</p><p>私たちは、以下のような方法があれば便利なのにと思いました。</p><p>これらについて考え、4つのステップで実現できると気付きました。</p><p>ここからは、各ステップをどのように構築したか、また、最終的なSlackのbotをアパート探しにどのように使ったかについて見ていきます。このbotを使って、Priyaと私は、（San Franciscoにしては）お手頃価格の気に入ったワンベッドルームの部屋をおよそ1週間後に見つけることができました。思っていたよりもずっと早かったです。</p><p><strong>もしこの記事を読み進めていく中でこのコードに興味を持たれたら、完成したプロジェクトを<a href="https://github.com/VikParuchuri/apartment-finder" rel="nofollow" title="" class="ext-link">こちら</a>でご覧いただけます。また、README.mdへのリンクは<a href="https://github.com/VikParuchuri/apartment-finder/blob/master/README.md" rel="nofollow" title="" class="ext-link">こちら</a>です。</strong></p><p>bot構築の最初のステップは、Craigslistから物件情報を取得することです。Craigslistには、残念ながらAPIがありませんが、<a href="https://github.com/juliomalegria/python-craigslist" rel="nofollow" title="" class="ext-link">python-Craigslist</a>パッケージを使って投稿を取得することができます。<code>python-craigslist</code>がWebページのコンテンツを取得してくれるので、<a href="https://www.crummy.com/software/BeautifulSoup/" rel="nofollow" title="" class="ext-link">BeautifulSoup</a>を使用してWebページから関連する項目を抽出して、構造化データに変換します。このパッケージのコードは比較的短く、目を通す価値があります。</p><p>CraigslistのSan Franciscoのアパート物件は、<code>https://sfbay.craigslist.org/search/sfc/apa</code>に掲載されています。次のことを実行するコードをその下に記載しておきました。</p><p>bot構築のステップ1があっという間に終わりました。これでCraigslistからの物件情報を取得できます。各<code>result</code>は、複数のフィールドを含むディクショナリです。</p><p>以下が、フィールドの説明です。</p><p>Craigslistから物件情報を取得することができたら、あとは結果に条件を追加して、見たいものだけを表示させるようにする必要があります。</p><p>Priyaと私は、以下のエリアで物件を探したいと思っていました。</p><p>地域を条件に追加するためには、まず、境界ボックス、つまりそのエリア周辺のボックスを定義する必要があります。</p><p><img class="full-width full-img" src="https://www.dataquest.io/blog/images/slack/bounding_box.png"><br>
Lower Pacific Heights周辺にボックスを描いています。</p><p>上の境界ボックスは、<a href="http://boundingbox.klokantech.com/" rel="nofollow" title="" class="ext-link">BoundingBox</a>を使って作成したものです。必ず左下の<code>csv</code>を選んで、ボックスの座標を取得してください。</p><p>Google Mapsのようなツールを使って左下と右上の座標が分かれば、自分で境界ボックスを定義することも可能です。ボックスが決まれば、地域と座標のディクショナリを作成します。</p><p>各ディクショナリのキーは地域名で、各キーはリストのリストを含んでいます。最初の内部リストは境界ボックスの左下の座標で、2つ目は右上の座標です。そして、ある物件の座標がこのボックスの中に位置するかどうかによって、条件に該当するかどうかを確認することができます。</p><p>次のことを実行するコードをその下に記載しておきました。</p><p>残念ながら、Craigslistから取得した結果全てに、付随する座標があるとは限りません。座標を計算することができる位置情報を指定しているかどうかは、物件を投稿する人によります。物件を投稿する人がCraigslistに慣れているほど、位置情報を含んでいる可能性が高くなります。</p><p>通常、高い家賃を設定しがちである業者が投稿した物件には、位置情報が掲載されています。物件の所有者の投稿には座標情報がない場合が多いですが、大抵契約条件が良いです。そのため、希望する地域にある座標情報のない物件が分かれば確実と言えます。地域のリストを作って文字列を照合し、希望する地域にある座標情報のない物件かどうかを確認します。多くの物件情報が間違った地域を示しているので、座標を利用するよりも正確性は劣りますが、ないよりはマシです。</p><p><code>NEIGHBORHOODS</code>の1つ1つにループすることによって、名前で照合することができます。</p><p>これまでに書いた2つのコードで結果が処理されれば、住みたい地域に入っていない物件情報が除外されています。誤判定のものがいくつかあったり、地域や位置が指定されていない物件を見落としたりするかもしれませんが、このシステムは、物件情報の大部分を取得してくれます。</p><p>Priyaも私も頻繁にSan Franciscoを訪れることは分かっていたので、San Franciscoに住まないのであれば、交通の便が良いところに住みたいと思っていました。Bay Areaの主な公共輸送は<a href="https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%BC%E3%83%88_(%E9%89%84%E9%81%93)" rel="nofollow" title="" class="ext-link">BART</a>です。Oakland、Berkeley、San Francisco、近郊エリアを結ぶ高速鉄道で、一部の区間では地下を走っています。</p><p>botにこの機能を構築するためには、まず駅のリストを定義する必要があります。駅の座標は<a href="https://maps.google.com/" rel="nofollow" title="" class="ext-link">Google Map</a>から入手し、それらのディクショナリを作成します。</p><p>全てのキーは駅の名前で、駅がある場所の緯度と経度が示された関連したリストを持っています。ディクショナリを作成したら、それぞれの結果に対して最寄駅を探します。</p><p>次のことを実行するコードをその下に記載しておきました。</p><p>これで、各物件情報の最寄り駅を知ることができました。</p><p>
<style type="text/css">.signup-button{font-size: 2.25rem; line-height: 1em!important; background-color: #3c9; border-color: #3c9; padding: 0.75em 20px; border: 0; border-radius: 20px; color: #fff;  font-weight: 700; text-decoration: none; margin-left: 4em; display: inline-block; cursor: pointer;} .signup-button:hover{ background-color: #7878b3; border-color: #7878b3; color: #fff;} .signup-block{background-color: #f7f7f9; background-image: url(https://www.dataquest.io/blog/images/signup-block-background.png); background-repeat: no-repeat; background-position: 100% 0; padding: 2%!important; border-style: solid; border-width: 1px; border-color: #3A4145;}</style>
</p>
<p>結果に条件を追加し終わったら、これまで準備してきたものをSlackに投稿します。Slackとは、チーム内でチャットができるアプリケーションのことです。Slack内にチームを作成すると、他のメンバーをそのチームに招待することができます。Slackの各チームには、メンバー同士がメッセージをやり取りできる複数のチャンネルが用意されています。チャンネル内にいる他のメンバーは、それぞれのメッセージに「いいね」や絵文字などの注釈を付けることができます。Slackに関する詳細は<a href="https://slack.com/is" rel="nofollow" title="" class="ext-link">こちら</a>をご覧ください。もしSlackを体験したいようであれば、私たちが運営する<a href="https://www.dataquest.io/chat" rel="nofollow" title="" class="ext-link">データサイエンスSlackコミュニティ</a>に参加してみてください。</p><p>結果をSlackに投稿することによって、他の人たちと協力し合うことができ、どの物件が最適かを見極めることができます。結果を投稿するには、以下のことが必要です。</p><p>これらのステップが完了したら、物件情報をSlackに投稿するためのコード作成に入ります。</p><p>適切なチャンネル名とトークンが入手できたら、結果をSlackに投稿することができます。投稿には、<a href="https://github.com/slackhq/python-slackclient" rel="nofollow" title="" class="ext-link">python-slackclient</a>を使用します。これはPythonのパッケージで、<a href="https://api.slack.com/" rel="nofollow" title="" class="ext-link">Slack API</a>の使用が一段と楽になります。<code>python-slackclient</code>はSlackのトークンを使用することで初期化され、チームやメッセージを管理する多くのAPIエンドポイントにアクセスできるようになります。</p><p>次のことを実行するコードをその下に記載しておきました。</p><p>全てが接続されたら、botがSlackに物件情報を投稿するようになり、以下のように表示されます。</p><p><img src="https://www.dataquest.io/blog/images/slack/slack.png" alt=""></p><p>botが実行されると物件情報がこのように表示されます。物件情報に絵文字や「いいね」が付いているのがお分かりいただけると思います。</p><p>基本的な要素が全て揃ったので、コードを継続的に実行させる必要があります。最終的には、結果をリアルタイムでSlackに投稿できるようにするか、それに近い状態にしたいと思っています。全てを運用可能にするためには、幾つかのステップを行う必要があります。</p><p>まずは、<a href="http://www.sqlalchemy.org/" rel="nofollow" title="" class="ext-link">SQLAlchemy</a>というPythonパッケージを利用し、物件情報を保存します。SQLAlchemyは<a href="https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E9%96%A2%E4%BF%82%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0" rel="nofollow" title="" class="ext-link">ORマッパー</a>（ORM）で、Pythonでのデータベースの作業を簡単にしてくれます。SQLAlchemyを使うことで物件情報を保存するデータベースのテーブルやテーブルにデータを追加しやすくするデータベースコネクションを作成することができます。</p><p>SQLAlchemyを<a href="https://www.sqlite.org/" rel="nofollow" title="" class="ext-link">SQLite</a>のデータベースエンジンと併せて使用し、<code>listings.db</code>という1つのファイルに全てのデータを保存します。</p><p>次のことを実行するコードをその下に記載しておきました。</p><p>データベースのモデルが出来上がったので、後は各物件情報をデータベースに保存する必要があります。重複したものは省いてくれます。</p><p>次に、コードからコンフィギュレーションを独立させます。まず、コンフィギュレーションを保存することができる<code>settings.py</code>というファイルを作成します。コンフィギュレーションには隠れた<code>SLACK_TOKEN</code>が含まれていますが、うっかりこれをgitにコミットしてしまったり、Githubにプッシュしたりしたくはありません。また、隠されていない<code>BOXES</code>といった他の設定も同様です。しかし、簡単に編集できるようにはしたいと思っています。</p><p>そこで以下の設定を<code>settings.py</code>に移動させます。</p><p>また、gitによって無視される<code>private.py</code>というファイルを作成します。これには、以下のキーが含まれています。</p><p>完成した<code>settings.py</code>ファイルは、<a href="https://github.com/VikParuchuri/apartment-finder/blob/master/settings.py" rel="nofollow" title="" class="ext-link">こちら</a>でご覧いただけます。</p><p>最後に、取得したコードが継続的に実行されるループを作成する必要があります。次のことを実行するコードをその下に記載しておきました。</p><p>また、コードを取得する頻度をコントロールするために、<code>SLEEP_INTERVAL</code>を<code>settings.py</code>に追加する必要があります。初期設定は<code>20</code>分になっています。</p><p>これでコードは完成しました。Slack botがどのように実行されるかご自身で確認してみてください。</p><p>Githubにある<a href="https://github.com/vikparuchuri/apartment-finder" rel="nofollow" title="" class="ext-link">こちら</a>から、今回のプロジェクトを確認できます。<a href="https://github.com/vikparuchuri/apartment-finder" rel="nofollow" title="" class="ext-link">README.md</a>には、インストール方法が細かく記載されています。ただし、プログラムのインストールを経験したことがない方やLinuxを使っていない方は、<a href="https://www.docker.com/" rel="nofollow" title="" class="ext-link">Docker</a>の説明を参照することをお勧めします。Dockerとは、アプリケーションを簡単に作成したりデプロイしたりできるツールで、Slackのbotをローカルコンピュータで素早く実行させることができます。</p><p>DockerでSlackのbotをインストール並びに実行させる基本的な説明を以下に明記しておきます。</p><p>常にコンピュータを起動させておきたくないのであれば、botをサーバにデプロイするのもよいです。そうすれば、継続的に実行しておくことができます。<a href="https://www.digitalocean.com/" rel="nofollow" title="" class="ext-link">DigitalOcean</a>というホスティングプロバイダでサーバを作成することができます。DigitalOceanは<a href="https://www.digitalocean.com/products/one-click-apps/docker/" rel="nofollow" title="" class="ext-link">インストールされたDocker</a>を使って、自動的にサーバを作成してくれます。</p><p>DigitalOceanでDockerを使う方法は、<a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-docker-application" rel="nofollow" title="" class="ext-link">こちら</a>に説明が記載されています。著者が言うところの”shell”を知らないのであれば、DigitalOceanのドロップレットにSSH接続する方法が<a href="https://www.digitalocean.com/community/tutorials/how-to-connect-to-your-droplet-with-ssh" rel="nofollow" title="" class="ext-link">こちら</a>に記述されています。手引書に沿いたくない場合は、<a href="https://www.digitalocean.com/products/one-click-apps/docker/" rel="nofollow" title="" class="ext-link">こちら</a>から始めてみてもいいでしょう。</p><p>DigitalOceanでサーバが作成できたら、SSH接続し、Dockerのインストール方法と上記にある使用説明書に沿って作業してみてください。</p><p>上記のステップが完了すれば、Slackのbotが自動的にアパートを探し出してくれるはずです。このbotを利用して、Priyaと私は素敵なアパートを見つけることができました。希望価格よりは高くなりましたが、私たちが思っていたSan Franciscoのワンベッドルームの価格よりも、最終的には安く借りられました。また、想像以上に大幅な時間削減にもなりました。私たちの場合はうまく行きましたが、botの改善点は幾つかあります。</p><p><a href="https://github.com/vikparuchuri/apartment-finder" rel="nofollow" title="" class="ext-link">Github</a>にあるプロジェクトに対して自由にプルリクエストを申請してください。また、もしこのツールが役立つと感じたようであれば、是非コメントを投稿してください。皆さんがどのようにこのツールを活用しているのかお伺いしたいです。</p>
