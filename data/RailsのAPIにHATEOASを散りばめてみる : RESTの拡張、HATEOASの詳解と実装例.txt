<p><a href="http://ieftimov.com/sprinkle-some-hateoas-on-rails-apis" rel="nofollow" title="" class="ext-link">Sprinkle some HATEOAS on your Rails APIs</a> (2016-06-26) By <a href="https://twitter.com/fteem" rel="nofollow" title="" class="ext-link">Ilija Eftimov</a></p><p>概念としてとしてのRESTは、<a href="https://en.wikipedia.org/wiki/Roy_Fielding" rel="nofollow" title="" class="ext-link">Roy Fielding</a>が博士論文「<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" rel="nofollow" title="" class="ext-link">Architectural Styles and the Design of Network-based Software Architectures</a>」で導入したものです。その16年後、アーキテクチャとしてのRESTは、APIを設計・構築するための最も広く受け入れられた方法となっています。RESTについては私たちはみんな聞いたことがありますし、自分たちが実際にRESTfulなAPIを構築しているとほぼ皆が思っています。しかし、それは本当でしょうか？</p><p>「RESTとは何か？」ということを自分たちにもう一度思い出させたうえで、さらにRESTを補う別の方法、「HATEOAS」と呼ばれるものの話に続けていきましょう。</p><p>私はこれを説明するための良い方法について考えていたのですが、Ryan Tomakoによる「<a href="http://web.archive.org/web/20130316031532/http://tomayko.com/writings/rest-to-my-wife" rel="nofollow" title="" class="ext-link">How I Explained REST to My Wife</a>(私がどのようにしてRESTを妻に説明したか：<a href="http://web.archive.org/web/20130330045743/http://www.geocities.jp/yamamotoyohei/rest/rest-to-my-wife.htm" rel="nofollow" title="" class="ext-link">和訳あり</a>)」という珠玉の記事があり、これは私が過去に見た中で最高のRESTの説明でした。</p><p>ざっくり言えば、REST(<em>REpresentational State Transfer</em>の頭字語)とは、インターネットをその上に構築するためのアーキテクチャです。私の意見では、RESTを最も簡単に説明する方法はRichardson Maturityモデル(RMM)です。ここでは詳細には立ち入りませんが、もしRMMについてより詳しく知りたければ、Martin Fowlerによる「<a href="http://martinfowler.com/articles/richardsonMaturityModel.html" rel="nofollow" title="" class="ext-link">Richardson Maturity Model, steps toward the glory of REST</a>」の記事を読むことをお勧めします。</p><p>RMMはRESTを4つのレベルに分けて説明します。</p><p>これらのレベル全てを、簡単に分析していきましょう。</p><p>レベル1は、「どこか離れた場所、つまりリモートな場所(サーバ)でプロシージャコールを実行するためのプロトコル(HTTP)を使う必要がある」ということを示します。また、「そのプロトコルが提供するメカニズム自体は一切使わないが、あくまでリクエストやレスポンスを送るためのトンネルとして利用する」ということも意味しています。</p><p>レベル2は私たち皆にとって大変なじみ深いものではないでしょうか。それはリソースです。過去に遡って、おそらく私が高校生だったころ、RPCはサーバの単一のエンドポイント上でのコミュニケーションで動作していました。これは「サービス・エンドポイント」と呼ばれます。</p><p>APIにリソースを実装することで、リソースを表現する複数のエンドポイントを提供することができます。これは、「複数の目的を持つ単一エンドポイントを持つのではなく、APIが提供する各リソースについてエンドポイントを持つ」ということを意味します。</p><p>レベル1とレベル2では、プロトコルのメカニズムは省略していました。何故かというと、ここではプロトコルを完全に活用する代わりに、呼び出しをトンネルすることだけを考えているからです。レベル3はこれを次のレベルに押し上げるもので(ダジャレのつもりです)、「あらゆるRESTfulなサービスは、クライアントがリソースとやりとりできるよう、HTTPの動詞を使う必要がある」ということを示しています。</p><p>もしあなたがRailsの世界から来たのであれば、これについて既に知っているのではないかと思います。GET、POST、PUT、PATCH、DELETEの間には大きな違いがある、といった事ですね。もちろん、これらをバックエンドで違ったやり方で処理することができますし、これこそがRailsの輝く領域です。RailsはRESTに従うことをあなたに強く求めるのです。</p><p>もしRMMのレベル3に従わない場合、API側でアクションごとに異なるエンドポイントを持つことになります。例えば、<code>Pet</code>リソースがあるとして、新しいエントリを作成するには<code>/pets/create</code>を、更新するには<code>/pets/update</code>を持つ、といった具合です。レベル3を使い、HTTP動詞を作用させ始めると、Railsによってとても簡易化された物を使うことができます。<code>Pet</code>を得るために<code>GET /pets/:id</code>を、新しく生成するために<code>POST /pets</code>を、更新するために<code>PATCH /pets</code>を使う、といったものです。</p><p>さて、RailsはRESTfulなAPIを書ける<strong>ようになる</strong>ための大きな助力をしてくれましたが、レベル4はあなたに降りかかってくる、実装すべきものとなります。これは、実はほとんど皆が従っておらず、またコミュニティとしても未だにその最善の達成手段が見つかっていないものです。</p><p>ハイパーメディア・コントロールは、RESTの「聖杯」であり、「RESTfulであること」の究極のレベルです。「APIがレベル4に達しているとき、クライアントは特定のデータフォーマットでリソースを要求でき、ハイパーメディア・コントロールを用いてAPIじゅうをナビゲートできる」と述べられています。</p><p>これが分かりにくければ、1歩戻ってブラウザとWebサイトで考えてみましょう。私たちがWebサイトを使うとき、普通は<code>domainname.tld</code>という形、(<code>ieftimov.com</code>や<code>google.com</code>など)のエントリーポイントのみを知っています。そこから、ブラウザを通じてWebサイトとインタラクションすることにより、サイト内の異なるページへのナビゲーションができるようになります。ナビゲーションはリンクのクリックにより行われますね？「リンクがなく、サイト上のあらゆるURLを暗記して手動でタイピングしなければならない」というWebサイトを想像してみれば、こんなひどいサイトは他にない、と思うでしょう。</p><p>これを念頭に置くと、ハイパーメディア・コントロールのアイデアは「リソースがリンクを提供することにより、リソースを利用するクライアントが、エントリポイント以外のエンドポイントの知識なしに自在にナビゲーション/インタラクションできるようにする」というものになります。通常のWebサイトにおいてはページが提供するリンクを通じてやり取りができますが、それと同様のものです。</p><p>HATEOASなAPIが返すJSONレスポンスのフォーマットに少し話を進めていきますが、まずはHATEOASの重要なメカニズムである「コンテントネゴシエーション」について見ていきます。</p><p>コンテントネゴシエーションはHTTPに埋め込まれたメカニズムであり、これによりWebサービスは異なるバージョン(あるいはフォーマット)の文書を提供することができます。RESTの用語でいえば、文書とはつまりリソースです。これはHTTPヘッダの<code>Accept</code>グループによって得られます。例えば、Webページをリクエストする際、ユーザエージェント(ブラウザ)は以下の(あるいは似たような)ヘッダを送信します。内容はブラウザによって変わります。</p><p>これは、サーバに対して「ユーザエージェントは文書を<code>text/html</code>で受け取ることができ、また文書は指定された圧縮スキームで圧縮されていてもよい。フォーマットは<code>en-US</code>(イギリス英語)」ということを伝えます。</p><p>APIに戻ると、Railsはコンテントネゴシエーションについても大変よい働きをしてくれます。現在アプリを構築する場合、リソースはふつう<code>HTML</code>か<code>JSON</code>、あるいは<code>XML</code>のいずれかを持つものと思われます。以下のようなコードを見たことがあるのではないでしょうか。</p><p>あるいは、古いバージョンだとこうなります。</p><p>これにより、<code>index</code>アクションに対し、コンテントネゴシエーションを通じて3タイプのフォーマットでのリクエストを許容するよう命令することができます。<code>HTML</code>、<code>JSON</code>と<code>XML</code>は実際のメディア(またはMIME)タイプです。</p><p>例示したヘッダを見て、<code>q</code>というパラメータに気付いたかもしれません。これは<em>Quality Value</em>と呼ばれ、あるコンテントタイプを他のコンテントタイプよりも重要にする、というものです。言い換えれば、<code>q</code>パラメータは、紐付られたコンテントタイプについて、その「望ましさ」に相対的な<em>重み付け</em>を与えます。</p><p>例えば、以下のような<code>Accept</code>ヘッダがあるとします。</p><p>このヘッダは、サーバに対して「クライアントは、XMLよりも断然JSONを望んでいる」ということを伝えます。<code>q</code>の値が指定されていなければ、その値はデフォルトで1となります。コンテントネゴシエーションについては、<a href="https://tools.ietf.org/html/rfc7231#section-5.3" rel="nofollow" title="" class="ext-link">RFC 7231</a>でより詳しい説明を読むことができます。</p><p>それでは、HATEOASとは何でしょう？これはRESTと同様に頭字語であり、「<strong>H</strong>ypermedia <strong>A</strong>s <strong>T</strong>he <strong>E</strong>ngine <strong>O</strong>f <strong>A</strong>pplication <strong>S</strong>tate」に由来しています。うーん、なんと長く発音しにくいことでしょう？</p><p>ここまで言及してきたように、RMMのレベル4は「APIはナビゲーション/インタラクションのためのハイパーメディア・コントロールを提供すべきである」ということを述べています。しかし、HATEOASはこれとどう関係するのでしょう？RESTは「表現可能な状態の転送(Representational State Transfer)」を意味するのに対し、HATEOASは「アプリケーション状態のエンジンとしてのハイパーメディア(Hypermedia As The Engine Of Application State)」を意味する、ということについて考えてみましょう。名前だけに着目すると、HATEOASはRESTのメカニズムの一つだと考えられます。アプリケーションの状態と状態遷移に関するすべてを解決してくれるものです。</p><p>複雑すぎるでしょうか？リソースの普通のJSON表現を例として見てみましょう。どこかのサーバでの、私のユーザ情報を例にしてみます。</p><p>実にシンプルですね。それでは、このリソースの表現にHATEOASを適用すると、このようになります。</p><p><code>links</code>を提供することで、アプリケーション状態(API側でのデータ変更)のエンジン(利用可能なアクションのリスト)としてのハイパーメディア(この場合JSON)をクライアントが使うことができます。ここでのアイデアは、「一つのAPIまたはリソースに対してはエントリポイントは単一であるべきで、リソースの表現はそのリソース上で実行できるすべてのアクションを含むべきである」というものです。</p><p>これは、「APIを利用するクライアントは<code>User</code>リソースの<code>self</code>属性を使うことができ、この属性をアクションを実行できるエンドポイントとして考えることができる」ということを意味します。APIがRESTfulであることを知ることで、クライアントはそのリソースを更新する方法がわかるのです。</p><p>また、削除する方法もわかります。</p><p>さらに、このユーザのロール全てを見たい場合、ユーザにとって<code>roles</code>という関係にあるリソースに対して<code>GET</code>リクエストを実行することもできます。</p><p>見てわかるとおり、HATEOASを組み合わせることで、クライアントは「リソースからURIを得る」「APIがレベル3のRESTfulであることを仮定する(=HTTP動詞を利用する)」だけでリソースとやりとりできます。</p><p>自分のRailsのAPIをRMMのレベル4実装にするにはどうすればよいでしょう？例を見てみましょう。</p><p>ここでのAPIはブログCMSの一部とします。<code>Author</code>モデルがあり、このモデルは<code>Article</code>モデルに対して1対多の関係があります。つまり、<code>Author</code>が複数の<code>Article</code>を持つことができます。</p><p><code>Author</code>モデルは以下のようになり、</p><p><code>Article</code>モデルは以下のようになります。</p><p>ルーティングは次のようになります。</p><p>最後に、<code>Article</code>と<code>Author</code>の両モデルについてシリアライザがあります。この例では、<a href="https://github.com/rails-api/active_model_serializers" rel="nofollow" title="" class="ext-link">Active Model Serializers</a>を使います。</p><p><code>Author</code>オブジェクトは全て<code>AuthorSerializer</code>によってシリアライズされます。まずはシリアライザに必要な属性を加え、その拡張について後程解説していきましょう。</p><p><code>AuthorSerializer</code>クラスは以下のようになります。</p><p>とてもシンプルですね！この短い例でも、データのコンテキストを見えたままにしておくために、アノテーションをそのまま残しておきます。私の普段の仕事では、データの構造を忘れてしまった場合、アノテーションの追加ではなくスキーマファイルの確認によってそれを調べています。</p><p><code>GET /authors</code>リクエストを送って、データがどのようになるか見てみましょう。リファレンスのため、<code>AuthorsController</code>のindexアクションの実装にしておきます。</p><p>このリクエストは、以下のようなJSONを返します。</p><p>データベースに<code>Author</code>インスタンスが1つしかないため、その1つのみが帰ってきています。また、この<code>Author</code>は関連する2つの<code>Article</code>インスタンスを持つため、シリアライザはこれをレスポンスに含めています。</p><p>さて、シリアライザが動くようになりました。次のステップは、これを<code>links</code>で拡張することです。これはActive Model Serializersを使えばとても些細なことです。<code>links</code>属性をシリアライザに加え、属性の実装(実際はこれはメソッドになります)をクラス内に提供することが必要になります。</p><p>見ての通り、実装は極めてシンプルです。<code>links</code>という新しい属性を追加し、メソッドがただハッシュの配列を返します。初心者向けに、ここでは<code>self</code>リンクだけを持たせました。この<code>self</code>リンクは、いまその表現を見ているリソースを指しています。</p><p>しかし、ここでcurlリクエストを再び行うと、以下のようなエラーが返ってきます。</p><p>Railsのルーティングのヘルパーがシリアライザのスコープに含まれていないために起こっています。シリアライザにこれを含めることで容易に解決できます。</p><p>ここで再びcurlのリクエストを実行すると、以下のように、JSONの中にlinkを見つけられます。</p><p>素晴らしい！リソースに<em>少しばかり</em>HATEOASを加えることができました。</p><p>さらに多くのハイパーメディアをリソースに加え続ける前に、いくらかの考察を加える必要があります。見てわかるとおり、何も考えずに<code>links</code>属性をシリアライザに実装しましたね。「私はAPIの製作者で、APIのレスポンスは私が思うままに構築する」とおっしゃることでしょう。</p><p>ええ、確かにあなたはAPIの作者ですが、その宣言は正しくありません。「我々がみんな、ハイパーメディアの実装方法を個別に考えたらどうなるか」と想像してみるとどうでしょう？全てのAPIがそれぞれハイパーメディア・コントロールに関して異なってしまい、進むべき道を探しても地獄のようになってしまうでしょう。</p><p>そうです、悲しいことに、私たちはまだHATEOASをどう行うかを知らないのです。より良い言い方をするならば、私たちはまだHATEOASを行うための<strong>最善の方法</strong>を知らないのです。それゆえに、人々は仕様を策定しようとしてきましたし、そのうちいくらかは採用されてきました。</p><p><a href="http://stateless.co/hal_specification.html" rel="nofollow" title="" class="ext-link">HAL</a>のドキュメントには、以下のように書かれています。</p><p>見てわかるとおり、HALの背後にあるモチベーションは、ハイパーメディア・コントロールを追加するための簡単かつ一貫した方法を作ることです。他の仕様と同様に、HALはJSONとXMLの両方についてハイパーリンクの表現のための規約を提供しています。</p><p>以下はHALを適用したJSONの例です。</p><p>JSON APIもHALと同様のものです。</p><p>2013年にYehuda Katzによって初めて草案が作られました。この最初の草案はEmber DataのRESTアダプタによって暗黙的に定義されたJSON転送からとられています。そこから、JSON APIは多少の指示を得たものの、API仕様のデファクトスタンダードだと確信を持って言うことはできません。</p><p>JSON API仕様を適用したJSONの例が以下になります。</p><p>ご想像の通り、人々がよいJSONの標準を作ろうとしてきた試みは実に多いです。より有名な仕様には<a href="http://json-ld.org/" rel="nofollow" title="" class="ext-link">JSON for Linking Data</a>(JSON-LDとも)、<a href="http://amundsen.com/media-types/collection/" rel="nofollow" title="" class="ext-link">Collection+JSON</a>、<a href="https://github.com/kevinswiber/siren" rel="nofollow" title="" class="ext-link">SIREN</a>があります。</p><p>JSON APIが勢いをつけてきており、Active Model Serializersがそのとても良いインテグレーションであるため、これに照準を定めて実装を続けていきます。高水準でのActive Model Serializersの動作は、シリアライザとアダプタの2つのパートに分かれます。ドキュメンテーションには以下のように書かれています。</p><p>私たちのJSONをJSON APIフォーマットにシリアライズするため、異なるアダプタを使う必要があります。信じるかどうかはお任せしますが、これは<code>:json_api</code>と呼ばれます。個人的には、このタイプのコンフィギュレーションはinitializerファイル内でするのが好きです。</p><p>アダプタを<code>:json_api</code>に設定することで、APIがJSON API仕様でフォーマットされたJSONを生成/利用するようになります。先ほど行ったAPIの呼び出しと同じものを実行すると、新たなフォーマットのJSONを得ることができます。</p><p>お気づきの通り、ここで返ってきたJSONは先ほど得られたJSONと比較すると全く異なる構造になっています。この理由は、使っているJSON APIアダプタがJSONをJSON API仕様にフォーマットしているからです。</p><p>JSON APIアダプタに関してもう一つ素晴らしい点は、素晴らしいDSLを使ってリンクをとても明示的に書けることです。</p><p>また、<code>links</code>を属性として指定する必要がなく、先ほど書いたシリアライザでRailsのurlヘルパーをミックスインしていた<code>include</code>の行を消すことができました。<code>/authors</code>エンドポイントを<code>GET</code>リクエストで再び呼んでみると、拡張されたJSONを見ることができ、これもまたJSON APIの仕様に従っています。</p><p>AMSはとても素晴らしく、controllerに追加のリソースを含めることでJSONにもそのリソースを加えることができます。</p><p><code>Article</code>の関係性を<code>Author</code>モデルに含めることで、JSONの結果を各ユーザの関連記事で拡張することができます。</p><p>これはとても素晴らしいですが、これを行うとフェッチするすべてのリソースについてN+1クエリが増えることに用心してください。「<code>show</code>アクションは追加のリソースを含む傾向があるのに対し、<code>index</code>アクションはふつう要求されたリソースしか返さない」ということの理由はこれです。</p><p>これにより、リクエストしたauthorに関連するarticle全てが追加されます。</p><p>お気づきの通り、<code>has_many</code>アソシエーションをシリアライザに追加したため、AMSは含まれる各リソースに使うべき正しいシリアライザをわかっています。これにより、含められるリソースとリクエストされるリソースの間の構造を同じにすることができ、結果に一貫性が生まれるとともにJSONのパースが容易になっています。</p><p>ここで、リソース間のナビゲーションがどれほど容易かを実際に見てみるため、<code>ArticlesController#show</code>も実装してみましょう。</p><p>とてもシンプルです。<code>Article</code>を<code>author_id</code>と<code>id</code>のパラメータによって見つけ、JSONにレンダリングします。<code>GET /authors/1/articles/2</code>を呼ぶことで、<code>Article</code>オブジェクトのJSON API表現を得ることができます。</p><p>もし<a href="https://www.getpostman.com/" rel="nofollow" title="" class="ext-link">Postman</a>(私はこれを使うのをとても楽しんでいます)やその他のAPIブラウザをエンドポイントのテストに使っているのであれば、リソースのナビゲーションがどれほど容易かを見ることができるでしょう。</p><p><img src="http://ieftimov.com/img/posts/postman-hateoas-1.png" alt=""></p><p>Webブラウザと同じように、分かっているのはエントリポイントの<code>localhost:3000/authors</code>です。ここから、<code>Author</code>の<code>links</code>プロパティをクリックして単一の<code>Author</code>リソースを入手します。</p><p><img src="http://ieftimov.com/img/posts/postman-hateoas-2.png" alt=""></p><p>このリソースを全ての関連リソースと共に見ることで、<code>Article</code>リソースに含まれるリンクのどれかをクリックすることができ、その属性をJSONフォーマットで得ることができます。</p><p><img src="http://ieftimov.com/img/posts/postman-hateoas-3.png" alt=""></p><p>これこそが、HATEOASが基本的に意味するところです。リソースのJSON表現内で提供されるエンドポイントを通じてリソースとのナビゲーション/インタラクションを行うのです。</p><p>ここまで見てきたとおり、HATEOASとは何かを理解・学習するためには、頭に入れておくべき文脈が少しばかりありました。しかし、その全ては時に極めて複雑に見えますが、RailsのおかげでHATEOASなAPIの実装は極めて簡単になっています。その簡単さは例で見てきたとおりです。もちろん、ハイパーメディア・コントロールについてはもっと学ぶべきことが色々ありますが、ここで示した例は「ちょっと体験してみる」というのには十分すぎるほどだったでしょう。</p><p>また、HATEOASの概念は一見大変複雑に見えますが、いざ分析してみるととてもシンプルなものです。なぜなら、私たちは同じ挙動をWebブラウザで既に見ているからです。「なぜとても複雑に見えるのか？」という問題ですが、これは「私たちが普通のWebサイトをRESTfulなAPIのように見たことがないから(逆もまた然り)」という理由です。</p><p>この記事で使ってきたエンドポイントの実際の実装を見たければ、GitHubの<a href="https://github.com/fteem/hateoas" rel="nofollow" title="" class="ext-link">このリポジトリ</a>をチェックしてみてください。</p><p><a href="https://twitter.com/gfotos" rel="nofollow" title="" class="ext-link">Fotos Georgiadis</a>は、この投稿の草稿に多くのコメントをしてくれました。また、彼は私をRESTやHATEOASに関する議論に引き込んでくれて、その議論をどのようにしたらより濃厚にできるのかについて多くの有用な情報と共に提案してくれました。</p>
