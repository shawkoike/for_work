<p><a href="https://medium.com/@pioul/modular-css-with-react-61638ae9ea3e#.rzuxasmrr" rel="nofollow" title="" class="ext-link">Modular CSS with React</a> （2016-04-07） by <a href="https://twitter.com/_pioul" rel="nofollow" title="" class="ext-link">Philippe Masset</a></p><p><a href="https://buffer.com/" rel="nofollow" title="" class="ext-link">Buffer</a>のメンバーはReactが大好きで、フロントエンドの多くのコードベースを徐々にReactに移行させています。ReactにFluxを加えると、モジュラー形式の小さなアプリでできた複雑なプロダクトを構築するための、とても健全な方法になると思います。そこで、１つ１つの新しい小さなアプリと機能を、大規模な構造体に追加される、Reactの新しいブロックと考えます。</p><p>私は最近、このような新機能の１つに取り組んでいますが、React＋Fluxのアプリケーションを作るのがいかに簡単であるかと、その理由について、さらに夢中になってしまいました。Reactを使うと有意味なコンポーネントを集めてUIを宣言的に構築するのが楽になり、Fluxはその混成体に妥当なデータフローをもたらします。</p><p>複雑なアプリケーションを作るときに発生する課題について多くの考察がなされましたが、React＋Fluxの組み合わせはその課題の多くを鮮やかに解決してくれます。</p><p>それでもまだ私は、Reactのモジュール性と再利用性を十分に生かしたスタイリングの作り方が分かりません。</p><p>幸いなことに、最近、CSSの世界ではとても興味深い発展がいくつかみられ、モジュラーCSSを実現するための多くのパターンとツールが出現しています。</p><p><a href="https://twitter.com/Vjeux" rel="nofollow" title="" class="ext-link">Vjeux</a>は、<a href="https://speakerdeck.com/vjeux/react-css-in-js" rel="nofollow" title="" class="ext-link">React: CSS-in-JS</a>で、JSを活用してCSSの多くの課題を解決することについて素晴らしいアイデアを数多くシェアしています。性質上CSSで実現するのが困難な多くのことが著しく簡単になり、その理由は単にJSで実現する方が簡単だから、という原理です。</p><p>大まかに言えば、自然構文にとても近い感じがするJSのオブジェクトリテラルの形でCSSを記述し、<em>style</em>属性を使ってReactコンポーネントに適用するということです。スタイルを個別のモジュラーファイルに保管しておいて、そのファイルを通常の<em>import</em>文を使ってJSモジュールにインポートすることができます。</p><p><script src="https://gist.github.com/pioul/c3d8f1ad9ee8cd70389a4525f4091ae8.js"></script></p><p>これは、<a href="https://github.com/css-modules/css-modules" rel="nofollow" title="" class="ext-link">CSSモジュール</a>の非常にシンプルな前提です。ReactコンポーネントはそれぞれのCSSファイルを取得し、そのCSSファイルはそのファイルとそのコンポーネントにスコープされています。構築時に、魔法が起こります。非常にシンプルで衝突の危険がないローカルクラス名が、自動生成された名前にマッピングされ、React内で使うためのJSオブジェクトリテラルとしてエクスポートされます。</p><p><script src="https://gist.github.com/pioul/9aa4f8b38e64f5f50082159d80d59d60.js"></script></p><p>CSSモジュールは意図的にとてもシンプルなものになっています。CSSのモジュラー性の課題を解決するために、ごく少ない新しい構文をCSSに追加しただけで、その他の部分は変わらず同じです。</p><p>課題の多くは、CSSルールがグローバルスコープの中にあることに起因します。CSS-in-JSとCSSモジュールがそれらの課題をどのようにして解決するか説明しましょう。</p><p>CSS-in-JSとCSSモジュールはデフォルトでローカルにスコープされます。これは、ネームスペースが不要であることを意味します。また、BEMのような命名規則では対応できない、とても短くて意味のある名前をスタイルルールに使えるようにもなります。その結果、命名の衝突や特定性の問題が起こる危険がなくなります。</p><p>スタイルを定義するには、CSS-in-JSではオブジェクト属性<em>{ image: {} }</em>を使用します。<br>
CSSモジュールはシンプルなクラス名<em>.image {}</em>を使用します。</p><p>複雑なCSSセレクタでは、あるスタイルが使われるのか、または、どこで使われるのかを知るのが困難なことがよくあります。モジュールと明示的な従属性を使用すると、どのスタイルが使われるのか使われないのかを、ずっと簡単に知ることができ、使用されないスタイルを確信を持って削除することができます。また、CSS-in-JSとCSSモジュールの両方について、ここではローカル変数の話をしているので、ビルドツールを使っても、使用されないローカル変数を見つけて取り除くことができます。</p><p>どちらの手法にも、スタイリングの再利用の解決策としてコンポジションが使えます。</p><p>その目的のために、CSS-in-JSでは、<em>Object.assign()</em>など、JSが提供するはずのものは何でも利用することができます。</p><p>CSSモジュールでは、<em>composes</em>ルールを使ってセレクタを構成することができます。</p><p><script src="https://gist.github.com/pioul/98158b6502d9426924b90a22300a344c.js"></script></p><p>CSS-in-JSは簡素なJSなので、どんなモジュールシステムでもスタイルをエクスポートまたはインポートすることができます。</p><p>CSSモジュールでは、他のCSSモジュールからのクラス名をコンポーズすることが可能になります。</p><p><script src="https://gist.github.com/pioul/d9e8a852a123077c950179d04ad668c0.js"></script></p><p>状態と、その他の条件に基づいてスタイルを変更することもまた、コンポジションの良い使い方です。</p><p>CSS-in-JSの場合：<br>
<script src="https://gist.github.com/pioul/093593f625c7ca84d29158114f293300.js"></script></p><p>CSSモジュールの場合：<br>
<script src="https://gist.github.com/pioul/8accb73fb807a7eb5816196d325bcb50.js"></script></p><p>あるコンポーネントのスタイルは、そのコンポーネントの呼び出し元によってカスタマイズされるべきです。再利用可能なコンポーネントに、例えばディメンションやデフォルト色がそのコンポーネント自体にスコープされるようなコンポーネント固有のスタイルを持たせ、後に親が各自でスタイルを操作して位置決めしたり、可能なら、見た目や雰囲気を微調整するようにしたりすれば自由度が高くなると思います。</p><p>CSS-in-JSでは、親から子へのスタイルの受け渡しは、スタイルオブジェクトをマージするだけなので簡単です。</p><p><script src="https://gist.github.com/pioul/3d8b389de52e2c851fea3e1d0edf6eb3.js"></script></p><p>CSSモジュールでは、クラス名を連結させることによって同じことができます。</p><p><script src="https://gist.github.com/pioul/7abfae43917736e3baf443fc0f70fed9.js"></script></p><p>CSS-in-JSとCSSモジュールのどちらでも、スタイリングをモジュール化する優れた解決策が得られ、それは実に素晴らしいものです。モジュール性に加え、他にもスタイリングにとって望ましい多種多様な技が得られる可能性があります。そして、JavaScriptはその性質から、それらの技をvanilla CSSよりずっと簡単に成し遂げることができるのです。</p><p>でも、こういったおまけの技は、CSSでも、LESSやSASSなどのCSSプロプロセッサに頼るか、将来のCSS機能を利用するために前もって新しい構文を使う(そして、この構文をプリプロセスして、今のブラウザで実行するようにする)かのどちらかによって達成することができます。</p><p>このような、今はJSを使った方が簡単に達成できると思われることに、CSS-in-JSとCSSモジュールがどのように拮抗するのか説明しましょう。私たちはCSSモジュールでは、LESSやSASSではなく、近日追加されるCSSの機能を使いますが、LESSやSASSも選択肢として考えられます。</p><p>スタイル定数は、色やサイズなどの共通のプロパティを、コンポーネント間または同一コンポーネント内で共有するための優れたツールです。</p><p>CSS-in-JSの場合は全てがJSなので、スタイル定数の共有は、変数を使用すること、そして、他のコンポーネントが利用できるようにエクスポートすることと同じぐらい簡単です。</p><p>CSSモジュールの場合も、同一のスタイルシート内で定数を共有することは、<a href="https://www.w3.org/TR/css-variables/" rel="nofollow" title="" class="ext-link">CSS Custom Properties</a>を使えば簡単です。</p><p><script src="https://gist.github.com/pioul/aa67876aeaaf0899a01453fa46e349d4.js"></script></p><p>しかし、このような定数をスタイルシート<em>の間</em>で共有することは、あまり便利ではありません。その理由は、CSSモジュールは、スタイルをまとめてコンポーズするように（そして、他のファイルからスタイルをインポートすることによって非常に簡単にコンポーズできるように）意図されており、定数の共有よりもスタイルコンポジションの使用が期待されるからです。</p><p>したがって、CSSモジュールで意図される方法は、次のようになります。</p><p><script src="https://gist.github.com/pioul/e1c3201d693ffe6d5480007c143a33bd.js"></script></p><p>でも、どうしても定数を共有したいのなら、CSSモジュールの土台となる<a href="https://github.com/css-modules/icss" rel="nofollow" title="" class="ext-link">ICSS</a>を使う必要があります。これは標準のCSSに加えられた小さな仕様で、CSSモジュールを有効にするための疑似セレクタ、<em>:import</em>と<em>:export</em>が追加されています。これらを使用すると、キーと値のペアのエクスポートとインポートが可能になり、このペアをローカルでCSSのカスタムプロパティにマッピングすることができます。</p><p><script src="https://gist.github.com/pioul/64366422354c373ddeeb8a50cd6e498c.js"></script></p><p>くどいコードですが、各ブロックには妥当な目的があります。最初のブロックは外部従属性から値を明示的にインポートし、第2のブロックはこのインポートされた値を受け取るローカルのカスタムプロパティを定義し、次に適切に見えるようにカスタムプロパティを使うことができます。</p><p>グローバルを導入するのは危険で、私たちはその危険を積極的に除外しようと試みていますが、定数の共有には賛否両論があります。危険を冒してでも短いコードを書きたい人にも、残された道はあります。グローバルのカスタムプロパティを使うと、上のコードを次のように短くすることができます。</p><p><script src="https://gist.github.com/pioul/b8c32cdfed1d20d7ea8b699ee773cd30.js"></script></p><p>JSの変数をCSSと共有することは理想的だとは思えませんが、多くの状況で共有が必要となる場合があります。</p><p>CSS-in-JSでは、JavaScriptがこの共有を再度非常に簡単にしてくれます！</p><p>CSSモジュールの場合はどうかと言うと、残念ながら現時点では少し制約があります。</p><p><a href="https://developer.mozilla.org/en/docs/Web/CSS/attr" rel="nofollow" title="" class="ext-link">CSSの<em>attr()</em>関数</a>は、所与のDOMの属性の値を取得し、それをCSSで使用することができますが、ブラウザがサポートするのは、この関数が疑似要素のcontentプロパティで使われ、しかもストリング値と一緒の場合のみです。ゆくゆくは、<a href="https://developer.mozilla.org/en/docs/Web/CSS/calc" rel="nofollow" title="" class="ext-link">calc()</a>のような、他のCSS関数を併用して、あらゆるDOMの属性は、CSSが読み取れ、計算することができる値を保持することができるでしょう。JS + HTMLとCSS間を強力に結びつけることができるというわけです！</p><p>理想：</p><p><script src="https://gist.github.com/pioul/f62ffd6bd12bd1fc03d746fe6200c1f9.js"></script></p><p>将来のバージョンのChromeが<a href="https://drafts.csswg.org/css-values-3/#attr-notation" rel="nofollow" title="" class="ext-link">CSS3</a>で<em>attr()</em>の定義をサポートすると仮定した場合、この理想は以下のようになるでしょう。</p><p><img class="graf-image" data-image-id="0*HlUhwLr2bnBEiGuO.gif" data-width="673" data-height="302" src="https://cdn-images-1.medium.com/max/900/0*HlUhwLr2bnBEiGuO.gif"><br>
一方、JSとCSS間で変数を共有するために疑似要素と文字列よりも多くのものを必要とする使用事例において、取るべき方法はインラインスタイルです。</p><p>CSSモジュールを使っているならば、近日追加されるCSSの仕様が、プロパティを操作するための<em>calc()</em>や<em>color()</em>のような便利な関数を多く導入してくれます。</p><p>そしてJavaScriptの表現力が、思い付く限りの方法でスタイルを操作するために、理想的な候補となります。これには、<a href="https://www.npmjs.com/package/color" rel="nofollow" title="" class="ext-link">色</a>も含まれます。</p><p>JSでは、スタイルの追跡をCSSよりも容易にしてくれます。</p><p>しかし、ドキュメントがどのように表示されるかを記述するために作られた言語であるCSSは、様々な方法でこれらのドキュメントのスタイリングが簡単になるように進化してきたということを、忘れないでください。JSは、同じことを目的としていません。それに、一部のスタイリングの使用事例に関して言えば、CSSにある簡潔性がいくらか欠如しています。CSSが疑似クラス、疑似要素、そしてメディアクエリですることを、JSで実現することは難しいのです。</p><p>CSSでは、<em>:first-child</em>や<em>:nth-child</em>といった疑似クラスは、ドキュメント内の他の要素との関係に基づいて、スタイリングの要素を可能にします。</p><p>JSを使ったスタイリングの場合、これらの疑似クラスは関係ありませんが、レンダリングのループ内で、いくつかの要素に対してスタイリングを選択的に適用することは可能です。例えば、疑似クラス<em>:nth-child(even)</em>に等価なコードは、JSでは以下のようになります。</p><p><script src="https://gist.github.com/pioul/c5f2fe327d1533ffd4a9794adf445de2.js"></script></p><p>JSでの要素のスタイリングが、ループ内のインデックスといった単純条件に基づく必要がある場合、そのメソッドはCSSよりも若干くどくはなるものの、それでも簡単に扱うことができます。JSで、これらの疑似クラスに相当する、クールなカンニングペーパーを紹介しましょう（<a href="https://www.youtube.com/watch?v=ERB1TJBn32c" rel="nofollow" title="" class="ext-link">インラインスタイルに関する、素晴らしいプレゼンテーションから抜粋しています</a>）。</p><p><script src="https://gist.github.com/pioul/7f9a25581701fe20c6f7b1a99f462520.js"></script></p><p>疑似クラスはまた、ページとのインタラクションに基づいてスタイルを変更するのに有効です。これは、CSSお馴染みの<em>:hover</em>や<em>:focusand、:active</em>が真に輝ける場所です。</p><p>JSでは、<em>onMouseEnter</em>や<em>onMouseLeave</em>といったイベントリスナを、コンポーネントの状態をアップデートするために使われなければならざるを得ず、状況に応じて”hover”スタイルを適用しなくてはなりません。</p><p>これはかなり扱いにくく（間違いなくより強力ではあるのですが）、多くのライブラリがこの使用を取りやめています。これらの中で、私が特に気に入っているのが、<a href="http://stack.formidable.com/radium/" rel="nofollow" title="" class="ext-link">Radium</a>で、hoverスタイルは以下のようになります。</p><p><script src="https://gist.github.com/pioul/d66faf742ae9e3c4a1229e8bb590eb82.js"></script></p><p>CSSでは、ドキュメントの特定部分をスタイルする際、<em>::after</em>や<em>::before、::placeholder</em>をしばしば重宝します。また、<em>::first-letter</em>や<em>::first-line</em>、<em>::selection</em>にも同様のことが言えます。</p><p>JSに関して言えば、これらを簡単に真似ることは困難です。確かに、<em>::after</em>や<em>::before</em>の代わりに実際の要素を使うこともできるでしょうが、<em>::first-letter</em>または<em>::first-line</em>を対象とすることが厄介になるでしょう。それに、スタイリング目的のために要素を模倣する抽象化をしなければ、<em>::placeholder</em>または<em>::selection</em>を対象とすることができませんが、この抽象化をすることは少しやり過ぎです。</p><p>JSでメディアクエリを扱うためには、条件付きでスタイルを適用するために<em>window.matchMedia()</em>を当てにすることもまた、同等の機能を持つ快適なCSSを使うよりも、あまり現実的ではありません。Radiumのようなライブラリを役立てることもできます。</p><p>結局のところ、CSS-in-JSは、インラインスタイルでしかないので、Reactの<em>style</em>属性を活用することで使い始めることができます。</p><p>通常、vanilla CSSに備わってくる、<em>:hover</em>や<em>:focus</em>、<em>active</em>といった疑似クラス、メディアクエリといったいくつかの機能において、Radiumのようなライブラリを使うことは有用です。また、Radiumは自動でプリフィックスも付与してくれます。JSでスタイリングするということはつまり、Autoprefixerといった通常のCSSツールの使用をやめるという最高の考え方です！</p><p>スタイリングしたいReactのコンポーネンにおいては、単純に、そのコンポーネントのためのスタイルを含むCSSファイルを作成します。ファイルにある全てのスタイルはローカルであり、そのコンポーネントのコンテキスト内でしか使えないはずなので、シンプルなクラス名だけを使用すればいいのです（例えば<em>.image</em>など）。</p><p>ファイルを作成したら、ReactのコンポーネントにCSSファイルをインポートします。他のものをインポートするのと同じ要領です。そして、<em>className</em>の属性を使って、インポートされたクラス名を適用します。</p><p><script src="https://gist.github.com/pioul/265b86036a0688c490b5c7aa2507d152.js"></script></p><p>アプリを構築するには、Webpackにある<a href="https://github.com/webpack/css-loade" rel="nofollow" title="" class="ext-link">css-loader</a>や<a href="https://github.com/webpack/css-loader#css-modules" rel="nofollow" title="" class="ext-link"><em>modules</em>のオプション</a>を使うことができます。出力は以下のようになります。</p><p><script src="https://gist.github.com/pioul/64f27a2e799df821d7c584ece45ba759.js"></script></p><p><a href="https://github.com/pioul/Minimalist-Online-Markdown-Editor/blob/9bc7992a8033e06a53f81eec88f67d826edb6d12/webpack.config.js" rel="nofollow" title="" class="ext-link">Webpackコンフィグの例</a>では、JSのバンドルと一緒にCSSのバンドルを作成するために、<em>ExtractTextPlugin</em>が使われています。また<em>localIdentNName</em>のcss-loaderオプションは、開発の際にスタイルを位置付けるのを手助けするために、適当なクラス名を作成するのに役立ちます（短いハッシュは、プロダクションコードに使用することができます）。</p><p>CSSモジュールは、以下にも使用することができます。</p><p>CSS-in-JS、CSSモジュールどちらのアプローチも、モジュール性やコンポーザビリティ、ローカルスコープの解放的な体験などの点で、同等の利点をもたらしているように思えます。しかし、利点は同等であっても、実装は異なります。一方は、CSSファイル内に存在する実際のCSSであり、インポートやハッシュ化されたクラス名を使っ構築時にJSモジュールと結合されます。もう一方は、最初から実際のJSであり（CSSに酷似していますが）、実行時に構成され、インスタイルスタイルの形で要素にアタッチされます。。どちらも対処する内容によって、一方よりも簡単な操作ができるようになっていますが、両方とも全てを行うことは可能です！</p><p>確かなことは、どちらを選ぶかは使用事例や個々の好み次第ということです！　CSSモジュールには他の構築ステップが加わりますが、<a href="https://twitter.com/floydophone" rel="nofollow" title="" class="ext-link">Pete Hunt</a>はCSS-in-JSについて、一部のツールやパフォーマンスの遅延をほのめかしながら、次のように雄弁に語っています。「”インラインスタイルのあらゆることに対して”いまだ、ブラウザベンダーによるにじみ出るような努力が見られない」。</p><p>今回私は、CSSモジュールを使用することにしました。CSSの方が、私の仕事に適したツールだと実感したからで、CSSモジュールと近日追加されるCSSの強力な機能である前処理<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>,<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>の組み合わせに大変満足しています。保全性や明確さ、信頼性、そしてコードにあるべき美しさにおいて、これは有用です。</p><p>しかし、CSS-in-JSは代替えとして使える素晴らしいものだと思います。CSS-in-JSを使用している方の体験談、そしてこの<a href="https://www.youtube.com/watch?v=RBg2_uQE4KM" rel="nofollow" title="" class="ext-link">CSS-in-JS戦略の次のレベル</a>に関する、皆さんの声を是非聞かせてください。</p>
