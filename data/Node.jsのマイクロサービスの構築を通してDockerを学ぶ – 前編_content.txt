Learn Docker by building a Microservice （2016-04-19） by Dave Kerrあなたが真剣にDockerに取り組んで、その全てを学びたいと思っているのでしたら、もう探し回らなくても大丈夫です。本稿では、Dockerがどのように機能するのか、どんな部分が話題になっているのか、そしてマイクロサービスを構築する際の基本的な開発作業にどのように役立つのかについて紹介したいと思います。本稿では例として、ローカルで実行するコードからマイクロサービスやデータベースを実行するコンテナまで、バックエンドにMySQLを用いたシンプルなNode.jsのサービスの例を使います。Dockerとは要するに、（仮想マシン用のテンプレートに非常によく似ている）イメージを作成して、コンテナでイメージのインスタンスを実行できるソフトウェアです。Dockerには、Docker Hubと呼ばれる大量のイメージのリポジトリがあり、これを利用して作業を始めたり、無料のストレージとして自分のイメージを保存したりできます。Dockerをインストールし、使いたいイメージを選び、コンテナでそのインスタンスを実行すればよいのです。本稿では、イメージを構築し、イメージからコンテナを作成した後、更にいろいろなことを紹介したいと思います。本稿を活用していただくために、まずはDockerが必要になります。自分のプラットフォーム用のインストールガイドをdocs.docker.com/engine/installationで確認してください。MacやWindowsのユーザでしたら、仮想マシンを使用するのが良いでしょう。私はほとんどの開発作業において、UbuntuマシンをMac OS X用Parallelsの上で動かしています。試行錯誤する際に、スナップショットを取ったり処理を細分化したり元に戻したりできるのはとても便利です。以下のコマンドを入力します。少し待つと、次のようなプロンプトが表示されます。コマンドをいくつか試して、コンテナを終了します。大したことをしているようには見えませんが、多くのことが起きています。これは、自分のマシン上でUbuntuを実行している隔離されたコンテナのbash シェルです。そこは、いろいろなものをインストールし、ソフトウェアを実行し、何でも好きなことができる自分の場所です。何が起きているかを詳しく示した図があります。（この図は‘Understanding the Architecture’ Docker Documentation（Dockerのドキュメンテーションの”アーキテクチャを理解する”）から引用しました。素晴らしい内容です）次のコマンドのうちどれでもいいので試してみてください。今回はHaskellを使いませんが、見てお分かりのように、環境の起動はとても簡単です。自分のアプリやサービスやデータベースなど、必要なものを搭載した状態で自分専用のイメージを構築するのは実に簡単です。その後、Dockerをインストールしたマシンならどこでも実行が可能で、構築したイメージは予想通りに動きます。コードによって自分のソフトウェアとソフトウェアが実行される環境を構築し、簡単にデプロイできるのです。シンプルなマイクロサービスの例を見てみましょう。マイクロサービスを1つ作ります。Node.jsとMySQLを使って、電話番号に結び付くメールアドレスのディレクトリを管理するものです。ローカルで開発するには、MySQLをインストールしてテストデータベースを作って、それから……やめます。ローカルでデータベースを作り、その上でスクリプトを実行すれば簡単に始められるのですが、煩雑になる可能性があります。コントロールできないものが山のように動き出してしまいます。実行すれば動くかもしれませんし、自分のリポジトリに登録したシェルスクリプトを使えばコントロールすることだってできるでしょう。しかし、もし、他の開発者が先にMySQLをインストールしてしまっていたら？　もし自分たちが使おうとしている開発用の”users”という名前が先にデータベースで使われていたら？これはDockerの優れたユースケースです。Docker上で本番用のデータベースは動かすつもりはありません（サンプルでAmazonRDSだけ使うかもしれません）。それでも、開発用のDockerコンテナとしてまっさらなMySQLのデータベースを即座に稼働させることができます。開発マシンには手を入れず、何をしても全てをコントロールし再利用できる状態を保ち続けられるのです。以下のコマンドを実行します。これは、123というルートのパスワードでポート3306からのアクセスを許可するMySQLインスタンスの実行を促します。最後の部分は、たとえMySQLのデフォルトのポートであるとしても、極めて重要です。もし割り当てを明確に記述しなければ、そのポートからのアクセスがブロックされてしまいます（なぜなら、アクセスの存在を知らせなければ、コンテナは隔離された状態だからです）。この機能による戻り値はコンテナID、つまりコンテナへの参照値で、これを使って動作の停止、再スタート、コマンドの発行などを行います。どのコンテナが動いているか見てみましょう。重要な情報はコンテナ ID、イメージ、名称です。このイメージに接続し、どうなるか見てみましょう。これも非常に優れたものです。データベース、テーブル、ユーザなど、必要なものを何でも作ることができます。ここまででMySQLをコンテナ内部で実行し、既にDockerの効果的な利用方法をいくつか紹介していることになりますが、ここで一息入れてサービスの方に移りましょう。ひとまず、test-databaseというフォルダを作り、データベースの開始・終了、テストデータのセットアップを行うスクリプトを入れます。開始は、簡単です。このスクリプトは、分離されたコンテナの中（つまりバックグラウンド）にあるデータベースイメージをユーザセットアップと共に実行します。ユーザセットアップは、usersというデータベースにアクセスして、データベースサーバが立ち上がるのを待ち、setup.sqlスクリプトを実行して初期データを設定します。setup.sqlは、以下のことを行います。stop.shスクリプトは、コンテナを止めて取り除きます（コンテナは、すぐに再起動できるよう、デフォルトでDockerにその状態が保存されます。この例ではこの機能は特に必要ありません）。これは、後ほどもっと単純化して、さらに良い感じに整えます。リポジトリのステップ1のブランチを見て、現時点のコードを確認してください。本稿では、Docker習得に焦点を当てていますので、Node.jsのマイクロサービスに長い時間をかけるつもりはありません。その代わりに、この領域と要点について説明します。これを少しずつ見て行きましょう。最初に見るセクションは、repositoryです。データベースアクセスをある種のクラスやアブストラクションに含めると、テスト目的でモックするのに便利かもしれません。恐らく、同じことをするためにもっと良い方法がたくさんあるでしょう。しかし、基本的に、以下のような方法でRepositoryオブジェクトを作成できます。repository/repository.spec.jsファイルにユニットテストのセットもあります。リポジトリができたので、サーバを作成することができます。以下は、server/server.jsです。このモジュールは、start関数をexportしています。このように使うことができます。server.jsが、api/users/jsを使うことに気付きましたか？　こちらです。これらのファイルは、どちらもソースの近くにユニットテストがあります。コンフィギュレーションが必要です。専用のライブラリを使うのではなく、シンプルなファイルが、config/config.jsの目的にかなっています。必要な場合は、コンフィギュレーションをrequire（要求）することもできます。現在、多くのコンフィギュレーションは、ハードコード化されていますが、portから分かるように、環境変数をオプションとして追加するのは簡単です。最後のステップです。全てをまとめるindex.jsファイルとつなぎ合わせます。ちょっとしたエラー処理を行い、それが終わったら、コンフィギュレーションをロードして、リポジトリを作成し、サーバを立ち上げるだけです。これがマイクロサービスです。全てのユーザを対象としたり、ユーザを検索したりできます。コードをチェックアウトすると、使えるコマンドがいくつかあることが分かるでしょう。これまで見てきたコードの他に、このようなものもあります。以上！以下のコマンドを使って、テストデータベースを実行してください。そして、サービスを実行してください。ブラウザでlocalhost:8123/usersにアクセスして、実行される様子を見てください。Dockerマシンを使っているようなら、つまり、MacかWindowsで実行しているなら、localhostは使えません。代わりにDockerマシンのIPアドレスが必要になります。docker-machine ipでIPアドレスを取得することができます。以上、あっと言う間にサービスを構築しました。先に進む前にこのコードを見たければ、ステップ2のブランチを確認してください。後編はこちら：Node.jsのマイクロサービスの構築を通してDockerを学ぶ – 後編
