<p><a href="https://kristerw.blogspot.jp/2016/07/code-behaving-differently-in-c90-c99.html" rel="nofollow" title="" class="ext-link">Code behaving differently in C90, C99, C11, C++98, and C++11</a> (2016-07-24) By <a href="https://twitter.com/kwalfridsson" rel="nofollow" title="" class="ext-link">Krister Walfridsson</a></p><p><small>(訳注：2016/9/28、頂きましたフィードバックを元に記事を修正いたしました。)</small></p><p>C言語の規格のリビジョン間には微妙な違いがありますが、このことを利用して「C90、C99、C11のどれとしてコンパイルされたかどうかにより、違う挙動をする」というプログラムを作ることが可能です。同様に、C++はほぼC言語の上位互換ですが、C言語とC++で違った結果を生み出すプログラムも存在します。</p><p>これは2015年の<a href="http://ioccc.org/" rel="nofollow" title="" class="ext-link">International Obfuscated C Code Contest</a>(難読Cコード・国際コンテスト)への<a href="http://ioccc.org/2015/yang/hint.html" rel="nofollow" title="" class="ext-link">Don Yangの投稿</a>において、<br>
C89、C99、C11、C++98、C11のどれとしてコンパイルされるかによって異なる出力を生成するプログラムを作成するのに使われています。C90の場合は、以下のような星形を出力します。</p><p>C99ではこの星に目がついたものが出力され、C++11では丸が出力される、といったものになっています。(仕掛けはさらにあります。このプログラムは標準入力のテキストを読み込み、難読化されたC90のソースコードを生成するのですが、その生成されたソースは生成時に入力された文字列を出力するのです―コード内の<code>*</code>は全てポインタのデリファレンスなのです！)</p><p>このプログラムのソースコードは、読むのが少し難しいものになっています。</p><p>しかし、私が見てわかる限り、どのC/C++の方言が使われているかを検知するために3つのトリックを使っているようです。</p>
