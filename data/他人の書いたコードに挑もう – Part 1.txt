<p><a href="http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html" rel="nofollow" title="" class="ext-link">Diving Into Other People's Code</a> （2016-03-15） by <a href="http://www.lihaoyi.com/Resume/" rel="nofollow" title="" class="ext-link">Li Haoyi</a></p><p>この記事では、他人が書いたコードを扱うための練習法を一から説明します。目標は、 <a href="https://github.com/spyder-ide/spyder#spyder---the-scientific-python-development-environment" rel="nofollow" title="" class="ext-link">Spyder Python IDE</a>という今まで触ったこともないプロジェクトのコードに任意の変更を加え、途中で行き詰ることなく、目的達成に必要な情報<em>のみ</em>習得することです。ここでは、勘や実験的な手段、そしてプロの現場で養った洞察力を武器に問題に対処する方法を学びます。形式ばったレッスンのように、苦痛を感じることはないでしょう。満足感や挫折、葛藤を味わいながらプロジェクトを進め、最終的には（なんとか動く程度の）パッチを完成させ、大規模で不慣れなコードベースに機能を追加します。</p><p>プログラミングを学んでいる人は皆、あらゆる種類のプログラムで大量のコードを書いています。それは、問題集に載っているアルゴリズムを実装するにせよ、ウェブサイトの構築やビデオゲームの作成をするにせよ同じです。ところがプロのソフトウェアエンジニアというのは、めったに<em>コードをガリガリ書きません</em>。それよりも他人のコードの解読に時間を割いています。解読するのは自分で書いたものでもなければ、今まで一度も見たこともないような、良く分からないコードです。助けを求める人や、心の叫びに気付いてくれる人がいなくても、前に進まなければならないのです。</p><p>この記事の目標は、初見のコードベースの内容を調査して、ある程度インパクトのある修正を加えることです。この練習で使用するターゲットは、<a href="https://github.com/spyder-ide/spyder#spyder---the-scientific-python-development-environment" rel="nofollow" title="" class="ext-link">Spyder Python IDE</a>で、Githubのページによると見た目は以下のような感じです。</p><p><img src="http://www.lihaoyi.com/post/Diving/Spyder.png" alt="Diving/Spyder.png" style="max-width: 100%; max-height: 500px"><br>
そして（任意の）目標は、<code>Help</code>ドロップダウンメニューの隣に<code>Misc</code>という名称のドロップダウンを新しく追加することです。その内部には、現在開いているテキスト領域を取得して、以下のコードを先頭に追加するメニューアイテムおよびコマンドを追加します。</p><p>ファイルの実行開始時間を表示するため、一番上に挿入します。</p><p>私は職業柄、何年もPythonやJavaScriptを使ってきたので、これらのエコシステムについてはかなりの知識があります。Bashコマンドラインを使うLinuxの作業環境にも精通していて、オープンソース拡張も数多くこなしてきました。遠い昔にはJavaやC#、PHPもよく使っていました。ただ、Spyderエディタは一度も使ったことがなく、コードベースに触れるのも、実際に見るのも今日が初めてです。この練習では、このように何の知識もないコードベースを使い始める方法や、全てを把握せずとも前へ進む方法を模索します。</p><p>以下は、未知のコードベースを扱う上での作業手順です。</p><p>以下は、他人のコードを扱う際の留意点です。</p><p>
</p>
<p>プロジェクトの概要や動作が全く分からない状態で、手を加えようとするのは無謀です。なお、この記事で扱うのは、<a href="https://github.com/spyder-ide/spyder#spyder---the-scientific-python-development-environment" rel="nofollow" title="" class="ext-link">Spyder Python IDE</a>です。</p><p><img src="http://www.lihaoyi.com/post/Diving/Spyder.png" alt="Diving/Spyder.png" style="max-width: 100%; max-height: 500px"><br>
Githubのページの概要にあるように、これはPython<em>用に</em>Pythonを<em>使用して</em>書かれたPython IDEです。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderLang.png" alt="Diving/Spyder.png" style="max-width: 100%; max-height: 500px"><br>
ご覧の通り、左側にはコードエディタ、右下にはIPython <a href="http://ipython.org/notebook.html" rel="nofollow" title="" class="ext-link">Notebook</a>のようにグラフィカル出力に対応した<a href="https://github.com/ipython/ipython" rel="nofollow" title="" class="ext-link">IPython REPL</a>（表示用の<code>In [1]</code>シンタックスがあるのが分かります）、そして右上にはドキュメントブラウザがあります。それ以外は典型的なIDEと同じです。上部のボタンを使うと、コードの保存、ロード、コピー、実行、デバッグ、ステップスルーができます。ドロップダウンメニューには、さらに多くの機能があり、タブの付いたテキストエディタにはハイライトされたシンタックスなどが表示されています。</p><p>Spyderは一般的には、どのプラットフォーム上でも動作します。ドキュメントには、<a href="http://pythonhosted.org/spyder/installation.html#installing-on-windows-vista-7-8-10" rel="nofollow" title="" class="ext-link">Windowsのほぼ全てのバージョン</a>、<a href="http://pythonhosted.org/spyder/installation.html#installing-on-macos-x" rel="nofollow" title="" class="ext-link">Mac OS-X</a>、<a href="http://pythonhosted.org/spyder/installation.html#installing-on-linux" rel="nofollow" title="" class="ext-link">Linux</a>（Ubuntu、Debian、Arch、Fedoraなど）用の説明が含まれています。</p><p>なかなか古そう（数年前のもの）に見えますが、非常に活発なプロジェクトで、たくさんの人に支えられています。</p><p><img src="http://www.lihaoyi.com/post/Diving/Contributors.png" alt="Diving/Contributors.png" style="max-width: 100%; max-height: 500px"><br>
営利目的の組織が支援しているのかは分かりませんが、個人向けの怪しげなプロジェクトではありません。</p><p>ここまでが、特に知識のない素人から見たSpyderの簡単な概要です。では次に、Macbook上でSpyderを動かしてみましょう。</p><p>
</p>
<p>試してみたいプロジェクトがある場合、まず最初にどのようにしてそれを「開発モード」でインストールするかを考えなければなりません。通常、プロジェクトには、プロジェクト内で作業するエンドユーザがダウンロードしやすい全てを含んだカプセル化された配布版があります。しかし、そのプロジェクトを基に作業する人が必ずしも使いたいバージョンとは限りまん。Spyderの場合、次の2つのセクションが区別されているようです。</p><p>ただIDEが欲しいエンドユーザであれば、インストールの手順に従います。しかし、Spyderを単に使うのではなく、変更を加えたいのでソースコードで実行を始めます。こちらの方がどんな時でも難しく、使いやすいとは言えない上、「パッケージ」された配布版よりも時間がかかります。いずれにせよ、コードに変更を加えてみたい人はこの困難をいつかは乗り越えなければならないので、さっさと片付けてしまいましょう。</p><p>どのプロジェクトにおいても共通することですが、まず依存性をダウンロードする必要があります。Spyderは外部の影響を受けやすく、<a href="https://github.com/spyder-ide/spyder#dependencies" rel="nofollow" title="" class="ext-link">依存性</a>のセクションに次のような記述があります。</p><p>とても長いリストです。Pythonが何かを理解していますが、それ以外の機能については把握できていません。大体においては、上の依存性を1つずつ<a href="http://python-packaging-user-guide.readthedocs.org/en/latest/installing/" rel="nofollow" title="" class="ext-link">pip</a>と呼ばれるPythonのパッケージマネージャを使ってインストールすることができます。しかし、<strong>依存性</strong>のセクションの最初に目に付く場所にちょっとした免責事項が記述されています。</p><p>1つの塊としてダウンロードしてインストールできるようです。個人的にこの「Scientific Pythonディストリビューション」を使ったことがありませんが、聞いたことはあります。これは、ダウンロードできるPythonパッケージで、使い勝手の良いライブラリなどが含まれたものだそうです。今回はSpyderがどのパッケージをダウンロードしても必要なものは入手できると教えてくれています。そのため、次のステップはどれかをダウンロードして試してみることです。まずはAnacondaを試してみましょう。</p><p>
</p>
<p>私はMacbook ProでOS-Xを使っています。「Anaconda OS-X」(OS-X用Anaconda)を検索すると以下のようなダウンロードのページの候補が表示されます。</p><p><img src="http://www.lihaoyi.com/post/Diving/GoogleAnaconda.png" alt="Diving/GoogleAnaconda.png" style="max-width: 100%; max-height: 500px"><br>
Anacondaインストールのページに行くと、まず、<strong>Get Superpowers with Anaconda</strong> (Anacondaですごい力を得よう)と表示されますが、私には無意味なので無視します。<strong>OS-X</strong>のリンクがありますので、そちらをクリックするとインストーラのダウンロードができます。</p><p><img src="http://www.lihaoyi.com/post/Diving/AnacondaInstall.png" alt="Diving/AnacondaInstall.png" style="max-width: 100%; max-height: 500px"><br>
とりあえずここではPython 2.7ではなくPython 3.5のコマンドラインのダウンロードをします。ダウンロードのリンクの下に始める際の説明が次のように記述されています。</p><p>Anacondaの容量は大きい(200メガバイト以上です)ので、ダウンロードに3、4分かかります。指示どおり、インストーラにコマンドラインを入力すると、数分かかるダウンロードとインストールが実行されます。</p><p>そして、複数の質問に対し<code>yes</code>や<code>ENTER</code>を入力していくと次のように表示され終了します。</p><p>ただちに<code>anaconda</code>を実行できるわけではなく、<code>python3</code>コマンドは変更されていないようです。</p><p>インストールの出力で新しいターミナルを開かないと使えないと記述されているので、上は恐らく想定されていることです。新たにターミナルを開いて<code>anaconda</code>を実行すると次のように表示されます。</p><p>はっきり<em>何が</em>とは分かりませんが、インストールができました。<code>python3</code>を実行すると、次のように表示されます。</p><p>紹介バナーに<code>Anaconda</code>があるので、Anacondaのインストールも無事成功したようです。指示の最後の点である「MD5を使ってデータの整合性の確認」については、<a href="https://en.wikipedia.org/wiki/YOLO_(motto)" rel="nofollow" title="" class="ext-link">YOLO</a>(人生一度きり)なので、リスクは承知で思い切ってここでは置いておきます。</p><p>
</p>
<p>Anacondaが整ったので、<a href="https://github.com/spyder-ide/spyder#running-from-source" rel="nofollow" title="" class="ext-link">ソースコードで実行</a>の部分に戻りましょう。ヘッダーの下の依存性について書かれている部分の前に次のような記述があります。</p><p>恐らくここではSpyderのリボジトリのクローンを作り、<code>cd</code>（ディレクトリの移動）するよう要求されています。では、Githubページに列挙されたURLを使ってやってみましょう。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderCloneUrl.png" alt="Diving/SpyderCloneUrl.png" style="max-width: 100%; max-height: 500px"></p><p>もしこの記事の内容を追随したいのであれば、記事を書いている現段階のコミットである以下をお使いください。</p><p>そして、 <code>cd</code>(ディレクトリを移動)して実行します。</p><p>「下に列挙されている依存性全部ではありませんが、ほとんどは<em>Anaconda</em>が付いてくる…」と記載されていましたが、記載どおり、<em>全部</em>ではなく、<em>ほとんど</em>でした。これはいいとして、<code>pip3</code>を使ってPyQt5をインストールします（これは、githubのリードミーで「お勧め」されています）。<code>pip3</code>はPython 3用の<code> python3</code>実行ファイル対応の<code>pip</code>で、Anacondaに付いてきます。</p><p>
</p>
<p>ダメですね。「pip install PyQt5」で検索すると次が表示されます。</p><p>一瞬pipを使ってもこのライブラリをPyPIからインストールできないように思えますが、さらに「osx pyqt5」を検索すると次が表示されます。</p><p><code>tar</code>コマンドや<code>make</code>をコマンドラインに手動でひたすら入力する以外に簡単にPyQt5をインストールする方法がないかのように思えます。その一方で、上のコードで<a href="http://pyside.readthedocs.org/en/latest/" rel="nofollow" title="" class="ext-link">PySide</a>モジュールが廃止になったとのエラーメッセージが表示されていましたが、大丈夫かもしれません。今は廃止警告を気にせず、とにかく何か（何でも）動けばいいと思っています。「pip install pyside」を検索すると、このモジュールの標準モジュールリポジトリのページを探索できます。</p><p>初めは<code>pip3</code>を使ってインストールができるようですが、しばらくすると次のように失敗に終わってしまいます。</p><p><code>cmake</code>を実行しようとすると存在しないと表示されてしまいます。 </p><p>多分パッケージマネージャ(<a href="http://brew.sh/" rel="nofollow" title="" class="ext-link">brew</a>)を使って単純に<code>cmake</code>をインストールすれば問題ないのかもしれません。では、<code>brew install cmake</code>で試してみましょう。</p><p>苦痛の5分間が過ぎてやっと実行できたようです。<code>cmake</code>コマンドで以下の内容が出力できるようになりました。</p><p>では再度 <code>pip3 install PySide</code>を試してみましょう。</p><p>この<code>qmake</code>とは一体なのでしょうか。<code>brew install</code>は使えません。</p><p><code>pyside qmake osx</code>を検索すると次が表示されます。</p><p>ここでは、<a href="https://developer.apple.com/xcode/" rel="nofollow" title="" class="ext-link">Xcode</a>をインストールするように言っていまが、すでにインストール済みです。その後にマジックコマンドの入力があります。</p><p><code>cmake</code>はインストール済みですし、<code>python</code> もAnacondaのセクションでインストール済みです。そのため、ここで必要になるのは、<a href="http://www.qt.io/" rel="nofollow" title="" class="ext-link">qt</a>で<code>qmake</code>コマンドを使えるようにすることです。<code>brew install qt</code>を入力します。</p><p>タイムアウトか何かでインストールができなかったようです。この時点ではまだ<code>qmake</code>を実行できません。<code>brew install qt timing out</code>を検索すると次が出てきます。</p><p>つまり、私だけが直面する問題ではないようです。もしかしたら、再実行すれば大丈夫なのかもしれません。もしできない場合は<code>PyQt5</code>を先ほどと同じように、指示通りに再インストールしてみましょう。</p><p>今回もまたダメだったようです。</p><p>
</p>
<p>今はPySideのことは諦めましょう。理由は分かりませんが、インストールがうまくいきません。どちらにしろ、<code>qt</code>を要求しているようですね。おそらく<code>PyQt4</code>が要求しているものと大差ないでしょう。</p><p>今回もネットで「osx PyQt5」を検索してみると、こんなものがありました。</p><p>これでうまくいくのでしょうか？　コンパイルを避けるということは、<code>brew install qt</code>をする間に<code>make</code>コマンドを走らせている時、コンパイルのタイムアウトらしきものを避けるということに違いありません。思うに、コンパイルを必要とする<code>PyQt5</code>をインストールしようとするメカニズムはどれも<code>qt</code>が必要で、結局同じタイムアウトの問題にぶつかるのではないでしょうか。どちらにしても、これはうまくインストールできたようです。</p><p>奇妙なことに、<code>python3 bootstrap.py</code>を実行しようとすると、<code>PyQt5</code>が見つからないといって処理に失敗するようです。<code>python3</code>のREPLではうまくインポートできるのに、おかしいですね。</p><p>　<code>spyderlib/qt/__init__.py</code>内のインポートを実行するコードを見てみると、以下のようになっています。</p><p>同じファイルの下方で失敗に終わる<code>ImportError</code>にぶち当たりそうな気がします。試しに<code>python3</code>のREPLでこのインポートを実行してみることも可能です。そして、驚いたことに失敗です。</p><p>ついていませんね。<code>import PyQt5</code>はできそうに思えましたが、<code>from PyQt5.Core import PYQT_VERSION_STR as __version__</code>を行うのは無理そうです。一部のバイナリ依存性がきちんとインストールされていないのでしょうか。もしかしたら、<code>pyqt5-macos-built</code>のパッケージには、本来必要な何かしらのQT依存性が欠けているのかもしれません。</p><p>ネットで「Library not loaded QtCore （QtCoreライブラリがロードされていない）」を検索してみたら、これを見つけました。</p><p>もしかして、<code>brew install qt</code>がうまく動作しなかったら<code>brew install qt5</code>が動作するのでしょうか？</p><p>これは時間がかかりすぎる気がします。<code>conda</code>や<code>pip</code>からPythonのパッケージをインストールできることが判明しました。ネットで「Anaconda pyqt5」と検索すると下記が出てきました。</p><p>python3が何らかの事情でpyqt5の何かしらと互換性がないため、これはうまくいかないみたいです。<code>pyqt5</code>向けのAnacondaのパッケージはPython 2.7でしか使えないことが分かりました。</p><p>幸い<code>conda</code>には便利なコマンドがたくさんあり、中でも<code>search</code>コマンドは、使える可能性のある似たようなものを探すのに一役買ってくれます。</p><p>これで<code>pyqt</code>のPython 3で動作するバージョンを見つけられるでしょうか？</p><p><code>pyqt</code>には<code>py35_0</code>（私たちのです）向けのパッケージがあるようです。<code>pyqt5</code>にはないですけれどね。代わりにこれをダウンロードしてみましょうか。</p><p><code>pyqt</code>（バージョン4）を使うとうまくいきそうです。</p><p>これでbootstrapのスクリプトを実行した時にクラッシュすることはなさそうです。</p><p>いや、そうでもないかもしれません。</p><p>これは一体何でしょう？　<code>conda install</code>ができるようには思えません。しかし、ビルトインの検索機能を使ったところ、期待の持てそうなものが出てきました。</p><p>これをどうやってインストールすればいいのでしょう？</p><p>ネットで<code>qtawesome</code>を検索したら、こういうものが見つかりました。</p><p>Qt向けの<a href="http://fortawesome.github.io/Font-Awesome/" rel="nofollow" title="" class="ext-link">FontAwesome</a>みたいなもののようですね。きっとこれは矢印などの見た目を良くするために作られたのだと思います。</p><p><code>pip3</code>を使ったインストールはうまくいきそうです。<code>pip3</code>でのインストールは、<code>conda install</code>を使うのといくらか違うのでしょうか。とにかく、<code>pip3</code>は成功しました。</p><p>しかし、インポートしようとすると実際には動きません。</p><p>ネットで<code>conda install "qtawesome"</code>を検索したら（単語が切り離されてしまわないようクオーテーションが必須です）、こちらが見つかりました。<br>
* <a href="https://anaconda.org/lightmotif/qtawesome" rel="nofollow" title="" class="ext-link">https://anaconda.org/lightmotif/qtawesome</a></p><p>これはうまくいきません。</p><p>しかし、<code>anaconda search</code>で先に列挙されていた”他の”<code>foo/qtawesome</code>の名前を使うことで、機能します。</p><p>こうして<code>python3 bootstrap.py</code>を終えて、やっと起動することができました。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderSplash.png" alt="Diving/SpyderSplash.png" style="max-width: 100%; max-height: 500px"></p><p>いや、できていないかもしれません。</p><p>ネットでこのエラーメッセージを検索したら、次のものが見つかりました。</p><p>解決策は以下のどちらかのようです。</p><p>この問題について投稿した人たちのどちらを信じるかによりますね。1つ目の方はうまくいきそうもありませんが、2つ目はうまくいきそうです。Spyderが立ち上がります。</p><p>こんなものが出てしまいました。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderDependencies.png" alt="Diving/SpyderDependencies.png" style="max-width: 100%; max-height: 500px"><br>
しかしこれは単に<code>conda install pylint</code>をすれば、機能するようになります。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderWorks.png" alt="Diving/SpyderWorks.png" style="max-width: 100%; max-height: 500px"><br>
これをある程度長い時間（2～3分？）そのまま走らせておいたら、下記のようになって終わることに気付きました。</p><p>ですから完全に安定しているわけではないのです。しかし私たちが変更の実行とテストを行う分には十分です。ということで、ここではよしとしましょう。</p><p>私がSpyderの「Scientific Python」IDEへの変更を最初に試み始めてから、ここまでで約2時間が経ちました。ついに「開発」モードでソースから立ち上げることができたのです。外部のコードベースを理解しようとする時、これは最も重要なステップです。ここまで私たちは、依存性がうまく機能しない理由を見つけ出そうとして1、2回コードをちらっと見ただけです。次のステップでは、コードの何がどうなっているのかを探るため、コードを詳しく見ていきましょう。</p><p>この記事の後編はこちら：<a href="http://postd.cc/divingintootherpeoplescode-2/">他人の書いたコードに挑もう – Part 2</a></p><p>article originally written by Li Haoyi on <a href="http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html" rel="nofollow" title="" class="ext-link">http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html</a></p>
