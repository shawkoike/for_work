<p><a href="https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/" rel="nofollow" title="" class="ext-link">Script-injected “async scripts” considered harmful</a>（2014-05-20）by <a href="https://www.igvita.com/" rel="nofollow" title="" class="ext-link">Ilya Grigorik</a></p><p>Ilya GrigorikさんはGoogleでウェブパフォーマンスエンジニアおよび開発者支援をしており、主にウェブの高速化とパフォーマンスのベスト・プラクティスの採用を推進しています。<a href="https://twitter.com/igrigorik" rel="nofollow" title="" class="ext-link">Twitter</a> / <a href="https://plus.google.com/+IlyaGrigorik" rel="nofollow" title="" class="ext-link">Google+</a></p><p>Synchronous（同期）スクリプトは効率が悪い。というのも、ブラウザにDOM構築をさせ、スクリプトを読み込ませ、残りのページをリロードする前に実行してしまいます。今さらな話ですが、これがわれわれプログラマがasynchronous（非同期）スクリプトをよく使うようになった理由です。ここに分かりやすい例があります。</p><p>2つの違いはなんでしょう？　“悪い”例では、DOM構築をブロックし、スクリプトが取得されるのを待ってプログラムを実行します。それから残りのドキュメントの実行が続けられます。一方、2つ目の例は、インラインスクリプトを使用した例です。<br>
インラインスクリプトを実行し、外的リソースを示すスクリプトを作成し、ドキュメントに付け加え、DOMを処理し続けます。</p><p>つまり決定的な違いとはScript-injectedはネットワーク上の通信を遮断しないということなんです。</p><p>すごいと思いませんか？　Script-injectedは優れものです。ただし処理速度はそれほどでもありませんが。</p><p>インラインJavaScript ソリューションは繊細ですが、とても重要な（ほぼ見落とされてきましたが）パフォーマンスを達成させます。つまりインラインスクリプトは、プログラムを実行する前に、CSSOMをブロックします。どうしてでしょう？　ブラウザはインラインブロックがスクリプトで何を実行しようとしているかに気づきません。そのため、JavaScriptはCSSOMにアクセスでき処理することが可能であり、CSSがダウンロードされ、解析されるまでブロックし、待機します。実際のネットワーク通信は膨大なデータが処理されることが望まれます。次の例を見てみましょう。</p><p><img src="/wp/wp-content/uploads/2014/06/xasync-injected.pagespeed.ic_.Nz8cY9Q-Ow.png"></p><p><a href="http://jsbin.com/qefefiyi/9/quiet" rel="nofollow" title="" class="ext-link">上記の図は</a>、ページのトップに配置したCSSファイルとページ下に配置した2つのscript-injected “async scripts”を読み込んでいます。言い換えれば、それぞれが“最高のパフォーマンス”をしていることにつながります。ただしスクリプト自体はCSSOMが準備できるまで実行されません。つまりインラインブロックの動作が遅れ、連動して、ネットワークリクエストが送られるのも遅くなるということです。最終的に、スクリプトが実行されるのは、ページリクエストが開始されてから3.5秒後となります。</p><p>注目すべきは、CSSではレスポンスに2秒もの遅れが生じ、JavaScriptでは1秒の遅れが生じたことです。すなわちCCS/CSSOMとJavaScriptの処理に依存しているということです。</p><p>今度は“悪い”例と比べてみましょう。ここでは、2つの<a href="http://jsbin.com/qefefiyi/8/quiet" rel="nofollow" title="" class="ext-link">ブロッキングスクリプトタグ</a>を使います。</p><p><img src="/wp/wp-content/uploads/2014/06/async-blocking.png"></p><p>ちょっと待ってください。何が起きていますか？<b>どちらのスクリプトも読み込みが速く、ページリクエストが開始されてから2.7秒ほどで実行されました。</b>特筆すべきは、CSSが利用可能になるまで(2.7秒をマーク)スクリプトはまだ実行されていますが、CSSOMの準備完了までには、すでにスクリプトは読み込まれています。そのため、処理速度が1秒以上、更新されたことになります。<b>ということは、いままで誤った処理を行っていたのでしょうか？</b>   その結論を出す前に、もう1つ例を見てみましょう。今度は<a href="http://jsbin.com/qefefiyi/7/quiet" rel="nofollow" title="" class="ext-link">async属性</a>で試してみます。</p><p><img src="/wp/wp-content/uploads/2014/06/xasync-async.pagespeed.ic_.-aH-Uzp-RY.png"></p><p style="font-size: 0.8em; ">async属性であれば、利用開始とともに、スクリプトは非同期で実行されます。一方でasync属性でなければ…ユーザエージェントがページを解析する前に、スクリプトが読み込まれ、直ちに実行されます。<a href="http://www.w3.org/TR/html5/scrpting-1.html#attr-script-async" rel="nofollow" title="" class="ext-link">http://www.w3.org/TR/html5/scrpting-1.html#attr-script-async</a></p><p>スクリプトタグのasync属性は、2つの重要なプロパティを持っています。その2つとはブラウザにDOM構築をブロックさせないこと、CSSOM上でのスクリプト実行をブロックしないことです。結果として、スクリプトはダウンロードが(1.6秒ほどで)完了すると、CSSOMを待つことなく実行されます。ここまでの結果をまとめてみましょう。</p><p>なぜ、長い間、プログラマは、このパターンを使用を主張してきたのでしょうか？</p><p>The script-injectedパターンは、<code>&lt;script async&gt;</code> には有益ではありません。その理由として script-injectedパターンが初めて導入された時、<code>&lt;script async&gt;</code> は利用できず、プリロードスキャナもありませんでした。しかし、その後、script-injectedスクリプトに代わりasync属性を利用しながらも、さらにパフォーマンスの質を上げることが必要となりました。つまり、async scriptsが不要と見なされたのです。</p><p>またプリロードスキャナは、スクリプトやリンクタグのsrc/href属性通して指定されたリソースだけを見つけられるということに注意してください。プリロードスキャナはインラインJavaScriptブロックを実行することはできません。つまり、プリロードスキャナではscript-injectedの利点を見つけることができないのです。この結果を受け、最新の解決策となるのが、以下です。</p><p>誤解のないように言うと、すべてのインラインJavaScriptを避けるべきだと言っているわけではありません。実際、インラインJavaScriptが正しい解決法である場合もあります。ただ、以下の項目に留意する必要があります。</p>
