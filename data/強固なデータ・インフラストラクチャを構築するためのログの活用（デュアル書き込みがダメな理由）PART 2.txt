<p><a href="http://blog.confluent.io/2015/05/27/using-logs-to-build-a-solid-data-infrastructure-or-why-dual-writes-are-a-bad-idea/" rel="nofollow" title="" class="ext-link">Using logs to build a solid data infrastructure (or: why dual writes are a bad idea)</a>（2015-05-27） by <a href="https://martin.kleppmann.com/" rel="nofollow" title="" class="ext-link">Martin Kleppmann</a></p><p>PART 1.はこちら : <a href="http://postd.cc/using-logs-to-build-a-solid-data-infrastructure-part-1/">強固なデータ・インフラストラクチャを構築するためのログの活用（デュアル書き込みがダメな理由）PART 1.</a></p><p>ログが使われる場面について4つ説明したいと思います。まずデータベースストレージエンジンの内部です。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-19.png?w=990&amp;h=524" alt="B-tree example" width="660" height="349" class="alignnone size-large wp-image-541" originalw="660" originalh="349" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-19.png?w=660&amp;h=349" scale="1.5"></p><p><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.219.7269" rel="nofollow" title="" class="ext-link">B-tree</a>はアルゴリズムの授業で学びましたよね？　ストレージエンジンに広く使われているデータ構造です。ほぼ全てのリレーショナルデータベースと、多くの非リレーショナルデータベースで使われています。</p><p>B-treeについて簡単に説明しましょう。B-treeは、ディスク上で固定長のブロックとなる<em>ページ</em>から構成されており、通常、その固定長は4KBか8KBです。ある特定のキーを探したい時は、まずtreeのルートにあるページから探索を始めます。そのページは他のページへのポインタを内包していて、各ポインタはキーのレンジ（範囲）にタグ付けられています。例えば、もしキーが0から100の間だったら最初のポインタに従い、キーが100から300の間なら2番目のポインタに従う、といった具合です。</p><p>ポインタがあなたを別のページへと導き、キーレンジをさらにサブレンジへと絞り込んでくれます。そして遂には、あなたの探していた特定のキーを含むページへとたどりつくのです。</p><p>さてB-treeに新たなキーと値のペアを挿入する必要がある場合はどうなのでしょうか。この場合は、挿入したいキーを含むキーレンジがあるページに挿入する必要があります。そのページに十分なスペースがあれば問題ありませんが、余裕がない場合はページを2つに分けなくてはなりません。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-20.png?w=990&amp;h=743" alt="B-tree node split" width="660" height="495" class="alignnone size-large wp-image-542" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-20.png?w=660&amp;h=495" scale="1.5"></p><p>ページを分ける際、最低でも3ページをディスクに書き込む必要があります。分けた結果の2ページと、その親のページです（分けられたページへのポインタを更新するため）。しかし、これらのページはディスク上、別の箇所にバラバラに保存される可能性があります。</p><p>ここで問題が出てきました。もしも処理の途中、全てのページがディスクに書き込まれる前にデータベースがクラッシュしたら（または停電や他の問題があった場合）どうしたら良いのでしょうか。そういう場合、どこかのページには古い（分割前）データが残っていて、他のページには新しい（分割後）データが書き込まれているので、厄介なことになりそうです。ポインタやページがどこからも指し示されることなく、宙ぶらりんになってしまう可能性が高いですよね。別の言い方をすれば、インデックスが壊れているということになります。</p><p>さて、ストレージエンジンはこういうことに何十年も対応してきたはずですが、どうやってB-treeの信頼性を保っているのでしょうか。<a href="http://db.csail.mit.edu/madden/html/aries.pdf" rel="nofollow" title="" class="ext-link">ログ先行書き込み</a>（WAL）を使うというのが答えです。</p><p>ログ先行書き込みとは、一種の特殊なログで、ディスク上の追加専用のファイルです。ストレージエンジンがB-treeに対して変更を加えたい時は、意図する変更を<em>まず</em>WALに書き込む必要があります。WALに書き込まれ、そしてしっかりとディスクに書き込まれた後で初めて、実際のB-treeを変更することが許可されるのです。</p><p>こうしてB-treeの信頼性が向上します。もしWALにデータを追加中、データベースがクラッシュしたとしても問題ありません。まだB-treeには手が付けられていないからです。B-treeが変更されている最中にクラッシュしたとしても、問題ありません。なぜならWALが予定されている変更についての情報を持っているからです。クラッシュの後、データベースが復活したら、WALを用いてB-treeを修復し、つじつまの合った状態に戻せばいいのです。</p><p>ログがなかなか優れた考え方だという最初の例をお見せしました。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-21.png?w=990&amp;h=743" alt="Log-structured storage" width="660" height="495" class="alignnone size-large wp-image-543" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-21.png?w=660&amp;h=495" scale="1.5"></p><p>さて、B-treeはストレージエンジンの働きを妨害しませんでした。賢い読者の方なら、こう気付いたのではないでしょうか。もし何もかもログに記録するのであれば、ログを一次的なストレージ媒体として使うことができるんじゃないか、と。これは<a href="http://www.cs.umb.edu/~poneil/lsmtree.pdf" rel="nofollow" title="" class="ext-link">ログ構造化方式</a>として知られていて、<a href="http://blog.cloudera.com/blog/2012/06/hbase-io-hfile-input-output/" rel="nofollow" title="" class="ext-link">HBase</a>や<a href="http://jonathanhui.com/how-cassandra-read-persists-data-and-maintain-consistency" rel="nofollow" title="" class="ext-link">Cassandra</a>で使われており、<a href="http://basho.com/wp-content/uploads/2015/05/bitcask-intro.pdf" rel="nofollow" title="" class="ext-link">Riak</a>でもその変種が登場しています。</p><p>ログ構造化ストレージでは、いつも同じファイルに追加し続けるわけではありません。それでは大きくなりすぎて、キーを捜すのが困難になってしまうからです。その代わりに、ログは<em>セグメント</em>に分割され、時々ストレージエンジンがセグメントをマージし、重複したキーを廃棄します。セグメントはキーによって内部的にソートされていることもあり、これにより、捜しているキーを見つけるのが容易になり、またマージしやすくなっています。しかし、これらのセグメントはログであることには変わりありません。順次的に書き込まれ、一度書き込まれたら変更不可能です。</p><p>このように、ログというのはストレージエンジンの中で重要な役割を果たしているのです。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-22.png?w=990&amp;h=743" alt="Logs are everywhere: DB replication" width="660" height="495" class="alignnone size-large wp-image-544" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-22.png?w=660&amp;h=495" scale="1.5"><br>
<em>注釈：ログはあらゆる場所にある<br>
①　DBストレージエンジン<br>
②　DBレプリケーション<br>
③　分散合意<br>
④　Kafka</em></p><p>さて2番目は、データベースレプリケーションでのログの使用例です。</p><p>レプリケーションは多くのデータベースで使われている機能です。いくつかの違うノードに同じデータを複製して置いておくことができるというもので、負荷を分散するのに役立ちます。また、1つのノードが停止してしまった時に他のノードからフェイルオーバーできるということも意味しています。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-23.png?w=990&amp;h=743" alt="Leader-follower replication" width="660" height="495" class="alignnone size-large wp-image-545" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-23.png?w=660&amp;h=495" scale="1.5"></p><p>レプリケーションを実装する方法はいくつかありますが、一般的なのは1つのノードを<em>リーダー</em>（<em>プライマリ</em>や<em>マスター</em>とも言われる）とし、他のレプリカを<em>フォロワー</em>（<em>スタンバイ</em>や<em>スレーブ</em>とも言われる）として指定することです。マスター／スレーブという用語は好きではないので、リーダー／フォロワーを使います。</p><p>クライアントがデータベースに何か書き込みたい時は、まずリーダーに通知します。リードオンリーのクライアントはリーダーまたはフォロワーを使うことができます（フォロワーは通常、非同期なので、もし最新の書き込みがまだ適用されていなければ、少し情報が古い可能性があります）。</p><p>クライアントがリーダーにデータを書き込んだ時、そのデータはどのようにしてフォロワーに伝わるのでしょうか。驚くことに、ここでもログが使われるのです。<em>レプリケーションログ</em>というものが使われますが、これは実際には先行書き込みログと同じものである場合（例えばPostgresでのケース）も、または別のレプリケーションログの場合もあります（MySQLのケース）。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-24.png?w=990&amp;h=743" alt="Follower applies writes in order of replication log" width="660" height="495" class="alignnone size-large wp-image-546" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-24.png?w=660&amp;h=495" scale="1.5"></p><p>レプリケーションログは次のように機能します。リーダーに何らかのデータが書き込まれると、レプリケーションログに追加されます。フォロワーは書き込まれた順にログを読み出し、自分が持っているデータコピーに、それぞれの書き込みを追加します。結果的に各フォロワーはリーダーと同じ順番で同じ書き込みを処理し、それによって同じデータの複製を備えることとなります。</p><p>読み側で書き込みが同時に発生していたとしても、ログは全順序で書き込まれています。ですから、ログは実際には書き込みから同時性を<em>取り除いて</em>います。つまり”<a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" rel="nofollow" title="" class="ext-link">書き込みの流れから全ての非決定性を追い出すため</a>“、フォロワーにとっては書き込まれた順番に関しては疑いようがないのです。</p><p>さて、前述したデュアル書き込みの競合状態についてはどうでしょうか。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-11.png?w=990&amp;h=743" alt="Race condition with dual writes" width="660" height="495" class="alignnone size-large wp-image-533" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-11.png?w=660&amp;h=495" scale="1.5"><br>
リーダーベースのレプリケーションでは、競合状態は起こりません。クライアントが直接フォロワーに書き込むことはないからです。フォロワーによって処理される書き込みはレプリケーションログから受け取ったものに限られています。そしてログはこれらの書き込みの順番を固定化しているので、どれが最初に書き込まれたかということに関しては曖昧性がありません。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-13.png?w=990&amp;h=665" alt="Update of denormalized data fails" width="660" height="443" class="alignnone size-large wp-image-535" originalw="660" originalh="443" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-13.png?w=660&amp;h=443" scale="1.5"></p><p>では前述のデュアル書き込みの2番目の問題はどうでしょうか。これは起こり得ます。フォロワーがトランザクションからの最初の書き込みの処理に成功した後、トランザクションからの2番目の書き込みに失敗してしまうことが考えられます（おそらくディスクに空がない、またはネットワークが中断されたなどの理由で）。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-25.png?w=990&amp;h=743" alt="Network interruption between leader and follower" width="660" height="495" class="alignnone size-large wp-image-547" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-25.png?w=660&amp;h=495" scale="1.5"></p><p>もしリーダーとフォロワー間のネットワークが中断されたら、レプリケーションログはリーダーからフォロワーへとデータを渡すことができません。こうして、前にも述べたように、不整合なレプリカができてしまう可能性があります。データベースレプリケーションでは、このようなエラーからどうやって回復し、不整合を防ぐのでしょうか。</p><p>ログには非常に素晴らしい特徴があります。リーダーのログは追加専用のため、ログの各レコードに対して、常に増加する連続番号（”ログ位置”または”オフセット”と呼ぶことができるでしょう）を付加できるという点です。また、フォロワーは順次的に（ログ位置の増加順に左から右へ）レコードを処理するため、フォロワーの現在の状態を単一の番号、つまり処理済みの最新レコードの位置で記述できるという点も挙げられます。</p><p>ログ内でのフォロワーの現在位置が分かれば、それ以前のレコードは処理済みで、それ以降のものは未処理だということが一目で分かりますよね。</p><p>これは素晴らしい特徴で、これによりエラーからのリカバリがとてもシンプルになります。仮にフォロワーがリーダーから切断された場合やクラッシュした場合でも、必要なのは処理済みのレプリケーションログの中から最新のログ位置を保存することだけです。そうしてフォロワーが回復した時にリーダーに再接続し、保存した最新のオフセットから開始するようレプリケーションログに要求を出せば、データの消失や重複なしに、切断中に記録されなかったデータを回復することができます。</p><p>ログが全順序で並べられているので、書き込みを個別に記録する場合よりも、リカバリがシンプルになるというわけです。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-26.png?w=990&amp;h=743" alt="Logs are everywhere: distributed consensus" width="660" height="495" class="alignnone size-large wp-image-548" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-26.png?w=660&amp;h=495" scale="1.5"><br>
<em>注釈：ログはあらゆる場所にある<br>
①　DBストレージエンジン<br>
②　DBレプリケーション<br>
③　分散合意<br>
④　Kafka</em></p><p>3番目の例は前述の2例とは異なり、分散コンセンサスにおけるログの使用についてお話しします。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-27.png?w=990&amp;h=620" alt="Examples of consensus" width="660" height="413" class="alignnone size-large wp-image-549" originalw="660" originalh="413" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-27.png?w=660&amp;h=413" scale="1.5"><br>
<em>注釈：コンセンサス（合意）<br>
“Where shall we have lunch?（どこで昼食を食べるか？）”<br>
Douglas Adams著『The Restaurant at the End of the Univers（宇宙の果てのレストラン）』（1980年）<br>
“どのノードがシャード8のリーダーなのか？”<br>
（クラスタメンバーシップ、ロックマネージャ…）</em></p><p>合意の形成は、分散システムにおいて、たびたび話題に上るよく知られた問題の1つで、重要な反面、その解決は非常に困難です。</p><p>日常生活において合意が必要な例といえば、どこに昼食に行くかを友人グループ内で決めるといったような場合です。これは、<a href="https://www.goodreads.com/quotes/71510-the-history-of-every-major-galactic-civilization-tends-to-pass" rel="nofollow" title="" class="ext-link">洗練された文明</a>の特徴的な側面であり、場合によっては非常に難しい問題となり得ます。例えば友人の1人が他のことで頭がいっぱいだったり（あるいは満足な回答をくれなかったり）、好き嫌いが多かったりする場合などがそうですね。</p><p>一方、コンピュータの領域では、分散データベースシステムにおいて合意を得たい場合がその一例と言えるでしょう。例えば、データベースの特定の部分（シャード）に対するリーダーはどのノードか、ということについては、データベース内の全てのノードが合意しなければなりません。</p><p>どのノードがリーダーかについて全ノードの合意を得ることは非常に重要です。もし2つの異なるノードが、それぞれをリーダーと認識した場合、双方ともにクライアントからの書き込みを受け入れることになります。その後、どちらか一方の間違いが判明し、リーダーではなかったことになると、受け入れた書き込み自体が消えてしまうこともあるのです。<em>スプリットブレイン</em>として知られるこういった状況は、<a href="https://aphyr.com/posts/284-call-me-maybe-mongodb" rel="nofollow" title="" class="ext-link">厄介なデータ損失</a>につながる恐れもあります。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-28.png?w=990&amp;h=743" alt="The Raft consensus protocol" width="660" height="495" class="alignnone size-large wp-image-550" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-28.png?w=660&amp;h=495" scale="1.5"><br>
合意には、いくつかのアルゴリズムがあります。一番知られているのは<a href="http://www.read.seas.harvard.edu/~kohler/class/08w-dsi/chandra07paxos.pdf" rel="nofollow" title="" class="ext-link">Paxos</a>かと思われますが、<a href="http://labs.yahoo.com/files/ZAB.pdf" rel="nofollow" title="" class="ext-link">Zab</a>（<a href="https://zookeeper.apache.org/" rel="nofollow" title="" class="ext-link">ZooKeeper</a>が使用）や<a href="http://ramcloud.stanford.edu/raft.pdf" rel="nofollow" title="" class="ext-link">Raft</a>、また<a href="http://arxiv.org/abs/1309.5671" rel="nofollow" title="" class="ext-link">その他にも</a>あります。これらのアルゴリズムは非常に複雑で、一見するだけでは分からない<a href="http://www.cl.cam.ac.uk/~ms705/pub/papers/2015-osr-raft.pdf" rel="nofollow" title="" class="ext-link">巧妙</a>さがあります。そんなわけで、この講演ではRaftアルゴリズムについて、手短に触れるだけにします。</p><p>合意のシステムでは、特定の変数がどういう値であるべきかついての合意を管理するいくつかのノード（図では3つ）があります。例えば、クライアントがX=8（ノードXがシャード8のリーダーという意味）という値をRaftノードの1つに送って提案したとしましょう。すると、そのノードは他のノードから票を収集します。この際、もしノードの大半がX=8という値に合意すれば、最初のノードがその値をコミットすることが許可されるというわけです。</p><p>値がコミットされた時にはどうなるでしょうか。Raftでは、その値がログの最後尾に追加されます。すなわち、単にノードの間で特定の値の合意を得るというだけではなく、合意された値のログを経時的に構築するのです。Raftの全てのノードは、コミットされた値に関する全く同じシーケンスをログ内に持つことが保証されており、クライアントはこのログを用いることができます。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-29.png?w=990&amp;h=743" alt="Raft commits a value by appending it to a log" width="660" height="495" class="alignnone size-large wp-image-551" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-29.png?w=660&amp;h=495" scale="1.5"></p><p>新たに合意された値が確定してログに追加され、他のノードにレプリケートされると、最初にX=8を提案したクライアントに対して、システムが合意に達しその値がRaftログに新規追加された、という旨が送られます。</p><p>（理論的な余談ですが、合意および<em>アトミックブロードキャスト</em>（1回だけの配信でログを作成する）の問題は、<a href="http://courses.csail.mit.edu/6.852/08/papers/CT96-JACM.pdf" rel="nofollow" title="" class="ext-link">互いに還元できる</a>ということです。これは、Raftによるログの使用が単なる実行記録の便利な細目にとどまらず、懸案の合意の問題の基本的な特徴を反映していることを意味します。）</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-30.png?w=990&amp;h=743" alt="Logs are everywhere: Kafka" width="660" height="495" class="alignnone size-large wp-image-552" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-30.png?w=660&amp;h=495" scale="1.5"><br>
<em>注釈：ログはあらゆる場所にある<br>
①　DBストレージエンジン<br>
②　DBレプリケーション<br>
③　分散合意<br>
④　Kafka</em></p><p>さて、ここまで見てきて、ログというのが、ストレージエンジンやデータベースのレプリケーション、それに合意など、コンピューティングの広い分野で繰り返し使われているテーマだということがお分かりいただけたかと思います。そして、最後の4番目の例としてお話ししたいのが、ログのアイデアを中心にして構築された別のシステムである<a href="http://kafka.apache.org/" rel="nofollow" title="" class="ext-link">Apache Kafka</a>についてです。Kafkaの興味深い点は、ログをあなたに対して隠蔽しないということでしょう。ログを実装の詳細として扱うのではなく、それを見えるようにし、中心に据えてアプリケーションを構築できるようにしています。</p><p>Kafkaについてはご存じの方もいらっしゃるのではないでしょうか。元はLinkedInで開発されたオープンソースプロジェクトですが、現在は多くのコントリビュータやユーザによるApacheの活発なプロジェクトとなっています。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-31.png?w=990&amp;h=743" alt="Kafka producers and consumers" width="660" height="495" class="alignnone size-large wp-image-553" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-31.png?w=660&amp;h=495" scale="1.5"></p><p>Kafkaの代表的な使用例は、メッセージブローカ（メッセージキュー）です。そのため、ある意味ではAMQPやJMS、その他のメーセージシステムに相当すると言えるでしょう。Kafkaのクライアントタイプには、プロデューサ（Kafkaにメッセージを送信）とコンシューマ（Kafka内のメッセージストリームを取得）の2種類があります。</p><p>たとえて言うなら、プロデューサはWebサーバやモバイルアプリです。「どのユーザが、どのリンクを、どのタイミングでクリックした」というイベントのようなログ情報をKafkaに送信します。それに対してコンシューマは、発生している事柄を知る必要がある各種プロセスのことで、例えば分析の生成、異常活動の監視、各ユーザに最適化された推奨事項の生成などが挙げられます。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-32.png?w=990&amp;h=660" alt="Kafka architecture: a partitioned log" width="660" height="440" class="alignnone size-large wp-image-554" originalw="660" originalh="440" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-32.png?w=660&amp;h=440" scale="1.5"></p><p>Kafkaと他のメッセージブローカとの興味深い相違点は、Kafkaがログとして構造化されており、実際に多くのログを有していることです。Kafkaではデータストリームはパーティションに分割され、各パーティションがログ（全順序で並べられたメッセージシーケンス）として機能します。それぞれが独立したパーティションのため、異なるパーティション間での順序付けの保証はありませんが、これにより、パーティションごとに別々のサーバで処理することが可能となります。これはKafkaのスケーラビリティにとって重要な点です。</p><p>各パーティションはディスクに保存され、複数のマシンに複製されるので、堅牢ですし、マシンの障害時でもデータの損失は避けられます。ログの生成と使用については、前述のデータベースレプリケーションの場合とほぼ同様です。</p><p>ここで、冒頭のデータ統合の問題に立ち返ってみましょう。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-05.png?w=990&amp;h=743" alt="Web app with a horrendous mess of storage services" width="660" height="495" class="alignnone size-large wp-image-527" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-05.png?w=660&amp;h=495" scale="1.5"></p><p>入り乱れた状態のデータストアやキャッシュ、それにインデックスを互いに同期させる必要があるとしましょう。私たちは、ここまでにログの実用的な応用例を数多く見てきましたよね。そこで、学んだことを通じて、これらのシステムをより良く構築する方法を見つけ出すことはできるでしょうか。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-33.png?w=990&amp;h=743" alt="Stop doing dual writes!" width="660" height="495" class="alignnone size-large wp-image-555" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-33.png?w=660&amp;h=495" scale="1.5"></p><p>まず、デュアル書き込みは止めましょう。上で説明したように、アプリケーションで発生する潜在的な競合状態と部分的な障害について慎重に考慮していない限り、データの整合性に支障をきたす恐れが生じます。</p><p>この不整合は、非同期システムでしばしば引用される”結果整合性”といった類いのものではなく恒久的なものです。つまり、競合状態または部分的な障害により、2つの異なるデータストアに別々の値を書き込んだ場合、その違いは自律的には解決されないため、明示的なアクションでデータの不整合を検索する必要があります（が、データは絶えず変化しているので、それはなかなか難しいことです）。</p><p>異なるデータストアの同期を維持するためには、デュアル書き込みよりも優れたアプローチが必要となります。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-34.png?w=990&amp;h=743" alt="Instead, embrace the log" width="660" height="495" class="alignnone size-large wp-image-556" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-34.png?w=660&amp;h=495" scale="1.5"></p><p>私の提案は、アプリケーションから各種データストアに直接書き込むのではなく、（Kafkaのように）ログにデータを追加するのみにとどめるというものです。このデータ（データベースや<a href="https://www.facebook.com/note.php?note_id=23844338919&amp;id=9445547199" rel="nofollow" title="" class="ext-link">キャッシュ</a>やインデックス)の個別の表示については、順番にログを利用することで構成されます。</p><p>同期が必要な各データストアは独立したログ・コンシューマです。全てのコンシューマは1レコードずつログのデータを取り、それ自体のデータストアに書き込みます。そしてログは、コンシューマが同じ順序でレコードを認識していることを保証します。同じ順序で書き込みを適用することで、競合状態の問題はなくなるのです。先に説明したデータベースレプリケーションの場合と非常に似通っていますよね。</p><p>では、部分的な障害の問題についてはどうでしょうか。もしデータストアの1つに問題が生じ、しばらくの間、書き込みができなくなった場合はどうなると思いますか。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-13.png?w=990&amp;h=665" alt="Update of denormalized data fails" width="660" height="443" class="alignnone size-large wp-image-535" originalw="660" originalh="443" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-13.png?w=660&amp;h=443" scale="1.5"></p><p>この問題もまた、ログによって打開されます。各コンシューマは、自分がすでに処理した位置までのログを追跡しています。データストアに書き込んでいるコンシューマ内のエラーが解決されると、そのコンシューマは最後に処理した位置からログ内のレコードの処理を再開できます。このように、データストアは、しばらくオフラインになっても、最新情報を失うことはありません。このことは、システムを複数の部分に分離するときに非常に役立ちます。1つのデータストアに問題があっても、システムの残り部分は影響されずに済むのです。</p><p>ここでも、書き込みを全順序で記録するという単純なアイデアであるログは、非常に優れた手段になります。</p><p>それでも問題が１つあります。ログのコンシューマは皆、非同期でデータストアを更新するので、最終的には整合します。これらのデータストアからの読み出しは、データベースフォロワーからの読み出しに似ています。つまり、最新の書き込みより少し遅れるので、<a href="http://www.allthingsdistributed.com/2007/12/eventually_consistent.html" rel="nofollow" title="" class="ext-link">read-your-wites（自分の書き込みの読み出し）</a>は保証されません（もちろん、<a href="https://aphyr.com/posts/313-strong-consistency-models" rel="nofollow" title="" class="ext-link">linearizability(線形化能力）</a>も保証されません）。<br>
この問題は、ログの最上部に<a href="http://research.microsoft.com/pubs/199947/Tango.pdf" rel="nofollow" title="" class="ext-link">トランザクションプロトコル</a>を重ねることで克服できるかもしれないと私は考えますが、まだ研究段階にあって、プロダクション段階のシステムに広く実装されてはいません。現在での良策は、データベースからログを引き出すことです。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-35.png?w=990&amp;h=743" alt="Using change data capture" width="660" height="495" class="alignnone size-large wp-image-557" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-35.png?w=660&amp;h=495" scale="1.5"><br>
この手法は、<em>change data capture</em>と呼ばれ、私は最近<a href="http://blog.confluent.io/2015/04/23/bottled-water-real-time-integration-of-postgresql-and-kafka/" rel="nofollow" title="" class="ext-link">これに関する記事</a>を書き、<a href="https://github.com/confluentinc/bottledwater-pg" rel="nofollow" title="" class="ext-link">PostgreSQLに実装</a>しました。単一のデータベースだけに書き込んでいる（デュアルで書き込んでいない）限り、また、そのデータベースから（DBにコミットされた順序で）書き込みのログを取得している限り、この手法は、書き込みを直接ログに行っているのと同様に機能します。<br>
ログの前にあるこのデータベースが同期して書き込みを適用するので、これを使って、「即時の整合性」（線形化能力）が必要な読み出しを行い、制約（例えば、勘定残高は負の値にならない、など）を課すことができます。データベースを介して業務を行うことは、ログを自分のレコードシステムとして信用する（新しい技術で実装されている場合は恐ろしい期待かもしれません）必要がないということを意味します。自分がよく知っていて気に入っている既存のデータベースがあり、そのデータベースから変更ログを引き出せるのなら、ログ指向アーキテクチャの利点も有効に活用できます。この話題については、<a href="http://martin.kleppmann.com/2015/06/02/change-capture-at-berlin-buzzwords.html" rel="nofollow" title="" class="ext-link">今後のカンファレンストーク</a>でお話しします。<br>
最後に、思考実験で締めくくりたいと思います。</p><p><img src="https://confluentinc.files.wordpress.com/2015/04/logs-36.png?w=990&amp;h=743" alt="Thought experiment: could you make all your writes through a log?" width="660" height="495" class="alignnone size-large wp-image-558" originalw="660" originalh="495" src-orig="https://confluentinc.files.wordpress.com/2015/04/logs-36.png?w=660&amp;h=495" scale="1.5"></p><p>私たちが扱うほとんどのAPIには、読み出しと書き込みの両方のエンドポイントがあります。REST的な用語では、GETは読み出し（つまり、副作用のない操作）、POST、PUT、DELETEは書き込みを意味します。これらの書き込みのエンドポイントは、書き込み先のシステムが１つだけの場合には支障ありませんが、複数のシステムがある場合は、すぐにデュアル書き込みになって、前述した問題がすべて発生してしまいます。<br>
書き込みのためのエンドポイントをすべてなくしたAPIをもつシステムを考えてみてください。GET要求はすべて残しておくが、POST、PUT、DELETEを禁止すると考えます。その代わり、システムに書き込みを送る唯一の方法は、ログに書き込みを追加して、システムにログを使わせることです。（ログはシステムの外にあることが必要で、同一のログに複数のコンシューマを当てることができます。）<br>
例えば、RESTのAPIを通じてドキュメントを書き込むことはできず、Kafkaに送ることによってのみドキュメントを書き込む、Elasticsearchの変種を考えます。Elasticsearchには、ドキュメントを取り、インデックスに追加するKafkaコンシューマが内蔵されているでしょう。このことにより、同時性の制御に配慮する必要がなくなるので、Elasticsearchの内部処理が実際に簡素化され、複製の実装が簡素化されます。そして、同じログを使う他のツールの隣にきちんと納まることでしょう。</p><p>このログ指向アーキテクチャの、私が好きな特徴は、新規に派生させたデータストアを構築したい場合に、ログの最初に新規コンシューマを開始して、すべての書き込みをデータストアに適用しながら頻繁にログの履歴の中を見ていくことができることです。最後まで来たら、データセットに新しいビューが得られ、ログを使い続けるだけで最新の状態を維持することができるのです。</p><p>このことにより、例えば別の方法でインデックス付けするなど、既存のデータを表現する新しい方法を試すことが非常に簡単になります。既存のどのデータにも干渉することなく、実験的な新しいインデックスやビューをデータに構築することが可能です。結果が良ければ、新しいビューから読み込むようにユーザを移行させることができるし、結果が悪ければ、使わずに捨てることもできます。この特徴によって、アプリケーションの実験と改造に非常に大きな自由が得られるのです。</p>
