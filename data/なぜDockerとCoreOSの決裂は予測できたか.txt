<p><a href="http://danielcompton.net/2014/12/02/modular-integrated-docker-coreos" rel="nofollow" title="" class="ext-link">Why Docker and CoreOS’ split was predictable</a> （2014-12-02） by <a href="https://twitter.com/danielwithmusic/" rel="nofollow" title="" class="ext-link">Daniel Compton</a></p><p>CoreOSとDockerの間で<a href="https://coreos.com/blog/rocket/" rel="nofollow" title="" class="ext-link">最近</a>、<a href="https://blog.docker.com/2014/12/initial-thoughts-on-the-rocket-announcement/" rel="nofollow" title="" class="ext-link">騒動</a>がありました。DockerはCoreOSのクラスタ管理の領域に入り込むために構築している製品の範囲を広げています。それにより、CoreOSがDockerと競合する独自のコンテナランタイム<a href="https://github.com/coreos/rocket" rel="nofollow" title="" class="ext-link">Rocket</a>を発表したのです。そういった動きは、Clayton Christensenの『<a href="http://www.asymco.com/2010/11/15/law-of-conservation-of-modularity/" rel="nofollow" title="" class="ext-link">Law of Conservation of Modularity</a>』を読んでいれば十分に予測できるものでした。</p><p><em>注意: この理論は、<a href="http://www.joelonsoftware.com/articles/StrategyLetterV.html" rel="nofollow" title="" class="ext-link">補完するものをコモディティ化すること</a>について書かれたJoel Spolskyの有名な記事に関連していますが、それとは別です。</em></p><p>現在DockerとCoreOSに起こっているのは珍しいことでも驚くようなことでもなく、コンピューティングの始まり以来よくあったことです。差別化できる対象は変わり続けていて、誰が差別化できるかをめぐって戦いがあります。アイスホッケーのパックが向かう所を予測するように、価値の動きを予測して動く者が利益を獲得できます。</p><p>私たちはこのサイクルが何度も繰り返し起こるのを見てきました。最初、メインフレームコンピュータは顧客のニーズに対して性能が不十分だったので、コンポーネントからオペレーティングシステム、販売員まで、一元的に構築、製造、販売する必要がありました。IBMはこの統合システムで価値を獲得し、IBMのサプライヤは利益のない惨めな状態で辛うじて存続していました。しかし数年後、ミニコンピュータとコンピュータの性能が十分になり始め、価値はシステムを組み立てること（IBMとCompaq）から、オペレーティングシステム（Microsoft）、プロセッサ（Intel）、メモリチップ、およびディスクドライブの部品メーカーに移動しました。今度はシステムインテグレータが<a href="http://en.wikipedia.org/wiki/List_of_computer_system_manufacturers#Defunct" rel="nofollow" title="" class="ext-link">消耗</a><a href="http://ja.wikipedia.org/wiki/%E3%82%B2%E3%83%BC%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A4_(PC%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC)" rel="nofollow" title="" class="ext-link">するだけの</a><a href="http://www.pcpro.co.uk/news/386932/sony-exits-pc-market-with-vaio-sale" rel="nofollow" title="" class="ext-link">厳しい</a><a href="http://www.pcadvisor.co.uk/news/laptop/3573470/samsung-exits-laptop-market-including-chromebooks/" rel="nofollow" title="" class="ext-link">戦い</a>の中、利益のない惨めな状態でやりくりする番になったのです。</p><p>デスクトップ市場では、プロセッサとオペレーティングシステムの性能がまだ不十分だったため、一層の性能向上が求められ、価値もそこにありました。メモリチップとディスクドライブのメーカーは、そううまくはいきませんでした。メーカーのチップとディスクの性能が十分向上し、モジュール化されると、DRAMやハードドライブのヘッドとディスクを製造するための設備を供給する企業が利益を得るようになりました。</p><p>2005年になると、Linuxは十分な性能のオペレーティングシステムになりました（サーバコンピューティングの場合、デスクトップコンピューティングについては翌年まで待つ必要がありました）。企業は、オペレーティングシステム上で<a href="http://www.xenproject.org/" rel="nofollow" title="" class="ext-link">Xenハイパーバイザ</a>や<a href="http://aws.amazon.com/jp/ec2/" rel="nofollow" title="" class="ext-link">Amazon EC2</a>のようなシステムを構築することができ、Linuxをモジュラーコンポーネントのように使うこともできました。これらのクラウドコンピューティングサービスが柔軟なスケーラビリティを提供した結果、その配下のコンピュータは<a href="http://aws.amazon.com/jp/ec2/instance-types/" rel="nofollow" title="" class="ext-link">コンピュートユニットの値</a>で表わされるコモディティになりました（スピンアップしてEC2インスタンスを実行している物理マシンを区別しようと思う人はいません）。サーバとオペレーティングシステムは、統合された仮想マシン管理をサポートするためのモジュラーとなりました。</p><p>2013年までには、クラウドサービスプロバイダの仮想マシンは性能が向上し、コモディティ化が進みました。不十分だったのはアプリケーションの再現性とデプロイ、そしてマルチサーバ管理でした。Puppet、Chef、Ansibleなど、数多くのソリューションがありましたが突出したものはなく、ここで<a href="https://www.youtube.com/watch?v=wW9CAH9nSLs" rel="nofollow" title="" class="ext-link">突破口を開いた</a>のがDockerでした。以下は、GitHub上の説明の引用です（太字は私が強調のために使用しました）。</p><p>モジュール方式や統合の観点から見ると、Dockerコンテナはあらゆるものが同期する統合ポイントになるように設計されていることが分かります。Dockerは、オペレーティングシステム、仮想マシン、物理マシン、サーバオペレータをコンテナの下に配置し、コモディティ化します。また、コンテナ上に構築する際に外部から使用できるAPIのセットも提供します。Dockerがコモディティ化していないのはデータセンターですが、なぜそれが重要なのかはこのあとすぐに分かります。</p><p>開発者の視点から言えば、アプリケーションをDockerコンテナで実行すると、クラウドサービスはモジュラー（置き換えが可能なコモディティ）として実行されます。これは素晴らしいことです。もしあなたが今のクラウドサービスに満足していないなら、別のクラウドサービスプロバイダに（理論的には）変更できるからです。コモディティ化は薄利多売のビジネスにつながるので、AmazonやGoogleなどのクラウドプロバイダにとってはいいことではありません。価値は、仮想マシンを提供するクラウドサービスプロバイダから、仮想マシン上で実行されるコンテナに移ったのです。</p><p>コンテナは便利ですが、アプリケーションを実行するにはさらに他のものが必要です。そのためすぐに数多くの企業がDockerのモジュラーコンテナを利用したシステムを構築し、差別化された統合的なサービスの提供をするようになりました。その中で最も有名なのが<a href="https://coreos.com/" rel="nofollow" title="" class="ext-link">CoreOS</a>です。CoreOSはLinuxの最低限の機能を備え、クラスタリングを使用してDockerコンテナを実行するツールを提供します。彼らは仮想マシン、<em>そして</em>Dockerコンテナの代わりに単一のクラスタを使用し、プロセスを進める中でデータセンターのコモディティ化を行います。再び価値はDockerコンテナからDockerを利用した統合的なサービスへと移動しました。それが真実であろうとなかろうと、CoreOSやそれに似たサービスはクラウドサービスプロバイダにとって脅威となります。それはつまりクラウドプロバイダを利用した統合的なプラットフォームを構築することでクラウドプロバイダのコモディティ化を行うということです。</p><p>こういった脅威が出てきたことをきっかけに<a href="https://aws.amazon.com/ecs/" rel="nofollow" title="" class="ext-link">Amazon</a>や<a href="https://cloud.google.com/container-engine/" rel="nofollow" title="" class="ext-link">Google</a>がDockerコンテナを管理し組織化する新たなコンテナエンジンサービスを発表したことは当然の結果です。これらのサービスはコモディティ化した彼らのコンピューティングインフラストラクチャ上でDockerコンテナの管理を統合することで価値を取り戻そうとするものでした。ただ、想定外だったのはGoogleがコンテナクラスタ管理ツールである<a href="https://github.com/GoogleCloudPlatform/kubernetes" rel="nofollow" title="" class="ext-link">Kubernetes</a>をオープンソースとして公開したことです。未だに何が目的でそのようなことを行ったか分かりません。</p><p>このことはDockerにどんな影響をもたらしたのか？　初めの頃からずっと、Dockerは他社が構築に利用できるモジュラーコンポーネントでした。それは他社にとって素晴らしいものでしたが、Dockerにとってあまり有益なものではありませんでした。というのもDocker自身の定義が差別化されておらず、ごくわずかな価値しか獲得していなかったのです。コモディティ化は利益を増やすのにあまり良い方法ではありません。さらにDockerの<a href="https://angel.co/docker-inc-1" rel="nofollow" title="" class="ext-link">投資者</a>にとっても、望むような<a href="http://paulgraham.com/fr.html" rel="nofollow" title="" class="ext-link">ハイリターン</a>はあまり期待できません。</p><p>Dockerをコモディティ化したコンポーネントとして利用するCoreOSが登場し、Dockerは彼らが作っている価値が全てCoreOSなどの企業に奪われつつあると悟ります。彼らがコモディティ化したOS層における価値をDockerが得ることはできません。Dockerに残された道はコンポーネント以上のシステムになることでした。クラスタ内におけるDockerコンテナの実行と構築を行う全てのアスペクトを管理できる製品を作ることはとても理にかなっています。</p><p>もちろんCoreOSはこのことを懸念しています。今やDockerは開発者の信頼と高いマインドシェアを有し、十分な資金を持った競争相手となっています。そしてこれに対抗してCoreOSがDockerのコンテナ市場占有率を奪い、自社製品をサポートするために競合するコンテナエコシステムを構築するのは自然の成り行きです。RocketはDockerよりも技術的な面で優れている可能性があるので、CoreOSがまず行うことはDockerによりコンテナクラスタ管理スペースから締め出されないようにすることです。</p><p>また数年経てば、クラスタ管理サービスはコモディティ化され、価値もまた別の所へ移動するでしょう。このサイクルは繰り返されるのです。この競争に勝ち抜くコツはいつもパックの行く先を見定めることなのです。</p>
