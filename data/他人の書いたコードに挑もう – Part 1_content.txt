Diving Into Other People's Code （2016-03-15） by Li Haoyiこの記事では、他人が書いたコードを扱うための練習法を一から説明します。目標は、 Spyder Python IDEという今まで触ったこともないプロジェクトのコードに任意の変更を加え、途中で行き詰ることなく、目的達成に必要な情報のみ習得することです。ここでは、勘や実験的な手段、そしてプロの現場で養った洞察力を武器に問題に対処する方法を学びます。形式ばったレッスンのように、苦痛を感じることはないでしょう。満足感や挫折、葛藤を味わいながらプロジェクトを進め、最終的には（なんとか動く程度の）パッチを完成させ、大規模で不慣れなコードベースに機能を追加します。プログラミングを学んでいる人は皆、あらゆる種類のプログラムで大量のコードを書いています。それは、問題集に載っているアルゴリズムを実装するにせよ、ウェブサイトの構築やビデオゲームの作成をするにせよ同じです。ところがプロのソフトウェアエンジニアというのは、めったにコードをガリガリ書きません。それよりも他人のコードの解読に時間を割いています。解読するのは自分で書いたものでもなければ、今まで一度も見たこともないような、良く分からないコードです。助けを求める人や、心の叫びに気付いてくれる人がいなくても、前に進まなければならないのです。この記事の目標は、初見のコードベースの内容を調査して、ある程度インパクトのある修正を加えることです。この練習で使用するターゲットは、Spyder Python IDEで、Githubのページによると見た目は以下のような感じです。
そして（任意の）目標は、Helpドロップダウンメニューの隣にMiscという名称のドロップダウンを新しく追加することです。その内部には、現在開いているテキスト領域を取得して、以下のコードを先頭に追加するメニューアイテムおよびコマンドを追加します。ファイルの実行開始時間を表示するため、一番上に挿入します。私は職業柄、何年もPythonやJavaScriptを使ってきたので、これらのエコシステムについてはかなりの知識があります。Bashコマンドラインを使うLinuxの作業環境にも精通していて、オープンソース拡張も数多くこなしてきました。遠い昔にはJavaやC#、PHPもよく使っていました。ただ、Spyderエディタは一度も使ったことがなく、コードベースに触れるのも、実際に見るのも今日が初めてです。この練習では、このように何の知識もないコードベースを使い始める方法や、全てを把握せずとも前へ進む方法を模索します。以下は、未知のコードベースを扱う上での作業手順です。以下は、他人のコードを扱う際の留意点です。

プロジェクトの概要や動作が全く分からない状態で、手を加えようとするのは無謀です。なお、この記事で扱うのは、Spyder Python IDEです。
Githubのページの概要にあるように、これはPython用にPythonを使用して書かれたPython IDEです。
ご覧の通り、左側にはコードエディタ、右下にはIPython Notebookのようにグラフィカル出力に対応したIPython REPL（表示用のIn [1]シンタックスがあるのが分かります）、そして右上にはドキュメントブラウザがあります。それ以外は典型的なIDEと同じです。上部のボタンを使うと、コードの保存、ロード、コピー、実行、デバッグ、ステップスルーができます。ドロップダウンメニューには、さらに多くの機能があり、タブの付いたテキストエディタにはハイライトされたシンタックスなどが表示されています。Spyderは一般的には、どのプラットフォーム上でも動作します。ドキュメントには、Windowsのほぼ全てのバージョン、Mac OS-X、Linux（Ubuntu、Debian、Arch、Fedoraなど）用の説明が含まれています。なかなか古そう（数年前のもの）に見えますが、非常に活発なプロジェクトで、たくさんの人に支えられています。
営利目的の組織が支援しているのかは分かりませんが、個人向けの怪しげなプロジェクトではありません。ここまでが、特に知識のない素人から見たSpyderの簡単な概要です。では次に、Macbook上でSpyderを動かしてみましょう。

試してみたいプロジェクトがある場合、まず最初にどのようにしてそれを「開発モード」でインストールするかを考えなければなりません。通常、プロジェクトには、プロジェクト内で作業するエンドユーザがダウンロードしやすい全てを含んだカプセル化された配布版があります。しかし、そのプロジェクトを基に作業する人が必ずしも使いたいバージョンとは限りまん。Spyderの場合、次の2つのセクションが区別されているようです。ただIDEが欲しいエンドユーザであれば、インストールの手順に従います。しかし、Spyderを単に使うのではなく、変更を加えたいのでソースコードで実行を始めます。こちらの方がどんな時でも難しく、使いやすいとは言えない上、「パッケージ」された配布版よりも時間がかかります。いずれにせよ、コードに変更を加えてみたい人はこの困難をいつかは乗り越えなければならないので、さっさと片付けてしまいましょう。どのプロジェクトにおいても共通することですが、まず依存性をダウンロードする必要があります。Spyderは外部の影響を受けやすく、依存性のセクションに次のような記述があります。とても長いリストです。Pythonが何かを理解していますが、それ以外の機能については把握できていません。大体においては、上の依存性を1つずつpipと呼ばれるPythonのパッケージマネージャを使ってインストールすることができます。しかし、依存性のセクションの最初に目に付く場所にちょっとした免責事項が記述されています。1つの塊としてダウンロードしてインストールできるようです。個人的にこの「Scientific Pythonディストリビューション」を使ったことがありませんが、聞いたことはあります。これは、ダウンロードできるPythonパッケージで、使い勝手の良いライブラリなどが含まれたものだそうです。今回はSpyderがどのパッケージをダウンロードしても必要なものは入手できると教えてくれています。そのため、次のステップはどれかをダウンロードして試してみることです。まずはAnacondaを試してみましょう。

私はMacbook ProでOS-Xを使っています。「Anaconda OS-X」(OS-X用Anaconda)を検索すると以下のようなダウンロードのページの候補が表示されます。
Anacondaインストールのページに行くと、まず、Get Superpowers with Anaconda (Anacondaですごい力を得よう)と表示されますが、私には無意味なので無視します。OS-Xのリンクがありますので、そちらをクリックするとインストーラのダウンロードができます。
とりあえずここではPython 2.7ではなくPython 3.5のコマンドラインのダウンロードをします。ダウンロードのリンクの下に始める際の説明が次のように記述されています。Anacondaの容量は大きい(200メガバイト以上です)ので、ダウンロードに3、4分かかります。指示どおり、インストーラにコマンドラインを入力すると、数分かかるダウンロードとインストールが実行されます。そして、複数の質問に対しyesやENTERを入力していくと次のように表示され終了します。ただちにanacondaを実行できるわけではなく、python3コマンドは変更されていないようです。インストールの出力で新しいターミナルを開かないと使えないと記述されているので、上は恐らく想定されていることです。新たにターミナルを開いてanacondaを実行すると次のように表示されます。はっきり何がとは分かりませんが、インストールができました。python3を実行すると、次のように表示されます。紹介バナーにAnacondaがあるので、Anacondaのインストールも無事成功したようです。指示の最後の点である「MD5を使ってデータの整合性の確認」については、YOLO(人生一度きり)なので、リスクは承知で思い切ってここでは置いておきます。

Anacondaが整ったので、ソースコードで実行の部分に戻りましょう。ヘッダーの下の依存性について書かれている部分の前に次のような記述があります。恐らくここではSpyderのリボジトリのクローンを作り、cd（ディレクトリの移動）するよう要求されています。では、Githubページに列挙されたURLを使ってやってみましょう。もしこの記事の内容を追随したいのであれば、記事を書いている現段階のコミットである以下をお使いください。そして、 cd(ディレクトリを移動)して実行します。「下に列挙されている依存性全部ではありませんが、ほとんどはAnacondaが付いてくる…」と記載されていましたが、記載どおり、全部ではなく、ほとんどでした。これはいいとして、pip3を使ってPyQt5をインストールします（これは、githubのリードミーで「お勧め」されています）。pip3はPython 3用の python3実行ファイル対応のpipで、Anacondaに付いてきます。

ダメですね。「pip install PyQt5」で検索すると次が表示されます。一瞬pipを使ってもこのライブラリをPyPIからインストールできないように思えますが、さらに「osx pyqt5」を検索すると次が表示されます。tarコマンドやmakeをコマンドラインに手動でひたすら入力する以外に簡単にPyQt5をインストールする方法がないかのように思えます。その一方で、上のコードでPySideモジュールが廃止になったとのエラーメッセージが表示されていましたが、大丈夫かもしれません。今は廃止警告を気にせず、とにかく何か（何でも）動けばいいと思っています。「pip install pyside」を検索すると、このモジュールの標準モジュールリポジトリのページを探索できます。初めはpip3を使ってインストールができるようですが、しばらくすると次のように失敗に終わってしまいます。cmakeを実行しようとすると存在しないと表示されてしまいます。 多分パッケージマネージャ(brew)を使って単純にcmakeをインストールすれば問題ないのかもしれません。では、brew install cmakeで試してみましょう。苦痛の5分間が過ぎてやっと実行できたようです。cmakeコマンドで以下の内容が出力できるようになりました。では再度 pip3 install PySideを試してみましょう。このqmakeとは一体なのでしょうか。brew installは使えません。pyside qmake osxを検索すると次が表示されます。ここでは、Xcodeをインストールするように言っていまが、すでにインストール済みです。その後にマジックコマンドの入力があります。cmakeはインストール済みですし、python もAnacondaのセクションでインストール済みです。そのため、ここで必要になるのは、qtでqmakeコマンドを使えるようにすることです。brew install qtを入力します。タイムアウトか何かでインストールができなかったようです。この時点ではまだqmakeを実行できません。brew install qt timing outを検索すると次が出てきます。つまり、私だけが直面する問題ではないようです。もしかしたら、再実行すれば大丈夫なのかもしれません。もしできない場合はPyQt5を先ほどと同じように、指示通りに再インストールしてみましょう。今回もまたダメだったようです。

今はPySideのことは諦めましょう。理由は分かりませんが、インストールがうまくいきません。どちらにしろ、qtを要求しているようですね。おそらくPyQt4が要求しているものと大差ないでしょう。今回もネットで「osx PyQt5」を検索してみると、こんなものがありました。これでうまくいくのでしょうか？　コンパイルを避けるということは、brew install qtをする間にmakeコマンドを走らせている時、コンパイルのタイムアウトらしきものを避けるということに違いありません。思うに、コンパイルを必要とするPyQt5をインストールしようとするメカニズムはどれもqtが必要で、結局同じタイムアウトの問題にぶつかるのではないでしょうか。どちらにしても、これはうまくインストールできたようです。奇妙なことに、python3 bootstrap.pyを実行しようとすると、PyQt5が見つからないといって処理に失敗するようです。python3のREPLではうまくインポートできるのに、おかしいですね。　spyderlib/qt/__init__.py内のインポートを実行するコードを見てみると、以下のようになっています。同じファイルの下方で失敗に終わるImportErrorにぶち当たりそうな気がします。試しにpython3のREPLでこのインポートを実行してみることも可能です。そして、驚いたことに失敗です。ついていませんね。import PyQt5はできそうに思えましたが、from PyQt5.Core import PYQT_VERSION_STR as __version__を行うのは無理そうです。一部のバイナリ依存性がきちんとインストールされていないのでしょうか。もしかしたら、pyqt5-macos-builtのパッケージには、本来必要な何かしらのQT依存性が欠けているのかもしれません。ネットで「Library not loaded QtCore （QtCoreライブラリがロードされていない）」を検索してみたら、これを見つけました。もしかして、brew install qtがうまく動作しなかったらbrew install qt5が動作するのでしょうか？これは時間がかかりすぎる気がします。condaやpipからPythonのパッケージをインストールできることが判明しました。ネットで「Anaconda pyqt5」と検索すると下記が出てきました。python3が何らかの事情でpyqt5の何かしらと互換性がないため、これはうまくいかないみたいです。pyqt5向けのAnacondaのパッケージはPython 2.7でしか使えないことが分かりました。幸いcondaには便利なコマンドがたくさんあり、中でもsearchコマンドは、使える可能性のある似たようなものを探すのに一役買ってくれます。これでpyqtのPython 3で動作するバージョンを見つけられるでしょうか？pyqtにはpy35_0（私たちのです）向けのパッケージがあるようです。pyqt5にはないですけれどね。代わりにこれをダウンロードしてみましょうか。pyqt（バージョン4）を使うとうまくいきそうです。これでbootstrapのスクリプトを実行した時にクラッシュすることはなさそうです。いや、そうでもないかもしれません。これは一体何でしょう？　conda installができるようには思えません。しかし、ビルトインの検索機能を使ったところ、期待の持てそうなものが出てきました。これをどうやってインストールすればいいのでしょう？ネットでqtawesomeを検索したら、こういうものが見つかりました。Qt向けのFontAwesomeみたいなもののようですね。きっとこれは矢印などの見た目を良くするために作られたのだと思います。pip3を使ったインストールはうまくいきそうです。pip3でのインストールは、conda installを使うのといくらか違うのでしょうか。とにかく、pip3は成功しました。しかし、インポートしようとすると実際には動きません。ネットでconda install "qtawesome"を検索したら（単語が切り離されてしまわないようクオーテーションが必須です）、こちらが見つかりました。
* https://anaconda.org/lightmotif/qtawesomeこれはうまくいきません。しかし、anaconda searchで先に列挙されていた”他の”foo/qtawesomeの名前を使うことで、機能します。こうしてpython3 bootstrap.pyを終えて、やっと起動することができました。いや、できていないかもしれません。ネットでこのエラーメッセージを検索したら、次のものが見つかりました。解決策は以下のどちらかのようです。この問題について投稿した人たちのどちらを信じるかによりますね。1つ目の方はうまくいきそうもありませんが、2つ目はうまくいきそうです。Spyderが立ち上がります。こんなものが出てしまいました。
しかしこれは単にconda install pylintをすれば、機能するようになります。
これをある程度長い時間（2～3分？）そのまま走らせておいたら、下記のようになって終わることに気付きました。ですから完全に安定しているわけではないのです。しかし私たちが変更の実行とテストを行う分には十分です。ということで、ここではよしとしましょう。私がSpyderの「Scientific Python」IDEへの変更を最初に試み始めてから、ここまでで約2時間が経ちました。ついに「開発」モードでソースから立ち上げることができたのです。外部のコードベースを理解しようとする時、これは最も重要なステップです。ここまで私たちは、依存性がうまく機能しない理由を見つけ出そうとして1、2回コードをちらっと見ただけです。次のステップでは、コードの何がどうなっているのかを探るため、コードを詳しく見ていきましょう。この記事の後編はこちら：他人の書いたコードに挑もう – Part 2article originally written by Li Haoyi on http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html
