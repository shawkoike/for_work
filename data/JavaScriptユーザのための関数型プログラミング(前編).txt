<p><a href="https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504#.u3llrjpwm" rel="nofollow" title="" class="ext-link">Functional Programming for JavaScript People</a> （2016-03-01） by <a href="https://medium.com/@chetcorcos" rel="nofollow" title="" class="ext-link">Chet Corcos</a></p><p>私が関数型プログラミングについて度々耳にするようになったのは、数カ月前からです。でも当時は、それが何なのか見当もつかず、単なるバズワードだと思っていました。皆さんの中にも、そのような方は多いでしょう。それ以来、私は関数型プログラミングについて深く学び、この言葉を日々聞いてはいるものの内容を理解していない初心者の方のために、分かりやすく説明しようと思い立ちました。</p><p>関数型プログラミング言語の話になると、「<a href="https://www.haskell.org/" rel="nofollow" title="" class="ext-link">Haskell</a>と<a href="https://ja.wikipedia.org/wiki/LISP" rel="nofollow" title="" class="ext-link">Lisp</a>は<a href="https://www.reddit.com/r/haskell/comments/2mr7ks/im_debating_between_haskell_and_clojure_xpost/" rel="nofollow" title="" class="ext-link">どちらが優れているのか</a>」という<a href="https://www.reddit.com/r/haskell/comments/2mr7ks/im_debating_between_haskell_and_clojure_xpost/" rel="nofollow" title="" class="ext-link">議論</a>が<a href="https://news.ycombinator.com/item?id=4122764" rel="nofollow" title="" class="ext-link">白熱する</a>傾向にあります。HaskellとLispはどちらも関数型言語ですが、実際には大きな違いがあって、それぞれに長所と短所があります。その具体的な内容については、この記事を読み終える頃には深く理解していただけると思います。この2つの言語には、それぞれから派生した言語があります。その中で恐らく皆さんが耳にしたことがあるのが、 <a href="http://elm-lang.org/" rel="nofollow" title="" class="ext-link">Elm</a>と<a href="https://github.com/clojure/clojurescript" rel="nofollow" title="" class="ext-link">ClojureScript</a>でしょう。どちらもコンパイルするとJavaScriptになります。これらの言語の詳細については、後ほど説明しましょう。<strong>この記事の一番の目的は、関数型プログラミングの主要概念とパターンをしっかりとお伝えすることです。</strong></p><p>関数型プログラミングの要となるのが、<a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%A0%E3%83%80%E8%A8%88%E7%AE%97" rel="nofollow" title="" class="ext-link">ラムダ計算</a>というロジックを記述するための計算体系です。数学者はよくデータ変換という形でプログラムを記述して、主要概念である<a href="https://en.wikipedia.org/wiki/Pure_function" rel="nofollow" title="" class="ext-link">純粋関数</a>に帰着させます。純粋関数には<a href="https://ja.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)" rel="nofollow" title="" class="ext-link">副作用</a>がありません。つまり、<strong>純粋関数は入力値にのみ依存するので、入力値が同じであれば必ず結果は等しくなります。</strong>では以下の例を見てみましょう。</p><p>この非純粋関数は間接的に<em>x</em>に依存するので、<em>ｘ</em>を変化させると入力値が同じであっても<em>addx</em>の出力結果は変わります。これにより、コンパイル時の静的解析やプログラム最適化がしづらくなります。しかし実際には、JavaScript開発者が<strong>プログラミングをする際の認知的負荷は、純粋関数により抑制されます。</strong>純粋関数の作成時は関数の中身だけに専念すればよいので、<em>addx</em>関数を作成しながら、もし何かの要因で<em>x</em>が変化したら…、などと外部要因を気にする必要はありません。</p><p>純粋関数の利点の1つは、<em>合成して</em>新しい関数を作成できることです。<em><a href="https://ja.wikipedia.org/wiki/%E5%86%99%E5%83%8F%E3%81%AE%E5%90%88%E6%88%90" rel="nofollow" title="" class="ext-link">compose</a></em>は、ラムダ計算でプログラムを記述する際に使う特別な演算子の1つです。composeは2つの関数を引数に取り、それらを”<em>合成して</em>“新しい関数を作ります。では以下を見てみましょう。</p><p><em>compose</em>は、前置詞の”of（～について）”に似ています。引数の順番と計算方法を見ると、「2倍した値<em>について</em>1を加算する」というように2つ目の関数を先に計算しているのが分かります。この<em>compose</em>と逆の動きをするのがUNIXでおなじみの<em>pipe</em>で、こちらの方が直感的に理解しやすいでしょう。<em>pipe</em>は以下のように関数の配列を引数に取ることもできます。</p><p>関数の合成によって小さな関数を統合（合成）すれば、より複雑なデータ変換を実装できます。関数を合成して、データを分かりやすく簡潔に処理する方法については、<a href="http://fr.umio.us/why-ramda/" rel="nofollow" title="" class="ext-link">こちらの記事</a>の例をぜひご覧ください。</p><p>実際に、<strong>合成はオブジェクト指向の継承に<em>勝る</em>代替手段</strong>だと言えます。信じられないという方もいると思うので、実例を紹介しましょう。以下のように、ユーザへのあいさつ文を作成する状況を想定してみてください。</p><p>とてもシンプルな純粋関数ですね。ではここでプロジェクトマネージャから、ユーザのデータをさらに渡され、名前の前に敬称を付けるよう言われたとしましょう。そして以下のコードを書いたとします。</p><p>それほどひどいコードではありません。でも、「Dr.」や「Sir」など他の分類についても、どんどんブール値を追加していったらどうなるでしょう？　名前の後ろに「MD」や「PhD」も付けて、「こんにちは」の代わりに「やあ」とカジュアルなあいさつを表示しようとしたら、一体どうなると思いますか？　もう、手に負えなくなるはずです。</p><p>このようにブール値を関数に追加するのは、厳密にはオブジェクト指向の継承ではありません。とはいえ、これはオブジェクト内の属性やメソッドが、継承時に拡張またはオーバーライドされるケースと似ています。ではブール値を追加する代わりに、関数を合成してみましょう。</p><p>こちらの方がはるかに扱いやすく、判別しやすいですね。各関数は<a href="https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6" rel="nofollow" title="" class="ext-link">1つの処理だけ</a>を行うので、関数の合成は簡単です。では全てのケースを扱うために、便利なpipe関数を使ってみましょう。</p><p>純粋関数や関数の合成のもう1つの利点は、エラーを追いやすいという点です。エラーが発生した時にはいつでも、バグの発生源まで、全ての関数のスタックトレースを確認することができるはずです。オブジェクト指向プログラミングでは、バグを引き起こす残りのオブジェクトの状態が分かるというわけではないため、しばしば混乱を引き起こします。</p><p>関数のカリー化は、Haskell を開発したのと同じ人物によって考案されました。その人物とは<a href="https://ja.wikipedia.org/wiki/%E3%83%8F%E3%82%B9%E3%82%B1%E3%83%AB%E3%83%BB%E3%82%AB%E3%83%AA%E3%83%BC" rel="nofollow" title="" class="ext-link">Haskell Curry</a>です（訂正：Haskell Curryの名にちなんで名づけられました）。関数のカリー化は、少ない引数で関数を呼び出した場合、残りの引数を取るために、その呼び出された関数が別の関数を返すような関数にすることを指します。詳細については、<a href="https://hughfdjackson.com/javascript/why-curry-helps/" rel="nofollow" title="" class="ext-link">この記事で分かりやすく説明</a>されています。ただし、ここでは<a href="http://ramdajs.com/0.19.1/docs/#curry" rel="nofollow" title="" class="ext-link">Ramda.js curry function.</a>を使った簡単な例が紹介されています。</p><p>以下の例では、2つの引数を取るカリー化された関数”add”を生成しました。引数を1つ渡す場合、1つの引数だけを取る”add1″と名付けた部分的に適用された関数が得られます。</p><p>Haskellでは全ての関数が自動的にカリー化されます。任意やデフォルトの引数は存在しません。</p><p>実際、<em>map関数や合成関数、pipe関数</em>を使用する場合、関数のカリー化はとても便利です。以下がその例です。</p><p>上記を見るとデータ処理がとても宣言的なのが分かります。まるでコメントのようにコードが読めることに気づくでしょう。</p><p><a href="https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%8A%E3%83%89_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)" rel="nofollow" title="" class="ext-link">モナド</a>や<a href="https://ja.wikipedia.org/wiki/%E9%96%A2%E6%89%8B" rel="nofollow" title="" class="ext-link">関手</a>は、すでに知っている関数に対する装飾的な言葉です。もっとしっかり理解したい場合は、<a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" rel="nofollow" title="" class="ext-link">こちらの記事を読むこと</a>を強くお勧めします。分かりやすい図を使って、よく説明されています。実際にはここまで複雑ではありません。</p><p>モナドや関手について重要なことは、数学者たちが圏論でこの構造を研究しているということです。これによって、プログラムを理解するためのフレームワークだけでなく、コンパイルする時の静的解析やコードの最適化に使うことのできる<a href="https://en.wikipedia.org/wiki/Monad_%28category_theory%29#Algebras_for_a_monad" rel="nofollow" title="" class="ext-link">代数定理や証明</a>をもたらしてくれるのです。これがHaskell の主な利点でもあります。<a href="https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler" rel="nofollow" title="" class="ext-link">Glasgow Haskell コンパイラ</a>は人類が作りだした傑作です。</p><p>圏論で表されるあらゆる定理や恒等式があります。以下は簡単な恒等式の例です。</p><p>mapをコンパイルする場合、効果的なWhileループを用います。一般的に、<a href="https://ja.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E8%A4%87%E9%9B%91%E6%80%A7%E7%90%86%E8%AB%96" rel="nofollow" title="" class="ext-link">O(n) operation (線形時間)</a>ですが、リストで次のアイテムに対するポインタの増加に関連したオーバーヘッドがまだ存在します。そこで2番目の場合では、実に2倍の効率で、コンパイル時にHaskellがコード処理を明らかに速くするための変換があります。これにはちょっとしたイカすコツがあるのですが、後で説明します。</p><p>もう少しモナドについて触れると、<em>Maybe</em> モナドと呼ばれる面白いモナドがあります（Swiftでは、たまに<em>Option</em> や <em>Optional</em>などと呼ばれています）。Haskellでは、<em>null</em>や <em>undefined</em>といった概念がありません。そこで潜在的に<em>null</em>であることを表現する場合は、Haskellコンパイラが何をすべきか分かるように、モナドでラップする必要があります。</p><p><em>Maybe</em> モナドは<em>Nothing</em>か<em>Just something</em>かのどちらかの<a href="https://en.wikipedia.org/wiki/Union_type" rel="nofollow" title="" class="ext-link">共用体型</a>です。Haskellでは<em>Maybe</em>を以下のように定義付けできます。</p><p>小文字のxはあらゆる型を示します。</p><p>モナドであれば、含まれている値を変えるのに<em>Maybe</em>上で<code>.map()</code>を使えます。<em>Maybe</em>上でmapした場合、もしそれが<em>Just</em>型だったら、関数に値を入れ、新しい値とともに新しい<em>Just</em>を返します。また<em>Maybe</em> モナドが<em>Nothing</em>型だったら、<em>Nothing</em>を返します。Haskellでは構文はほとんど無駄がなく、パターンマッチングを使えますが、JavaScriptでは<em>Maybe</em> モナドを使う場合は次のようにする必要があるでしょう。</p><p>このモナドはJavaScriptのコードに関して、あまり役に立たないように思われるかもしれません。しかし、モナドがどうしてHaskellでそれほど有益なのかを見ておくのは興味深いことです。<strong>Haskellは、プログラムにおける全てのエッジケースで行うべきことを定義するよう要求します。もし定義しなければ、コンパイルはできません。</strong>HTTPのリクエストを実行する時には、リクエストが失敗して何も返ってこないことがあるかもしれないので、<em>Maybe</em>型が返されます。もしリクエストが失敗するような事例を扱わなければ、プログラムはコンパイルできません。このことは基本的に、ランタイムエラーが検出できないことを意味します。おそらく、プログラムは間違った動きをするでしょう。しかし、JavaScriptで実行されがちなことと同じように、ただ魔法のように実行を中断することもありません。</p><p>モナドと代数構造に照らしてコードを考えることは、問題を構造化された方法で定義し理解するのに役立つでしょう。例えば<em>Maybe</em>の面白い拡張は、エラーハンドリングのための<a href="http://fsharpforfunandprofit.com/rop/" rel="nofollow" title="" class="ext-link">鉄道指向プログラミング</a>の概念です。また<a href="https://www.youtube.com/watch?v=XE692Clb5LU" rel="nofollow" title="" class="ext-link">注目すべき動向</a>は非同期イベントをうまく扱うモナドなのです。</p><p>あらゆる種類のモナドや多くの用語を、私自身も完全に理解しているわけではありません。しかし、すべての専門用語の不変性を保つために、<a href="https://github.com/fantasyland/fantasy-land" rel="nofollow" title="" class="ext-link">Fantasy Land</a>や<a href="https://wiki.haskell.org/Typeclassopedia" rel="nofollow" title="" class="ext-link">型クラスペディア</a>といった仕様書があります。その仕様書は、慣用的で機能的なコードを書くことを目的として、圏論における異なった概念を統一しようとしています。</p><p>このような圏論とラムダ計算式の全てを利用するもう一つの意味合いは、<a href="https://en.wikipedia.org/wiki/Referential_transparency" rel="nofollow" title="" class="ext-link">参照の透明性</a>です。数学者にとって、<em>同一の2つの事柄が、お互いに等しくはない時</em>、論理プログラムを解析するのはとても大変です。これはJavaScriptのいたるところに存在する問題です。</p><p>さて、参照の透明性の無い世界で数学を学ばなければならないと想像してください。「空配列は空配列と同じものである」という証明を書くことはできないでしょう。重要視すべきことは、配列の<em>値</em>であって、配列の参照ポインタではありません。そこで関数型プログラミング言語では値を比較するために、deep-equalを用います。しかし、これはとても効率が良いというわけではありません。そこには、参照を利用するこの比較をより速くするための巧妙なトリックがあります。</p><p>先に進む前に、1つはっきりさせておきたいことがあります。関数型プログラミングにおいて、その参照を変えることなく、変数を変えることはできません。そうしなければ、変更処理を実行する関数は非純粋関数になるでしょう。このように、「2つの変数が参照に関して等しいならば、その値も同様に等しくなければならない」ということが保証できます。また、適切な場所で変数の変更処理をすることができないので、変数を変換したいと思うたびに、新しい記憶場所に値をコピーしなければなりません。これは途方もないパフォーマンスの損失で、<a href="https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0" rel="nofollow" title="" class="ext-link">ガベージスラッシング</a>という結果を招きます。そしてその解決策が<a href="https://ja.wikipedia.org/wiki/%E6%B0%B8%E7%B6%9A%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0" rel="nofollow" title="" class="ext-link">永続データ構造</a>なのです。</p><p>永続データ構造の簡単な例は、<a href="https://ja.wikipedia.org/wiki/%E9%80%A3%E7%B5%90%E3%83%AA%E3%82%B9%E3%83%88" rel="nofollow" title="" class="ext-link">連結リスト</a>です。リストの最後まで参照し続けるだけだと思ってください。2つのリストを比較する場合は、その最後が参照に関して等しいかどうかを最初に見ることができます。もし2つが等しいならば、これは素晴らしい近道です。この確認が終われば、2つのリストは同じものです。もしそうでなければ、各リストのアイテムについてくまなく、繰り返し値が同じかどうかの確認を始めなければいけません。このリストに効率よく新しい値を加えるには、メモリの新しいセットにそのリストを丸ごとコピーする代わりに、新しいノードのリンクを単に追加して、新しい先端の参照を追跡すればいいのです。このことにより、新しいデータ構造の中の以前のデータ構造と、新しい参照とを構造的に共有して、以前のデータ構造も持ち続けることができます。このような不変データを変換させるためのデータ構造を一般化したものを<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie" rel="nofollow" title="" class="ext-link">ハッシュ配列マップトライ</a>（HAMT）と呼んでいます。これはまさに<a href="https://facebook.github.io/immutable-js/" rel="nofollow" title="" class="ext-link">Immutable.js</a>や<a href="https://github.com/swannodette/mori" rel="nofollow" title="" class="ext-link">Mori.js</a>で行うことです。ClojureScriptとHaskellではコンパイラに組み込み済みですが、もうElmに実装されたどうかについては確信が持てません。</p><p>不変データ構造を用いれば、パフォーマンスの向上が得られ、整合性の維持に役立ちます。<a href="http://facebook.github.io/react/" rel="nofollow" title="" class="ext-link">React</a>は「<em>propsとstate</em>は常に不変なので、不必要なレンダリングをするより先に、以前の<em>propsとstate</em>が参照に関して次の<em>propsとstate</em>と等しいかどうかという照合が効率的に可能である」と仮定しています。また他の状況では、不変データを用いることで、知らないうちに値が変わらないことを保証するのに単純に役立ちます。</p>
