<p><a href="https://github.com/keon/awesome-bits" rel="nofollow" title="" class="ext-link">awesome-bits</a> by <a href="https://github.com/keonkim" rel="nofollow" title="" class="ext-link">Keon Kim</a></p><p>精選したビット演算の一覧および技です。<br>
<a href="https://github.com/keonkim" rel="nofollow" title="" class="ext-link">Keon Kim</a>が管理しています。お気軽に<a href="https://github.com/keonkim/awesome-bits/pulls" rel="nofollow" title="" class="ext-link">プルリクエスト</a>を送ってください。</p><p><em>JavaScriptよりも35%処速が速くなります。</em></p><p>下記に挙げるのは、<a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root" rel="nofollow" title="" class="ext-link">平方根の逆数を高速で求める方法</a>に触発されてできた手法です。これらのほとんどは独自の手法です。</p><p>浮動小数点をビット配列に変換（unsigned uint32_t）</p><p><em>注意：共用体を介した型のプルーニングはC++で定義されていませんので、代わりに<code>std::memcpy</code>を使ってください。</em></p><p><em><code>frexp</code>は値を2のn乗で分解するため、<code>man, exp = frexp(x)</code>はman * 2exp = x and 0.5 &lt;= man &lt; 1になります。</em></p><p><em>注意：<code>frexp</code>を使用するとman+125によって最後の8ビットを上書きして仮数の最初の16ビットを格納するため、最大2から16の相対誤差を持ちます。</em></p><p><em>注意：代わりに上記の<code>i2f</code>関数と<code>2i</code>関数を使用しています。</em></p><p><a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root#A_worked_example" rel="nofollow" title="" class="ext-link">Wikipediaの記載</a>を参照してください。</p><p>導出については、<a href="http://www.phailed.me/2012/08/somewhat-fast-square-root/" rel="nofollow" title="" class="ext-link">こちらのブログ記事</a>をご覧ください。</p><p><em>注意：<code>0x5c416</code>のバイアスは この方法を用いるために設定されたものです。exp = -0.5を代入する場合、このバイアスは平方根の逆数を高速で求める方法の定和である<code>0x5f3759df</code>になります。</em></p><p>この方法の導出については<a href="http://www.bullshitmath.lol/FastRoot.slides.html" rel="nofollow" title="" class="ext-link">こちらの一連のスライド</a>をご覧ください。</p><p>一連のnの数値の幾何平均はそれらの積のn乗根です。</p><p>導出については<a href="https://github.com/leegao/float-hacks#geometric-mean-1" rel="nofollow" title="" class="ext-link">こちら</a>をご覧ください。</p><p><em>注意：<code>0x66774</code>のバイアス項はこの方法を用いるために設定されたものです。最後に<code>ln(2)</code>を掛けているのは、この方法のその他の部分で<code>log2(x)</code>関数を計算しているためです。</em></p><p>導出は<a href="https://github.com/leegao/float-hacks#log-1" rel="nofollow" title="" class="ext-link">こちら</a>をご覧ください。</p><p><em>注意：ここでの<code>0x38aa22</code>のバイアス項は、基数の乗法スケールに対応します。特に、2Z= eのような<code>Z</code>に対応します。</em></p><p>導出は<a href="https://github.com/leegao/float-hacks#exp-1" rel="nofollow" title="" class="ext-link">こちら</a>をご覧ください。</p><p><em>注釈：対象がすでに小文字であっても、結果は常に小文字です。</em></p><p><em>注釈：対象がすでに大文字であっても結果は常に大文字です。</em></p><p><em>注釈：結果は1から26の範囲です。大文字か小文字かは重要ではありません。</em></p><p><em>注意：英語以外の文字を使用すると、正しい結果は得られません。</em></p>
