<p><a href="http://bluejekyll.github.io/blog/rust/dns/2016/08/21/a-year-of-rust-and-dns.html" rel="nofollow" title="" class="ext-link">A year of Rust and DNS</a> （2016-8-21） by <a href="https://twitter.com/benj_fry" rel="nofollow" title="" class="ext-link">Benjamin Fry</a></p><p><small>(注：2016/09/28、いただいたフィードバックを元に翻訳を修正いたしました。)</small></p><p><em>この記事は、RustやDNSの使い方を皆さんにお教えするためのものではありません。むしろ、私がDNSクライアント/サーバをRustで開発した時に面白いなと思った点について書く日記のようなものです。</em></p><p>約１年半前のことですが、私は史上最高とも言えるプログラミング言語と出会いました。それは私がGo言語を学んでいる最中のことでした。Goは学習していて楽しい言語で、Java出身の私は特にひとつの点を素晴らしいと評価しました。それは、シングルバイナリをコンパイルできるし、それをデプロイしたり実行するのも早くて簡単だという点です。正直言って、Goでプログラムを書いて初めて、C言語のスタティックバイナリをどれほど気に入っていたか気付いたのです。クラスパスはないし、デフォルトのメモリ設定をいじることもなく、デフォルトのガベージコレクタを変更する必要もありません。Goはとてもいい言語ですが、私にとってはいくつか問題がありました。ジェネリクスがなく、例外タイプや検査例外もなく、「ガベッジコレクタがついたC言語」を書いている気分になってしまいました（でも、Cよりは簡単ですし、メモリセーフという大きなボーナスもあります）。</p><p>それから、私はHacker Newsで<a href="https://www.rust-lang.org/en-US/" rel="nofollow" title="" class="ext-link">Rust</a>と呼ばれる新しい言語が話題になっているのを見かけ始めました。当時は1.0のリリースに向けていた時期でしたが、私が初めて試してみたのは0.8だったと思います。私は<a href="http://rustbyexample.com/" rel="nofollow" title="" class="ext-link">Rust by Example</a>に助けられながら、その言語を学び始めました。私は何かを書くたびに、古くて濁ったプログラミング知識の膜が自分の目からキレイに拭き取られていくのを感じました。その光を見てしまったら、この約束の地に降り立ってしまったら、もう引き返すことはできません。同僚たちは全員、私がするRustの話に飽き飽きしているようでした。ときどき自分が熱心なRust教徒の牧師になった気分になりました。しかし、この時点では私がRustで書いたもので、何か形になっていたものはまだありませんでした。</p><p><a href="https://www.isc.org/blogs/about-cve-2015-5477-an-error-in-handling-tkey-queries-can-cause-named-to-exit-with-a-require-assertion-failure/" rel="nofollow" title="" class="ext-link">CVE-2015-5477</a>がBIND9で発生しましたが、聞くところによるとかなりひどいもののようでした。少し調べてみると、私はすぐに納得しましたが、BINDの一番大きな問題は「Cで書かれていること」というのが明らかとなりました。バッファオーバーフローや、配列の範囲外へのアクセス、競合状態などです。時間があれば、<a href="https://kb.isc.org/category/74/0/10/Software-Products/BIND9/Security-Advisories/" rel="nofollow" title="" class="ext-link">全部のリスト</a>を見てみてください。このうちの大体50％ほどが、（安全な）Rustを使うことで避けられる問題だと私は思っています。BIND9は唯一のDNSサーバなのでしょうか？答えはノーです。しかし、最も広く利用されているのがBIND9なのです。</p><p>今までの話を聞いて「私がCを嫌っている」とお思いかもしれませんが、Cは私がおそらく一番気に入っている言語でもあるのです。純粋で、むきだしの力があります。しかし、デバッグに関しては苦労させられますし、次のような疑問がいつもついて回ります。「NULL終端されていないバッファで<code>strstr()</code>を呼び出したら、どうなるのだろうか？」と（そう、この疑問を追求するのはとても面白いはずですよ、Kevin G）。</p><p>ということで、私は取りかかりました。最初にガッカリするポイントは、仕様がないこと。あるのは1987年にまでさかのぼるRFCです。具体的には、<a href="https://tools.ietf.org/html/rfc1034" rel="nofollow" title="" class="ext-link">RFC 1034</a>と<a href="https://tools.ietf.org/html/rfc1035" rel="nofollow" title="" class="ext-link">RFC 1035</a>です。幸運にも、IETFがRFCの状況を記していますし（RFCのページの冒頭のカラーコーディング）、「このRFCを更新するRFC」「このRFCにより廃止されるRFC」といった前後への参照もあります。私の初めの仕事は、実装をしようと思っていたすべてのRFCを整理することでした（このリストはこの先、常に変わっていきます）。まずはRFC 1035から始めました。</p><p>そして、私がこの作業を始めたのは、本業の傍らでのことでした。ちなみに、私はまだ幼い子供が2人いて、仕事もフルタイムでやっています。私にとって「傍らで」何かすることは決して簡単なことではありません。1週間で6時間も作業ができればいいほうです。</p><p><a href="https://github.com/bluejekyll/trust-dns/commit/a3496cebf37c5e88bfbd4d7c5f036afe1d61cf6d#diff-04c6e90faac2675aa89e2176d2eec7d8" rel="nofollow" title="" class="ext-link">README.md</a>は以下のとおりです。</p><p>コミットは以下です。</p><p>RFC 1035の基本的なところを<em>ほぼ</em>終わらせるのに数週間かかりました。私が実際にRustに最初に感謝したのは、うまく定義された固定サイズの整数型、<code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code>でした。バイナリストリームを再度パースするのは本当に面白い作業でした。ここ10年ほどはJavaを使い続けていたのですが、Javaではビットシフトがこんなに直感的であると思いもしませんでした(Javaには符号付き整数型しかなかったので)。これはCに戻っているような感覚でした。DNSヘッダのパースの一例が以下です（この記事の書いている時点でのもの）。</p><p>これらの各動作で、それぞれの変数の各ビットに何が格納されているかを私は正確に把握しています。いくつか、まだ見直して変更を加え切れてないものもありますが、ビットをチェックするのに、この整数型のバイナリフォーマットを使うことに決めました。そのほうがより明確だと考えたからです（上記のコードに残っている16進数とは対照的です。そのうち整理しなきゃとは思うのですが、「壊れていないものを直すな」ってやつです）。</p><p>Rustにまだ馴染みのない人向けに言うと、<code>==</code>演算の結果はブーリアンなので、<code>recursion_available</code>の型が推論されます。また、私の命名が一見変なのは分かっていますが、それぞれの文字がビットを表しています。読み込んでいるビットフィールドを視覚的に理解するのに役に立っています。</p><p>このビットシフトの例が以下です。</p><p>この演算をJavaの32ビット限度でするとしたら、必要なのが<code>&gt;&gt;&gt;</code>か<code>&gt;&gt;</code>のどちらなのかを思い出すために、私は自分の頭をかいていたでしょう（実際、JUnitテストのほうが簡単でしょう）。私はその答えを知っていますが、みなさんは分かりますか？Rustでは、こんな疑問とは無縁です。上記のものを以下のように変更しました。こっちのほうが断然、分かりやすいと私は思います。</p><p>バイナリリテラルはJavaもちょうど1.7でサポートしたところですが、これも含めてRustの人間工学には素晴らしいものがあると言わざるを得ません。リテラルを<code>_</code>で区切って見やすくすることができるのも素晴らしいです。多くの人は、<code>let million = 1_000_000</code>のように、単に<code>,</code>の代わりに使うことが多いでしょう。上記のコードをもう少し詳細に分析すると、<code>into()</code>は<code>From</code>トレイトの<a href="https://github.com/bluejekyll/trust-dns/blob/7b271c468d9c3919d2015a5c75b21fa8503e8b29/src/op/op_code.rs" rel="nofollow" title="" class="ext-link">実装</a>からの機能なのです。</p><p>上記のコードは、整数型でのマッチングやDNSの<code>OpCode</code>列挙型への変換の基本的な使い方を示しています。注意したいのは<code>panic!</code>です。そうです、これは論理的なバグです。これはちょうど<a href="https://github.com/bluejekyll/trust-dns/issues/36" rel="nofollow" title="" class="ext-link">Issue</a>としてまとめたところでした。基本的には、この<code>panic!</code>は、誰かが正しくないOpCodeを送ってきた時に、サーバをクラッシュさせてしまいます。これには重要なポイントがはらんでいます。</p><p>Rustはメモリリーク<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>と、並行性に関するバグの一部、その他のバグを回避します。特効薬というわけではなさそうですが、メモリアクセス問題に煩わされる必要はなくなるでしょうか？ヌルポインタのデリファレンスは？メモリリーク<sup id="fnref2:1"><a href="#fn:1" class="footnote-ref">1</a></sup>は？Javaを使い始めた頃には、そうするだけの理由がありました。しかし今ではシステムレベルプログラミングに、しかもJavaより安全が保障される言語で戻ってこられるのです。</p><p><code>panic!</code>は私がRustにおけるエラーに対して不安を感じていたころの名残りです。Rustで起こる例外処理の変更はそれ自体を単純化するものがあります。<a href="https://crates.io/crates/error-chain" rel="nofollow" title="" class="ext-link">エラーチェーン</a>は、とても簡素化されたエラー型の定義と<a href="https://github.com/bluejekyll/trust-dns/blob/ba8eee06d37e9ad633489ce0595835c5e59fac07/src/error/client_error.rs" rel="nofollow" title="" class="ext-link">例</a>です。私はコードパスで遭遇するだろう領域から全ての<code>panic!</code>を使ったケースを取り除けたと思いました。決して完璧とは言いませんでしたが！（この記事を書くことがバグを解明する助けとなったので、たとえ、この記事を読んでくれる人が誰もいなくても、意義はあったのです）。</p><p>Rustではエラーを無視することができません。Javaの検査例外と同じようなことです（ところで、私は「全ての例外はチェックされるべき」派です）。Rustはこの点においてJavaに似たプラクティスを用います。もしエラーの処理方法が分からないのであれば、再度スローします（Javaにおけるベストプラクティス）。私は上記の<code>From</code>を近いうちに書き換えるつもりですが、最も単純な形での例外処理を見てみましょう。</p><p>上記のコードは、デコーダのバイトストリームから次のu16を読み込みます。もちろん、これが失敗することもありえます。原因としては、「u16を読み込むのに十分なバイトが残されていない」「<code>TcpStream</code>によって返されて接続が失敗する」といったものが考えられます。しかし、このコンテキストでは、このようなエラーに対して何ができるでしょうか。実は何もできません。リカバーする方法はないので、再度スローします。これが<code>try!</code>の働きです。しかしRustではJavaほど単純ではありません。Rustは静的型付き言語です。この記事では例外処理に伴う弱点以外まで突っ込んでいく気はありません。例外処理については<a href="https://doc.rust-lang.org/book/error-handling.html" rel="nofollow" title="" class="ext-link">ここ</a>で詳しく学ぶことができます。</p><p>Rustは「<code>Result</code>型を通してエラーを伝播させるか、あるいは処理するように強制する」という賢い決断をしました。Rustは強く型付けされているため、エラーを返すような関数呼び出しはどれも、全ての内部の関数呼び出しを補償する必要があります。</p><p>上記の例では、必要なのは<code>read_u16()</code>から返された<code>DecodeError</code>を処理することだけです。しかし、<code>Client::query()</code>では、<a href="https://github.com/bluejekyll/trust-dns/blob/ba8eee06d37e9ad633489ce0595835c5e59fac07/src/error/client_error.rs" rel="nofollow" title="" class="ext-link">クライアントエラー</a>を返します。これはただの異なる型の共用体です。</p><p>Rustのenumは、むしろC言語の共用体に等しいので、型それ自体が大きくなることはありません。定義はそれぞれの付け加えられたエラーとともに拡張されます。<code>Client</code>は、明らかにメッセージの送受信という2つのオペレーションを実行するので、<code>DecodeError</code>または<code>EncodeError</code>の可能性がどうしても残ります。この問題を処理するオーバーヘッドは最初やっかいでしたが、問題の理解が進むにつれて、それほど大したものではなくなりました。そして、また<code>error_chain</code>によってさらに単純になったのです。</p><p>サーバコードと権限に関する何度かのイテレーションの後、ついに2015年の9月、完全に機能するDNSサーバとクライアントができました。しかし、それは私が目指すものではありませんでした。私が目指しているのは、個人的に楽しむためにDNSCryptを付け加えて、DNSSecを実装することでした。さらに、自慢できるようなダイナミックライブラリも目指していました。</p><p>この時、私はふと立ち止まって考えました。つまり、DNSSecはどのくらい難しいかと考えたのです。RFCについて色々と述べたことを覚えていますか？DNSSecは幾つかの改訂を経てきました。過去のRFCの残骸の痕跡は次のようにたどることができます。RFC2065（1997）はRFC2535（1999）へと改訂され、さらにRFC4033、RFC4034、RFC4035（2005）へと改訂されました。これらのRFCに対し、RFC6840（2013）において重要な明確化が行われました。私はその時は見逃しましたが最近修正をしたので、<a href="https://github.com/bluejekyll/trust-dns/issues/27" rel="nofollow" title="" class="ext-link">issue #27</a>を見てください。これは、以下の素晴らしい一節に起因するものです。</p><p>どういうことか分かりますか？誰もこの仕様を適切に実装しなかったので、今や「実装こそが仕様である」ということになってしまっているのです。これは本末転倒ではないでしょうか。</p><p>いずれにせよ、意外に難しいということにちょっと戻りましょう。多分、図にすると分かりやすいでしょう。</p><p><img src="http://bluejekyll.github.io/blog/assets/trust-dns-work.png" alt="Trust-DNS work history"><br>
<em>注釈：<br>
無我夢中の頂上（blindmans peak）<br>
絶望の穴（pit of dispair）<br>
破滅の谷（valley of doom）<br>
救いの頂上（saviors peak）</em></p><p><em>無我夢中の頂上</em>で、私は絶好調でした。Rustに夢中な私を止められるものは何もありませんでした。私は非同期IOライブラリ<code>mio</code>といったものへのサポートの追加を楽しんでいました（時間があれば<a href="https://aturon.github.io/blog/2016/08/11/futures/" rel="nofollow" title="" class="ext-link">futures</a>への移行も検討しています）。その後私は「DNSSecのサポートを追加する時だ」と決心しました。前述したRFCやその他のものを、何度も読み直しました。私は実装を始めましたが、「パースし、その後適切に認証する、という手順のためにRRSIGを導入する」ということができるように何度も試みるうち、やがて<em>絶望の穴</em>に落ち込みました。分かったことと言えば、RustのOpenSSL ポートにおいて<a href="https://github.com/sfackler/rust-openssl/commit/ef95223d2679d68b36df77393bd334d4da02077f" rel="nofollow" title="" class="ext-link">さらなるメソッド</a>が必要だということぐらいでした。それは、OpenSSLについて十分過ぎるほど学んだ後のことでした（本当に驚いたのですが、私はそこで見たものを忘れられません。Rustではなく、Cだったのです）。</p><p><em>絶望の穴</em>に落ち込んでいる間、私は次のような疑問を抱き、何度もあきらめようと思いました。「要点は何なのか？」、「世の中にDNSサーバはいくらでもある。Daniel Julius BernsteinのDNSサーバは堅実だ。私は本当に何か新しいことができるのだろうか？」、「これを使おうという人がいるのだろうか？」。私にはこれらの疑問に対するしっかりとした答えがありました。それは、最終的にこの実装を独自のものとするような答えであり、さらに、私がDNSにかねてから抱いていた課題に対する回答となるような機能を提供できるものでした。私は地道に取り組み、着々と前進しました。その後、私の署名ロジックはどれも適切に機能しないということが分かりました。このことで、私は<em>破滅の谷</em>に突き落とされました。自分に問いかけていた疑問は、どんどん大きくなるばかりでした。「時間のムダだからやめてしまえ」。しかし、どうしてやめられるでしょうか。ここまでたどり着いたのですから、最後までやり遂げなければなりません。前に戻ってDNSSecのRFCについて全て読み返す必要がありました。そして、どこで大失敗したのかを理解したのです。</p><p>その後、<em>救いの頂上</em>へと登っていきましたが、これは大変な道のりでした。ベイエリアのサイクリストにとっては、イーストベイのスリーベアーズを走ることに似ています。スリーベアーズにはベイビーベアーとママベアーという、きつい坂があります。更にパパベアーには偽ピークがあるため、登り切ったと思った後に、もう一度、最後の険しい道を登らなければ頂上にたどり着けません。それでも、下り坂を時速70キロ以上で走るスリルを楽しめると考えれば、頂上まで登る価値はあります。</p><p>私が驚かされ、しかも全ての言語が本来備えているべきだと思った機能は、単純な<code>#[test]</code>アノテーションでの埋め込みテストでした。これにより、テストバイナリを<code>cargo test</code>コマンドで生成できます。ほとんどの言語は、通常は<code>println!("hello world")</code>というコードを含む、単純な<code>main()</code>を書くところから始めますが、Rustではテストから始めるのが比較的容易です。私はおよそ84％のカバレッジを達成しており、さらに上げることもできます。しかし、<a href="https://coveralls.io/github/bluejekyll/trust-dns?branch=master" rel="nofollow" title="" class="ext-link">レポート</a>によると、検出されたバグはほとんど含まれているものの、統合テストでは、私が最近Travisで実行していない<code>cargo test -- --ignored</code>が含まれていませんでした。無料CIサービスのTCPサーバでは問題がありそうです。私は85～90％を大きく上回り過ぎるカバレッジをいいと思ったことはありません。収穫逓減が予想されるからです。Dijkstraは次のように述べています。</p><p>私が気に入っているのはサーバコード用のスレッドテストを書く機能です。Rustでは、私がJavaで行っていた方法に似たテストをもっと容易に行うことができます。</p><p>この部分を詳しく見てみると、2つのスレッドを生成しています。1つはクライアント用で、1つはサーバ用です。両方とも、使用中のソケットアドレスへのバインドに関する問題が発生しないよう、ランダムなローカルポートを使います。それから、サーバを起動します。次にサーバのランダムに割り当てられたポートを新しいクライアントに渡し、クライアントのスレッドを生成し始めます。テストでは<code>unwrap()</code>と<code>panic!</code>が、ほぼ完璧といえるほど機能していることが分かります。サーバスレッドは極めて単純です。</p><p>数年前、分散システムのために似たようなテストをJavaで書いてみました。しかし、私がJavaで好きに使っていた初期のテストよりも、こっちの方がずっと簡単です。以下がこのテストの要であるクライアントスレッドです。</p><p>お気づきかと思いますが、関数が<code>ClientConnection</code>型のジェネリクスとして宣言されており、TCPとUDPの両方のクライアントで機能するモノモーフィックな関数を呼び出すことができます。つまり、1つのテストでTCPとUDPのサーバとクライアントの両方をテストできるということです。一例としてここにコードをご紹介しますが、残りは<a href="https://github.com/bluejekyll/trust-dns/blob/26b44483b0151682a7d835ddbd6ff9261c0651b6/CHANGELOG.md" rel="nofollow" title="" class="ext-link">server.rs</a>のソースでご確認ください。</p><p><code>Name::with_labels()</code>呼び出しが少し使いにくいように見える、というのは自分で分かっています。それをすっきりさせたいのですが、私が試したいStringのinternに関する幾つかの考えをまだ決めかねているのです。実際、<code>Name</code>におけるラベルの実装は、「Rustにガベージコレクションがあれば」と思った極めて数少ない箇所の1つです。この願望は、internを実行する良い方法をが得られれば解消するかもしれません。</p><p>Trust-DNSは（私の知る限り）現在実用されていません。現在起こっていることの正当性の検証に多くの労力を注いでおり、<a href="https://github.com/bluejekyll/trust-dns/graphs/contributors" rel="nofollow" title="" class="ext-link">支援</a>を受け続けています。さらなる支援は、いつでも歓迎します。実際にTrust-DNSに対して繰り返し攻撃を生成するために、実行型のDNSファザーを手に入れたいと思っています。そして、ベンチマークを取得して、他のサーバとの比較テストもしたいと考えています。</p><p>私が誇りに思うことは、DNSSecのサポート、クライアントサイドのバリデーション、ローカルキーでのゾーン署名です。サーバもクライアントも、SIG0のバリデーションと認証を有する動的DNSをサポートしています。サーバではSQLiteでジャーナリングをサポートしています。また、512バイトを超えるUDPのパケット（デフォルトでは1500バイト）に対してEDNSをサポートしています。</p><p>私は、今、DNSCrypt<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>に取り組んでいるところです。そして、私はもう少し面白そうなアイデアに向かっています。この探究がこんなに長くなるとは、全く想像もしませんでした。しかし、たった今始まったばかりです。そして、とても素晴らしい言語を学ぶのに加えて、それは非常に価値のあることです。Rustを完成させることに多くの時間を費やしてくれた皆さんに感謝します。私にとってのプログラミングの楽しみに新な活気を吹き込んでくれたのは、Rustのエコシステムなのです。</p><p>（進捗状況は定期的に投稿するつもりです）</p>
