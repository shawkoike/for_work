<p><a href="https://uxplanet.org/how-to-make-users-think-your-app-loads-faster-24052fe307bf#.30akucd1s" rel="nofollow" title="" class="ext-link">How To Make Users Think Your App Loads Faster</a> （2016-02-28） by <a href="http://babich.biz/" rel="nofollow" title="" class="ext-link">Nick Babich</a></p><p>ソフトウェアを設計する際、アプリを端末に読み込む速度を変えることについて、シミュレートする手段はありません。従ってアプリのコンテンツが画面に表示されるまで、ユーザが延々と待たなければならなかったとしても、その原因は必ずしも設計だとは限りません。</p><p>さらに、インターネットの通信速度は保証されているわけではありません。画像や音楽などをダウンロードしていると、通信速度が著しく低下することがあります。こんな時のために、ユーザに不満を抱かせず、退屈させない方法を考えておく必要があります。</p><p>スピナーを表示するのは、コンテンツの読み込み処理や演算処理の最中であることを表すのに適切な方法ではありません。デフォルトでアイコンを読み込むのは（例えば中心からグレーの輪が広がるiOSのスピナーのように）、ユーザによくない印象を与える傾向にあります。スピナーは、デバイスのブート（起動）に始まり、ネットワーク接続やデータ読み込みの問題に至るまで、オペレーティングシステム（OS）の機能の状態を表現する、あらゆる場面で利用されています。</p><p><img class="graf-image" data-image-id="1*FitgbgGgfhjTVIrDoOmQOQ.gif" data-width="717" data-height="355" data-action="zoom" data-action-value="1*FitgbgGgfhjTVIrDoOmQOQ.gif" src="https://cdn-images-1.medium.com/max/1200/1*FitgbgGgfhjTVIrDoOmQOQ.gif"><br>
スピナーを思いっきり表示している<strong>Adesblog</strong></p><p>そのため、スピナーが読み込まれるのを見るだけで、「ああ何の進展もないのか」と受け取ってがっかりする人もいます。せっかく自分のサイトにアクセスしてきたユーザに、棒グラフや車輪の回転を見せつけているのが原因で、そのサイトの直帰率が上がっている可能性があります。</p><p>待ち時間の終わりが分からずに待つのは、期限が分かっていて待つよりもずっと長く感じます。だからユーザには、あとどのぐらい待つのかをはっきりと示すべきです。進行状況を示し、信頼性が高くかつ有意義なUXをユーザに提供することで、<em>処理の透明性</em>を確保する設計を実行してください。<em>プログレスバー</em>を使って、コンテンツの読み込みが自然に行われている雰囲気を演出してみましょう。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1200/1*L--PZVptC42tnL4R0ZTM1g.jpeg" src="https://cdn-images-1.medium.com/max/1200/1*L--PZVptC42tnL4R0ZTM1g.jpeg"><br>
プログレスバーを独創的なデザインにすると、進捗状況をユーザに知らせるだけでなく、 ユーザの待つ辛さを軽減することもできます</p><p>プログレスバーは、ユーザに残りの待ち時間を提示することになっていますが、その表示は必ずしも正確ではありません。プログレスバーの表示が実際の進捗に対して遅れる場合でも、その遅れが多少であれば、一定のペース（処理開始直後は速く進めて、終わりに近づくに従ってペースを落とすようにする）で表示を変化させ続けることで、ごまかすことができます。プログレスバーの表示が止まるのは、<em>あってはならない</em>ことです。仮に止まったとすると、ユーザはそれを見て、アプリ自体がフリーズしたと誤解するからです。</p><p>バックグラウンドで実行するように処理を詰め込むことには、2つのメリットがあります。1つはユーザからは見えないところで処理を進めること、もう1つは、ユーザがその処理を要求する操作をする<em>前に</em>、先取りして実行しておけることです。バックグラウンドで1つの処理を進めている間、ユーザには<em>別のことに気が向くような何か</em>を提供してください。良い例として、Instagramで写真をアップロードする際の処理が挙げられます。アップロード処理は、実際にはユーザが共有したい写真を選択した瞬間から開始しています。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1200/1*mYqgKMjqrtAvIBCEaCr5oA.png" src="https://cdn-images-1.medium.com/max/1200/1*mYqgKMjqrtAvIBCEaCr5oA.png"><br>
iOS版<strong>Instagramアプリ</strong>のシェア画面</p><p>Instagramでは、画像のアップロード中にバックグラウンドで題名やタグを追加するよう促します。ユーザがシェアボタンを押す準備ができた頃にはアップロードは完了し<em>即座</em>に画像を共有できるのです。</p><p>アプリ作成の際、待ち時間をどうしても短縮できない場合は、せめて快適に待てるようにしてください。この待ち時間は一時的に情報を提供するのに適しています。この時にユーザの気が散らないようにテキストのダミーコンテンツや画像のプレースホルダを使ってください。使える技をいくつか挙げてみます。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1200/1*KTc2GR_kc-c6l4aAq2xyIw.jpeg" src="https://cdn-images-1.medium.com/max/1200/1*KTc2GR_kc-c6l4aAq2xyIw.jpeg"><br>
iOS用<strong>Facebook</strong>アプリ</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1200/1*y5l6VyorKG3qbx1Mms9jeg.png" src="https://cdn-images-1.medium.com/max/1200/1*y5l6VyorKG3qbx1Mms9jeg.png"><br>
<strong>Medium</strong>アプリで画像読み込みの際に使われるプレースホルダ</p><p>プレースホルダやダミーコンテンツを使用することが読み込みを加速することにはなりませんが、ユーザには速く感じてもらえるでしょう。</p><p>待ち時間にユーザが<em>退屈しない</em>ようにするには、気をそらしてあげてください。アプリの読み込み中に気が紛れるような楽しいことでも思いもよらないことでもなんでもいいのです。</p><p><img class="graf-image" data-image-id="1*6bwIrJNO6fBC_oOcAFDsVA.gif" data-width="800" data-height="600" data-action="zoom" data-action-value="1*6bwIrJNO6fBC_oOcAFDsVA.gif" src="https://cdn-images-1.medium.com/max/1200/1*6bwIrJNO6fBC_oOcAFDsVA.gif"><br>
アニメーション検索</p><p>アニメーションは気が紛れ、読み込みに時間がかかってもユーザは気にならなくなるでしょう。</p><p>ユーザはコンテンツのために待つのを嫌います。しかし、あたかも待っていないかのように思わせれば、あなたのアプリを楽しんでもらえるでしょう。ユーザに実際の待ち時間より短いと思わせてあげてください。</p><p>追伸：これについて書かれたとても良い記事があります。<a href="https://medium.com/@mandrigin/ios-app-performance-instruments-beyond-48fe7b7cdf2#.2h5q0e7oq" rel="nofollow" title="" class="ext-link">iOS App Performance: Instruments &amp; beyond</a>（iOSアプリのパフォーマンス　instrumentsなどを使用して向上を図る）</p><p><em>この記事は<a href="http://babich.biz/how-to-make-users-think-your-app-loads-faster/" rel="nofollow" title="" class="ext-link">babich.biz</a>で最初に掲載されたものです。</em></p>
