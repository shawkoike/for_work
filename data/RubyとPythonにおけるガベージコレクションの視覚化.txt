<p><a href="http://blog.codeship.com/visualizing-garbage-collection-ruby-python/" rel="nofollow" title="" class="ext-link">Visualizing Garbage Collection in Ruby and Python</a> （2015-07-06） by <a href="http://patshaughnessy.net/" rel="nofollow" title="" class="ext-link">Pat Shaughnessy</a></p><p><em>本稿は、ブダペストで開かれたイベント「<a href="http://13.rupy.eu/" rel="nofollow" title="" class="ext-link">RuPy</a>」で、Pat Shaughnessyが披露したプレゼンの内容をまとめたものです。<a href="https://www.youtube.com/watch?v=qzEekAnAS_g" rel="nofollow" title="" class="ext-link">プレゼンの映像はここ</a>から視聴できます。 本稿は当初、<a href="http://patshaughnessy.net/2013/10/24/visualizing-garbage-collection-in-ruby-and-python" rel="nofollow" title="" class="ext-link">同氏の個人ブログ</a>に投稿されましたが、同氏の了承を得て、Codeshipに再掲載します。</em></p><p>このイベントは「RubyとPython」に関するカンファレンスなので、RubyとPythonでは、ガベージコレクション（以下「GC」）の動作がどう違うのかを比較すると面白いだろうと私は思いました。</p><p>ただしその本題に入る前に、そもそもなぜ、GCを取り上げるのかについてお話しします。正直言って、すごく魅力的な、わくわくするテーマではないですよね？　皆さんの中でGCと聞いて、心がときめいた方はいらっしゃいますか？　［実はこのカンファレンス出席者の中で、ここで手を挙げた人は数名いました！］</p><p>Rubyコミュニティで最近、RubyのGC設定を変更すると、単体テストの速度が向上するというブログ記事を見かけました。素晴らしいことだと思います。テストの実行速度が上がったり、アプリケーションの実行中にGCのために処理が一時停止する回数が減ったりするのは、いいことには違いないのですが、なぜか私にとっては、GCはあまり心ひかれるものがありませんでした。一見、退屈で無味乾燥な技術というイメージがあるからです。</p><p>でも実は、ガベージコレクションは魅力的なトピックです。GCアルゴリズムは、コンピュータ科学の歴史の中で重要な位置を占めているだけでなく、最先端の研究テーマでもあります。例えば、MRI Rubyで使われているMark and Sweepアルゴリズムは50年以上前からあるのに対して、Rubyの実装の一種であるRubiniusで採用しているGCアルゴリズムはごく最近、2008年に発明されたものです。</p><p>にもかかわらず、「ガベージコレクション」という名前のために、誤解を受けている部分があります。</p><p>GCシステムの役割は、単なる「ガベージコレクション（＝ごみ集め）」にとどまりません。実は、3つの重要なタスクを実行しています。そのタスクを以下に挙げます。</p><p>ここで、アプリケーションを人体だと考えましょう。アプリケーションのために書かれた洗練されたコード、ビジネスロジック、アルゴリズムは全部まとめて脳、すなわちアプリケーションのインテリジェンス（知性）に当たるでしょう。</p><p>この例えで言えば、GCはどの器官に当てはまると、皆さんは思いますか？　［ここでRuPyの参加者からは「腎臓」「白血球」など、面白い回答が次々に寄せられました］</p><p>私は、GCこそアプリケーションの命の鼓動を刻む心臓だと思います。心臓が血液と栄養を体内の隅々まで送り届けるのと同様に、ガベージコレクタも、アプリケーションが使用するメモリとオブジェクトを供給するからです。</p><p>もし心臓の拍動が止まったら、人間は数秒で死に至ります。仮にガベージコレクタが停止したり実行速度が極端に落ちたりすると、これは動脈が詰まるようなものですから、アプリケーション自体の実行速度が落ちて、結果的にはアプリケーションが停止する場合すらあります。</p><p>実例を使って理論をじっくりと理解するのは、どんな場合にも有用なアプローチです。従ってここでも簡単なクラスを使って、PythonとRubyで書かれたコードを取り上げて考えます。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/code.png" alt="code" width="600" height="239" class="aligncenter size-full wp-image-2037"></p><p>ところで、RubyとPythonのコードを比べるとこんなに似ているという点に、私は驚きました。RubyとPythonは、同一の処理に対するコードの記述方法は、ほんの少ししか違いがありません。しかし、それぞれの言語の内部処理の方法も、コードと同様に非常に似ているのでしょうか。</p><p>上記の例で<strong>Node.new(1)</strong>を呼び出した時、Rubyは厳密に言うとどんな動作をするのでしょうか。Rubyは新しいオブジェクトを作成する時、どのように処理を進めるのでしょう。</p><p>驚いたことに、ほとんど何もしていません。実際には、コードの実行を始めるずっと前に、Rubyは前もって何千ものオブジェクトを作成し、連結リスト上に配置します。この連結リストをfreelistといいます。以下の図は、freelistの概念的なイメージを示したものです。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/free-list1.png" alt="free-list1" width="600" height="42" class="aligncenter size-full wp-image-2038"><br>
上記の図で白い四角は、Rubyが事前に作成したオブジェクトで、未使用のものを示しています。Node.newを呼び出すと、Rubyは単純に、その中からオブジェクトを1つ取り出して、コードに渡します。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/free-list2.png" alt="free-list2" width="613" height="225" class="aligncenter size-full wp-image-2039"><br>
左端の四角がグレーになっているのは、コードで使用するために、Rubyがアクティブにしたオブジェクトを示しています。残りの白い四角は、未使用のオブジェクトです。この図はもちろん、説明のために実際の状況をかなり簡素化しています。実際には、Rubyはもう1つのオブジェクトを使って、文字列「ABC」を保持し、3番目のオブジェクトも使ってnodeのクラス定義を保持し、さらに他のオブジェクトも使って、コードの解析結果、抽象構文木（AST）の内容などを保持します。</p><p><strong>Node.new</strong>を再び呼び出すと、Rubyは単純に、別のオブジェクトをコードに渡します。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/free-list3.png" alt="free-list3" width="613" height="226" class="aligncenter size-full wp-image-2040"></p><p>事前に作成したオブジェクトの連結リストを利用する、この簡素なアルゴリズムは、コンピュータ科学者の間では伝説となっているJohn McCarthyがLISPの最初の実装に取り組む中で、50年以上前に発明したものです。</p><p>LISPは最初の関数型プログラミング言語であっただけではなく、コンピュータ科学を大きく進歩させた画期的な要素が幾つも含まれていました。</p><p>ガベージコレクションを利用して、アプリケーションのメモリを自動的に管理するという概念もその1つです。</p><p>Rubyの標準バージョンは、「MatzのRubyインタープリタ」（MRI）という別名もありますが、これには、John McCarthyが1960年に作成したLISPの実装で採用されているものとよく似たGCアルゴリズムが使われています。つまり良くも悪くも、Rubyは53年間、同じGCアルゴリズムを使い続けています。LISPと同じように、Rubyもオブジェクトをコードの実行前に作成して、コードで新しいオブジェクトや値を割り当てると、そのオブジェクトをコードに渡します。</p><p>ここまでは、Rubyはオブジェクトをコードの実行前に作成して、freelistに保存するというところを皆さんと一緒に見てきました。ではPythonはどうでしょう。</p><p>Pythonも様々な理由（リストなど特定のオブジェクトを再利用する）から、内部でfreelistを利用していますが、新規のオブジェクトや値をメモリに割り当てる通常の方法は、Rubyとは異なります。</p><p>ここでは、Pythonでnodeオブジェクトを作成する場合を考えます。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/python1.png" alt="python1" width="247" height="211" class="aligncenter size-full wp-image-2042"><br>
コード側でオブジェクトを新規作成すると、PythonはRubyと違って、オペレーティングシステム（OS）に対して、直接メモリを要求します。（実はPythonでは、OSヒープの上層に抽象化レイヤを追加して、メモリ割り当てシステムを自前で実装しています。ただし今回は時間の都合で、この点について詳しい説明はしません。）</p><p>2つ目のオブジェクトを作成すると、Pythonは再び、OSにメモリの割り当てを増やすように要求します。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/python2.png" alt="python2" width="247" height="211" class="aligncenter size-full wp-image-2043"><br>
この動作も十分シンプルに見えます。オブジェクトを作成する瞬間にPythonは時間を取って、コードが使用するメモリを見つけて割り当てます。</p><p>Rubyに話を戻します。</p><p>Ruby では、コードが次々とオブジェクトを割り当てると、freelistのオブジェクトが使用されます。そのため、freelistは下記のように短くなります。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/free-list4.png" alt="free-list4" width="615" height="211" class="aligncenter size-full wp-image-2045"></p><p>さらに短くなると下記になります。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/free-list5.png" alt="free-list5" width="607" height="214" class="aligncenter size-full wp-image-2046"><br>
Rubyでn1に新たな値を指定すると古い値はそのまま放置されます。Node ABCやJKL、MNOはメモリに残ります。Rubyではコード内にある使用しない古いオブジェクトをすぐに一掃しません。</p><p>Rubyの開発者からみると、まるで洋服が床に落ちていたり、食器が流しに溜まっていたりする、整頓されていない家に住んでいるようなものです。Rubyで開発する場合、未使用のガベージオブジェクトが存在する環境での作業を強いられます。</p><p>PythonではGCは異なる動作をします。先ほどの3つのPythonのnodeを使ってみましょう。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/python3b.png" alt="python3b" width="225" height="162" class="aligncenter size-full wp-image-2048"><br>
Pythonでオブジェクトを作成すると、Cの構造体の内部に参照カウントと呼ばれる整数が保存されます。ここで設定される参照カウントの初期値は1です。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/python4.png" alt="python4" width="225" height="162" class="aligncenter size-full wp-image-2049"><br>
参照カウントに設定されている値が1のとき、ここでは下記の3つのオブジェクト全てに対して、ポインタまたは参照が1つずつ設定されていることを意味します。この状況で新しいnode JKLを作成すると仮定します。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/python5.png" alt="python5" width="301" height="210" class="aligncenter size-full wp-image-2050"><br>
新しいnode JKLを作成すると、前回オブジェクトを作成したときと同様に、JKLへの参照カウントも1に設定されます。ただしここで、<strong>n1</strong>が指す参照先がABCからDEFに変更されたことに注目してください。従って、ABCの参照カウントが0になります。</p><p>この時、PythonではGCが起動されます。オブジェクトの参照カウントが0になると直ちにオブジェクトへの参照を解放し、メモリ領域をOSに返します。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/python6.png" alt="python6" width="301" height="210" class="aligncenter size-full wp-image-2051"><br>
Pythonでは、node ABCが使用していたメモリ領域を取り戻します。Rubyでは、古いオブジェクトを放置したまま、メモリ領域を解放しません。</p><p>このGCアルゴリズムは<em>参照カウント</em>と呼ばれています。1960年にGeorge Collinsによって発明されたものです。偶然ではないのですが同年に、John McCarthyがfreelistアルゴリズムを発明しました。</p><p><a href="https://twitter.com/mrb_bk" rel="nofollow" title="" class="ext-link">Mike Bernstein</a>が、<a href="http://goruco.com/" rel="nofollow" title="" class="ext-link">Gotham Ruby Conference</a>での素晴らしい<a href="http://confreaks.tv/videos/goruco2013-to-know-a-garbage-collector" rel="nofollow" title="" class="ext-link">GCのプレゼン</a> で述べたように、「1960年はGCの当たり年でした」。</p><p>Pythonの開発者はまるで、散らかるとすぐに片付けてくれるルームメートのいる整理整頓された家に住んでいるようなものです。使用済みの皿やコップを置いた途端に、誰かが食洗機に入れてくれるような感じです。</p><p>次の例では、<strong>n2</strong>が<strong>n1</strong>と同じnodeを参照するように設定します。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/python8.png" alt="python8" width="223" height="297" class="aligncenter size-full wp-image-2052"><br>
DEFの参照カウントがデクリメントされ、node DEFはGCとして処理されます。ここでは、<strong>n1</strong>と<strong>n2</strong>の両方のポインタがJKLを指しているため、JKLへの参照カウントは2になります。</p><p>散らかった家はいずれごみでいっぱいになり、普通の生活に支障をきたすことになります。Rubyでプログラムの実行を続けると、やがてfreelistを使い切ってしまいます。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/mark-and-sweep1.png" alt="mark-and-sweep1" width="604" height="135" class="aligncenter size-full wp-image-2053"><br>
Rubyが事前に作成しておいたオブジェクトをアプリケーションが全て使い切ったので（四角が全てグレー）、freelistにはオブジェクト（白い四角）が残っていません。</p><p>このとき、RubyではMcCarthyが発明したMark and Sweepという別のアルゴリズムが使われます。まず、Rubyは「stop the world」方式を使用してアプリケーションの実行を止めます。次にRubyは、ポインタ、変数、コード側でオブジェクトやそれ以外の値を指すように指定した参照の全てに対して、「stop the world」処理をループで反復します。また、仮想マシンが使用している内部ポインタに対しても、同じ処理を繰り返します。そして、現在使用しているポインタが指している各オブジェクトにマーク（<em>mark</em>）を付けます。下記では、そのマークを付けられたオブジェクトをMとしました。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/mark-and-sweep2.png" alt="mark-and-sweep2" width="601" height="165" class="aligncenter size-full wp-image-2054"></p><p>「M」の付いた３つのオブジェクトは生きています。アプリによって使用されているアクティブなオブジェクトです。Rubyは、内部的にどのオブジェクトがマークされていて、どのオブジェクトがマークされていないかを<em>フリービットマップ</em>で管理しています。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/mark-and-sweep3.png" alt="mark-and-sweep3" width="616" height="249" class="aligncenter size-full wp-image-2055"><br>
UNIXのコピーオンライトの最適化機能を最大に活用するため、Rubyはフリービットマップを別のメモリ領域に格納します。詳しく知りたい場合は、私の記事<a href="http://patshaughnessy.net/2012/3/23/why-you-should-be-excited-about-garbage-collection-in-ruby-2-0" rel="nofollow" title="" class="ext-link">「Why You Should Be Excited About Garbage Collection in Ruby 2.0.」</a>をお読みください。</p><p>マークされたオブジェクトが生きている場合、マークされていない残りのオブジェクトはごみとなります。つまり、コードでは使用していないということになります。下記では、ごみとなるオブジェクトを白い四角で表しています。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/mark-and-sweep4.png" alt="mark-and-sweep4" width="601" height="165" class="aligncenter size-full wp-image-2056"><br>
次に、Rubyは使用されていないごみであるオブジェクトをfreelistから<em>一掃(sweep)</em>します。</p><p><img src="http://blog.codeship.com/wp-content/uploads/2015/07/mark-and-sweep5.png" alt="mark-and-sweep5" width="601" height="285" class="aligncenter size-full wp-image-2057"></p><p>この内部処理はかなり高速で実行されます。Rubyは実際にオブジェクトをあちこちにコピーして回らず、内部ポインタを調整して新しい連結リストを作成するので、GCはfreelistに戻ることになります。</p><p>これで、次回オブジェクトを作成した時に、ごみオブジェクトだったものを未使用のオブジェクトとして、コード側に返すことが可能になります。Rubyでは、オブジェクトは生まれ変わり、何回でも復活することができます。</p><p>Mark and Sweepと参照カウント</p><p>一見、PythonのGCアルゴリズムはRubyのものより優れているように思えます。整理整頓した家に住めるのに、散らかった家に進んで住む人はいません。Pythonのアルゴリズムがあるのに、オブジェクトを一掃するたびにアプリを止めてしまうRubyをあえて使う理由はありません。</p><p>しかし、参照カウントは見た目ほど単純ではありません。参照カウントをGCアルゴリズムに採用しない言語がある理由は下記のとおりです。</p><p>次週、プレゼンの後半をまとめる予定です。Pythonがどう循環データ構造を処理するのか、Ruby2.1でGCがどう動作するのかを説明したいと思います。</p>
