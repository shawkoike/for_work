<p><a href="http://maori.geek.nz/post/vagrant_with_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x" rel="nofollow" title="" class="ext-link">Vagrant with Docker: How to set up Postgres, Elasticsearch and Redis on Mac OS X</a> (2014-07-02) by <a href="https://twitter.com/grahamjenson" rel="nofollow" title="" class="ext-link">Graham Jenson</a></p><p>しばらく<a href="https://www.docker.com/" rel="nofollow" title="" class="ext-link">Docker</a>の動向をチラチラとうかがっていたのですが、Dockerがどれだけすばらしいものであるかいうことを、みんなが話しているのを耳にしました。さらに、今どきの若者たちは<a href="http://techcrunch.com/2014/06/10/google-bets-big-on-docker-with-app-engine-integration-open-source-container-management-tool/" rel="nofollow" title="" class="ext-link">もうすでに</a><a href="http://aws.amazon.com/jp/about-aws/whats-new/2014/04/23/aws-elastic-beanstalk-adds-docker-support/" rel="nofollow" title="" class="ext-link">これを</a><a href="https://speakerdeck.com/teddziuba/docker-at-ebay" rel="nofollow" title="" class="ext-link">使っている</a>のだということも知りました。そこで私は、試しにDockerを自分の開発環境で動かしてみることにしました。ここでは、Mac OS Xで<a href="http://www.vagrantup.com/" rel="nofollow" title="" class="ext-link">Vagrant</a>を使い、Dockerコンテナとして<a href="http://www.postgresql.org/" rel="nofollow" title="" class="ext-link">Postgres</a>、<a href="http://www.elasticsearch.org/" rel="nofollow" title="" class="ext-link">Elasticsearch</a>、<a href="http://redis.io/" rel="nofollow" title="" class="ext-link">Redis</a>をセットアップする方法を説明します。</p><p>Dockerは内部のオペレーティングシステムからアプリケーションを切り離すために、軽量のコンテナを使用します。そしてアプリケーションを使用するために必要な特定のフォルダや、ポートのみをアクセス可能にする隔離ボックスにアプリケーションを入れます。</p><p>そうすることによって、コンテナは再利用や共有が可能になり、アプリケーションのセットアップと使用方法に関する知識ベースにもなるのです。<a href="https://registry.hub.docker.com/" rel="nofollow" title="" class="ext-link">Docker Hub</a>には、すでに15,000もの使用可能なコンテナが存在します。Dockerはショッピングカートのようなもので、アプリケーションを構築するために必要とするサービスを手に取って選んだら、あとはダウンロードして起動させるだけです。</p><p>DockerはOS Xでネイティブに作動するものではないので、Linuxカーネルと<a href="http://ja.wikipedia.org/wiki/LXC" rel="nofollow" title="" class="ext-link">LXC</a>（LinuXコンテナ）が必要です。もし私と同じようにOS Xをお使いの場合は、仮想化しなくてはいけません。</p><p>Dockerを起動させようとしている途中で、<a href="https://docs.docker.com/installation/mac/" rel="nofollow" title="" class="ext-link">ここ</a>で説明されている“簡単な”インストールを見つけました。これは<a href="https://docs.docker.com/installation/mac/" rel="nofollow" title="" class="ext-link">boot2docker</a>と呼ばれるツールを使います。<a href="https://www.virtualbox.org/" rel="nofollow" title="" class="ext-link">VirtualBox</a>のような仮想マシン上の薄いラッパのことです。</p><p>私はすぐに、このツールにはいくつか重要な問題点があることに気付きました。例えば<a href="https://github.com/boot2docker/boot2docker/issues/392" rel="nofollow" title="" class="ext-link">このように</a>、安定状態でDockerを使おうとすると、あらゆる進行が停止するのです。バーチャルウォールにこれ以上頭をぶつけるのはイヤで、他のソリューションを探すことにしました。</p><p>そしてついに、<a href="https://www.vagrantup.com/blog/feature-preview-vagrant-1-6-docker-dev-environments.html" rel="nofollow" title="" class="ext-link">Dockerのサポート</a>が組み込まれているVagrant 1.6を発見したのです。Vagrantは、VirtualBoxのような仮想化ソフトウェアを包む薄いラッパです。必要とする環境を記述するために宣言型であるRubyのDSLを使います。</p><p>私はこの仮想環境を定義する方法が好きです。なぜなら、もし何か失敗してもそれを破棄し、マシンをゴミだらけにする環境変数のような面倒なものを、大量に残すことなく新たにやり直すことができるからです。</p><p>まず、インストールしておく必要があるものを見てみましょう。<br>
[Homebrew]（http://brew.sh/）のインストール：</p><p>[Cask]（https://github.com/caskroom/homebrew-cask）のインストール：</p><p>VagrantとVirtualBoxのインストール：</p><p>Vagranfileは、Ruby　DSLを使って、必要な仮想マシン環境を構築します。Dockerコンテナを使う場合、Vagrantは各コンテナを仮想マシンのように見せます。<b>しかし、実際はそうではありません。</b>Dockerコンテナがプロキシ仮想マシン内で起動しているのです。</p><p>したがって、Vagrantfileは2つ必要となります。1つはプロキシ仮想マシン（<a href="http://docs.vagrantup.com/v2/provisioning/docker.html" rel="nofollow" title="" class="ext-link">プロビジョナ</a>）を定義するため、もう1つはDockerコンテナ（<a href="https://docs.vagrantup.com/v2/docker/basics.html" rel="nofollow" title="" class="ext-link">プロバイダ</a>）を定義するためです。</p><p>以下はVagrantfile.proxyと呼ばれるVagrantfileのプロキシです。</p><p>これには、<a href="https://vagrantcloud.com/hashicorp/precise64" rel="nofollow" title="" class="ext-link">hashicorp/precise64</a>のUbuntu 12.04 64bit版のプロキシVM用イメージを使用します。また、dockerを設定し、シェルを使ってdockerを起動します（説明は<a href="http://vimeo.com/93180496" rel="nofollow" title="" class="ext-link">ここ</a>）。</p><p>最後に、ポートフォワーディングを設定します。config.vm.networkを使って、Redis、Elasticsearch、PostgresのポートをプロキシVMからOS Xに転送します。</p><p>メインとなるVagrantfileは以下の通りです。</p><p>このファイルはRedis、Elasticsearch、Postgresの3つのコンテナを<a href="https://registry.hub.docker.com/u/dockerfile/redis/" rel="nofollow" title="" class="ext-link">dockerfile/redis</a>、<a href="https://registry.hub.docker.com/u/dockerfile/elasticsearch/" rel="nofollow" title="" class="ext-link">dockerfile/elasticsearch</a>、<a href="https://registry.hub.docker.com/u/paintedfox/postgresql/" rel="nofollow" title="" class="ext-link">paintedfox/postgresql</a>のイメージで定義します。</p><p>各ファイルは、プロキシVMファイルとしてvagrant_vagrantfileを定義し、同じプロキシ仮想マシン内のファイルをすべて起動させます。</p><p>RedisおよびPostgresの容量は、コンテナではなくプロキシVM内に保存される情報によって定義されます。したがって、コンテナが削除または更新されてもデータは消えません。次にすることとしては、これらのフォルダをプロキシVMからOS Xへ転送することがあげられますが、これは必ずしも必要なことではありません。</p><p>各コンテナのポートは、プロキシVMに転送するポートを定義します。このポートは、プロキシVMがOS Xに転送するポートと一致している必要があります。</p><p>Postgresコンテナは、サーバのセットアップに必要な環境変数も定義します。環境変数PGHOST=localhost PGUSER=root PGPASSWORD=abcdEF123456を設定することによって、これらの環境変数をOS XのPostgresサーバの初期設定として使用することができます。</p><p>Vagrantfileと同じディレクトリで次のコマンドを実行します</p><p>初回実行時、VagrantはプロキシVMをダウンロードして起動し、次にDockerコンテナをダウンロードして起動します。Vagrant実行時はいつもこの初回ダウンロードが行われ、2回目以降はダウンロード済みのイメージを再利用します。<br>
Dockerコンテナのステータスは以下のコマンドで確認できます</p><p>このコマンドを実行すると、以下のような内容が出力されます</p><p>Dockerコンテナが正しく稼働しているかを調べるには、RedisやPostgresnのクライアントやElasticsearchのcurlコマンドを使うことができます。redis-cliとpsqlでサーバへのアクセスを調べ、curl http://localhost:9200コマンドのレスポンスを確認すればよいのです。</p><p>プロキシVM（デバッグには大変便利です）にアクセスする場合は、vagrant global-statusコマンドを実行します。これによりプロキシを含むすべての仮想マシンを一覧表示できます。次にプロキシのIDを入力し、vagrant ssh <id>コマンドで呼び出します。手動でプロキシVMを変更することはお勧めしません。Chef（またはそれに類似した）スクリプトを使って変更するほうがよいでしょう。そうすればテストしやすく、分散可能になります。</id></p><p>仮想化を行う際、一番の気がかりは「どの程度の負荷がかかるのか」という点です。負荷を調べるために、私は <a href="https://github.com/pond" rel="nofollow" title="" class="ext-link">同僚</a>とともに、Postgresと ElasticsearchおよびRedisの徹底的なテストを行いました。同一環境のハードウェア上で、ネイティブにインストールされたソフトウェアを使うケースと、Dockerによるコンテナを使う異なるケースを設定しました。このテストで、ネイティブの場合は実行に2分、Dockerコンテナの場合は3分という結果が出ました。</p><p>負荷は期待していたほど小さくはありませんでしたが、悪い結果が出たわけではないのでよしとしましょう。結果はどうあれ、私は今後も開発においてDockerを使うつもりです。ただし、開発環境で起きる様々な問題を解決する万能薬としては、お勧めできません。</p><p>注：VagrantとDockerを組み合わせて使用する際の、その他の制限事項は<a href="https://github.com/fgrehm/docker-provider#limitations" rel="nofollow" title="" class="ext-link">こちら</a>をご覧ください。</p><p>Vagrantと Dockerの組み合わせについて、今後の方向性はまだ分かりません。しかし、こうして多彩な使用方法を見ると、他には一体どんな使い方ができるのだろうと、つい考えてしまいます。さらに言えば、Vagrantと Dockerの組み合わせは、これまでの仮想化に関する経験の中では最も面白いものです。そしてこの面白さこそが、プログラミングの醍醐味なのです。</p>
