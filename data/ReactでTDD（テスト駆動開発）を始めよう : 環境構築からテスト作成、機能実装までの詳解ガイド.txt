<p><a href="https://semaphoreci.com/community/tutorials/getting-started-with-tdd-in-react" rel="nofollow" title="" class="ext-link">Getting Started with TDD in React</a> （2016-05-25） by <a href="https://twitter.com/dceddia" rel="nofollow" title="" class="ext-link">Dave Ceddia</a></p><p>最小限の設定のTDD手法を使い、「何をテストすべきか？」から、よくある落とし穴の避け方まで、Reactコンポーネントをテストする方法を学びましょう。</p><p>まず、<a href="https://facebook.github.io/react/" rel="nofollow" title="" class="ext-link">React</a>を触ったことがあり、更にはいくつかのテストも書いた経験があるとしましょう。それでも、コンポーネントをどうテストするのが最善なのか、よく分からないかもしれません。どこから始めるのでしょう。具体的には何をテストすればよいのでしょうか。</p><p>いくつかのReactコンポーネントは簡潔過ぎて、そもそもテストが必要なのかすらはっきりしません。</p><p><a href="https://daveceddia.com/to-react-from-angular/" rel="nofollow" title="" class="ext-link">AngularからReactに乗り換えた</a>人なら、テストには愛憎のような思いがあるかもしれません。</p><p>確かに<a href="https://angularjs.org/" rel="nofollow" title="" class="ext-link">Angular</a>にはテストを支援するツールがたくさんありますが、同時にテストを書くのが難しくなる可能性があります。冗長ながら省略できない定型コードが多々ある上、<code>$digest</code>の呼び出しを忘れるとテストが当然パスすべきところで失敗する原因になるので、デバッグの時間がおびただしく増えてしまいます。</p><p>Reactのテストはそれよりも理解しやすく、Reactで行うTDDは、俊敏で高速な反復をキャプチャし、テストを楽しくします。</p><p>このチュートリアルではReactのみを中心に見ていきます。<a href="http://redux.js.org/" rel="nofollow" title="" class="ext-link">Redux</a>については述べません。エコシステムというのは<a href="https://github.com/gaearon/react-makes-you-sad" rel="nofollow" title="" class="ext-link">始めは押しつぶされそうになるほど巨大なトピック</a>なので、まずは小さく始めましょう。</p><p>何よりもまず、テスト環境が必要です。<a href="https://semaphoreci.com/community/tutorials/testing-react-components-with-enzyme-and-mocha" rel="nofollow" title="" class="ext-link">Testing React Components with Enzyme and Mocha（EnzymeとMochaでReactコンポーネントをテストする）</a>は、スタート地点として最適であり、プロセスを丁寧に説明してくれます。この記事を読んだなら、あるいは今読む時間があるなら、そこから始めましょう。</p><p>あるいは、とりあえず近道をとりたい場合は、次のステップを踏んでください。</p><p><a href="https://www.npmjs.com/package/quik" rel="nofollow" title="" class="ext-link">Quik</a>をインストールします。このパッケージがあれば、手動でビルドを設定することなく、即座に実行できます。ここではグローバルにインストールするため<code>-g</code>を使い、新規の<code>quik</code>コマンドがインストールされるようにします。</p><p>テストに、アサーションを作るためのライブラリが必要です。<a href="http://chaijs.com/" rel="nofollow" title="" class="ext-link">Chai</a>がよく知られています。さらに、スパイを設定するライブラリ、<a href="http://sinonjs.org/" rel="nofollow" title="" class="ext-link">Sinon</a>もインストールしましょう。また、<a href="https://ja.airbnb.com/" rel="nofollow" title="" class="ext-link">Airbnb</a>が作った、Reactコンポーネントテストのためのライブラリ、<a href="http://airbnb.io/enzyme/" rel="nofollow" title="" class="ext-link">Enzyme</a>、それからJavaScriptでブラウザDOMをシミュレートするライブラリ、<a href="https://github.com/tmpvar/jsdom" rel="nofollow" title="" class="ext-link">jsdom</a>もインストールします。</p><p>Enzymeは同位の依存パッケージとしてReactを必要とします。また<code>react-dom</code>と<code>react-addon-test-utils</code>も使いますので、インストールしましょう。</p><p><em>テストランナー</em>も要ります。これには、Mocha、Tape、Jasmineなどいくつか選択肢があります。Reactコミュニティでは<a href="https://mochajs.org/" rel="nofollow" title="" class="ext-link">Mocha</a>が人気を集めているので、それを使います。<code>mocha</code>コマンドを使用できるよう、グローバルにインストールしましょう。</p><p>テストファイルでは<a href="https://duckduckgo.com/?q=es6+cheat+sheet&amp;ia=cheatsheet&amp;iax=1" rel="nofollow" title="" class="ext-link">ES6</a>と<a href="https://facebook.github.io/react/docs/jsx-in-depth.html" rel="nofollow" title="" class="ext-link">JSX</a>を使いますので、Mochaが実行できるよう、テストをBabelで<em>変換</em>しなければなりません。そのために、<a href="https://babeljs.io/" rel="nofollow" title="" class="ext-link">Babel</a>とプリセットをいくつか（ES2015、ES6用の<code>es2015</code>と、JSX用の<code>react</code>）インストールします。</p><p>最後に、Babelにこれら2つのプリセットを使うよう指示する必要があります。これは<code>.babelrc</code>という名前のファイルに設定します。<code>.babelrc</code>ファイルを作成し、次のコードをペーストしてください。</p><p>波括弧を忘れずに。</p><p>もう1つ、フェイクのDOMを初期化する<code>setup.js</code>ファイルも必要です。<code>setup.js</code>ファイルを作成し、次のコードをペーストしましょう。</p><p>次に進む前に、環境の設定と機能をチェックするとよいでしょう。</p><p><strong>Mochaの動作のテスト</strong></p><p><code>components.spec.js</code>という名前のファイルを作成し、次のコードをペーストします。</p><p>そして、以下のとおりMochaを実行します。</p><p>これでテストにパスするはずです。エラーが出た場合は、上のステップに戻り、漏れがないか確認してください。</p><p><strong>Quikの機能のテスト</strong></p><p>Quikが正しく動くかどうかもテストしましょう。ファイル<code>index.js</code>を作成し、次のコードをペーストします。</p><p>それから、次のようにQuikを実行します。</p><p>ブラウザウィンドウに「Hi」というテキストが表示されるはずです。表示されない場合は、ブラウザを再度読み込むか、<code>quik</code>を再起動してください。</p><p>興味がある人のために、Quikが動く過程を述べます。Quikをインストールすると、独自のホットリロードWebpackビルドがバンドルされています。Quikは、呼び出された全てのプロジェクトにおいてこれを適用します。</p><p><code>quik</code>コマンドを実行すると、<code>index.js</code>ファイルを探し、それをアプリケーションのルートとして扱います。<code>index.js</code>ファイルは最低でも<code>ReactDOM.render()</code>を呼び出します。このファイル内に少しでも多くでも好きなだけ置いて、他のファイルを必要なだけ<code>import</code>しましょう。</p><p>それでは私たちの”商売道具”、Reactのコードをテストする時に使うライブラリとアプリケーションを見直してみましょう。</p><p><strong>Mocha</strong>はテストランナー、またはテストの”フレームワーク”です。ここに挙げるツールの中では、階層の最上位に位置します。Mochaには、テストファイルを探して読み込み、それを変換し、テストを構成する<code>describe</code>ブロックや<code>it</code>ブロックなどのテストコードそのものを実行するという役割があります。</p><p><strong>Chai</strong>はアサーションライブラリです。全てが正しく動作しているかを確認するためのテストで使う<code>expect</code>コールや<code>assert</code>コールなどを提供します。</p><p><strong>Sinon</strong>はスパイを作り出して検査するためのライブラリです。テスト中のコンポーネントだけにテストを集中させるために、スパイによって部分的な機能のモックやスタブを使うことが可能になります。</p><p><strong>Enzyme</strong>はReactコンポーネント上でレンダリングをしたり、アサーションを作ったりするためのライブラリです。ここに挙げたツールの中で、Reactに特化したツールはこれだけです。</p><p>これらのツールがどのように連携して機能するかを以下に示します。</p><p>これらのツールの役割は、テストを書き始めると、より明確になっていきます。</p><p>この記事の冒頭で、いくつかの動機づけについて述べました。なぜReactコンポーネントをテストし、更に重要な問題として、これらの一体何についてテストをする必要があるのでしょうか？</p><p>Reactコンポーネントはとてもシンプルな場合があります。そんなに単純ならテストなど必要ないのではないでしょうか。</p><p>それぞれのコンポーネントには、簡単なテストだとしても、テストをする価値が多かれ少なかれあります。一目で明らかかもしれませんが、それでも期待通りにコンポーネントが動いているという確信が得られますし、後で自信を持ってリファクタリングを行えます。</p><p>リファクタリングを行えるということは大切です。ユーザ名とメールアドレスをレンダリングするシンプルなコンポーネントのテストを行えば（一例として）、将来的に、コンポーネントをバラバラにしても、それぞれが正しく機能するという確信を持ってリファクタリングを行えます。</p><p>私たちが多用するテクニックは、<em>シャローレンダリング</em>です。</p><p>これは、コンポーネントをレンダリングする時に、第一階層の深さのコンポーネントだけをレンダリングする方法のことです。つまり、あるコンポーネントのみを”実行”し、その子は一つも”実行”しないということです。</p><p>例を挙げてみましょう。<code>name</code>と<code>age</code>を保持する<code>person</code>というオブジェクトがあるとします。こちらがpersonを表示するためのコンポーネントです。</p><p>シャローレンダリングを用いて実行すると、最終的に以下の要素が表示されます。<code>Name</code>と<code>Age</code>が全く変わっていない点に着目してください。これらの内部は評価されていません。</p><p>これに対し、フル（ディープ）レンダリングを実行すれば、Reactは<code>Name</code>と<code>Age</code>を評価し、以下のような要素が表示されるはずです。</p><p>シャローレンダリングを使うと、どのように子コンポーネントが実装されているかを気にする必要がなくなるため、シャローレンダリングはとても有効な方法です。”モック”に少し似ていますが、モックとは異なりシャローレンダリングはコストをかけず利用できます。また、DOMも不要となります。</p><p>この例では、どのように<code>Person</code>が動作するか、ということにテストを集中させることができます。<code>Person</code>の実装を<code>Name</code>や<code>Age</code>の動作と密接に結合させる必要はありません。</p><p>ディープレンダリングしたコンポーネントでテストを行い、ファーストネームだけだった<code>Name</code>の実装を”ラストネーム、ファーストネーム”に変えていたら、どうなっていたでしょうか。<code>Person</code>の実装が何も変わっていないにも関わらず、<code>Person</code>のテストはアップデートが必要となったでしょう。</p><p>これが、コンポーネントのテストにシャローレンダリングばかりを使う理由です。</p><p>最近行った入力処理を扱うテストの中で、コンポーネント全体のレンダリングが必要となる場合がいくつかありました。<code>jsdom</code>のインストールや、<code>setup.js</code>ファイルが必要なのはそのためです。</p><p><strong>必ずレンダリングされること</strong>最低限、コンポーネントがエラーを出さずに、確実にレンダリングされるようにします。JSXの構文エラーがなく、全ての変数が定義されていることなどを確認します。レンダリングされたアウトプットがnullではないことを確認する程度の簡単なことでしょう。</p><p><strong>アウトプットをテストする：</strong>上記の”レンダリングする”というステップは、”正しいものをレンダリングする”ということです。任意のプロパティのセットにおいて、どんなアウトプットが予想されるでしょうか。<code>Person</code>はnameとageをレンダリングするでしょうか。または、nameと”TODO: age coming in v2.1″をレンダリングするのでしょうか。</p><p><strong>状態をテストする：</strong>全ての条件に対応できなければいけません。もしclassNamesが条件付きなら（例えば、enabled/disabled、success/warning/errorなど）、classNamesを決定するロジックがうまく働いているかを確認するテストが必要です。条件付きでレンダリングされた子にも同じことが言えます。例えば、ユーザがログインした時にだけ<code>Logout</code>ボタンが現れるなら、必ずそれをテストしなければいけません。</p><p><strong>イベントをテストする：</strong>コンポーネントが相互作用するなら（例えば<code>input</code>または<code>button</code>と<code>onClick</code>、<code>onChange</code>、<code>onAnything</code>など）、そのイベントが期待通りに働き、<code>this</code>をバインディングすることも含めて、正しい引数と共に一意の関数を呼び出すかということを、重要なものに関してテストします。</p><p><strong>エッジケースをテストする：</strong>配列上で行う操作には、どんなものでも境界線上のケースが存在します。空の配列、1つの要素を持つ配列、25項目で切り捨てなければならないページ付けされたリストなどです。考えられる全てのエッジケースを試し、全てが正しく動作することを確認します。</p><p>私たちは、とてもシンプルな”リスト”のアプリケーションを構築しようとしています。項目を追加したり、項目のリストを閲覧したりできるアプリケーションです。</p><p>こういった単純な機能の集まりであっても、実装にはいくつかの方法があります。ボトムアップ方式かトップダウン方式です。</p><p>また、自分のアプリケーションを構築する際には、「UI優先」にするのか「データ優先」にするのか決めようと思うでしょう。つまり、最初は仮のデータを使って、見たいと思うUIを作るのか、それともデータ構造から着手して、データに合わせてUIを構築するのかということです。ここではUI優先の手法を採用します。</p><p>ここにUIのモックアップがあります。</p><p><img src="https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/343/Dave1-UI.png" alt="UI Mockup"></p><p>コンポーネントに名前をつけてから、テストを始めましょう。</p><p>始める前に、Githubから<a href="https://github.com/dceddia/getting-started-with-tdd-in-react" rel="nofollow" title="" class="ext-link">完成リポジトリ</a>をクローンしておくと、上手くいかない時に作業をチェックすることができます。</p><p>ほとんど空のコンテナをレンダリングする、基本的なコードから始めましょう。</p><p><code>index.js</code>ファイルを開いて、ファイル全体を以下の内容に置き換えます。</p><p>この<code>index.js</code>ファイルは、ルートコンポーネントをレンダリングする役割を担います。</p><p>コンポーネント自体は、<code>components.js</code>に記述します。ファイルを作成し、次のように入力します。</p><p>簡単にするために、この例題では、あらゆるものを1つのファイルに保存しておくことにします。皆さんが自分のコードを書く場合には、こうしたコンポーネントを別々のファイルに分けるでしょう。</p><p>なぜファイルを分けるのか疑問に思うかもしれません。どうして<code>index.js</code>に全部まとめておかないのかと思うでしょう。その理由は、テストにコンポーネントを<code>import</code>する必要があるからです。もし<code>index.js</code>ファイルからインポートすることになれば、<code>ReactDOM.render()</code>が実行されます。そうすると（シャローレンダリングを使うので）テストではほとんどDOMが不要であるにもかかわらず、DOMの有無に作業が左右されてしまいます。</p><p>始める前に、<code>quik</code>と<code>mocha</code>を起動しましょう。そうすれば、テストのフィードバックが即座に得られ、それと同時にUIの挙動が分かります。</p><p>プロジェクトディレクトリに戻って、Quikを起動します。</p><p>次に別のターミナルウィンドウを開いて、Mochaを起動します。</p><p>ブラウザが開いて、「Beer！」と表示されるはずです。</p><p>それでは、最初のテストを記述しましょう。先ほど作成した<code>components.spec.js</code>ファイルを開きます。次のコードで内容を置き換えます。</p><p><code>InputArea</code>も<code>BeerList</code>も未定義なので、このテストはすぐにエラーとなります。</p><p>修正を行う前に、このテストの処理の様子を見てみましょう。</p><p>最初に、必要な部品を全てインポートします。JSX（<code>React.createElement</code>の呼び出しのためにコンパイルされます）を使っているので、Reactは必要です。また、コンポーネントと同様に、<code>expect</code>と<code>shallow</code>もインポートします。次に<code>mount</code>をインポートしていますが、これを使うのはもっと後になってからです。</p><p>JSXの表現である<code>&lt;BeerListContainer/&gt;</code>に渡して<code>shallow</code>を呼び出します。</p><p><code>BeerListContainer</code>に<code>InputArea</code>と<code>BeerList</code>を含めたいので、これらの子コンポーネントを<code>wrapper.containsAllMatchingElements</code>でチェックします。</p><p>ここで気を付けてほしいのですが、コンテナをシャローレンダリングする場合でも、子コンポーネントの存在がチェックできるように、名前を定義しておく必要があります。今回は名前がまだ定義されていないために、テストはエラーになってしまいました。それでは修正しましょう。</p><p><code>components.js</code>に戻って、次の2つのコンポーネントを最後に追加します。</p><p>最低限の内容だけを追加して、後で修正することにします。しかし、今度は子コンポーネントが存在するので、<code>components.spec.js</code>に戻って次の行を先頭のインポートの部分に追加します。</p><p>ところが、テストはまだ通りません。エラーにはならないので前進したと言えますが、<code>BeerListContainer</code>を修正する必要があります。<code>components.js</code>に戻り、読み込む<code>BeerListContainer</code>コンポーネントを次のように変更します。</p><p>これでテストは通ります。</p><p>シャローレンダリングの深さは1階層だけではないことに注意してください。実際には、全てのビルトインコンポーネント（<code>div</code>や<code>span</code>など）をレンダリングするものの、カスタムコンポーネントをレンダリングするには至りません。</p><p>確かめる場合には、<code>div</code>を他の<code>div</code>でラップしても、テストに通るか試してみてください。</p><p>コードの構築の見地からすると、コンテナがリストの管理、つまり状態の管理やリストへの項目追加といった役割を担うのが望ましいと言えます。子コンポーネントへ作業を進める前に、そうした機能性について確認しましょう。</p><p>最初、リストには、項目を持たない空の配列が格納されています。<code>components.spec.js</code>に、次のようにテストを記述します。</p><p>これはエラーになります。</p><p>初期化していないため、コンポーネントの<code>state</code>はnullです。</p><p><code>BeerListContainer</code>にコンストラクタを追加して、状態を初期化する必要があります。<code>components.js</code>に戻りましょう。</p><p>与えられたプロパティを用いて<code>super</code>を呼び出すのはいい考えなので、そのようにします。これを保存してからテストを実行すれば、今度は通るはずです。</p><p>ところが、今度は別のエラーになってしまいました。</p><p>これは、<code>===</code>演算子を使ってオブジェクトの等価性をテストする<code>.equal</code>を使ったためです。2つの空の配列は同じオブジェクトではないので、完全に等しいとは言えなかったのです。</p><p>その代わりに<code>eql</code>を使えば、テストは通ります。<code>components.spec.js</code>内のエクスペクテーションを以下のように変更します。</p><p>これでテストは通りました。</p><p>これで、コンテナに空のリストができたので、そのリストにアイテムを足すための道筋を作りましょう。</p><p>コンテナはリストの状態の保持を担うことを覚えておいてください。ここに、後で<code>InputArea</code>に渡すことになる<code>addItem</code>関数を持たせます。</p><p><code>components.spec.js</code>内に、存在しない<code>addItem</code>関数のテストを追加してください。</p><p><code>addItem</code>は存在しないので失敗し、次のメッセージが表示されます。</p><p>そこで、その関数を、<code>components.js</code>に追加します。</p><p>まだテストにパスしません。同じエラーが表示されました。</p><p><code>shallow(&lt;BeerListContainer/&gt;)</code>から返されたオブジェクトが、実際は<code>BeerListContainer</code>のインスタンスになっていない、と言っているわけです。しかし、<code>wrapper.instance()</code>で、クラスインスタンスには接続できます。その行、つまり以下のような行を</p><p>以下のように変更します。</p><p>次は別のエラーが出ました。</p><p>そこで、<code>state</code>を内部の<code>addItem</code>から更新することにします。<code>addItem</code>を次のように変えましょう。</p><p>テストに通りました。</p><p>以上のような配列の更新方法は見慣れないかもしれません。こうすることで、既存の状態を誤って変化させたりせずに済むのです。<code>state</code>の変化を避けるのを習慣にしたいものです。Reduxを使っている、使う予定がある際はなおさらそれが重要でしょう。常に確実にレンダリングビューを現在の状態と同期させることができるからです。</p><p><a href="https://facebook.github.io/immutable-js/" rel="nofollow" title="" class="ext-link">Immutable.js</a>のようなライブラリを使用すると、上述のような不変のコードの記述が容易です。このチュートリアルでは、なるべく複雑にしないためImmutable.jsを使いませんが、基礎を押さえた後に試してみる価値はあります。</p><p>コンテナの内部が全て正常に動作するようになったところで、<code>addItem</code>関数をプロパティとして、後に<code>addItem</code>の呼び出しを担う<code>InputArea</code>に渡しましょう。</p><p>新規プロパティをコンポーネントに追加する際にはいつも、そのための<em>PropTypesの定義</em>を作るようにするのは非常に良いアイデアです。<a href="http://wecodetheweb.com/2015/06/02/why-react-proptypes-are-important/" rel="nofollow" title="" class="ext-link">PropTypesが重要な理由についてはこの記事に詳しい</a>ですが、要は、PropTypes で期待するプロパティと型を定義すると、必要なプロパティを渡し忘れたり、誤った型を渡したりした場合に、Reactが警告を出してくれるということです。</p><p>PropTypesでデバッグがとても簡単になります。最初にコンポーネントを書く時だけでなく、将来それを再利用する時も同様です。</p><p>ですから、テストを書く前に<code>components.js</code>内にPropTypesを追加します。</p><p>そして、テストを<code>components.spec.js</code>に追加してください。</p><p><code>InputArea</code>への参照を取得し、その<code>onSubmit</code>プロパティに<code>addItem</code>関数が渡されることを確認します。これは失敗し、次のエラーが表示されるはずです。</p><p>テストにパスさせるには、<code>BeerListContainer</code>の<code>render</code>メソッドを修正し、<code>onSubmit</code>プロパティを<code>InputArea</code>に渡すようにします。</p><p>この時点までで、4つのテストに通りました。</p><p><code>InputArea</code>に渡された関数がまだ機能し続けていることを確認しましょう。少々冗長かもしれませんが、このテストを追加してください。</p><p>すると失敗し、次のエラーが表示されます。</p><p>ES6のクラスをReactでそのまま使うのは、難しい場合があります。つまり、ここの場合の<code>addItem</code>のようなインスタンスメソッドは、自動的にインスタンスにバインドされるわけではないのです。</p><p>ちなみに、ドットで関数を呼び出すのは、直接呼び出すことと同じではありません。</p><p>Reactでこの問題を解決するには、2つの一般的な方法があります。</p><p>1の方法のほうが良いので、ここでは1を使います。<code>BeerListComponent</code>（<code>components.js</code>内）のコンストラクタを次のように修正します。</p><p>末尾の新しい行が<code>addItem</code>を一度で全てをバインドするので、これでテストに通ります。</p><p><code>BeerListContainer</code>の処理が完了したので、<code>InputArea</code>の階層に移ります。既にコンポーネントは存在していますが、動作するものはほとんどありません。</p><p><code>InputArea</code>が<code>input</code>と<code>button</code>を含めるようテストを書きましょう。<code>components.spec.js</code>の中に、新規で最上階層の<code>describe</code>ブロックを作ります。</p><p>このテストはボタンのテキストも確認しますが、下記のように失敗します。</p><p>そこで、<code>components.js</code>に戻って、<code>InputArea</code>が正しくレンダリングされるよう修正しましょう。</p><p>こうして再び、全てのテストに通るようになりました。</p><p>次に、<code>input</code>ボックスが変更を受け取るよう、連携させていきましょう。次のテストを書きます。</p><p>ここでは<code>input.simulate</code>を使い、引数として指定されたオブジェクトで<code>onChange</code>イベントを発火します。この動作により、内部状態の一部が入力の<code>value</code>プロパティにフィードバックされます。</p><p>まずは失敗し、次のエラーが表示されるはずです。</p><p>見覚えがあるでしょうか。<code>state</code>が初期化されていない時に、テスト 2で出たエラーと同じです。</p><p>状態を初期化し、<code>setText</code>メソッドも追加して、直後に必要になるバインディングで完成です。</p><p>このようなコンストラクタを前に見てきました。<code>setText</code>メソッドは、通常のパターンを使用し、入力された新規の値で状態を更新します。</p><p>テストは再び失敗しますが、今回は別のエラーが出ます。</p><p>これは、<code>input</code>がつながっていないためです。<code>setText</code>メソッドを<code>onChange</code>プロパティとして渡し、<code>state</code>にあるテキストを<code>value</code>プロパティとして渡す必要があります。</p><p>しかしこの変更の後も、まだ動きません。同じエラーが表示されます。</p><p>ただし、実行に失敗する場所は以前とは違います。状態をチェックする最初の<code>expect</code>は問題なく実行できています。ところが次の行の<code>expect</code>は実行に失敗しています。入力の<code>value</code>プロパティが更新されていないからです。</p><p>随分話を戻しますが、入力のハンドリングには（シャローではなく）フルレンダリングが必要だと、本稿の冒頭で触れたことを思い出してください。いよいよそれを実行する時が来ました。テストを更新して、<code>shallow</code>ではなく<code>mount</code>を呼び出すようにします。</p><p>これでまた、テストは全部正常に完了するはずです。</p><p>この時点ではまだ「Add」（追加）ボタンは何も実行しません。これの修正に取り掛かりましょう。</p><p>ボタンがクリックされたら、<code>InputArea</code>へ渡される<code>onSubmit</code> プロパティを呼び出す操作を実装したいのです。<code>addItem</code>関数が正常に動作することを検証するテストは既に書いたので、これは、アイテムをリストに追加する前に実装する機能の、最後のピースと言えます。</p><p>テストを書く前に、<code>components.spec.js</code>の冒頭に新しいインポートを追加しなければなりません。</p><p>そこで今度は、テスト内で次の通り<code>spy()</code>関数を使います。</p><p>spyを作成して、<code>onSubmit</code> プロパティの呼び出しを追跡します。次はユーザーが値を入力する場面なので、状態を表す<code>text</code>を設定し、ボタンをクリックします。最後に、spyが呼び出されること、しかも正しい値を使って呼び出されることを検証します。</p><p>当然ながら、テストは次のメッセージを表示して終了します。</p><p>ここで中間ハンドラ関数<code>handleClick</code>が必要になります。この関数はクリックに反応し、現在入力されているテキストで<code>onSubmit</code>を呼び出します。これはコンストラクタとバインドする必要があります。その後、ボタン上の<code>onClick</code> プロパティに渡されます。</p><p>今度は、このテストもパスします。そろそろ終わりも見えてきましたが、まだリストのレンダリングが残っています。これの修正に取り掛かりましょう。</p><p>まずは、リストが「空」のケースを扱う場合をテストしましょう。これは<code>BeerList</code>に対して実行する最初のテストなので、まず最上位階層の記述ブロックを新規作成し、テストを追加します。</p><p>空のリストを使ったテストはパスしましたが、驚くほどのことではありません。<code>BeerList</code> コンポーネントは今のところ骨組みだけで、空の“`</p><p>“`タグが1個入っているだけだからです。3番目のテスト、アイテムをレンダリングするところで、予測通りテストは失敗します。</p><p><code>BeerList</code>を更新し、<code>items</code> プロパティを通じて受け取った配列をレンダリングするようにします。</p><p>現時点で「未定義のアイテム」テストは失敗していますが、それ以外の2つのテストはパスしています。</p><p>この状況は当然です。なぜなら<code>this.props.items</code>は未定義だからです。ここでは、以下の2つの問題があります。</p><p>これらの問題を解決するには、<code>BeerList</code>レンダリング関数を修正し、<code>items</code>の値がtrueであることをチェックしてからレンダリングするようにします。また、末尾に<code>propTypes</code>も追加します。</p><p>これで再び、全てのテストにパスするようになります。</p><p>コードは今度こそ正常に動作するでしょう。このテストをまだ開発環境サーバのQuik上で実行していた場合は、実環境のブラウザに切り替えます。その際、タブをリフレッシュして、リストにアイテムを幾つか追加する操作を試みなければならない場合があります。</p><p>「Add」をクリックしたのにアイテムが表示されない場合は、まずコンソールをチェックしてください。ただし次のような警告が表示されます。ここで <code>items</code>を渡すのを忘れているからです。</p><p>これで、私たちが注目するべき場所が特定できました。</p><p>問題を解決する前に、失敗することが分かっているテストをあえて書いてみましょう。ここは<code>components.spec.js</code>で、アイテムを幾つか指定して<code>BeerListContainer</code> のディープレンダリングを実行すれば、アイテムが表示されることを確認したいところです。</p><p>しかしテストは予測通り、次のメッセージを表示してエラーで終了します。</p><p>この場合は、<code>BeerListContainer</code>を更新してビールを渡します。</p><p>この最終テストにパスしたことで、アプリケーションの全機能が正常に実装されていることが証明されたはずです。Quikの自動更新のトリガーが作動しなかった場合はブラウザの表示を更新して、以上のコードが動作することを確認してください。</p><p>ここまでやって、ようやく非常にシンプルな、しかし機能的なリストが完成しました。この方式の開発をさらに続ける際には、次に示す改善のアイデアが参考になるでしょう。</p><p>いざ実行すると恐らく、本稿で触れていない事態に直面することでしょう。その場合、いつも頼りになるGoogle以外にも、公式ドキュメントが役立つことがあります。参考文献のリンクを以下に示します。</p><p>ここまでやれば、<a href="https://semaphoreci.com/community/tags/react" rel="nofollow" title="" class="ext-link">ReactでのTDD</a>はどう進めればいいか、感覚がだいぶつかめたと思います。次にやるべきこととしては、各自の実際の環境で試す以外にありません。「習うより慣れよ」とよく言いますが、TDDも例外ではないのです。</p><p>ここで説明した手法を使い、このようにシンプルなリストコンポーネントになるように改善し、TDDで、さらに野心的なコンポーネントをビルドすることにも挑戦してください。TDDを日常の作業ルーチンに組み込めば、慣れるにつれて実行の効率も上がるでしょう。そうすればコードの質も向上します。</p><p>TDDを導入したReactの世界へ皆さんがスムーズに移行するために、本稿がいくらかでも皆さんのお役に立つことを願っています。本稿に対する感想や質問があれば、どうぞ下記のコメント欄に書き込んでください。</p>
