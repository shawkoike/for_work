<p><a href="http://vsavkin.tumblr.com/post/145672529346/angular-router" rel="nofollow" title="" class="ext-link">Angular Router</a> (2016-06-09) by <a href="http://victorsavkin.com/" rel="nofollow" title="" class="ext-link">Victor Savkin</a> (<a href="https://twitter.com/victorsavkin" rel="nofollow" title="" class="ext-link">@victorsavkin</a>)</p><p><small>(訳注：2017/02/16、画像、元記事がリンク切れしていたため修正いたしました。)</small></p><p>状態遷移の管理はアプリケーション構築の上でもっとも難しいとされる部分の1つです。URLに状態が確実に反映されなければならないという意味ではWeb上では特に難しいと言えます。さらに、アプリケーションを複数のバンドルに分けて要求に応じてロードする処理をする場合がよくありますが、これを透過的に実行するのは大変です。</p><p>Angular Routerはこのような問題を解消してくれます。Routerを使えば、アプリケーションの状態を宣言的に特定でき、URLに気を付けながら状態遷移を管理することができ、必要に応じてにコンポーネントをロードできます。この記事では、RouterのAPIについてだけでなく、背後にあるメンタルモデルと設計理念についても考察したいと思います。</p><p>では、始めましょう。</p><p>Angular Routerの仕様に入る前にまず一般的にRouterが何をするものなのかを説明しましょう。</p><p>ご存じかもしれませんが、Angular2アプリケーションはコンポーネントのツリーです。これらコンポーネントの中には再利用できるUIコンポーネント（例えばリストやテーブル）やアプリケーションコンポーネントがあります。Routerの関心の対象は、アプリケーションコンポーネント、より詳しく言えばそれらの配置です。ひとまずこのようなコンポーネントの配置をRouter状態と呼ぶことにします。Router状態はスクリーン上で見えるものを定義します。</p><p>Routerコンフィギュレーションはアプリケーションが取り得る全ての状態を定義します。では、例を見てみましょう。</p><p>図にすると次のとおりです。</p><p><img src="http://68.media.tumblr.com/a77fdd3a8056ee1022970c2ffb68b26c/tumblr_o8ilfeqpSc1qc0howo8_250.png" alt="Router Config"><br>
outletは、コンポーネントが置かれる場所です。例えば、ノードが同色の(=同じoutletの型を持つ)子を持っている場合、1度にアクティブになれるのは1つのみです。結果として、teamコンポーネントとsummaryコンポーネントが同時に表示されることはありません。</p><p>Router状態はコンフィギュレーションツリーのサブツリーなのです。例えば、下の例ではsummaryコンポーネントがアクティブになっています。</p><p><img src="http://68.media.tumblr.com/46c6266e5f02ca9dfba2b72150a49279/tumblr_o8ilfeqpSc1qc0howo7_400.png" alt="Router Config. Summary Activated"><br>
この時、Routerの主な仕事は、コンポーネントツリーの更新を含む状態間のナビゲーション管理です。基本的にナビゲーションとは1つの起動中のツリーから別のツリーへと遷移させることなのです。ナビゲーションを実行すると、以下のような結果になります。</p><p><img src="http://68.media.tumblr.com/90d944c04916eac18527e0b253a961a9/tumblr_o8ilfeqpSc1qc0howo6_400.png" alt="Router Config. Team Activated"><br>
summaryコンポーネントがもうアクティブではないため、Routerはこれを削除します。その代わり、detailsコンポーネントをインスタンス化し、teamコンポーネント内で表示します。この時、横にchatコンポーネントも表示されます。</p><p>これだけです。Routerはアプリケーションが取り得る全ての状態の表現を簡単に実現し、状態遷移のナビゲーション構造を提供してくれます。</p><p>これで、一般的にRouterが何をするのか分かったと思います。では、Angular Routerについて説明しましょう。</p><p><img src="http://66.media.tumblr.com/05f0f9381078d9aecf3dfe98c9d6d13c/tumblr_o8ilfeqpSc1qc0howo5_1280.png" alt="Angular Router. Overview"><br>
<em>注釈<br>
Parse　パース<br>
Recognize　認識<br>
Instantiate　インスタンス化<br>
navigate/RouterLink　ナビゲーション・RouterLink<br>
using　利用<br>
serialize　シリアライズ</em></p><p>Angular RouterはURLを取得し、そのURLをURLツリーにパースし、Router状態を認識し、必要なコンポーネント全てをインスタンス化します。そして最後にナビゲーション管理を行います。では、それぞれの処理を詳しく見てみましょう。</p><p><img src="http://68.media.tumblr.com/3ef3b7d48491d5a3c45082766bec3f60/tumblr_o8ilfeqpSc1qc0howo4_1280.png" alt="Angular Router. Parsing and Serialization"><br>
URLバーはWebアプリケーションにネイティブアプリケーションには無い利点を提供してくれます。状態の参照やブックマーク、友人との共有を可能にしてくれます。正しく機能するWebアプリケーションでは、状態が遷移さればURLが変更され、URLが変更されれば状態が遷移します。つまり、URLはRouter状態がシリアライズされたものなのです。</p><p>Routerがまず行うのはURLの文字列をURLツリーにパースすることです。Routerはアプリケーションやコンポーネントに関する情報を必要としません。つまり、パース処理はアプリケーションに関係なく行われるのです。実際にどのように行われるのか例を使って見てみましょう。</p><p>簡単なURLで試してみましょう。</p><p>見て分かるように、URLツリーはURLセグメントで構成されています。そして、それぞれのURLセグメントはパスと子を持っています。</p><p>では、最初のパスフラグメントに<code>extra</code>パラメータ設定trueが追加されている次の例を見てみましょう。</p><p>では、teamセグメントに1つではなく、2つの子があった場合を見てみましょう。</p><p>見てお分かりのとおり、シリアライズした複数の子を持つセグメントには括弧、outletを特定するためはコロン構文、そして<a href="http://t.umblr.com/redirect?z=https%3A%2F%2Fwww.w3.org%2FDesignIssues%2FMatrixURIs.html&amp;t=MWEzNDMwZmIzNGVhNWViOWZkZTZmOGY1NDc3NjEwY2E3NzIzNGU4YyxCZGZFaUs5aA%3D%3D" rel="nofollow" title="" class="ext-link">ルートに特化したパラメータ</a>を特定するために”;parameter=value”構文（例えば<code>open=true</code>）を使用します。</p><p>URL文字列のみを使うのではなくにURLツリーを使う理由は複数あります。第1にURLツリーが豊かなデータ構造になっているのと共通の処理を実現してくれるアフォーダンスを多く持っているからです。第2にユーザ独自のURLシリアライズ戦略を作ることを可能にしてくれるからなのです。</p><p>Routerサービスから現在のURLを取得することができます。</p><p>URLツリーとURLセグメントは不変であるため、安心して保存できます。面白いナビゲーションやアンドゥ・パターンの実装に特に便利です。</p><p><img src="http://66.media.tumblr.com/3c70565a745b27e0a2fde4bb6dccf0ed/tumblr_o8ilfeqpSc1qc0howo3_1280.png" alt="Angular Router. Router State Recognition"><br>
URLをパースする際アプリケーション情報は必要ないため、作成したURLツリーはアプリケーションの論理構造を表していません。しかし、Router状態はアプリケーションの論理構造を表します。Router状態を作成する際にRouterは与えられた設定を使ってURLツリーにマッチングします。ここでもいくつかの例を見てみましょう。</p><p>与えられたRouterコンフィギュレーションが次のとおりと仮定しましょう。</p><p>そして、次のURLへとナビゲーションします。</p><p>RouterはまずURLの文字列をURLツリーにパースします。それから、1つずつ設定アイテムをパースしたURLツリーにマッチングしていきます。上の場合、1番目のアイテムが一致しています。その後に子のアイテムをマッチングします。</p><p>URL全体を一致させることが不可能な場合、ナビゲーションはエラーになります。しかし、一致した場合はアプリケーションの今後の状態を表すRouter状態が構築されます。</p><p>その場合は、次のようになります。</p><p>Router状態はアクティブなRouterで構成されます。それぞれのアクティブなRouterは1つのコンポーネントに紐付けされています。さらに、アプリケーションのrootコンポーネントに関連するアクティブなRouterが必ず存在することに注意してください。</p><p>もう1つ例を見てみましょう。</p><p>上ではTeamCmp、ChatCmpと異なる名前のoutletを持つ兄弟が存在し、同時にアクティブになっています。</p><p>マッチングに使われる構文は強力です。例えば<code>'**'</code>のようなワイルドカードや<code>/team/:id</code>のような位置パラメータをサポートしています。</p><p><img src="http://68.media.tumblr.com/85b4c29183e2ae28bb6edd30a83ba21f/tumblr_o8ilfeqpSc1qc0howo2_1280.png" alt="Angular Router. Component Instantiation"><br>
この時点では、Router状態を取得しています。各コンポーネントをインスタンス化し、コンポーネントツリーを組み立て、各コンポーネントを適切なRouterのoutletに配置することにより、Routerは現在の状態に適合できます。</p><p>この処理を理解するために、以下の例を見てみましょう。</p><p>これは、以下のRouter状態に対応する<code>'/team/3(aux:/chat)/details</code>というURLへナビゲーションしています。</p><p>最初に、Routerは<code>TeamCmp</code>をインスタンス化し、rootコンポーネントの最初のoutletに配置します。その後、<code>ChatCmp</code>の新規インスタンスを”aux”outletへ配置します。最後に、<code>DetailsCmp</code>の新規インスタンスをインスタンス化し、teamコンポーネントの最初のoutletに配置します。</p><p>コンポーネントは多くの場合、URLにキャプチャされた状態に左右されます。例えば、teamコンポーネントはidパラメータにアクセスする必要がありますが、ActivatedRouteオブジェクトを注入することによって、idパラメータを取得することができます。</p><p><code>/team/3/details</code>から<code>/team/4/details</code>へとナビゲーションする場合は、params observableはパラメータの新たなマップを放出します。そうすると、teamコンポーネントは<code>Team Id: 4</code>と表示します。</p><p>ここでteam idが変わると、それに応じてdetailsコンポーネントも変わる必要があります。以下のような方法で処理できます。</p><p>Router状態のツリーを上下に自由に行き来することができます。また、アクティブになったルートがそれぞれ独自のパラメータを持つことも分かります。</p><p>アクティブ化された異なるルートから複数のobservableのコンビネーションを開始すれば、いかに柔軟に対応できるか、簡単に想像できますね。</p><p>Router状態は、アクティブ化された特定のルートとは関係無い、QueryParamと<a href="https://en.wikipedia.org/wiki/Fragment_identifier" rel="nofollow" title="" class="ext-link">フラグメント</a>を持っています。</p><p>以下の例は、クエリ（<code>id=3</code>）であり、かつフラグメント（<code>open=true</code>）であるURL<code>/team?id=3#open=true</code>です。</p><p>ご覧のように、Routerによって、ルートとobservableとしてのクエリパラメータが分かります。これは、大抵の場合に便利ですが、いつもそうとは限りません。すぐにチェックが可能な、状態のスナップショットが必要な場合もあります。</p><p>スナップショットは以下の方法で取得します。</p><p><img src="http://68.media.tumblr.com/9ecfd1063c232a1587f6b892b7cd879e/tumblr_o8ilfeqpSc1qc0howo1_1280.png" alt="Angular Router. Navigation"><br>
この時点では、Routerは既にURLをパースし、Router状態を認識し、コンポーネントをインスタンス化しています。次に、このRouter状態を他のRouter状態にナビゲーションできるようにする必要があります。この処理を行うには2つの方法があります。<code>router.navigate</code>を呼び出す方法か、<code>RouterLink</code>ディレクティブを使う方法です。</p><p>命令的にナビゲーションをするには、Routerサービスを注入し、<code>navigate</code>を呼び出します。</p><p>このコードで処理は可能ですが、問題は、ナビゲーションが絶対になってしまうことです。これでは、コンポーネントの再利用とテストが難しくなります。この問題を解決するには、以下のように、単にアクティブ化されたルートをナビゲートメソッドに渡します。</p><p>もう1つのナビゲーションの方法は、<code>RouterLink</code>ディレクティブを使う方法です。</p><p>このディレクティブを使うと、リンク要素<code>&lt;a&gt;</code>への適用時にhref属性を更新することもできます。ですので、検索エンジン最適化には良い手法であり、右クリックで新しいタブでページを開く際に、通常のリンク機能が期待できます。</p><p>ナビゲーションとRouterLinkにどんなものを渡せるのでしょうか。以下の例を見てみましょう。</p><p>ナビゲーションは、ルートベースではなくURLベースです。”<code>../</code> “は、URLツリーのセグメントをスキップすることを表しています。なぜそうなるのか、以下のリンクを見てみましょう。</p><p>このリンクが<code>ChatCmp</code>コンポーネントと<code>DetailsCmp</code>コンポーネントにナビゲーションするとしましょう。ユーザがリンクをクリックした場合にのみ、これらのコンポーネントを遅延読み込みします。それと同時に、リンクのhref属性はページのロードにセットされるはずです。</p><p><code>ChatCmp</code>と<code>DetailsCmp</code>のルートコンフィギュレーションは、ページのロードでは取得できません。つまり、<code>'../chat', this.chatId, 'details'</code>が、1つのルートセグメントなのか、または、2つ、もしくは3つのルートセグメントなのかは不明です。これが、3つに別れたURLセグメントであることしか分かりません。</p><p>これはRouter構築における、デザイン上の制約の1つです。上記のような情報が無くても、遅延読み込みされるルートへ深部までリンクができなければなりません。更にそのリンクはhref属性のセットを持っていなければなりません。こうした理由から、ナビゲーションは全てルートベースではなくURLベースなのです。</p><p>ここまで、Angular Routerの4つの主要な処理を全て確認してきました。次に、実例を使ってこれらの処理を見てみましょう。</p><p>私たちのアプリケーションのRouterコンフィギュレーションが、以下のようなものであるとします。</p><p>ブラウザが<code>/team/3/details</code>をロードする際、Routerは次の処理を行います。<br>
最初に、URLツリー内でこのURL文字列をパースします。</p><p>次に、新たなRouter状態を構築するために、このURLツリーを使用します。</p><p>次に、Routerはteamコンポーネントとdetailsコンポーネントをインスタンス化します。<br>
これで、teamコンポーネントは自分のテンプレート内に以下のリンクを持つことになります。</p><p>ユーザがリンクをクリックして、ナビゲーションが起動したとします。</p><p>Routerは<code>['../', 4, 'details']</code>の配列を取得し、新たなURLツリーを構築します。</p><p>これにより、新たなRouter状態が認識されます。</p><p>最後に、teamコンポーネントとdetailsコンポーネントが既に配置されていることが認識されます。これにより再利用が可能となり、新たなパラメータのセットをteamコンポーネントのparams observableに入れるだけです。</p><p>一度この処理を行えば、Routerは新たなURLツリーを取得し、それを文字列に変換し、位置プロパティを更新します。</p><p><img src="http://66.media.tumblr.com/05f0f9381078d9aecf3dfe98c9d6d13c/tumblr_o8ilfeqpSc1qc0howo5_1280.png" alt="Angular Router. Overview"></p><p>今回は、かなり多くのことを学びました。最初にRouterの役割を学びました。Routerによって、アプリケーションが取り得る全ての状態を表すことが可能になり、ある状態から別の状態へナビゲーションする仕組みが提供されます。また、Angular Routerの4つの主要な処理についても学びました。URLパース、状態の認識、コンポーネントのインスタンス化、ナビゲーションです。最後に、E2Eの例を使ってRouterの働きを確認しました。</p><p>ナビゲーションの管理、監視、デバッグ、エラー処理、遅延読み込みといった重要なテーマには触れませんでした。これらについては、今後の投稿記事で取り上げる予定です。</p><p><a href="http://t.umblr.com/redirect?z=http%3A%2F%2Fplnkr.co%2Fedit%2FER0tf8fpGHZiuVWB7Q07%3Fp%3Dpreview&amp;t=MGMwM2QyZTA3ZDYzZDI0YTMyMTVjZTRlYTBlNzgyMWZhOTFjMDFkYyxCZGZFaUs5aA%3D%3D" rel="nofollow" title="" class="ext-link">こちらのサイト</a>で、Angular Routerで構築された実際のアプリケーションを体験することができます。また、<code>bootstrap(RootCmp, provideRouter(config, {enableTracing: true}))</code>で、トレースもできます。これは、コンソールに全てのイベントのログを表示するようにRouterに命令するもので、トラブルシューティングの際に便利です。</p><p>Angular Routerに関する最新のニュースと案内をご覧になるには、<a href="https://twitter.com/victorsavkin" rel="nofollow" title="" class="ext-link">私のtwitterをフォローしてください</a>。</p>
