<p><a href="http://breakthebit.org/post/75335427347/real-time-tech-support-with-olark" rel="nofollow" title="" class="ext-link">Real-time tech support with Olark</a> by <a href="https://twitter.com/mihar" rel="nofollow" title="" class="ext-link">Miha Rebernik</a></p><p>ブラウザ上で動画の吹き替えができるアプリ<a href="http://dubjoy.com/" rel="nofollow" title="" class="ext-link">Dubjoy</a>は、パブリックベータテストを開始して以来、大きな進歩を遂げました。</p><p>現在Dubjoyのベータ版は、言語サービス・プロバイダや、声優、翻訳者、通訳者など、かなり限定されたターゲットにのみ公開されています。ほぼ一般人と言ってもいい、テクニカルな知識を持っていない人がほとんどで、彼らは問題が起きた時に効率よくデバッグすることも、問題を再現してオペレータに説明することもできません。</p><p>長期にわたりパブリックベータテストを実施した結果、今では問題のほとんどが解消され、ソフトウエアの品質も大幅に向上しました。</p><p></p><p>しかし、私たちは未だにユーザをサポートする最善の方法を探し続けています。それもできれば”リアルタイム”でサポートしたいのです。</p><p>ブラウザ上で吹き替え用の音声を録音するアプリには、動的なパーツが多く使われています。これらのパーツが、ユーザを次々と困った状況に追い込む原因となっています。</p><p>私たちはDubjoyを初めて使うユーザをサポートし、ソフトウエアの使い方を学んでもらう必要があります。作業手順やマイクの感度、権限やFlashのバージョンなどが課題になるでしょう。</p><p></p><p>ユーザとのコミュニケーションは、Webビジネスの重要なファクターです。コミュニケーションを上手く取ることができれば、ユーザの好感度は驚くほど上がります。</p><p>“いつでも助けてもらえる”という安心感が、ユーザの心をつかむのです。</p><p></p><p>次のような機能が備わっていれば、理想的なシステムと言えるでしょう。</p><p></p><p></p><p>そこで、こうした機能を持ったサービスがないか探してみました。</p><p></p><p>あなたがもしWeb上で何かを販売しているなら、ぜひ<a href="http://www.olark.com/" rel="nofollow" title="" class="ext-link">Olark</a>を導入してチャンスをつかんでください。</p><p><img src="/wp/wp-content/uploads/2014/02/1.png" alt='"Dubjoy + Olark sitting in a tree ..."'></p><p>Olarkは、自分のサイトに統合して使用できるチャット・ウィジェットです。Olarkをインストールすると、サイトを訪れたユーザがGoogle TalkのようなIM（インスタント・メッセージ）プログラム上に、チャットできる相手として表示されるようになります。</p><p>こちらからユーザをクリックしてチャットを開始することもできますし、助けが必要になったユーザが「Chat with us（チャットする）」ボタンをクリックするまで待機することもできます。</p><p><img src="/wp/wp-content/uploads/2014/02/2.png" alt='"The Olark chat widget sitting in the top-right corner of our video voice-over app"'></p><p>Olarkを導入するだけで、先ほど挙げた最初の機能、”リアルタイムのフィードバックとヘルプ”が手に入ってしまいました。</p><p>さらに、Olarkの<a href="https://www.olark.com/developer" rel="nofollow" title="" class="ext-link">開発者向けAPI</a>のドキュメントを読み込んでいくと、このチャット・ウィジェットは簡単に拡張できることが分かります。<a href="https://www.olark.com/documentation/javascript/api.chat.onBeginConversation" rel="nofollow" title="" class="ext-link">会話を始める</a>際のコーディングのように、カスタム・コマンドを作ってイベントと結びつけることができるのです。</p><p></p><p>Olarkには、チャット・オペレータが<a href="https://www.olark.com/documentation/javascript/api.chat.onCommandFromOperator" rel="nofollow" title="" class="ext-link">コマンド</a>を実行できるという素晴らしい機能があります。</p><p>各コマンドには、<code>!debugon</code>のように言葉の前にビックリマークを付加したシンプルな名前がつけられています。</p><p>統合をつかさどる”脳ミソ”は単純なパーサで、<code>api.chat.onCommandFromOperator</code>イベントにフックされています。</p><p>簡単な例として、<code>!explainer</code>コマンドの実装を下記に紹介しましょう。</p><p></p><p>また、現時点でDubjoyに統合されているコマンドは次の通りです（<code>!dubjoyコマンド</code>を実行すると、その時点で統合されているコマンドのリストが表示されます）。</p><p>基本的なものから高度なものまで、様々なタスクを実行するコマンドが用意されているので、ユーザをサポートすることも、診断テストを実行することも、システム情報をチェックすることもできます。</p><p>普通の文章よりコードを読む方が好きだというあなたは、<a href="https://github.com/jcassee/django-analytical/blob/master/docs/services/olark.rst" rel="nofollow" title="" class="ext-link">Olarkの統合クラス</a>をチェックしてみてください。</p><p></p><p>Olarkは、アプリの操作中に行き詰まってしまったユーザやアプリを初めて使うユーザをサポートする際に特に力を発揮します。</p><p>例えば<code>!explainer</code>コマンドを実行すれば、短い動画をユーザの画面にポップアップさせることができます。ユーザはその動画を見てアプリの使い方を学ぶことができるのです。</p><p><img src="/wp/wp-content/uploads/2014/02/3.png" alt='"Use of the explainer command to bring up the explainer video"'></p><p>このようにOlarkを活用すれば、ユーザに”いつでも助けてもらえる”という安心感を与えることができるでしょう。サポートに満足したユーザは、サイトの初期バグくらいは見逃してくれるものです。</p><p></p><p>アプリ上で何が起こっているかを把握するのに欠かせないのがログの存在です。イベント処理からビデオcurrentTimeの更新、音声エンコードの進行状況にいたるまで、履歴データはすべて細部にわたってログとして記録されています。</p><p>クライアント側で発生したエラーを、サイト側が瞬時にポップアップ警報として受け取るエラー報告も便利なツールです。エラーが発生すると、サイト側の全エンジニアの画面にチャットウィンドウが表示され、最初に対応したエンジニアがユーザの問題解決にあたります。</p><p></p><p>次のようなケースを想像してみてください。</p><p>あるユーザがDubjoyを使って動画を吹き替えたいのに、音声が録音できず困っています。</p><p>そこでユーザはOlarkのチャット・ウィジェットに「音声が録音できずに困っています」と書き込みました。</p><p>オペレータは「少々お待ちください」と回答すると同時に、Olark APTに統合されているカスタム・コマンド、<code>!debugon</code>を実行してログの転送を開始します。</p><p>ログの転送を実施すれば、ユーザの<code>console</code>からチャットウィンドウを経由することなく、すべての履歴データがオペレータの手元に送られてきます。もちろん、すべてがリアルタイムで処理されます。</p><p>このようにログ転送は、今ユーザが何をしてるのか、何をクリックしているか、またアプリがどのような動作をしているかを瞬時にして見ることができる非常に便利な機能なのです。</p><p></p><p>私たちはアプリ全体で使用できる、中心となるログ・ルーチンをいくつか持っています。</p><p>ベースとなるログ・ルーチンを持つことでコードの差し替えが簡単になり、情報をOlark全体に送信することが可能になりました。ログ転送はデフォルトでは実施されませんが、オペレータは<code>!debugon</code>コマンドを実行してログ・ルーチンの<code>on</code>、<code>off</code>を切り替えることができます。</p><p>次に示すのはOlarkと統合したログ・ルーチンのスニペットです。</p><p></p><p>また、ログ・ルーチンの典型的な使用例も紹介しておきます。</p><p><img src="/wp/wp-content/uploads/2014/02/4.png" alt='"Our real-time debugging log forwarding extension to Olark"'></p><p></p><p>診断チェックは、コマンドひとつでユーザのシステムの基本診断を実行できる便利な機能です。</p><p>あるコマンドを実行するだけで、マイクの権限や感度の設定状況、Flashのバージョン、ネイティブMP4サポート、ビデオバッファの状況などをすばやくチェックすることができるのです。</p><p>では、実際に<code>!diagnose</code>コマンドを実行している画面を見てみましょう。</p><p><img src="/wp/wp-content/uploads/2014/02/5.png" alt='"Using the diagnose command to scan for common problems inside our video voice-over app"'></p><p>さらにOlarkには、ユーザが行った直近の録音におけるゲインレベルを表示させる!audioコマンドのような、より詳細な診断が可能な音声診断コマンドも用意されています。そうしたコマンドを利用すれば、マイクが音を拾わない、感度が低すぎるといったトラブルにもすばやく対応することができます。</p><p></p><p>これらのルーチンは、ユーザがアプリを操作中に何らかの理由でエラーが発生し、オペレータがクライアントサイドでアプリを再起動する際に利用できます。オペレータはアプリの再起動時にデータをリカバリするのか、初期化したアプリを立ち上げるのかを選択することができるというわけです。</p><p><img src="/wp/wp-content/uploads/2014/02/6.png" alt="&quot;Using the reload command to reload the app in the customer's browser to have a clean slate to work with&quot;"></p><p></p><p>Olarkの標準機能だけでも、ある程度のユーザのシステム情報、例えばIMアプリのツールチップのブラウザバージョン情報などを入手することは可能です。</p><p>しかしOlarkには、より詳しい情報がほしい時に実行できる、下記のようなコマンドもあります。</p><p><code>!system</code>コマンドを使えば、ユーザのブラウザとシステムに関する有効な情報が入手できます。</p><p>また<code>!video</code>コマンドを実行すれば、ユーザが操作している動画に関する主要な情報が手に入ります。</p><p><img src="/wp/wp-content/uploads/2014/02/7.png" alt="&quot;Using the system command to get a bunch of useful information about the customer's browser and system&quot;"></p><p></p><p>ここまでの検証で、Olarkが私たち技術者やユーザを満足させる十分な機能を備えていることが分かりました。</p><p>Olarkの持つプラットフォームの拡張性を活用すれば、JavaScriptで実装されたあらゆるクライアントサイド・アプリへの対応が可能となり、結果としてユーザサポートをますます進化させることができるでしょう。</p>
