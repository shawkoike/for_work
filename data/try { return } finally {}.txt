<p><a href="http://www.pixelstech.net/article/1474892842-try-%7B-return-%7D-finally-%7B%7D" rel="nofollow" title="" class="ext-link">try { return } finally {}</a> （2016/09/26） by <a href="https://twitter.com/pike0000" rel="nofollow" title="" class="ext-link">Ke Pi</a></p><p>次のプログラムを実行すると、何の値が表示されるか分かりますか？</p><p>上の質問に回答する前に、次の問題には答えられるでしょうか？</p><p>もし答えが分からなければ、どうぞこのまま読み進めてください。</p><p><a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html" rel="nofollow" title="" class="ext-link">Oracle Javaチュートリアル</a>に、<strong>try</strong>ブロック内に<strong>return</strong>文があり、さらに<strong>finally</strong>ブロックも存在する特殊なケースの説明があります。</p><p>上記は<strong>try</strong>ブロック内に<strong>return</strong>文、<strong>break</strong>文、<strong>continue</strong>文のいずれがあっても、<strong>finally</strong>が常に実行されると説明しています。一部の例外は、JVMの終了や<strong>try finally</strong>ブロックを実行するスレッドの中断です。これはつまり、<strong>try</strong>ブロック内で<strong>System.exit(0)</strong>を呼び出すと、<strong>finally</strong>ブロックは実行されないことを意味します。</p><p>それでは、上述のコードの出力は何になるのでしょうか。<strong>答えは3ではなく2です。</strong>なぜでしょう。<a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5" rel="nofollow" title="" class="ext-link">JVMの仕様</a>にその答えがあります。</p><p><strong>return ++x</strong>が実行されると、JVMは<strong>++x</strong>の値を一時変数へ格納し、<strong>finally</strong>ブロックを実行し続けます。<strong>finally</strong>が実行されたあと、一時変数に格納されている値がメソッドの呼び出し元へ返されるはずです。よって出力は3ではなく2になります。</p><p>Test.classの<strong>javap</strong>の出力も以下のようになります。</p><p><img src="http://www.pixelstech.net/article/images/312159424202949.png" alt=""><br>
コマンドの実行順序は以下のとおりです。</p><p>1つ注意しておきたいことはもし<strong>finally</strong>ブロックにも<strong>return</strong>文があった場合、メソッドの呼び出し元へ返されるのは<strong>finally</strong>ブロックの戻り値になるということです。というのは、仕様ではtryのreturnが無視され、tryとfinallyとの両方でreturn文がある場合finallyのreturnが戻ってきた値になるからです。</p><p>参照:<a href="http://www.cnblogs.com/averea/p/4379646.html" rel="nofollow" title="" class="ext-link">http://www.cnblogs.com/averey/p/4379646.html</a>（中国語サイト）</p>
