<p><a href="http://arslan.io/ten-useful-techniques-in-go" rel="nofollow" title="" class="ext-link">Ten Useful Techniques in Go</a> (2014-7-16) By <a href="http://arslan.io/about" rel="nofollow" title="" class="ext-link">Fatih Arslan</a></p><p>ここでは、私がたどりついた最善のやり方を紹介しましょう。個人的に過去数年にわたって大量のGoコードと付き合ってきた経験から集めたものです。これらは全て非常にスケーラビリティがあると思っています。私が、スケールする、と言うときは次のような意味があります。</p><p>長期的にみるとこれらのことが重要になる、ということを私は今までに学んできました。小さなことであっても、多数に影響します。これらの助言を作業において試し、役に立ったかどうかぜひ聞かせてほしいと思います。気軽にコメントをください :)</p><p>GOPATHを複数にすると、スケーラビリティに限りが出てきます。GOPATH自体が、もともと非常に(インポートパスを経由した)自己完結的な性質を備えています。重要な複数のパスをインポートすることで、複数のGOPATHを持つと、既存パッケージ間のバージョンの不整合など、副作用が出てくる可能性があります。ある場所で更新したものの、別の場所では行っていないこともあるでしょう。とはいえ、私は複数のGOPATHが必要なケースには一度も出会ったことはありません。単純にGOPATHを1つにすれば、Goの開発プロセスに弾みがつきます。</p><p>この提案については多くの反対意見があったので、ひとつはっきりさせておきたいことがあります。<a href="https://github.com/coreos/etcd" rel="nofollow" title="" class="ext-link">etcd</a>や<a href="https://camlistore.org/" rel="nofollow" title="" class="ext-link">camlistore</a>といった大きなプロジェクトでは、<a href="https://github.com/tools/godep" rel="nofollow" title="" class="ext-link">godep</a>のようなツールで、ベンダリングし、依存するレポジトリを1つのフォルダに凍結します。つまり、これらのプロジェクトの中で、GOPATHは1つということなのです。彼らはベンダーフォルダの中にあるバージョンのみを参照します。各プロジェクトごとにGOPATHを設定するのは、よほど大きくて重要なプロジェクトでない限りやり過ぎでしょう。もしプロジェクト独自のGOPATHフォルダが必要になり作成するとしても、そのときまでは複数GOPATHを使わないことです。それは仕事のペースを下げてしまいます。</p><p>あるfor-selectイディオムから抜け出したい状況にあるなら、ラベルを使う必要があります。例えば下記のようになります。</p><p>ご覧のように、<code>break</code>をラベルと結合させて使うでしょう。これは定位置ではありますが、私は好きではありません。forループはこの例では小さく見えますが、たいていはもっと広範囲にわたり、<code>break</code>の状態を追うのは退屈です。</p><p>私の場合は、for-selectイディオムを1つの関数にラッピングします。</p><p>この方法の良いところは、エラー（またはその他の値）を返せて、それが次のように簡単なことです。</p><p>これはタグのないリテラルの例です。</p><p><code>T</code>構造体に新規フィールドを追加すると、そのコードはコンパイルできなくなります。</p><p>Goの互換性ルール（ <a href="http://golang.org/doc/go1compat" rel="nofollow" title="" class="ext-link">http://golang.org/doc/go1compat</a>）は、タグ付きリテラルを使用した場合に適用されます。<code>Zone</code>と呼ばれる新規フィールドがいくつかの<code>net</code>パッケージ型に導入されてからは特にその原則に忠実になりました。<a href="http://golang.org/doc/go1.1#library" rel="nofollow" title="" class="ext-link">http://golang.org/doc/go1.1#library</a>を参照してください。さて、例に戻り、タグ付きリテラルを使うようにします。</p><p>きちんとコンパイルされ、スケーラビリティもあります。<code>T</code>構造体に別のフィールドを追加しても問題ありません。あなたのコードは常にコンパイル可能で、Goの将来のバージョンでもコンパイルされる保証がなくてはなりません。<code>go vet</code>はタグのない構造体リテラルもキャッチするので、コードベースで走らせてみてください。</p><p>2つ以上のフィールドがある場合は、複数行を使いましょう。コードがずっと読みやすくなります。つまり、次のようにする代わりに、</p><p>複数の行にします。</p><p>このやり方にはいくつか利点があります。まず読みやすい。2つ目にフィールドの初期化の無効/有効の変更を容易にする（コメントアウトか、削除するだけ）、3つ目に別のフィールドの追加が非常に簡単になることです（1行追加するだけ）。</p><p>カスタム列挙型に、iotaを使って定義した整数型を使う場合は、常にString()メソッドを加えましょう。例えば次のように。</p><p>この型から新規変数を作成しプリントすると、整数を取得できます（<a href="http://play.golang.org/p/V5VVFB05HB" rel="nofollow" title="" class="ext-link">http://play.golang.org/p/V5VVFB05HB</a>）。下記を見てください。</p><p>ここでは、再度、変数をルックアップしない限り、<code>0</code>に大した意味はありません。ただ、<code>String()</code>メソッドを<code>State</code>型に追加するだけで調整可能です（<a href="http://play.golang.org/p/ewMKl6K302" rel="nofollow" title="" class="ext-link">http://play.golang.org/p/ewMKl6K302</a>）。</p><p>新たなアウトプットは、<code>state: Running</code>です。ご覧のとおり、かなり可読性が高くなりました。ご自身のアプリをデバッグする際に、随分ラクになるでしょう。MarshalJSON()メソッド、 UnmarshalJSON() メソッドなどを実装しても同様の結果が得られます。</p><p>これは多くの人が既に説明していますが、上記のことは全てStringerツールで自動化できます。<br>
<a href="https://godoc.org/golang.org/x/tools/cmd/stringer" rel="nofollow" title="" class="ext-link">https://godoc.org/golang.org/x/tools/cmd/stringer</a></p><p>このツールはgo generateコマンドを使い、定数<code>type</code>をベースにして非常に効率的なStringメソッドを自動的に作り出します。</p><p>上記の例の中にも、バグを引き起こすものはあります。実際、私も何度かバグを目にしてきました。ではここで、<code>State </code>フィールドを格納する新しい構造体型について見てみましょう。</p><p><code>T</code>を基に新しい変数を作成して、それを出力すると、驚くべき結果が得られます（<a href="http://play.golang.org/p/LPG2RF3y39" rel="nofollow" title="" class="ext-link">http://play.golang.org/p/LPG2RF3y39</a>）。</p><p>バグに気づきましたか？この<code>State </code>フィールドは初期化されておらず、Goはデフォルトで、型ごとに決まったゼロ値を使用します。<code>State </code>は整数なので、ゼロ値は<code>0</code>です。そしてこの例では、ゼロは基本的に<code>Running</code>を意味します。では、このStateが本当に初期化されているのか、そして実際に<code>Running</code>モードなのかは、どうすれば分かるのでしょうか。残念ながらこれを判別する手段はありません。そのため、未知の予期せぬバグが発生してしまうのです。しかし、単純にiotaを<code>+1</code>してから使うことで、この問題は簡単に解決できます（<a href="http://play.golang.org/p/VyAq-3OItv" rel="nofollow" title="" class="ext-link">http://play.golang.org/p/VyAq-3OItv</a>）。</p><p>これで、<code>t </code>はデフォルトで<code>Unknown</code>と表示されるはずです。簡単でしょう？</p><p>別の解決法として、あらかじめiotaを妥当なゼロ値にしておく手もあります。例えば<code>Unknown </code>という新たな状態を導入して、単純に以下のように変更するのです。</p><p>私は、このようなコードをたくさん見てきました（<a href="http://play.golang.org/p/8Rz1EJwFTZ" rel="nofollow" title="" class="ext-link">http://play.golang.org/p/8Rz1EJwFTZ</a>）。</p><p>これは、次のように書けば済むことです。</p><p>より簡潔で読みやすいですよね（もちろん、ログや中間値が不要な場合に限りますが）。</p><p>sliceやmapなどを再びカスタム型に変換すると、コードのメンテナンスが格段に楽になります。では<code>Server</code>型と、サーバのリストを返す関数について見てみましょう。</p><p>ここでは、特定の名前を持つサーバのみ取得する場合を考えます。ListServers()関数を少しだけ変えて、単純なフィルタ機能を追加しましょう。</p><p>これを用いると、<code>Foo </code>という文字列を含むサーバをフィルタすることができます。</p><p>ご覧のとおり、サーバはフィルタされました。しかし、これではスケーラビリティが良くありません。サーバのセットに別のロジックを導入したい場合、どうしたらいいのでしょうか？例えば、全てのサーバの調子を確認したり、各サーバのデータベースの記録を作成したり、新しいフィールドを別の要素でフィルタリングするというような場合です。</p><p>ここで、もう１つ<code>Servers</code>という新しい型を導入して、この型を返すように、最初のListServers()関数を変更してみましょう。</p><p>ここでは、新しい<code>Filter()</code> メソッドを<code>Servers</code>型に追加するだけです。</p><p>そして、<code>Foo</code>という文字列でサーバをフィルタします。</p><p>完成です！コードがどう簡略化されたのか、お分かりいただけたでしょうか。サーバの調子を確認したい時や各サーバのデータベースの記録を追加したい時は、以下の新しいメソッドを追加するだけです。</p><p>時々、各関数で同じ処理を繰り返してしまうことがあるかと思います。例えば、新しいローカルコンテキストのロック・アンロックや初期化、変数の初期化などです。以下の例を見てみましょう</p><p>これでは、どこか１箇所だけ変更したい場合、他の箇所も全て変えなくてはいけません。もし、これが共通タスクであれば、<code>withContext</code>関数を作成するのが最良の方法です。この関数は引数に関数をとり、それを与えられたコンテキストに応じて呼び出します。</p><p>あとは、このコンテキストのラッパーを使うために、初期関数をリファクタリングするだけです。</p><p>単にコンテキストをロックしようと考えてはいけません。なお、この最良のユースケースは、データベース接続やデータベースコンテキストです。では、withContext関数を少しだけ変更しましょう。</p><p>ご覧のとおり上記の関数では接続を確立し、それを既定の関数に渡し、関数呼び出しのエラーを返しています。あとは以下のようにするだけです。</p><p>事前初期化を行うなど、方針を変えて別のアプローチを取る場合も問題はありません。その処理を<code>withDBContext </code>に追加するだけで、準備完了です。テストの際も、これで完璧に動作します。</p><p>ただ、このアプローチを取るとインデントが深くなるため、読みにくくなるという難点があります。繰り返しますが、常に最もシンプルな解決策を探るようにしましょう。</p><p>検索や追加処理にmapを多用している場合は、必ずmapの近くでgetterとsetterを使いましょう。getterとsetterを使うと、ロジックを各関数にカプセル化することができます。この際、最も多く発生するエラーが同時アクセスです。あるgoroutineの中に以下の処理があるとしましょう。</p><p>そして別のgoroutineには以下の処理があるとします。</p><p>この場合、何が起きるでしょうか？大半の方は、このような競合状態になじみがあると思います。基本的にmapはデフォルトでスレッドセーフではないので、これは単純な競合状態です。こういう場合には、mutexを使えばmapを簡単に保護することができます。</p><p>さらに以下のようにします。</p><p>このmapを別の場所でも使っている場合、全ての箇所でmutexを使わなくてはいけません。しかしgetterとsetterを使えば、そういった面倒な作業は一切不要になります。</p><p>このプロシージャを改善するには、インタフェースを使用します。そうすることで、実装を完全に隠すことも可能です。シンプルかつ明確に定義されたインタフェースを使い、それらをパッケージで使うようにするだけです。</p><p>これは一例に過ぎませんが、概要はお分かりいただけたと思います。基本実装に何を使用しているかは問題ではありません。重要なのは使用方法そのものと、内部データ構造を公開することで生じる多数のバグを簡略化して解決するインタフェースなのです。</p><p>とはいえ、複数の変数を同時にロックする必要があるかもしれないので、インタフェースは、ただのやり過ぎになってしまう場合があります。よって、アプリケーションを熟知し、本当に必要な時だけこの改善策を適用するようにしてください。</p><p>抽象化が必ずしも良いことだとは限りません。すでに現状が、最もシンプルな状態になっている場合もあります。つまり、より洗練されたコードにしようとすべきではないのです。Goは元来シンプルな言語で、何をするにも大抵１通りの方法しかありません。Goの強みはこの簡潔さです。それこそが、手動で制御するのと同等にうまくスケーリングできる理由の１つでもあります。</p><p>今回紹介したテクニックを使うのは、本当に必要な時だけにしましょう。例えば<code>[]Server</code>から<code>Servers</code> へ変換するのは、さらに抽象化していることになるので、このような処理は正当な理由がある時のみ行うべきです。ただ、iotaを1にしてから使うテクニックなど、いつでも使える内容もあります。最後にもう一度繰り返しますが、常に重視すべきなのはシンプルさです。</p><p>価値あるフィードバックと提案をしてくれたCihangir Savas、Andrew Gerrand、Ben Johnson、Damian Gryskiに心から感謝します。</p>
