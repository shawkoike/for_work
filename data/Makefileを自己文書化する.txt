<p><a href="http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html" rel="nofollow" title="" class="ext-link">Self-Documented Makefile</a> （2016-02-29） by <a href="https://twitter.com/francoisz" rel="nofollow" title="" class="ext-link">François Zaninotto</a></p><p>私たちのプロジェクトではいつも、非常に長い<code>Makefile</code>を使用して、インストールやビルド、テスト、デプロイメントの処理を自動化しています。ターゲット名はほとんど標準化されていますが（<code>make install</code>、<code>make deploy</code>）、中には説明が必要なものもあります（<code>make run-dev</code>、<code>make restart-api</code>）。そして、詳細なmakeターゲットを追加するほど、それらの処理内容をテキスト形式で大量に記載しなければなりません。私たちのプロジェクトでは通常、このような文書を<code>README</code>ファイルに書いています。</p><p><img src="http://marmelab.com/images/blog/make_targets_explained_in_readme.png" class="medium" title="make targets explained in readme"><br>
しかしCLI（コマンドラインインタフェース）を用いる場合は、主に自己文書化ツールを使っています。<code>make</code>と打つだけで、利用可能なコマンドとその説明が一覧表示されたら便利だと思いませんか？</p><p><img src="http://marmelab.com/images/blog/make_auto_documentation.png" class="big" title="self-documented make"><br>
それを実現するのは、実はとても簡単です。まずは各ターゲットを文書化するために、以下のようにターゲット名の後ろに<code>##</code>を付けて、コメントを記載します。</p><p>内部ターゲット（この例では<code>webpack.PID</code>など）の説明は不要なので、自己文書化の対象外になります。次にシェルスクリプトのおまじないをいくつか実行して、<code>makefile</code>に<code>help</code>ターゲットを追加します。</p><p><strong>ポイント</strong>：このコードスニペットを<code>makefile</code>にコピーする場合は、必ずテキストエディタがインデントをタブに変換しているかどうか確認する。スペースに変換してはいけない。</p><p><strong>ポイント</strong>：<code>printf</code>パターン内の値<code>30</code>を大きい数字または小さい数字に変更することで、第1カラムの幅を調整する。</p><p><strong>ポイント</strong>：<code>| sort</code>を削除すると、ターゲットがアルファベット順ではなく、makefileに出現する順番に並べ替えられる。</p><p>ご紹介したすばらしいコードは、我々の協働者<a href="https://twitter.com/brikou2" rel="nofollow" title="" class="ext-link">Brice</a>がインターネット上で見つけた<a href="https://gist.github.com/prwhite/8168133" rel="nofollow" title="" class="ext-link">様々な</a><a href="https://dev.snip2code.com/Snippet/444640/Help-target-for-self-documentation-of-a-" rel="nofollow" title="" class="ext-link">スニペット</a>に影響を受けて書いたものです。これはアウトプットの色付けにANSIコードを使っています。また、LinuxとOS Xの両方で利用できます。</p><p>仕上げ：<code>help</code>ターゲットをデフォルトのターゲットにする。</p><p>これで、もう大丈夫です。<code>make</code>は最も古いCLIタスクランチャの1つです。数多くのドキュメンテーションがあり、非常に強力で、どこにでもインストールできます。そのため、インラインヘルプを提供してくれるもののインストールが必要な言語固有のタスクランチャ（<code>npm</code>や<code>php bin/console</code>など）の代わりに使うことが可能です。とにかく、<code>make</code>を使うコツに興味がある場合は、私たちが書いた別の記事もご覧ください。そこでは<code>make</code>と<code>docker</code>を組み合わせ、コンテナ内でコマンドを実行する<a href="http://marmelab.com/blog/2014/09/10/make-docker-command.html" rel="nofollow" title="" class="ext-link">make-docker-command</a>というプロジェクトについて説明しています。</p><p><strong>アップデート</strong>：本記事は「The Hacker News」のホームページで特集されました。関連の最新情報やご意見については<a href="https://news.ycombinator.com/item?id=11195539" rel="nofollow" title="" class="ext-link">https://news.ycombinator.com/item?id=11195539</a>をご覧ください。</p>
