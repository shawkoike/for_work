<p><a href="https://zerokspot.com/weblog/2015/12/31/new-string-formatting-in-python/" rel="nofollow" title="" class="ext-link">TIL: New String Formatting in Python</a> （2015-12-31） by <a href="https://twitter.com/zerok" rel="nofollow" title="" class="ext-link">Horst Gutmann</a></p><p>「ほとんどの状況への対処について、一つの正しいやり方にフォーカスする」言語であるPythonですが、その文字列フォーマットは非常に悩ましく、また年々、多様化が進んでいます。<br>
<a href="https://docs.python.org/3.6/whatsnew/3.6.html" rel="nofollow" title="" class="ext-link">Python 3.6</a>では、文字列をフォーマットする方法には3通りあります（簡単な結合や<code>string.Template</code>の使用を除きます）。</p><p>（もし、この記事を全部読むつもりがないようであれば、<a href="https://pygraz.org/meetups/2016-02-02" rel="nofollow" title="" class="ext-link">2016年2月に開催されるPyGrazの会合</a>に関する記事で、追加の例を含めてもう少し幅広くご紹介したいと思います）</p><p>%形式は、少なくとも1.0バージョンからPythonに組み込まれているフォーマットです。Python 3以前のバージョンから使用している方には馴染みがあるでしょう。</p><p>多少の相違はあるものの、これはC言語の<code>sprintf</code>と同等の関数です。やるべき役割は果たしますが、かなりの作業が必要となります。</p><p>%形式は限られた型しかサポートしていないため、カスタムオブジェクトをこれに渡したい場合はその前にサポートされている型に変換しなければなりません。</p><p>何年も経ってから、ネイティブの文字列データ型に<code>format</code>メソッドが拡張されました。</p><p>str.format関数は、2008年10月にリリースされたPython 2.6にコンテキストマネージャと同時に追加されました。詳細は<a href="https://www.python.org/dev/peps/pep-3101/" rel="nofollow" title="" class="ext-link">PEP-3101</a>に記載されていますが、従来の%の二項演算子が持ついくつかの問題を解決しています。例えば、サポートされる型の制約や、特定の条件でエラーを引き起こす式全体の右辺の扱いなどが挙げられます。</p><p><code>format</code>は（バイナリメソッドにマッピングされた）演算子ではなくメソッドであることから、引数の扱いはより明確になります。つまり、文字列を渡すと文字列として読み取られ、1つの文字列を含んだタプルを渡すと、1つの文字列を含んだタプルとして読み取られます。</p><p>%形式と比較すると、こちらは辞書を使わなくても、パラメータ名を与えられるようになっています。</p><p>当初は、%演算子と完全に置き換えられる予定でしたが（<a href="https://docs.python.org/3.1/whatsnew/3.0.html" rel="nofollow" title="" class="ext-link">Python3.1</a>で従来のスタイルのフォーマット機能は非推奨化される<em>予定でした</em>）、いまだに置き換えは行われていません。この文字列フォーマッタの主な機能は従来の%演算子とほぼ同じですが、シンタックスが多少異なりますし、私の印象としては、より直観的になっています。実際、Ulrichと私が作成した<a href="https://pyformat.info/" rel="nofollow" title="" class="ext-link">pyformat.info</a>によって新しいシステムへの移行に役立っています。</p><p>しかし、明白なのは、PEP-3101では古い機能群が取り除かれているだけでなく、カスタムクラスでより幅広いインタラクションが可能なプロトコルも導入されているということです。</p><p><code>__format__</code>メソッドは、オプションを渡すことができる文字列フォーマットのための<code>__str__</code>と考えることができます。オブジェクトに<code>__format__</code>メソッドを実装した時には、formatメソッドを使った場合、<code>__str__</code>の代わりに使用できます。(ただし<code>"{!s}".format(country)"</code>のように書いた場合は除きます)。</p><p>実際、<a href="https://hg.python.org/releasing/3.4/file/tip/Lib/datetime.py#l725" rel="nofollow" title="" class="ext-link">Python 3.4のdatetime.dateクラス</a>に、良い使用例があります。</p><p>これで「親クラス」の文字列フォーマットに直接日付の書式を設定することができるので、最初に日付データを文字列に変換してから、文字列フォーマッタに渡す必要がなくなります。</p><p>現時点で、<code>.format</code>は文字列のフォーマット方法として推奨されていますが、とても冗長です。</p><p>PEP-0498では、かなり以前からRubyやScala、Perlなどのプログラミング言語に共通する機能を提供して、この状況を改善しようとしています。それが文字列の補間です。この機能では、式は文字列自身に直接統合され、このことは明示的に他のいかなる関数も呼び出す必要が無いことを意味しています。</p><p>ES2015は、”つい最近”この機能を「テンプレートリテラル」と呼び、JavaScriptの世界に導入しました。</p><p>Pythonでは、バッククォートはPython3.0のリリース以前にちょっとした<a href="https://docs.python.org/3.0/whatsnew/3.0.html#removed-syntax" rel="nofollow" title="" class="ext-link">経緯</a>があり、使用することができません。この記号を再び導入すると、言語の基本的な構文に、またしても影響を及ぼすでしょう。その代わりとして、導入されたのがリテラルの<code>f</code>プリフィックスです。</p><p>もはや明示的にその文字列の<code>.format()</code>メソッドを呼び出す必要は無く、単に<code>f</code>プレフィックスを使った形式で表し、最終的な文字列に式を埋め込みます。埋め込まれていなければ、<code>.format()</code>で得られる機能と同じものを提供することになっています。フォーマットされたこれらの文字列は、ドキュメンテーションでは「f文字列」と呼ばれています。</p><p>なかなか良さそうに思えますが、Python 3.6のリリースはまだ１年先なので、もう少し待たなければなりません。しかし、コードはすでに存在しているので、Python 3.6のプレリリース版や<a href="https://github.com/yyuu/pyenv" rel="nofollow" title="" class="ext-link">pyenv</a>で使っているようなティップを入手することができます。試してみてください😊</p><p>もう一つ別のPEP<a href="https://www.python.org/dev/peps/pep-0501/" rel="nofollow" title="" class="ext-link">(0501)</a>では、文字列を遅延評価するi文字列を導入しています。例えば、I18Nに対応したり、最後の評価の前にセキュリティチェックを行ったりすることができます。更なる議論が行われるまで、その提案が延期されているとはいえ、素晴らしい考えだと思います。</p><p>f文字列に戻ります。文字列の補間がこれまでどのようにして解決されたのかを、もっと詳しく知りたいのであれば<a href="https://www.python.org/dev/peps/pep-0502/" rel="nofollow" title="" class="ext-link">PEP-0502</a>を見てください。そこにはこの機能の背景にある意図や他の言語から受けた影響など、もっと詳しい考察が掲載されています。</p>
