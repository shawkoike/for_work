<p><a href="http://ruoyusun.com/2014/05/26/what-d3js-is-not.html" rel="nofollow" title="" class="ext-link">What D3.js is Not</a> by <a href="http://ruoyusun.com/" rel="nofollow" title="" class="ext-link">Ruoyu Sun</a></p><p>最近D3.jsをかなりいじってみました。APIをあれこれ調べ、すこし複雑なチャートを構築した後、長い間D3を誤解していたことに気づきました。それは私だけではありません。友達と話してみると、彼らもD3について勘違いをしています。そこで、よくある誤解のいくつかをはっきりとさせるために、この記事を書く事にしました。</p><p>D3のホームページに行くと、たくさんの素晴らしいチャートとビジュアライゼーションを見ることができます。しかし、D3は、<a href="http://www.highcharts.com/" rel="nofollow" title="" class="ext-link">Highcharts</a> や<a href="http://www.chartjs.org/" rel="nofollow" title="" class="ext-link">Chart.js</a> あるいは<a href="https://developers.google.com/chart/" rel="nofollow" title="" class="ext-link">Google Charts</a> のようなチャート・ライブラリではありません。ただ単に、データセットを受け渡すことや、必要なチャートのタイプ指定、凝ったチャートを入手することはできません。D3はそれよりもずっと低レベルなのです。D3上に構築されたチャート・ライブラリでは、たとえば <a href="http://nvd3.org/" rel="nofollow" title="" class="ext-link">nvd3</a>、<a href="http://code.shutterstock.com/rickshaw/" rel="nofollow" title="" class="ext-link">Rickshaw</a> などがあります。</p><p>D3はグラフィック・レイヤーではありません。実際、D3のグラフィック・パワーの大部分はSVGに由来します。D3は本質的に、SVG (あるいは、HTMLでさえ。というのは、これらは全てXMLに基づいたマークアップ言語であるため) を処理するための、データ・フレンドリーなAPIを提供するのであって、グラフィック自体を「描く」のではありません。つまり、描写という困難な仕事を成し遂げるのはSVGなのです。</p><p>SVGをサポートしていないブラウザに、SVGのためのポリフィルを提供する<a href="http://raphaeljs.com/" rel="nofollow" title="" class="ext-link">Raphaël</a> とは異なり、D3は抽出レイヤーを使わず、SVGを直接処理します。D3を正しく動かすためには、ブラウザがSVGをサポートしている必要があります。</p><p>D3のAPI ( <code>d3.geo.path()</code>のような) には、SVGとCanvasの両方で動くものがありますが、D3のAPIの大部分は、SVGのためにデザインされています。Canvasのライブラリーを探しているのなら、<a href="http://paperjs.org/" rel="nofollow" title="" class="ext-link">Paper.js</a> や、<a href="http://fabricjs.com/" rel="nofollow" title="" class="ext-link">Fabric.js</a>、そして<a href="http://www.createjs.com/#!/EaselJS" rel="nofollow" title="" class="ext-link">EaselJS</a> を見てみて下さい。<a href="http://threejs.org/docs/" rel="nofollow" title="" class="ext-link">Three.js</a> は、WebGLのためのなかなかいいライブラリです。</p><p>AngularJSには、独自のDOM処理API (データ・バインド) がありますが、D3もそうです。この2つを一緒に動かすには、そのどちらかがDOMをコントロールする必要があります。AngularJSをディレクティブに用いてDOMをD3に受け渡し、魔法を使ってもらうか、あるいは、D3のデータ変換APIを使い、AngularJSにDOMを処理してもらうかのいずれかが可能です。しかしながら、どちらのやり方を用いても、両者のフレームワークAPIの大半は使わずに終わります。</p><p>D3をしばらくいじった後、私はD3を<em>データ・ビジュアライゼーション</em>ツールとして定義するつもりでした。D3のAPIが2つの部分、すなわち<em>データ</em>と<em>ビジュアライゼーション</em>を持つという意味においてです。D3はデータ (配列、時系列、ジオデータ) を処理するのに便利なユーティリティーをたくさん備えていて、それ自体かなり役に立ちます。D3のパワフルなビジュアライゼーションAPIは、データだけでなく、文書に変換してバインドすることを容易にします。</p><p>D3を学ぶことはそれほど簡単ではありません。なので、はじめる場合は適切な期待を持つことが重要です。また、早い時期に実際にあれこれやってみて、地道に努力して下さい。</p>
