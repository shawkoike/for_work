<p><a href="https://gist.github.com/bearfrieze/a746c6f12d8bada03589" rel="nofollow" title="" class="ext-link">Comprehensions in Python the Jedi way</a> （2015-03-27） by <a href="http://bear.frieze.dk/" rel="nofollow" title="" class="ext-link">Bjørn Friese</a></p><p>私はよく、ドロイドやジェダイ、惑星、ライトセーバー、スターファイターなどのコレクショングッズを題材にしてプログラムを書きます。Pythonでプログラミングをする際は大抵、これらをリストやセット、辞書として表現するわけです。私は日頃からコレクショングッズをさまざまな形に変身させたいと思っています。そして、その願望を叶えてくれるのが、内包表記という強力な記法です。内包表記は私がさまざまな場面で使っている手法であり、Pythonを使い続けている理由の1つでもあります。では、いくつか例と共に、内包表記がいかに便利かを説明していきましょう。</p><p>以下の例に出てくる処理はどれも、種類豊富なPythonの標準ライブラリがあれば実装できます。その中には、より簡潔で効率の良い処理に改善できるものもあるでしょう。とはいえ、私は標準ライブラリに不満があるわけではあません。内包表記は明快で、実に的確で美しいものだと思っています。必要な情報は全て簡潔で読みやすいコードに記載されているので、ドキュメントを読みあさる必要はありません。</p><p><img src="https://camo.githubusercontent.com/687519cf5b48de9002b50de338698a28aaeabcbb/68747470733a2f2f696d6775722e636f6d2f6f4b43587277412e676966" alt="" data-canonical-src="https://imgur.com/oKCXrwA.gif" style="max-width:100%;"><br>
私たちは今、R2-D2と意思疎通を図ろうとしています。でもR2-D2は、何やら不規則な電子音を発しているだけです。しばらく頭を抱えた後、私たちは、ピー：<code>0</code>とポー：<code>1</code>の羅列を書き出してみることにしました。</p><p>面白いですね。もしかすると、これはASCII文字を表すビットのオクテットかもしれません。では、このビットの羅列をオクテット単位で区切ってみましょう。</p><p>命令型で書くと以下のようになります。</p><p>最初に新しいリストを初期化します。そして一連のビットを8番目のインデックスごとに区切って、長さが8になったものをオクテット用のリストに追加していきます。</p><p>これが最善策でしょうか？　もっといい方法がありますよね。では、関数型で書いた以下のコードを見てください。</p><p>オクテットのインデックスをラムダ関数に<code><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow" title="" class="ext-link">map</a></code>すると、ラムダ関数はそのインデックスから始まるオクテットを返します。この<code>map</code>関数はイテレータ引数を返すので、それを<code><a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow" title="" class="ext-link">list</a></code>関数を使ってリストに変換します。こうすると、命令型の処理よりも少し簡潔になりますが、可読性は下がってしまいます。</p><p>ここでマスターヨーダに意見を仰ぐと、彼は以下の提案をしてくれました。</p><p>もしやフォース？　いいえ、これは内包表記です。より正確に言うと、リスト内包表記です。</p><p>このブラケット<code>[]</code>は、新しいリストを作成していることを意味します。ブラケット内には、まず<code>bbs[i:i+8]</code>と表記します。次は<code>for i in range(0, len(bbs), 8)</code>という<code>for</code>節です。この<code>for</code>節では、新しいリストのベースとして使うイテレータを定義しており、初期状態では新しいリスト内の結果要素を定義しています。</p><p>ここまででリスト内包表記については理解できました。次は再びリスト内包表記を使って、オクテットを文字に変換しましょう。</p><p>すると以下の結果が得られます。</p><p>希望が見えてきましたが、まだ断片化しています。ではスペースを削除したらどうなるでしょう？</p><p>通常は<code>' '</code>（空白）文字を全て<a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow" title="" class="ext-link">filter</a>して削除します。</p><p>これでもうまくいきますが、内包表記の真の力を生かせば、以下のようにシンプルにできます。</p><p>リスト内包表記内で<code>if</code>節を使ってフィルタ作業が行えるとは、素晴らしいですね。</p><p>最後にメッセージをさらに読みやすくするために、文字を統合して文字列にします。</p><p>さて、「snoisneherpmoc」とは一体何でしょう？　もしかしたらR2-D2は何かしらの理由で、メッセージを逆に話していたのかもしれません。</p><p>なんとメッセージは「comprehensions（内包表記）」でした。R2-D2は私たちが何をしているか知っていたんですね。</p><p>この例では勇敢なドロイドのための出会い系サービスを作成します。ドロイドを組み合わせる方法を次のように一覧にします。</p><p><code><a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow" title="" class="ext-link">itertools.combinations</a></code>を使って実現できますが、一旦ここでは、このコードは存在しないことにして、独自のコードを書きましょう。</p><p>まず組み合わせの可能なドロイドを昔ながらの方法で列挙してみましょう。</p><p>これをビルドインの<a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow" title="" class="ext-link">enumerate</a>関数と配列スライス機能を使ってリストを少し改善しましょう。</p><p>これをネストしたリスト内包表記にすれば、1行に集約することができます（そうです、ネストできるのです）。</p><p>最後に好きなジェダイが共通しているかを基に相性度に点数を付けます。条件式を埋め込めばとても簡単にできます。</p><p>では、組み合わせと点数をzip関数を使って、読みやすい書式で出力できるようにします。</p><p>その結果、R2-D2とC-3POは相性抜群と結論付けることができます。</p><p><img src="https://camo.githubusercontent.com/7f70aa48728490f2353b27f6280cee853bcfbbfc/68747470733a2f2f692e696d6775722e636f6d2f646d57526f35742e676966" alt="" data-canonical-src="https://i.imgur.com/dmWRo5t.gif" style="max-width:100%;"></p><p>Death Star周辺での追跡劇の前、Darth VaderとLuke Skywalkerがそれぞれの宇宙船を見つけることができません。見つけられるようにしましょう。</p><p>問題ありません。ネストしたリスト内包表記を使って2つのリストを一緒にします。</p><p>それぞれの宇宙船とパイロットに対して同じことを繰り返すようにします。もしパイロットの<code>ship_id</code>が宇宙船の<code>id</code>と同じ場合は一致とし、tupleをリストに追加します。</p><p>では、正しくできたか見てみましょう。</p><p>発進の準備完了です。</p><p><img src="https://camo.githubusercontent.com/542c232a8230e80eafda57692a6ef6268fa484b6/687474703a2f2f696d6775722e636f6d2f503847335738772e676966" alt="" data-canonical-src="http://imgur.com/P8G3W8w.gif" style="max-width:100%;"></p><p>それぞれのエピソードに出てくる惑星名のリスト（網羅しているものではありません）を含むエピソードの辞書が提示されます。</p><p>どのようにすれば、全エピソードに登場する特徴的な惑星を集約できるのでしょうか。まずネストされたリスト内包表記をと使って平滑化した1つのリストにします。</p><p>注：ネストされた内包表記では左から右へと順番に評価されるため、惑星ループの<em>前に</em>エピソードループが必要になります。</p><p>ここからは、重複したものを除くためにできたリストを次のようなセットにラップすることができます。</p><p>しかし、ここではしません。実は秘密兵器を使ってこのタスクを単純化して、取り除きます。</p><p>内包表記の設定完了です。</p><p><img src="https://camo.githubusercontent.com/e0c6bb99d4b3ca8f8de053dd55e577f50c50ffed/68747470733a2f2f692e696d6775722e636f6d2f4e4c6731677a432e676966" alt="" data-canonical-src="https://i.imgur.com/NLg1gzC.gif" style="max-width:100%;"></p><p>最近になって、友人の書いたコードを見て<code><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow" title="" class="ext-link">collections.Counter</a></code>クラスに遭遇しました。友人はこれを辞書に出てくる特定の値の頻度を表す辞書の作成に用いていました。次のようになります。</p><p>とてもカッコいい解決方法だと思いました。リストが不要だったので、リスト内包表記ではなく、ジェネレータ式を使っていることに注意してください（ジェネレータ式を使うため、<code>Counter</code>はイテレータ引数を取ります）。</p><p>しかし、本当にこれを実現するためには、クラスをインポートしてそのクラスのドキュメントを読み込む必要はあるのでしょうか。いいえ、辞書内包表記がこれをしてくれます。次のとおりです。</p><p><img src="https://camo.githubusercontent.com/d0785652dcd9a8489437e30d9b1c04ba4305e0b2/68747470733a2f2f692e696d6775722e636f6d2f6c314c3973304b2e676966" alt="" data-canonical-src="https://i.imgur.com/l1L9s0K.gif" style="max-width:100%;"></p><p>この方法では、行を追加して色のリストを作ります。しかし、その一方で<code>Counter</code>のドキュメントを読まなくても何が起きているのかを簡単に理解することができます。</p><p>注：この解決法では内包表記は二次元時間で実行されますが、<code>collections.Counter</code>は線形時間で実行されます。効率良くするためには、<code>collections.Counter</code>を使ってください。</p><p>内包表記についての概要が理解できたと思っていただけたら幸いです。もし、思えないのであれば、実際に試してみてください。</p><p>最後まで記事を読んでいただき、ありがとうございました。どのように内包表記を使ったかぜひコメントでお聞かせください。</p><p><img src="https://camo.githubusercontent.com/8eac0ffd961bb860128d642765ebfb9401410bac/68747470733a2f2f696d6775722e636f6d2f4242453955556c2e676966" alt="" data-canonical-src="https://imgur.com/BBE9UUl.gif" style="max-width:100%;"></p>
