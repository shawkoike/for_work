<p><a href="http://blogs.adobe.com/dreamweaver/2015/06/the-state-of-svg-animation.html#.VXnQI_ntlBc" rel="nofollow" title="" class="ext-link">The State of SVG Animation</a> （2015-06-05） by <a href="http://sarasoueidan.com/" rel="nofollow" title="" class="ext-link">Sara Soueidan</a></p><p><img src="http://blogs.adobe.com/dreamweaver/files/2015/06/feature_2234_svg_animation-700x399.jpg" class="attachment-560x315 wp-post-image" alt="feature_2234_svg_animation" data-original-width="828" data-original-height="472" width="705" height="401"></p><p>SVG（Scalabe Vector Graphics）の世界は魅力的です。そして、これを使ってできることや、これに用意されているオプションには圧倒されてしまうほどです。</p><p>SVGはXMLベースの2次元ベクター画像形式で、インタラクティビティとアニメーションをサポートします。言い換えると、SVGは図形やグラフをレンダリングするXMLタグで、その図形やグラフはHTMLの構成要素がそうであるように、インタラクトしたりアニメーション化したりできるのです。</p><p>SVGに関して、私がよく受ける質問の1つは、SVG画像のアニメーション化についてです。そのやり方だけではなく、それが何なのかということも聞かれます。ですから、現在の（そして未来の）SVGアニメーションの状況を見ながら、あなたが苦痛を感じずに行えるようなヒントやツールについてお話ししましょう。</p><p>SMIL（”スマイル”と発音します）はXMLベースの言語で、インタラクティブなマルチメディアプレゼンテーションを作るために宣言的なアニメーションを作ることを可能にするものです。これらのアニメーションは、HTMLやSVGなど他のXMLベースの言語を動かすために再利用することもできます。</p><p>昔も今も、SMILは主に、SVG画像をアニメーション化する3つの方法のうちの1つとしてWebコミュニティで知られています。</p><p>SMILには、SVGのコンテンツを動かす一連のアニメーション要素が含まれています。いくつか例を挙げてみましょう。</p><p>更に多くの要素がSVGで定義されていますし、更に多くの属性が上記の要素の機能を拡張するために加えられています。SVGで定義されている、最も重要なアニメーション要素は、<code>&lt;animateTransform&gt;</code>です。これは、SVG要素における変形、例えば縮尺、回転、ゆがみなどをアニメーション化するために使うことができます。</p><p>SMILを使って要素をアニメーション化するのに必要な構文は、基本的に簡単で人にも読みやすいものです。アニメーション要素と同様、属性も分かり易く命名されているため、ほとんどの場合名前を見れば機能が一目瞭然です。</p><p>例えば、ある任意のパスに沿ってSVG要素を動かす構文は、以下のようになります。</p><p>再利用のために、上のコードは次のように書き換えることができます。</p><p>上記2つの例の違いは、2つ目の方ではパスの定義を分け、<code>&lt;mpath&gt;</code>要素を使ってパスを参照していることです。これにより、2つ目の例でやっているようにパスを描画領域に表示できることに加え、同じパスを複数の<code>&lt;animateMotion&gt;</code>で参照することができます。</p><p>どちらの例でも<code>&lt;animateMotion&gt;</code>要素は動かしたい要素の中に入れることができますし、<code>&lt;animateMotion&gt;</code>で<code>xlink:href</code>属性を使って、アニメーションのターゲットを特定することもできます。</p><p>上記の例のライブデモは、<a href="http://codepen.io/SaraSoueidan/pen/0642931398bf1cf3ed1ff9b3e6b52398/" rel="nofollow" title="" class="ext-link">こちら</a>でチェックできます。</p><p>任意のパスに沿った動きは、SMILを使って作れるたくさんの例のうちの1つです。これらのネイティブのSVGアニメーションの要素は、様々な効果を作るために使うことができます。なぜなら事実上、SVGのアニメーション属性なら何でもアニメーション化することができるからです。そしてこれが、SMILの最も強力な特徴の1つです。</p><p>例えば、<code>&lt;animate&gt;</code>要素を使うことで、要素の色、位置、面積その他をアニメーション化することができます。</p><p>また、パスデータ（<code>d</code>属性）をアニメーション化するために使うこともできるので、下にある画像のような、図形が移り変わる効果を作ることができます。</p><p><img class="wp-image-2243 size-large" src="http://blogs.adobe.com/dreamweaver/files/2015/06/shape-tweening-700x370.png" alt="A series of shapes morphine into one another. Image Credit: Noah Blon." width="700" height="370" data-original-width="700" data-original-height="370"><br>
モーフィング処理を施した図形（By Noah Blon）</p><p>上の例は、Noah Blonによって作られたもので、ある図形から他の図形にパスデータを変えるためにSMILを使っています。Noahの例で使われているコードは、次のようなものになります。</p><p>上のコードは、次のGIFに使われているような効果を生み出します。</p><p><img class="aligncenter size-full wp-image-2244" src="http://blogs.adobe.com/dreamweaver/files/2015/06/tweener.gif" alt="tweener" data-original-width="112" data-original-height="108" width="112" height="108"><br>
全てのコードとライブデモは、<a href="http://codepen.io/noahblon/blog/an-intro-to-svg-animation-with-smil" rel="nofollow" title="" class="ext-link">こちら</a>から見ることができます。</p><p>Noahは複数のパスの形を<code>values</code>属性の中で指定し、その後ブラウザがこれらの値の間でアニメーション化しました。これが可能なのは、<code>values</code>の値が数字で定義されており、さらにきっちり同じ個数の点で構成されているからです。つまり実際には、動かされているのはパスを作る制御点だということです。</p><p>ほとんどの場合、属性の名前は一目瞭然ですが、そうではないものもあります。私はCSS-Tricksで、SMILに関する記事を書いたことがあります。そこには、もしもあなたが現在SMILを使おうと思っているなら、知っておくべきことが全て入っています。その記事は、<a href="https://css-tricks.com/guide-svg-animations-smil/" rel="nofollow" title="" class="ext-link">こちら</a>で読むことができます。</p><p>CSS-Tricksの記事は、SMILのアニメーション要素と属性をよく説明しています。しかし、もしSMILをよく知るためにSMIL構文とCSSアニメーションのプロパティ構文を比較したいのなら、私がこの話題について話した時に使ったこちらの<a href="http://slides.com/sarasoueidan/animating-svg-with-css-and-smil-full-version#/1" rel="nofollow" title="" class="ext-link">スライド</a>をチェックしてみてください。</p><p>SMILはとてもパワフルで、素晴らしいパフォーマンスを持っています。しかし、全てのブラウザでサポートされているわけではありません。Internet Explorerは、どのバージョンでもSMILをサポートしたことがありませんし、今後もサポートしようというつもりもないようです。</p><p>さらにBlink（Chrome）では、CSSとWeb Animationを支持し、<a href="https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/5o0yiO440LM/mHtmsQxf2bIJ" rel="nofollow" title="" class="ext-link">SMILを廃止させようとする動き</a>もあります。ですから、これらのアニメーションにとって、将来はあまり明るいものではありません。</p><p>SMILを廃止するということは、代わりのものは用意せずに、画像として取り込んだSVGをアニメーション化する機能を失うということです。このことについては、また後ほど、この記事の中でお話しましょう。</p><p>CSSを使ってSVG画像にスタイル付け、アニメーション化ができます。CSSを使ったSVG要素のアニメーション化は、HTML要素を使うのと全く同じように機能します。タイプセレクタ名といくつかのプロパティ名が異なるだけです。</p><p>SVG 1.1では、SVG要素のスタイル付けにCSSは一切必要なく、全てのスタイルは<em>プレゼンテーション属性</em>によって適用されます。プレゼンテーション属性には<code>fill</code>、<code>stroke</code>、<code>stroke-width</code>、<code>opacity</code>などが挙げられます。</p><p>次の例は、星形のポリゴンに”border”（<code>stroke</code>）と”background color”（<code>fill</code>）のスタイルを付けるプレゼンテーション属性を使ったSVGスニペットです。</p><p>
</p>
<p>プレゼンテーション属性は特別なプロパティで、SVG要素のスタイル付けに使う他、スタイルカスケードでは、ユーザエージェント（ブラウザなど）スタイルシートなどの要素内で継承されているスタイルよりも優先されます。</p><p>SVGにはたくさんのプレゼンテーション属性があります。しかし、ここで注目するのは<strong>CSS経由で設定、アニメーション化できる属性</strong>です。</p><p>全てのプレゼンテーション属性がCSSで設定できるわけではありません。全ての属性がCSSでプロパティとして使えるわけではないからです。CSSプロパティとして利用できるプレゼンテーション属性のみがCSSで設定、アニメーション化できます。CSSプロパティとして<em>現在</em>利用可能な全てのプレゼンテーション属性は<a href="http://www.w3.org/TR/SVG/propidx.html" rel="nofollow" title="" class="ext-link">SVG 1.1の仕様に掲載</a>されています。</p><p>先のコード例に戻ってプレゼンテーション属性をCSSプロパティに変換する場合は、コードは次のように書き換えることができます。</p><p>
</p>
<p>スタイルは、HTMLのスタイルと同様に、それ自身の<code>&lt;style&gt;</code> の”島”に移すこともできます。上の例で、<code>width</code>と<code>height</code>をSVG内部の<code>&lt;rect&gt;</code>要素に設定した場合、CSSではこれらの属性を<code>&lt;rect&gt;</code>要素上に設定することはできません。現状ではそれは不可能なためです。</p><p>最新SVG 2の仕様では、SVGスタイル付けのプロパティのリストは拡張され、コンテントサイズや、<code>x</code>、<code>y</code>、<code>width</code>、<code>height</code>、<code>cx</code>、<code>cy</code>、<code>r</code>に限らない多くの位置プロパティも使えるようになりました。新リストは<a href="http://www.w3.org/TR/SVG2/styling.html#SVGStylingProperties" rel="nofollow" title="" class="ext-link">SVG 2の仕様に掲載</a>されています。</p><p>これらのプロパティの中には既にChromeで使えるものもありますので、興味があればテストしてみてください。</p><p>CSSで設定できるプロパティがあり、その値をアニメーション化することができるなら、これのプロパティはCSSでアニメーション化できて当然です。ですから、これらプロパティが適用されたSVG要素もCSS経由でアニメーション化できるはずです…。</p><p>実際、CSSアニメーションとトランジションをCSSのアニメーション化が可能なSVGプロパティに適用することができます。例えば、触れると色が変化するアイコンといった、かっこいいホバーインタラクションや、2次元と3次元の要素がどちらも変化する複雑なアニメーションも作れるのです。</p><p>CSSを使い、ホバーによって色が変わるSVGアイコンを表現するなら、次のようなコードが思い浮かぶでしょう。</p><p>実際、CSSはホバーインタラクションなどのシンプルなアニメーションやインタラクション作成には最適で、一般的にパフォーマンスも非常に良いです。しかし現在のところ、SVG要素上のCSSアニメーションは、ハードウェアアクセラレーションを一部のブラウザで行っていないので、ブラウザによっては動かないことがあります。つまり、まだパフォーマンスは上がる可能性があります。これからの改良に期待しましょう。</p><p>また、CSSアニメーション（<code>@keyframe</code>などを使用）はIE9以下では動きませんので注意してください。</p><p>印象的な効果には、回転、スケール、ゆがみ、または単純に要素を置き換えるアニメーション変形機能が多く使われています。変形アニメーションを使った簡単な例として、これもNoah Blohが作成したお天気アイコンセットをCodepenで見てください。</p><p><a href="http://codepen.io/noahblon/pen/lxukH/" rel="nofollow" title="" class="ext-link">CSSを使ってアニメーション化したSVGアイコン</a>　作者：Noah Blon（<a href="http://codepen.io/noahblon/" rel="nofollow" title="" class="ext-link">@noahblon</a>）、<a href="http://codepen.io/" rel="nofollow" title="" class="ext-link">CodePen</a></p><p>いくつかのアイコンでは、図形のグループ（雨粒など）をスタート地点である”雲の中”から無限に降ってくるように変形したり、回転変形を使って太陽そのものを回転させたりしています。</p><p>上記のデモをFirefoxで表示させると、いくつかのアニメが壊れていることに気づくでしょう。それには理由があります。</p><p>CSSを使ったSVG要素のアニメーション化は、CSSを使ったHTML要素のアニメーション化に似ています。ただ、変形においては、大きな違いが1つあります。HTML要素の変形基点の初期値は<code>(50%, 50%)</code>であり、これは要素の中心です。一方、SVG要素の変形基点はそのときのユーザの座標系の原点にあり、これは描画領域の左上のコーナーにある(0, 0)点です。<br>
では、HTML<code>&lt;div&gt;</code>要素とSVGの<code>&lt;rect&gt;</code>要素があるとしましょう（赤い円は変形基点の位置を表しています）。</p><p>
</p>
<p>両方を変形基点の初期値を変えずに45度回転させるとすると、次のような結果になるでしょう。</p><p><img class="aligncenter size-large wp-image-2240" src="http://blogs.adobe.com/dreamweaver/files/2015/06/initial-to-700x213.png" alt="initial-to" data-original-width="700" data-original-height="213" width="700" height="213"><br>
ですから、SVG要素をその中心を基点に動かしたい場合は、<code>transform-origin</code>プロパティを使って明確に変形基点を設定する必要があります。</p><p>SVG要素の変形基点を変えると、次のような結果になります。</p><p><img class="aligncenter size-large wp-image-2242" src="http://blogs.adobe.com/dreamweaver/files/2015/06/set-to-700x207.png" alt="set-to" data-original-width="700" data-original-height="207" width="700" height="207"></p><p>というわけで、現状、このようなアニメーションはFirefoxでは動かないのです。よく<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=891074" rel="nofollow" title="" class="ext-link">知られたバグ</a>です。</p><p>Noahのデモは、動かしたい要素の中心に変形基点を設定する際、パーセンテージ値を使っているので、Firefoxでは壊れてしまうのです。Firefox上で思いのまま回転させるには、絶対値（ピクセル、<code>em</code>など）で変形基点を設定するとよいでしょう。その際、<strong>基点はSVG描画領域のユーザの座標系に相対する値</strong>で決めることになります。例えば、変形基点<code>50px 50px</code>とは、SVGの左上のコーナーから<code>50px 50px</code>の点を指すのであり、要素そのものから測った位置ではありません。</p><p>多くの場合、このような方法で変形基点を設定したくはありませんが、Firefoxで機能させるには、今のところこのような作業が必要なのです。</p><p>Firefoxの問題に加え、IEとOperaは、全てのSVG要素でCSS変形を受け入れないという問題があります。更に多くの懸念点があるのですが、これについては後の項で述べます。</p><p>CSSを使ったSVGのアニメーション化によって、より複雑なアニメーション効果を生み出せるのですが、その素晴らしさは変形効果によるところが多いのです。そしてCSS変形は、現在のところ制約やバグ、ブラウザによって表示がまちまちだという問題を抱えています。<br>
それでも、CSSで実現できるのは、簡潔な色の時間的変化や変形要素だけではありません。</p><p>インパクトが強く人気の高いSVGアニメーション効果といえば、<strong>線画効果</strong>でしょう。この効果を使ったサンプルはまずXboxのWebサイトで紹介され、Vox mediaブログの<a href="http://product.voxmedia.com/2013/11/25/5426880/polygon-feature-design-svg-animations-for-fun-and-profit" rel="nofollow" title="" class="ext-link">この記事</a>で解説されています。これがそのアニメーションです。</p><p>
</p>
<p><a href="http://blogs.adobe.com/dreamweaver/files/2015/06/xbox.gif" onclick='s_objectID="http://blogs.adobe.com/dreamweaver/files/2015/06/xbox.gif_1";return this.s_oc?this.s_oc(e):true' rel="nofollow" title="" class="ext-link"><img class="aligncenter wp-image-2246 size-full" src="http://blogs.adobe.com/dreamweaver/files/2015/06/xbox.gif" alt="xbox" width="705" height="348" data-original-width="720" data-original-height="356"></a></p><p>この効果はアニメーション化された2つの特定のSVGプロパティ、すなわち<code>stroke-dasharray</code>と<code>stroke-dashoffset</code>で作られています。1つ目のプロパティは、ダッシュとその間のスペースの長さを指定することで、実線”border”(stroke）を破線に変える機能を持っています。2つ目のプロパティはオフセット、つまり線がどこからどの長さまで伸びるかという位置を変更できます。これらプロパティはCSSの中で使うことができ、アニメーション化が可能です。</p><p>手元にあるパスを長いダッシュに変換し、さらにパスに沿ってそのダッシュのオフセットを変換してアニメーション化することで、CSSとSVGパスだけを使った線画の効果を出すことができます。</p><p>この効果は、Jake Archibaldが書いているブログの<a href="http://jakearchibald.com/2013/animated-line-drawing-svg/" rel="nofollow" title="" class="ext-link">とある記事</a>の中で初めて紹介されました。記事には、このテクニックがどのように機能するかを説明するためにインタラクティブなデモも用意されています。下記の画像は、2つのプロパティの効果をお見せするために、実際にデモを行い記録したものです。</p><p>
</p>
<p><a href="http://blogs.adobe.com/dreamweaver/files/2015/06/genie-sm.gif" onclick='s_objectID="http://blogs.adobe.com/dreamweaver/files/2015/06/genie-sm.gif_1";return this.s_oc?this.s_oc(e):true' rel="nofollow" title="" class="ext-link"><img class="aligncenter wp-image-2247 size-full" src="http://blogs.adobe.com/dreamweaver/files/2015/06/line-drawing-demo.gif" alt="genie-sm" width="705" height="348" data-original-width="720" data-original-height="356"></a></p><p>ご自身でデモを行ってみたい方は、Jakeの記事をチェックしてみてください。</p><p>このテクニックのコツは、パスの正確な長さを測るところにあります。それが分かれば、パスを同じ長さのダッシュに変換することができ、（後ろにある）パスの可視境界線の外側にダッシュを”引っ張り出す”ために、その長さをオフセット値として使うことができます。そしてそれをアニメーション化するのです。</p><p>CSSでこの効果を出すには、次のような式になります。</p><p>UI要素をより表現豊かにしたい場合に、線画効果を使うととても効果的です。Codropsには、一般的なUI要素やインタラクションをより良くするために、このテクニックを使った数多くの実例がありますが、ここでは下記の2つを紹介しておきます。</p><p>また、アニメーション化したいパスの正確な長さを知ることができないケースも多くあります。アニメーション化しようとしているパスが多くなると、一つ一つの長さを確認し、設定するのが面倒になってくるでしょう。JavaScriptを使えば、この問題は解決できます。</p><p>実際、CSSやSMILのアニメーションで制約されている多くのことがJavaScriptでは対応可能となっています。特にアニメーションのタイミングやシンクロの機能が有効です。</p><p>JavaScriptを使ってSVGアニメーションを作成する場合も、SMILやCSSを使う場合と同様の機能を得ることができます。また、JavaScriptではそれ以上のことが可能になっています。私が思い付く中で、ただ一つ制約と感じることがあるのですが、これについては、次の項で詳しくお話します。</p><p>CSSを使って線画を作成した前項の例を取り上げてみましょう。JavaScriptでも同様のことが可能です。さらに、SVG DOMのメソッド<code>getTotalLength()</code>のお蔭で、単純に作業しているパスを選択し、このメソッドを使って値を割り出すことで、パスの長さを常に知ることができます。</p><p>非常にシンプルなアニメーションでない限り、ほとんどの場合、JavaScriptを使用してこの効果を得ようと思うでしょう。いくつかのプラグインがすでに存在しますので、2つ紹介しておきます。<a href="http://lazylinepainter.info/" rel="nofollow" title="" class="ext-link">例1</a>と<a href="http://greensock.com/drawSVG" rel="nofollow" title="" class="ext-link">例2</a>。例2は、とても人気の高いアニメーションライブラリである<a href="http://greensock.com/" rel="nofollow" title="" class="ext-link">Greensock</a>用のプラグインです。</p><p>もし、vanilla JavaScriptを使ってゼロからSVGアニメーションを作成するとなると、いくつかのブラウザの不整合や、先にお話ししたバグに直面することになります。しかし、公開されているいくつかのSVGアニメーションライブラリでは、この問題に対処しているので、問題を回避することができます。</p><p>世の中には数多くのSVGアニメーションライブラリが存在しますが、最も人気の高い3つのライブラリを紹介します。<a href="http://greensock.com/" rel="nofollow" title="" class="ext-link">Greensock</a>、<a href="http://snapsvg.io/" rel="nofollow" title="" class="ext-link">Snap.svg</a>、そして<a href="http://julian.com/research/velocity/" rel="nofollow" title="" class="ext-link">Velocity.js</a>です。SVGアニメーションに馴染みのある方であれば、他にも思い当たるライブラリがあると思いますが（例えば、<a href="http://d3js.org/" rel="nofollow" title="" class="ext-link">D3.js</a>など）、今日では、上記3つが一番人気の高いライブラリと言えます。</p><p>JavaScriptでは、SVGパスデータ（<code>d</code>属性）もアニメーション化することができます。これによって、まさにあなたのアニメーションやUIを次のレベルへと導く、見事なアニメーションを作成することが可能になります。</p><p>例えば、下記のアニメーションは、CodropsのManoela Ilicによって作成された効果で、パスの図形（黄緑色の範囲）をアニメーション化することによって再現されたMac OS Xのジニーエフェクトです。</p><p><a href="http://blogs.adobe.com/dreamweaver/files/2015/06/genie-sm.gif" onclick='s_objectID="http://blogs.adobe.com/dreamweaver/files/2015/06/genie-sm.gif_1";return this.s_oc?this.s_oc(e):true' rel="nofollow" title="" class="ext-link"><img class="aligncenter wp-image-2247 size-full" src="http://blogs.adobe.com/dreamweaver/files/2015/06/genie-sm.gif" alt="genie-sm" width="705" height="348" data-original-width="720" data-original-height="356"></a></p><p>より独創的な効果の作成も可能です。<a href="http://slides.com/sarasoueidan/building-better-interfaces-with-svg#/23" rel="nofollow" title="" class="ext-link">リアルなインターフェース効果</a>を作り上げることに加え、要素のありかをユーザに知らせる手助けをするために、適したアニメーション効果を活用することによって、ユーザインターフェースの全般的なユーザエクスペリエンスを改良することができます。</p><p>CSSでも対応が可能なように、JavaScriptでも簡単なトランジションやアニメーションが作成できます。しかもブラウザのバグなしに、です。例えば、Greensockでは、クロスブラウザに対応した方法を提供しています。IEをサポートしてないCSSのプロパティアニメーションの代わりにSVG属性のアニメーションを使用することによって、Internet Explorerでこれらのアニメーションを作成する適切なテクニックを提供しています。</p><p><a href="https://w3c.github.io/web-animations/" rel="nofollow" title="" class="ext-link">Web Animations API</a>であるJavaScript animation APIは、SMILが提供している機能の（全部ではありませんが）いくつかのギャップを埋めるためにあります。これは素晴らしいことではありますが、SVGを画像として取り込んでいる場合においては、依然として制約があります。以下で詳しく説明していきましょう。</p><p>私がSMILを使わなくなった、また使用を推奨しない主な理由は、SMILが持つ現在そして将来のブラウザサポートの状況にあります。すぐにそのブラウザサポートが変更されるといった傾向ではないので、更に<em>多く</em>のブラウザがサポートするようにならない限り、将来、SMILの使用率はもっと減少していくでしょう。</p><p>CSSにおいては、全部ではないのですが、多くのSVGプロパティをアニメーション化できるというだけです。<em>現時点で、</em>パスの<code>d</code>属性データといったような属性をCSSではアニメーション化できません。つまり、当分の間は、CSSを使った図形が移り変わる効果や、ついでに言えば、どのパスアニメーション効果も構築することはできないということです。</p><p>言うまでもありませんが、バージョン11以前のInternet Explorerでは、SVG要素のCSSアニメーションそしてトランジションをサポートしていませんでした。また、最新のMS EdgeブラウザでもCSS変形をサポートしていません。それに<a href="http://greensock.com/forums/topic/9360-animation-quirks-and-inconsistencies-across-browsers/" rel="nofollow" title="" class="ext-link">CSSを使ってSVGアニメーションを行う際に問題となる多くのブラウザの不整合</a>と併せて、FireFoxでの変形に関する元々のバグを考慮すると、機能の根幹に関わらないシンプルなアニメーションに対してのみCSSを使用することを推奨します。もし、画像やページ、アプリケーションのアニメーション化が極めて重要なのであれば、JavaScriptを使用することを私はお勧めします。</p><p><em>注記： CSS-Tricksに掲載されている記事の中で、SVG要素に対してCSS変形を行う際のブラウザのバグと不整合に関して、Jack Doyleが詳細に説明しています。<a href="https://css-tricks.com/svg-animation-on-css-transforms/" rel="nofollow" title="" class="ext-link">こちら</a>からその記事をお読みいただけます。</em></p><p>とはいえ、CSSはSVG SMILアニメーションを生成する多くの機能を持ち合わせています。今日では、パス機能と併せてSMILの動作をCSSに取り込む<a href="http://dev.w3.org/fxtf/motion-1/" rel="nofollow" title="" class="ext-link">CSS Motion Path Module</a>があります。CSSを使ってパスと一緒にSVG、そしてHTML要素をアニメーション化することができるのです。以前はWeb Animations APIにもこの機能が含まれていましたが、後にCSS Motion Path Moduleが発表されると、この機能は削除されてしまいました。</p><p>しかしながら、SMILが軽視されている今、CSSはギャップを埋めるために、Motion Path Module以上のものが必要になってきます。なぜなら、CSSでは依然としてSVGパスのアニメーション化ができない上に、複数のアニメーションを同時に動かすためのシークエンスやアニメーションをグループ化することができないからです。SMILアニメーションのトリガーやシンクロ機能は素晴らしいものなのですが、この件に関して言えば、CSSは機能を存分に発揮することができていません。</p><p>このようなことから、SVGをアニメーション化するツールとして現在私が信頼しているのがJavaScriptというわけです。そして、私がライブラリとして選んでいるのがSVGアニメーションに特化した多くの機能を持つGreensockです。ブラウザの不整合も気にすることなくSVGアニメーションを作成することができます。更にGreensockは、メソッドやプロパティを多く追加しており、SVGでの直感的ではない標準アニメーションの振る舞いに対処することで、期待している動作を実現するアニメーションが作成できます。</p><p>Snap.svgは、SVGのマニピュレーション向けとして頼りになるライブラリで、jQueryと同じように適用することができます。しかし、Greensockのタイムライン並びに他の機能は、複雑なSVGアニメーションを作成する際にはとても強力です。</p><p>とは言え、SVGをアニメーション化する際には、JavaScriptには重大な制約があります。セキュリティの点から、<code>&lt;img&gt;</code>, <code>&lt;picture&gt;</code>やCSSバックグラウンド画像を使って画像として取り込んだSVGは、JavaScriptを使ってアニメーション化することができません。</p><p>どういうことかと言うと、画像としてSVGを取り込んだ場合、その上に定義したどのJavaScriptアニメーションも機能しません。これは、CSSとSMILアニメーションだけで機能するのですが、CSSについては、<code>&lt;svg&gt;</code>の外ではなく中で定義しなくてはなりません。<code>:hover</code>といったインタラクションの場合は、どちらでも機能しないでしょう。</p><p>SMILでは、複雑なパスアニメーションを作成することができ、画像として取り込んだSVGで機能もします。しかし、SMILは廃止される可能性がありますし、CSSではこれを実現する能力がありません。CSSがSMILに代わる機能を備えるのを待つ必要があり、それまでは、SVGを画像としてアニメーション化する場合は、ごく限られた範囲で行うしかありません。</p><p>MozillaのBrian Birtlesが書いた<a href="https://birtles.wordpress.com/2015/05/01/what-do-we-do-with-smil/" rel="nofollow" title="" class="ext-link">記事</a>には、最も一般的なSMILの使用事例が紹介されています。また、SMILの廃止によって生まれるギャップを埋めるためのCSSのいくつかの機能をリストアップしています。しかし、そのギャップが埋まるまでは、SMILそして画像にあるIEやChrome向けのドロップサポートを使用することができます。または、単純にCSSを使ったシンプルなアニメーションに落ち着くか、素晴らしい効果を作成したいのであれば、JavaScriptを使用して、<a href="http://www.smashingmagazine.com/2014/11/03/styling-and-animating-svgs-with-css/4/" rel="nofollow" title="" class="ext-link">他に使えそうな取り込みテクニック使って</a>、SVGを取り込むかのどちらかです。</p><p>それぞれのアニメーションテクニックで何が出来るか出来ないかに加え、Sarah Drasnerが執筆した<a href="https://css-tricks.com/weighing-svg-animation-techniques-benchmarks/" rel="nofollow" title="" class="ext-link">素晴らしい記事</a>では、それらのテクニックによってアニメーションがどのように機能するかについて述べています。例えば、異なるアニメーションテクニックをベンチマークで重み付けしたり、CSSやSMIL、複数のJavaScriptアニメーションライブラリなどで比較してみたりしています。詳細については、記事をご覧になってください。</p><p>SVGは、多くの意見が交換され、多くの開発者が携わり、そして毎日のように変化が起こっている、壮大な世界です。自分の意見や要求に重み付けをし、そして作成段階、最適化、取り込み、最終のアニメーション段階ごとに自分に最適なテクニックを選択するようにしてください。この記事が、現在のSVGアニメーションでは何が出来て、何が出来ないかの概要をつかむ手助けになれば幸いです。あなたが次に携わるプロジェクトでは、容易に最適なアニメーションテクニックを選択できることを願っています。全ての状況をここでは語れていませんが、最適なSVGアニメーションツールを選択する上で、この記事が参考になれば光栄です。</p><p>お読みいただき、ありがとうございます<img src="http://blogs.adobe.com/dreamweaver/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" data-original-width="18" data-original-height="18" width="18" height="18"></p>
