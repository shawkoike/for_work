<p><a href="https://medium.com/@ryan_brownhill/crafting-easing-curves-for-user-interfaces-34f39e1b4a43" rel="nofollow" title="" class="ext-link">Crafting Easing Curves for User Interfaces</a> （2015-05-09） by <a href="http://ryanbrownhill.com/about/" rel="nofollow" title="" class="ext-link">Ryan Brownhill</a></p><p><img class="graf-image" data-image-id="1*zCF7Jk2R6I3OSBeAQHk6pw.png" data-width="1508" data-height="508" src="https://d262ilb51hltx0.cloudfront.net/max/2000/1*zCF7Jk2R6I3OSBeAQHk6pw.png"></p><p>フラットデザインの導入以来、アニメーションの質が、今までにないほど、優れたインターフェース作成のために必要不可欠なものとなっています。モーションデザインを通して、製品の総体的なブランドエクスペリエンスを左右するようになり、製品を、市場の他のものと差別化する要素となりました。アニメーションは複雑なインタラクションを簡素化し、優れたデザインを記憶に残るユーザエクスペリエンスにしました。では、質の高いアニメーションはどのように作られるのでしょうか？　イージングカーブは多くの要となるコンポーネントの1つで、適切なアニメーションをとり、素晴らしいものに作り上げます。</p><p>問題なのは、イージングカーブがどのように機能するかについての理解が、少々難しいということです。前回の記事<a href="https://medium.com/@ryan_brownhill/after-effects-to-css-79225c1d767e" rel="nofollow" title="" class="ext-link">After Effects to CSS</a>で触れたタイミング関数への興味の派生としてこの記事を書きましたが、この記事を読むことで前述の問題が解消すればいいなと思います。読者の皆さんはイージングカーブがどのように機能するか、そしてどのようにデザインをすればいいかについて理解を深めたいと思っていたことでしょう。</p><p>イージングカーブは、グラフ上の加速度パターンを定義する行です。イージングカーブは一般的に、モーションカーブ、タイミング関数、ベジェ曲線、単にカーブなどと異なった呼称で言及されています。イージングカーブはさまざまな形を持ち、ease-in、ease-out、あるいは ease-in-outといったキーワードで指定される値を持つものもあります。</p><p>イージングカーブはX軸とY軸の値で定義されます。XとYの意味はアプリケーションごとに変化します。開発の範囲内では、XとYの意味は固定されたままです。すなわち、時間（X）の経過とともに、アニメーション（Y）のパーセンテージで定義されます。</p><p><img class="graf-image" data-image-id="1*yrj0VOEk_rciKIDglyvF-A.png" data-width="447" data-height="446" src="https://d262ilb51hltx0.cloudfront.net/max/800/1*yrj0VOEk_rciKIDglyvF-A.png"></p><p>イージングカーブは、実行した時、どのように見えるでしょうか？　それはタイミングとスペーシングのコンセプトが動き始める状態になるときです。</p><p>タイミングはアニメーションが終了するまでの継続時間を指し、スペーシングは各々の”フレーム”の間隔を指します。ですが、今回の場合、スペーシングは、それぞれのアニメーションのパーセンテージの間隔を指すものとします。以下は、スペーシングとイージングカーブの関連性について例示したものです。カーブが垂直に近いほど速く、水平に近いほど遅いことに注意してみてください。</p><p style="text-align:center"><em>Linear Easeスペーシング</em></p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*fpHbdiO48eNmQzAZG8S2zQ.gif" data-width="810" data-height=""><source src="https://d262ilb51hltx0.cloudfront.net/max/900/1*fpHbdiO48eNmQzAZG8S2zQ.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/900/1*fpHbdiO48eNmQzAZG8S2zQ.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p>Linear easeスペーシングでは、点の移動する間隔は、アニメーションの長さと同じです。<a href="http://codepen.io/ryanbrownhill/pen/EjVdeY" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p style="text-align:center"><em>Ease Inスペーシング</em></p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*7LJjBNRmXRhfAQV2kC2Z8g.gif" data-width="740" data-height="352"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*7LJjBNRmXRhfAQV2kC2Z8g.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*7LJjBNRmXRhfAQV2kC2Z8g.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p>Ease inスペーシングでは、点の動きの間隔が最初は狭く、アニメーションが続くにつれ広がります。こうすることにより、点が加速していくかのような錯覚を与えます。 <a href="http://codepen.io/ryanbrownhill/pen/VLvEre" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p style="text-align:center"><em>Ease Outスペーシング</em></p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*u2F7k1-MldDAVaR3HS456w.gif" data-width="724" data-height="362"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*u2F7k1-MldDAVaR3HS456w.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*u2F7k1-MldDAVaR3HS456w.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p>Ease outスペーシングでは、点は最初大きく動き、最後には間隔が狭まります。こうすることにより、点が減速していくかのような錯覚を与えます。<a href="http://codepen.io/ryanbrownhill/pen/MwaPBZ" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p>イージングカーブのデザインにおいて、人にいつも聞かれるのが、”どのイージングカーブをどこで使えばよいのか”です。私の答えは、シナリオによるとしか言えません。全てに使えるイージングカーブはありません。カーブの作成は、動作をデザインする時の重要な要素となります。イージングカーブは、一般的に実世界の物理の法則に基づいてデザインされていますが、必ずしもその法則を守っている訳ではありません。実世界はアニメーションの創造意欲を掻き立ててくれます。例えば、linearイージングカーブのように、実世界では、急速度で動き始め、急停止するものはありません。動くものは必ず加速し減速します。これは、Disneyの<a href="https://vimeo.com/93206523" rel="nofollow" title="" class="ext-link">12 principles of animation(アニメーションにおける12の法則)</a>にまとめられた概念のひとつにすぎません。これも物理の法則やそれを誇張したものに基づいています。</p><p><iframe src="https://player.vimeo.com/video/93206523" width="500" height="197" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p><p><small>12 Principles of Animation  -  Cento Lodigiani作のアニメーション</small></p><p>イージングカーブを作成する際に、垂直な部分は速く、水平な部分は遅いということを念頭に置いておいてください。カーブはインタラクションをどうデザインするかにより決めるものです。(X,Y)グリッド内で複数の異なる種類のカーブを作成できます。</p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*AtW9LyqTeYScAwCShyoFxw.gif" data-width="1128" data-height="392"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*AtW9LyqTeYScAwCShyoFxw.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*AtW9LyqTeYScAwCShyoFxw.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p><a href="http://codepen.io/ryanbrownhill/pen/mJeQyq?editors=110" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p>さらに、フレーム内でのカーブの作成に加え、フレームを飛び出すこともできます。フレームを飛び出すことで、アニメーションがキーフレーム間の値の外に行きます。フレームを飛び出すことで跳ねる効果や予想効果を作成できます。</p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*ENr717Pm2gm6ps4AvH39lQ.gif" data-width="788" data-height="758"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*ENr717Pm2gm6ps4AvH39lQ.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*ENr717Pm2gm6ps4AvH39lQ.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p><a href="http://codepen.io/ryanbrownhill/pen/zGrNwv?editors=110" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p>3次ベジェ（cubic-bezier）の作成に使えるツールはWeb上にたくさんあります。以下に少し挙げておきます。</p><p>*<a href="http://cubic-bezier.com/#.17,.67,.83,.67" rel="nofollow" title="" class="ext-link">cubic-bezier.com</a><br>
*<a href="http://matthewlein.com/ceaser/" rel="nofollow" title="" class="ext-link">Ceaser</a><br>
*<a href="http://easings.net/ja" rel="nofollow" title="" class="ext-link">Easings.net</a></p><p>開発の中では、イージングカーブは”タイミング関数”と呼ばれます。この関数は、グラフ上の加速度パターンを定義するベジェ曲線を作成する数学的な方程式です。開発の中でよく使われる関数は、3次ベジェです。ここからは、この3次ベジェについて掘り下げていきたいと思います。</p><p><img class="graf-image" data-image-id="1*vWeVRPeCyo8Ul6G7CPibLA.png" data-width="827" data-height="324" data-action="zoom" data-action-value="1*vWeVRPeCyo8Ul6G7CPibLA.png" src="https://d262ilb51hltx0.cloudfront.net/max/930/1*vWeVRPeCyo8Ul6G7CPibLA.png"></p><p>大部分のプログラミング言語には、ease-inやease-out、ease-in-outといった定義済みのイージングカーブがいくつかあります。仕様をチェックして、どのカーブが定義済みなのかを確認しましょう。CSSであらかじめ定義されているイージングカーブを以下に挙げました。</p><p>CSSには、オブジェクトクラス内で定義可能な”global” easeがあり、これを使うと同じeaseを全てのキーフレームに割り当てることができます。例えば急な動きを入れると、アニメーションは全てのキーフレームで同じように急な動きをします。</p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*VhiXDe5IlAQ9ZKwDDloOzg.gif" data-width="538" data-height="532"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*VhiXDe5IlAQ9ZKwDDloOzg.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*VhiXDe5IlAQ9ZKwDDloOzg.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p><a href="http://codepen.io/ryanbrownhill/pen/JdYmqG" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p>キーフレーム内でイーズを定義することにより、イージングをさらに的確に行うことが可能です。イージングカーブは、生じさせたいイージングの前にパーセンテージで値を定義するものだということを覚えておくことが大切です。</p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*pIfuxLTA9waZJ4MVvBoHOg.gif" data-width="526" data-height="518"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*pIfuxLTA9waZJ4MVvBoHOg.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*pIfuxLTA9waZJ4MVvBoHOg.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p><a href="http://codepen.io/ryanbrownhill/pen/JdYejX" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p>イージングカーブのコンセプトは、1つのアニメーションだけでなく、遅延にも適用することが可能です。スクリーン上での画像の動きにいろいろな要素があると、非常に面白くなります。以下は正弦波の遅延の一例です。これはSassでループを作成したもので、正弦の計算にはCompassのMath Helperの機能を使いました。</p><p><video loop="" video="" autoplay="" class="graf-image" data-image-id="1*wz068HDsQ3byZZ1cHCJsfw.gif" data-width="450" data-height="305"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*wz068HDsQ3byZZ1cHCJsfw.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*wz068HDsQ3byZZ1cHCJsfw.mp4" type="video/mp4">Your browser does not support the video tag.</source></source></video></p><p><a href="http://codepen.io/ryanbrownhill/pen/NqGxgr" rel="nofollow" title="" class="ext-link"><em>CodePenで見る</em></a></p><p><em>読んで頂きありがとうございました！　<a href="http://ryanbrownhill.github.io/resources/" rel="nofollow" title="" class="ext-link">リソース</a>が欲しい方、ご質問のある方はお気軽に<a href="https://twitter.com/ryan_brownhill" rel="nofollow" title="" class="ext-link">@ryan_brownhill</a>にツイートしてください。</em></p>
