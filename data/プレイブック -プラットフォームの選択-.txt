<p><a href="http://playbook.thoughtbot.com/#choose-platforms" rel="nofollow" title="" class="ext-link">playbook #choose-platform</a> （2015-06-18） by <a href="http://thoughtbot.com/" rel="nofollow" title="" class="ext-link">thoughtbot</a></p><p>プロジェクトの早い段階で、使用するプラットフォームを決めなければなりません。</p><p>どのプラットフォームを使うかは、ユーザの問題を解決するためのアイデアに左右されます。例えば、ユーザが現場の建設作業員なら、モバイルまたはタブレットのインタフェースが最適な選択かもしれません。</p><p>ユーザにとって何が最適かを考えた後は、自分たちに最適なツールを考えます。</p><p><a href="http://rubyonrails.org/" rel="nofollow" title="" class="ext-link">Ruby on Rails</a>Webアプリは一般的によく使われているので、私たちの経験によれば、早く市場に出せる傾向があり、所有の総コストが低くなります。あるRailsアプリのコードベースは、他のRailsアプリのコードベースに非常に似ています。また、アジャイルとRubyのコミュニティは強く重なり合っており、これは、Rubyの開発者が（何よりも）、テストを書き、オブジェクト指向設計を使用し、コードの繰り返しを避ける傾向にあることを意味します。</p><p>私たちがRailsに贈ることのできる最大の賛辞は、私たちが2005年に、Railsに会社の将来を賭けて実際に資金援助を行い、今も生き残っているということかもしれません。</p><p>その見返りとして、私たちはコミュニティへの自分たちの貢献、特に、<a href="https://github.com/thoughtbot" rel="nofollow" title="" class="ext-link">オープンソースライブラリ</a>と<a href="http://robots.thoughtbot.com/" rel="nofollow" title="" class="ext-link">GIANT ROBOTS SMASHING INTO OTHER GIANT ROBOTS</a>の記事を誇りに思っています。</p><p>Rubyの他に、私たちはオープンソースソフトウェアと、HTML、CSS、JavaScript、UNIX、VimやPostgresなどのWeb標準を使用しています。その理由は、これらが次の特徴を備えているからです。</p><p>Ruby on Railsには、次のようなセキュリティ攻撃に対抗するためのプログラマの負担を軽減する特徴があります。</p><p>Railsは、セキュリティに関して正しく行動するために役立ちますが、それでも、努力し、知識を身につけ、包括的なテストをする必要があります。詳細情報については、<a href="http://guides.rubyonrails.org/security.html" rel="nofollow" title="" class="ext-link">Ruby on Rails Security Guide</a>を参照してください。</p><p>私たちは、Internet Explorer 9.0+および、Firefox、Chrome、Safariの最新バージョンに対応しています。Internet Explorer 6、7、8には対応していませんが、これらのバージョンのユーザに対しては、アップグレード方法についての丁寧なメッセージが表示されます。これらのバージョンのブラウザは<a href="https://ja.wikipedia.org/wiki/Internet_Explorer" rel="nofollow" title="" class="ext-link">市場シェア</a>を失いつつあり、また<a href="https://ja.wikipedia.org/wiki/Internet_Explorer_6" rel="nofollow" title="" class="ext-link">セキュリティの問題</a>を抱えているので、デザイン・開発・.対応に非常に時間がかかります。</p><p>モバイルデバイスでは、iOS Safari 7.1+、Android Browser 4.4+および、Chrome for Androidの最新バージョンに対応しています。</p><p>限定的な特殊ケースでは、旧バージョンのInternet Explorerへの対応が必要であることが、ユーザ人口統計から分かります。そのバージョンに対応するための追加の時間と費用を計画するために、このような特殊ケースは早期に特定しなければなりません。</p><p>ここで言う”モバイル”とは、ユーザについて述べているのであって、デバイスのことを言っているわけではありません。</p><p>モバイルアプリケーションのデザインを考える際には、全てこの枠内で考えなければなりません。すると、以下のような疑問が生じます。</p><p>まずは、最も利便性の高いプラットフォームから始めましょう。もしそのデバイスにカメラや予定表、アドレス帳などが必要ならば、iPhoneやiPadのアプリのような”ネイティブ”なアプリを選択するのが正しいと言えるでしょう。</p><p>他の製品、とりわけ、テキストやイメージ、ビデオやランディングページのような、コンテンツのみから成る製品に関しては、モバイルWebアプリを用いることには妥当性があります。それは、以下のような理由からです。</p><p>私たちのモバイルの開発者は、Objective-Cや、もっと最近のSwiftといったプログラム言語、CocoaのようなiOSのフレームワークについての専門知識を備えています。</p><p>私たちは、TitaniumやPhoneGapのプロジェクトは手がけていません。それは、次のような理由からです。</p><p>私たちがよく使う言語は次のようなものです。</p><p>“サーバ側”とは、アプリケーションのホスティング会社によって提供されるサーバ上で実行するコードという意味です。”クライアント側”とは、ユーザのWebブラウザで実行するコードという意味です。</p><p>Ruby on RailsやNode.js、その他のライブラリなどのフレームワークでは、開発者がRubyやJavaScriptなど、ベースとなっている言語の知識を備えていることが前提となります。</p><p>私たちがよく使用するフレームワークの例は次のようなものです。</p><p>フレームワークとは、プログラミング言語において、特定のタスクを簡単に実行できるようにしてくれるライブラリです。家屋の骨組みのように、プログラミングを始める時には必ずそこにあって、プログラムに構造とサポートを提供してくれるのです。</p><p>途中でフレームワークを変更するのは困難な場合があります。Railsに特化したコードが多く含まれていればいる程、後からDjangoに変更するのは難しくなるでしょう。この場合の対処として賢明なのは、”初めから書き直す”です。</p><p>データを正しく保存し記憶させておくために私たちが使用しているのが、<a href="http://www.postgresql.org/" rel="nofollow" title="" class="ext-link">PostgreSQL</a>（通常は”Postgres”と呼ばれています）です。</p><p>これは、30年に渡ってオープンソースとして使われている、とても評価の高いデータベースで、ドキュメンテーションやホスティングプロバイダ、またSQL標準を熟知している開発者から厚い信頼を受けています。</p><p>最近では、<a href="https://ja.wikipedia.org/wiki/NoSQL" rel="nofollow" title="" class="ext-link">NoSQL</a>と呼ばれるデータベースが人気を集めてきています。これは”not only SQL”の略として解釈されおり、この異なるタイプのデータベースを開発するのには、多大な労力が注がれました。これはしばしば、<a href="http://nosqlsummer.org/papers%5B%E3%83%AA%E3%83%B3%E3%82%AF%E5%88%87%E3%82%8C%EF%BC%9F%5D" rel="nofollow" title="" class="ext-link">教育機関や産業界でのリサーチ</a>といった異なるケースで使用されています。</p><p>私たちが最も頻繁に使用するNoSQLが、<a href="http://redis.io/" rel="nofollow" title="" class="ext-link">Redis</a>です。アクティビティフィード、タグ、バックグランドジョブ、セッション、トークン、カウンターといった、一時的な膨大な量の読み書きデータを保存するのに使用しています。</p><p>Redisはシンプルで信頼性のあるオープンソースデータベースです。パフォーマンスも高く、その予測にも信頼がおけます。異なるデータ設定を柔軟に具現化することもできますが、私たちは主に小規模なデータ構造に対して使用しており、重い画像、ビデオ、テキストドキュメントなどには使用しません。</p><p>Redisデータベース上に製品をホストするには、通常<a href="https://redistogo.com/" rel="nofollow" title="" class="ext-link">Redis to Go</a>を使用しています。</p><p>プロプライエタリライセンスとは対照的に、オープンソースプログラムのソースコードは、レビュー、改変、再配布が可能です。ソースコードに対して、何が出来て何が出来ないかは、オープンソースライセンスによって異なります。</p><p>オープンソースライセンスは、パーミッシブ型とコピーレフト型に分類することができます。</p><p>パーミッシブ型の例：</p><p>コピーレフト型のライセンスの例としては、<a href="https://ja.wikipedia.org/wiki/GNU_General_Public_License" rel="nofollow" title="" class="ext-link">General Publicライセンス (GPL)</a>が挙げられます。</p><p>どちらのライセンスにも目的があります。例えば、ソフトウェアに対する著作権保持者の明確化、ユーザに対するコピーや改変、再配布の許可、（修正が加えられていない）ソフトウェアが提供することになるかもしれない潜在的な保証からの著作権保持者の保護、任意で課せられるいくつかの制限などです。</p><p>パーミッシブ型では、プログラムの改変、再配布が可能なことに加え、販売することもできます。著作権保持者からの制限や明確な承諾なしに、他のプログラムに埋め込んだり、リンクを張ったりすることができるのです。</p><p>コピーレフト型で可能なのは、同じライセンスを所持する他のコードと一緒にコードにリンクを張ったり、配布したりすることだけです。また、同じライセンス下であれば、改変を強要することも可能です。<br>
GPLに改変を行った場合は、それもGPLとする必要があります。</p><p>コピーレフト型ではないライセンスは、派生著作物をオープンソースとして公開するように強要することはありません。</p><p>また、いくつかのソフトウェアは、パーミッシブ型、コピーレフト型の両方のライセンス下でリリースされることがあります。開発者は、二重ライセンスのコードを使用することによって、よりニーズに合ったライセンスを適用することが可能になるのです。</p><p>私たちが使うほとんどのソフトウェアが、パーミッシブ型のライセンスを所持しています。</p>
