“We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris” （2016-04-11） by Reginald Braithwaite(編注：2016/5/31、頂いたフィードバックを元に記事を修正いたしました。)コンピューティングにおいて、”laziness(怠惰)”は幅広い意味の単語です。大抵は、もし必要が無ければ何もしないということを意味します。その正反対を指すのは”eager(勤勉)”です。後で必要になる場合に備えて、できるだけ働くということを意味します。以下のJavaScriptを見てみましょう。ここで、問題です。「JavaScriptは2+3を評価する？」答えはお分かりですね。「評価する」です。呼び出し関数に、引数を引き渡すこととなると、JavaScriptはeager(勤勉＝先行評価)で、式の全てを評価します。式の値が使われようが使われまいが、評価するのです。1もしJavaScriptがlazy(怠慢＝遅延評価)だったら、式ifThen(1 === 0, 2 + 3)の2+3は評価されないでしょう。ではJavaScriptは”勤勉な”言語なのでしょうか？　おおむねそうでしょう。しかし、いつもとは限りません。もし、1 === 0 ? 2 + 3 : undefinedと書けば、JavaScriptは2+3を評価しません。?:や&amp;&amp;、||のような演算子は、ifのようなプログラムの制御構造と一緒に使われると怠慢になります。何が勤勉で、何が怠慢なのか、頭の中ですぐに理解しなければなりません。そして、もともと遅延評価ではないものを遅延させたいと思うならば、JavaScriptの先行評価を避けなければなりません。以下に例を示します。JavaScriptは関数である() =&gt; 2 + 3を先行評価します。しかし、関数が呼び出されるまで、JavaScriptは関数本体の中にある式を評価しません。つまり、関数は呼び出されていないので、2+3は評価されません。評価を先延ばしにするために、関数の式をラッピングすることは昔からあるプログラミングテクニックです。口語では「サンク」と呼ばれ、このサンクに関する面白いアプリケーションがたくさんあります。関数の本体は、いわば遅延的なものです。というのも、関数は呼び出されるまで、評価されないからです。これはif文、そしてその他全ての制御フロー構造と密接な関わりがあります。つまり「JavaScriptは、コードが実際に命令文に行き当たらない限り、命令文を評価しない」ということです。以下のコードを考えてみましょう。おそらく、その無邪気さに含み笑いをしているでしょう。例えば、このリストを1から10億までの数字のリスト、[1, 2, 3, ..., 999999998, 999999999, 1000000000]と仮定してください。そして、呼び出します。正しい結果が得られますが、最初に10億個の数字の各々について命令を反復します。ひどい話です。小さな子供や熱のある人でなければ、JavaScriptの関数のどこでからでもreturunできると知っているでしょう。そこで、次のように書くことができます。このバージョンの関数は、最初の関数よりも怠慢です。特定のリストに特定の値を含むかどうか決定するのに必要な最低限のことだけを実行します。containingから、類似の関数findWithを作ることができます。findWithは、判定関数を適用して、trueを返す最初の値を遅延的に見つけます。残念ながら、findWithは遅延的であるのに反して、上で述べたように、その引数は勤勉に評価されます。そこでリストの中で、99より大きく回文状になっている、最初の数字を見つけたいとしましょう。もちろん、以前と同じ原則です。10億個の数字の端から端まで反復し、99よりも大きく回文状の数字、101に行き当たったところで止まります。しかしJavaScriptはfindWithに対する引数を先行評価します。つまり、isPalindromic, gt(99))を評価して、predicateとバインドします。その後billionを先行評価し、listとバインドします。1つの値をもう1つの値にバインディングするのは簡単です。しかし、もし10億個の数字を生成しなければいけないとしたらどうでしょう。NumbersUpTo(1000000000)は先行的です。そのため、必要なのは最初に出てくる101だけだというのに、10億個の数字全てのリストを作ります。これは遅延性を求める私たちにとって問題です。私たちは計算全般において、面倒なことは避けなければいけません。ちょうどいいことに、先ほどジェネレータ2を扱ったばかりなので、遅延式の数字リストの作り方は、ちゃんと分かっています。ジェネレータは値を遅延的に生成しし、findwithは遅延的に検索しようとします。そのため、膨大な数字の配列を1つも生成することなく101を見つけることができます。それでもJavaScriptはNumbers()を先行評価し、listにバインディングしようとしますが、この時点では配列ではなくイテレータにバインディングされます。for (const element of list) { ... }命令は、billion配列から値を得るのと同じように、遅延的にイテレータから値を取り出します。以下はエラトステネスの篩を先行評価スタイルでプログラミングしたものです。エラトステネスの篩を遅延評価スタイルで書いてみましょう。まずは、このブログに既に登場しているいくつかの便利な方法や「JavaScript Allongé」に書かれている方法を使います。すぐ使える方法として、1つのイテラブルなオブジェクトを値のシーケンスにマッピングするジェネレータ作ることができます。この値のシーケンスにはnullに変換された全てのnth要素が含まれます。3これが「篩」の振る舞いの核となります。数字リストの最前部の要素をnと呼び、その後ろのnth要素を全て篩にかけます。この時点では、nullEveryNthを再帰的に適用することができます。リストの最前部から篩にかけられていない最初の数字を取り出し、その倍数を篩い落として、その結果残った数字の結果を生成します。sieveがあれば、rangeを使って、2から始まる数字のリストを手に入れ、再帰的に篩にかけることができます。そして、その結果に対してcompactを使い、全てのnullsを篩にかけて消し、最終的に素数のみを残すことができます。パフォーマンスの問題だけでなく、バグがあふれていることに気がつきましたか？　実行してみると、動かないことが分かります。問題なのは、最後のcompactの部分です。compactは先行的な関数で、遅延的な関数ではありません。そのため、最終的にnullを篩い落とす前に膨大な素数のリストを構築しようとしてしまうのです。compactの遅延評価バージョンが必要です。これで動きます。遅延スタイルでコーディングする時は、全ての通常演算を遅延バージョンにしなければいけません。例として、uniqueを先行評価の方法で実装したコードを下に示します。当然ですが、遅延的なイテレータから固有の値を見つけたい場合は、遅延的な実装が必要です。そして、リストで使う既存の演算は全て同様です。イテラブルで使える遅延バージョンが必要で、全体を通して遅延演算を行わなければいけません。混在させて使うことはできないのです。このセクションでは思いがけない発見があるでしょう。ジェネレータと遅延性はすばらしいものになり得ます。例えば、ジェネレータを使い、同期されたコードを非同期の演算でエミュレーションすると、すごいことが起こります。しかし、ここまで説明してきたように、遅延的なコードを書きたい場合は、一貫して遅延的であるように注意しなければいけません。もし、うっかり遅延評価のコードと先行評価のコードを混ぜてしまったら、問題が発生します。これは対象性の問題です。更に踏み込むと、「ダック・タイピング」という概念の問題が明らかになります。これは一般的な考え方で、オブジェクトが正しいインターフェースを扱い、適切なメソッドに応答している限り、そのオブジェクト同士には互換性があるというものです。しかし、常にそうとは言えません。先行バージョンでも遅延バージョンでもcompactは、compactとしてリスト上で演算を行います。しかし、片方は遅延的で、片方はそうではないのです。「ダック・タイピング」では、怠慢な関数とそうでない関数の違いを捉えようとしませんし、捉える能力もありません。他にも同じような事例が数多くあります。エスケープ処理された文字列と、それを元に戻された（アンエスケープされた）文字列や、難読化されたIDとネイティブなIDなどがその例として挙げられます。同じインターフェースなのに意味的な違いなどがある場合、それらを区別するために型が必要なのです。それぞれの型で、正しい演算によってプログラムを動かすようにしなければいけません。例え、正しくない演算であっても「ダック・タイピングの互換性」によって、一見動いているように見えてしまうからです。補足記事：The Hubris of Impatient Sieves of Eratosthenes（短期なエラトステネスの篩の傲慢さ）
