<p><a href="http://blog.lerner.co.il/pythons-objects-and-classes-a-visual-guide/" rel="nofollow" title="" class="ext-link">Python’s objects and classes — a visual guide</a> （2015-10-18） by <a href="https://twitter.com/reuvenmlerner" rel="nofollow" title="" class="ext-link">Reuven Lerner</a></p><p>Python開発者が大好きな言葉があります。それは”全てはオブジェクトである”です。実際、私自身もPythonのクラスを教えているときに何度も口にしています。多くの人が何度も聞いた言葉かもしれないのですが、私が言う度に生徒は賛同の相槌をしてくれます。結局のところ、Javaにおいて全ては（対象がそうでない場合を除いて）オブジェクトであり、.NETにおいても全てはオブジェクトであると、よく言われています。</p><p>しかしPythonにおいて全てがオブジェクトであると言う時、（私の生徒は驚いていましたが）「<em>全て</em>」にはクラスも含まれているのです。これはとても筋が通っていて、オブジェクトシステム全体が理解しやすくなります。しかしそれでも、広い視野で物事を見ることは難しいのです。</p><p>今回のブログ記事では、Pythonのオブジェクト間のつながりをざっと見ていきたいと思います。そして”全てはオブジェクトである”という考え方に由来するアイデアを固める助けになれば光栄です。またオブジェクト階層を構築するときに起こる興味深い点と、それがどのようにしてややこしくなるのかについて、ご紹介しましょう。</p><p>まずはシンプルなクラス(MyClass)とそのクラスのシンプルなインスタンス(m)から初めていきましょう。Pythonでは次のように書いていきます。</p><p>Python 3では、MyClassがobjectから継承していると明示的に言う必要はありません。全てのクラスにとってこれが事実だからです。しかしPython 2ではobjectから継承する必要があります。もしそうしなければ、旧形式のクラスになってしまいますが、そうなってほしくないからです。</p><p>それでは、このことが視覚的にどう見えるかについて、mがMyClassのインスタンスであることを示す矢印を使って見ていきましょう。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects.png" alt="Python-objects" width="576" height="734" class="alignnone size-full wp-image-5181"></a><br>
今のところちょっと面白みはないですね。ところで、Pythonでは全てがオブジェクトだということを思い出してください。つまりmはMyClassのインスタンスです。type関数を使えば調べられます。</p><p>では、MyClassの型が何であるかを確認するとどうなるでしょうか。</p><p>そう、str、int、boolや他のPythonのクラスがtypeのインスタンスであるように、MyClassはtypeのインスタンスなのです。図表が少し複雑になってきましたね。<br>
<a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-2.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-2.png" alt="Python-objects-2" width="576" height="734" class="alignnone size-full wp-image-5175"></a><br>
上記の図表で、mはMyClassのインスタンスであり、MyClassはtypeのインスタンスであるということが表されています。</p><p>標準のオブジェクトとクラスの主な違いとは、クラスは__bases__属性、つまりこのクラスの継承元を示すタプルを持っているということです。MyClassは、他のクラスと同様に、図表上に2つのポインタを持たせなくてはなりませんね。1つはtypeを表し、もう1つは継承元のクラス（object）を表すものです。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-3.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-3.png" alt="Python-objects-3" width="576" height="734" class="alignnone size-full wp-image-5176"></a><br>
私が教えるPythonのクラスでは、型とオブジェクトの区別やオブジェクトの生存期間中のこれらの役割について混乱する生徒が多くいます。次を考えてみてください。</p><p>そう、私がPythonで好きなのは、typeの型がtypeであることです。言い方を変えれば、typeはそれ自身のインスタンスなのです。カッコいいでしょう？　これを図表に当てはめてみましょう。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-4.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-4.png" alt="Python-objects-4" width="576" height="734" class="alignnone size-full wp-image-5177"></a><br>
typeがクラスであれば、図表には2つのポインタがなくてはなりません。1つはtypeクラス、つまりtypeそのものを指すポインタと、このクラスが継承するクラスを指すポインタです。では、このtypeはどこから継承しているのでしょうか。</p><p>これに従って、typeがobjectから継承していることを示す図表にアップデートしたいと思います。str(MyClass)を呼び出すと、個別のtype.__str__を作成することなく、継承された実装であるobject.__str__を当てにすることができるので、これは理にかなっています。それに、実際に以下のようなことが起こっています。</p><p>では、typeがオブジェクトから継承していることを示すように図表をアップデートしてみましょう。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-5.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-5.png" alt="Python-objects-5" width="576" height="734" class="alignnone size-full wp-image-5178"></a><br>
最後に、objectクラスを無視しない場合を見てみます。objectはひとつのオブジェクトなので、型を持っています。クラスの型はtypeということは先ほどもうわかっていますね。これらを図表に加えてみます。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-6.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-6.png" alt="Python-objects-6" width="576" height="734" class="alignnone size-full wp-image-5179"></a><br>
objectは継承階層の一番上にくることを覚えておいてください。Pythonでは空のタプルによって表現されます。</p><p>図表上では、以下のように表示することができます。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-7.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-7.png" alt="Python-objects-7" width="576" height="734" class="alignnone size-full wp-image-5173"></a><br>
最後に、この階層に、MyClassのサブクラスとして新しいクラスを追加するとどうなるか見てみましょう。MySubClassはMyClassから継承していますが、typeのインスタンスであることは変わりありません。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-81.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/Python-objects-81.png" alt="Python-objects-81" width="576" height="734" class="alignnone size-full wp-image-5180"></a><br>
Pythonの開発を経験したことがある人であれば、こういったことは当たり前のことでしょう。ですが様々なオブジェクトやクラスが相互に作用するので、Pythonに慣れてない人にとっては、この記事が理解を深める手助けになったことを願います。この他、理解に苦しむことなどあれば、是非<a href="mailto:reuven@lerner.co.il">ご連絡</a>ください。今後、その説明をブログに掲載していきたいと思います。</p><p>この解説を気に入ってくれたようであれば、私の電子書籍『<a href="http://practicemakespython.com/" rel="nofollow" title="" class="ext-link">Practice Makes Python</a>』も気に入ってくれることと思います。この書籍に掲載されている50の演習を行えば、Python言語の扱いが上達することでしょう。</p>
