<p>Original article: <a href="http://zef.me/6023/who-needs-git-when-you-got-zfs" rel="nofollow" title="" class="ext-link">Who Needs Git When You Got ZFS?</a> (2013-08-20) by <a href="http://zef.me/about" rel="nofollow" title="" class="ext-link">Zef Hemel</a></p><p><a href="http://ja.wikipedia.org/wiki/ZFS" rel="nofollow" title="" class="ext-link">ZFS</a>を少し触ってみました。ZFSはOracle（その前はSun）の次世代ファイルシステムです。元はSolaris向けに開発されたものですが、オープンソースなのでLinux（0.6.1以降が<a href="https://groups.google.com/a/zfsonlinux.org/forum/?fromgroups=#!topic/zfs-announce/ZXADhyOwFfA" rel="nofollow" title="" class="ext-link">製品版として安定しているようです</a>と<a href="https://openzfsonosx.org/" rel="nofollow" title="" class="ext-link">Mac</a>にも移植されています。ファイルシステムといっても、ZFSはボリュームマネージャでもあるので、ディスクのパーティション管理もやってくれます。ZFSがなぜそんなにクールかといえば、データ破損対策、RAIDのサポート、スナップショットやコピーオンライトの実装、そしてバックアップ時のフレキシブルで効率の良いデータ転送などが装備されているからです。ZFSを使って、バージョン管理システムのGit（Gitじゃないバージョン管理システムでも構わないのですが）のいろいろな機能をどこまで実行できるのか、お見せしようと思います。もちろん、本気で”ちゃんとした”バージョン管理システムを捨てたほうがいいと言うつもりはありませんよ。でもファイルシステムのレベルでここまでできると理解するのにはいい例だと思います。</p><p>ZFSをインストールするのは簡単です。Macだったら<a href="https://openzfsonosx.org/" rel="nofollow" title="" class="ext-link">OpenZFS on OS X</a>のサイトに行ってパッケージをインストールすればいいのです。Ubuntuでは次のようにします。</p><p>さて準備ができたので新たにZFSストレージプールとファイルシステムを構築してみましょう。ドライブがあればそれを利用すればいいですし、ない場合はディスクのかわりにファイルを作成すれば、試してみるには十分です。例えば10Gのファイルを作成するにはこのようにddコマンドを使います。</p><p>RAIDの設定を試してみるには、disk1.imgとは違う名前でもう1つファイルを作りましょう。次にzpool createを使ってストレージプールを作成します。ディスクがあるならディスクラベル（例えば/dev/sda、/dev/sdbなど）、またはID（/dev/disk/by-id/…）も利用できます。今回はファイルヘのフルパスを利用します。</p><p>様々なタイプのプールを作ることができますが、ミラー化するには以下のようにします。</p><p>ここでは”mypool”という名前のプールが、2つの”デバイス”をミラーして、/mypool （Linuxの場合。Macでは/Volumes/mypool）直下にマウントしています。使用可能な容量を確認するにはzfs listを使います。</p><p>もう1つの方法としては、すべてのデバイスから使用可能な領域を集めて、それを1つの大きなドライブとして扱う方法もあります。mypoolを既に作成してしまっていたら破棄してください。</p><p>それからミラーされていないプールを作成します。</p><p>約20Gの容量が利用可能になっています。</p><p>ストレージプールについては途中でディスクを追加したり交換したりなど、<a href="http://docs.oracle.com/cd/E26924_01/html/E25824/gavwn.html#scrolltoc" rel="nofollow" title="" class="ext-link">いろいろとできることがあります</a>が、今のところはシンプルな設定にしておきましょう。</p><p>ここまで/Volumes/mypoolまたは/mypool直下にファイルをマウントしてきましたが、このようなZFSの使い方はあまりお勧めしません。そのかわりに、プール内にいくつかの異なるファイルシステムを作成してみましょう。それぞれのファイルシステムに対して、暗号化・圧縮・割り当てなどの様々なプロパティを設定することができます。また、ファイルシステムごとに個別のスナップショットを取ることもできます。他にも、SambaやNFSを介してファイルシステムを共有したり、別のサーバ上のプールにファイルシステムのスナップショットを送ったりできます。</p><p>このように、ファイルシステムはかなりスゴいのです。</p><p>ZFSファイルシステムではzfsコマンドを使います（プールの際にzpoolコマンドを使うのと同じです）。</p><p>これでファイルシステムが新規作成され、/mypool/test（Macの場合は/Volumes/mypool/testとなります）下にマウントされます。ちなみに、ファイルシステム（およびプール）は、-mオプションでどこにでもマウントできます。面白いのですが、実は作成後でもマウントポイントを変更することができるんです。</p><p>こうすれば、ファイルシステムを/test下に再マウントできます。ファイルシステムのプロパティを確認するには、zfs get allコマンドを使います。</p><p>上記のプロパティの中には、便利な機能がたくさんあります。例えば、圧縮をする場合はこうなります。</p><p>これで、コマンド実行後にファイルシステムに書き込まれたものはすべて圧縮されます。</p><p>GitのかわりにZFSを採用するのは、名案とは言えないかもしれません。ただし、ZFSがファイルシステムのレベルでできることを理解していただくために、Git特有の操作を例にしていくつかご紹介しましょう。<br>
* リポジトリの作成<br>
* バージョンのコミットとタグ付け<br>
* ブランチの作成<br>
* 別ストレージプール（別筐体を含む）からのプッシュとプル</p><p>お気づきかと思いますが、上のリストにはマージ機能がありませんね。私の知る限りでは、ZFSはサポートを行っていません。</p><p>まずファイルシステムを作成しましょう。今回の解説用に、階層構造を作ります。このファイルシステムを”zfsgit”と名付けます。もちろん、ファイルシステムの階層は、いくらでも深くすることができます。次に、ファイルシステムのルートをカレントユーザにchownします。そうすれば、ファイル作成・更新・削除のためにsudoする必要はありません。</p><p>これでリポジトリと同様のものが準備できました。リポジトリに関しては解決です。<br>
では、ファイルを作成して何か書き込んでみましょう。</p><p>コミットとタグ付け、つまり、復旧できるように過去のバージョンを保持しておくには、ZFSの”スナップショット”を使います。ZFSスナップショットには、明示的に名前をつけなければなりません。最初のスナップショットを”firstcommit”と名付けましょう。ファイルシステム名の後に@とスナップショット名を付加します。</p><p>では、下記のようにファイルを少しだけ変更してみましょう。</p><p>結果を確認します。</p><p>残念ながらテキストレベルの差分は確認できないのですが、少なくともどのファイルが変更されたかは分かります。では、再度コミットを実行してみましょう。</p><p>現在のスナップショットを一覧表示するには、次のコマンドを実行します。</p><p>ここで、さらにファイルに変更を加えます。</p><p>うーん、イマイチですね。では、1つ前のスナップショットにロールバックしてみましょう。</p><p>無事、1つ前のバージョンに戻りました。</p><p>機能的に見てGitのブランチ作成と同じことが、zfs cloneで実現できます。次のコマンドを実行すれば、特定のスナップショットを元にしたファイルシステムのクローンを作成できるのです。</p><p>これで、コピーオンライト形式の新しいファイルシステムがmypool/projects/zfsgit_branch以下にマウントされました。この処理はデータのコピーを伴わないため非常に軽く、初回に追加のディスク領域を消費することはまずありません。</p><p>ZFSでは、異なるストレージプールにファイルシステムを転送することができます。転送先はローカル、リモートを問わず、差分転送も可能です。では、実際にやってみましょう。まず”mypool2″という名前の新しいストレージプールをローカル環境に作成してください。これで、任意のスナップショットを別のストレージプールに”プッシュ”する準備が整いました。実際のコマンドは下記の通りです（rootユーザで実行してください）。</p><p>下のように、SSHを介した処理と同じ動きをすると考えれば理解しやすいでしょう。</p><p>上記のようにすれば、スナップショット作成時のファイルシステム全体がプッシュされます。また、過去に1つ前のスナップショットをプッシュしていた場合は、-iオプションを付加することで前回と今回の差分だけをプッシュすることもできます。</p><p>この差分オプションは、大規模なファイルシステムのバックアップを定期的に行う場合に有効です。もちろん上記のコマンドはUNIXのパイプを使用しているに過ぎませんから、zfs sendの出力結果をファイルに書き込んで、Amazon S3などにアップロードするといった処理も行えます。</p><p>一方、ファイルシステムをプッシュではなく”プル”するには、次のようにSSHを介してZFSのreceiveコマンドを使います。</p><p>ZFSは、少なくともSolarisやLinux上ではかなり使い勝手が良く、安定しています。Mac上でも安定稼働するどうかは、今の時点ではまだ確信が持てません。Linuxのルートファイルシステムとして採用するには、現時点ではまだ少し問題があるように思います。しかし、それもすぐに解決されることでしょう。私はまだ信頼性とパフォーマンスを語れるほどZFSを十分に使い込んでいませんが、ネット上での評判は良いようです。</p><p>ただし、ZFSが唯一の選択肢というわけではありません。例えば<a href="http://ja.wikipedia.org/wiki/Btrfs" rel="nofollow" title="" class="ext-link">LinuxのBtrfs</a>にも同じような機能が多く備わっています。ただBtrfsは比較的新しいシステムでまだ成熟していないため、ZFSほど安定していません。どちらにせよ、こうしたファイルシステムには楽しめる機能がたくさん実装されています。ZFSについてもっと詳しく知りたい方は、<a href="http://docs.oracle.com/cd/E24845_01/html/819-6260/" rel="nofollow" title="" class="ext-link">Oracle Solaris ZFS 管理ガイド</a>をぜひチェックしてみてください。大変読みやすく、LinuxとMacの両方に対応しています。</p><p><a href="http://git-scm.com/downloads/logos" rel="nofollow" title="" class="ext-link">Git Logo</a> by <a href="https://twitter.com/jasonlong" rel="nofollow" title="" class="ext-link">Jason Long</a> is licensed under the <a href="http://creativecommons.org/licenses/by/3.0/" rel="nofollow" title="" class="ext-link">Creative Commons Attribution 3.0 Unported License</a></p>
