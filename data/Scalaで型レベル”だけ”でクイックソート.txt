<p><a href="http://jto.github.io/articles/typelevel_quicksort/" rel="nofollow" title="" class="ext-link">Typelevel quicksort in Scala</a> (2015-05-22) by <a href="https://twitter.com/skaalf" rel="nofollow" title="" class="ext-link">Julien Tournay</a></p><p><em>Scalaの型システムが先進的であることは、皆さんもご存じのことかと思います。この投稿では、Scalaの型システムのみを使った<a href="http://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88" rel="nofollow" title="" class="ext-link">クイックソート</a>アルゴリズムの実装方法をご紹介したいと思います。なお、ここで紹介するデモの完全なコードは<a href="https://gist.github.com/jto/2dc882c455b79378289f" rel="nofollow" title="" class="ext-link">こちら</a>をご覧ください。</em></p><p>まずは準備から。ソートアルゴリズムを実装するには、ソートする対象が必要ですよね。ここでは自然数を用います。もちろん、Scalaの型システムには利用可能な自然数はありません。そんなわけで、全ての自然数の型を作る必要があります。</p><p>型を無限に作るというのは、恐らく時間の浪費になるでしょうから、ここはもう少し賢い手を考えます。そう、数学を使いましょう。</p><p>ペアノの公理とは、自然数を形式的に定義するためのシンプルな方法のことです。</p><p>ペアノの計算法についてより詳しく知りたい方は<a href="https://ja.wikipedia.org/wiki/%E3%83%9A%E3%82%A2%E3%83%8E%E3%81%AE%E5%85%AC%E7%90%86" rel="nofollow" title="" class="ext-link">Wikipedia</a>をご覧ください。</p><p>これらの公理を頭に入れておくと、Scalaの型システムで自然数を表現するのが簡単になります。</p><p>まずはNatトレイトを作成してみましょう。</p><p>これらのクラスを定義すれば、どんな自然数も表現できるようになります。早速1から5までの自然数を定義してみましょう。</p><p>簡単ですよね。</p><p>これらの数字が実際に利用可能かを証明するため、足し算の実装をします。ここで再び、ペアノを参照することにしましょう（画像はWikipediaより）。</p><p><img src="http://upload.wikimedia.org/math/9/5/d/95dd1dc28b7774e45c5be05328e4612c.png" title="Image from wikipedia" alt="Peano's sum" style="margin:auto;display:block;"></p><p>分かりにくいかもしれませんが、これで十分です。幸い、ほとんどこのまま型に変換します。</p><p>ここで示したScalaでの変換は、私が臆面もなく<a href="https://github.com/milessabin/shapeless" rel="nofollow" title="" class="ext-link">shapeless</a>から取ってきたものです。以降、説明に必要なものが<a href="https://github.com/milessabin/shapeless" rel="nofollow" title="" class="ext-link">shapeless</a>に存在している場合は、そこから取ってくることにします。「偉大な芸術家は盗む」って言いますよね（それに私は怠け者ですし）。もちろん、参考したところについては逐一言及します。それから、より明快にするため、関係ないと思われる一部のコードを削除する場合はあります。</p><p>それでは、以下がshapelessの<code>Sum</code>です。</p><p>この素晴らしさに少し圧倒されているのでないでしょうか。まずはゆっくりと深呼吸し、1つずつ見ていきましょう。</p><p><code>Sum</code>は2つの自然数<code>A</code>と<code>B</code>を受け取り、別の自然数<code>Out</code>を返します。この型レベル関数の作成に使われているのが<a href="http://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E5%9E%8B" rel="nofollow" title="" class="ext-link">依存型</a>です。<code>Out</code>型は<code>A</code>と<code>B</code>に依存しています。つまり、Scalaに<code>A</code>と<code>B</code>を与えれば、何が<code>Out</code>かを魔法のように算出するというわけです。</p><p>これで足し算の表現方法が分かりましたね。<code>A + B = Out</code>です。</p><p>表現まではできたので、次は実際に2つの自然数を足した結果を算出してみましょう。</p><p>任意の自然数<code>b</code>に対し、<code>0 + b = b</code>というのが、私たちの定義する足し算の基本ケースです。</p><p>applyメソッドを用いて、このケースをテストしてみましょう。</p><p>その他のケースは帰納法により定義されます。</p><p>これの示すところは、2つのNatが<code>A</code>と<code>B</code>とするなら、<code>S(A) + B = A + S(B)</code>であるということです。</p><p>これはWikipediaで定義されている公理とは異なりますが、以下の理由から同等と言えます。</p><p>そこで、暗黙の解決によって<code>3 + 1</code>の足し算を評価しようとすると、Scalaのコンパイラは次のステップを踏むことになります。</p><p>ScalaのREPLでテストしてみましょう。</p><p>型システムで基本的な計算ができますね。</p><p>クイックソートを実装するには、自然数を比較できるようになる必要があります。ここで再び、<a href="https://github.com/milessabin/shapeless" rel="nofollow" title="" class="ext-link">shapeless</a>が役に立ちました。</p><p>先ほどのように、基本となるケースである、<code>0</code>だけをカバーし、帰納的に他の全ケースに当てはめます。ゼロは最小の自然数なので、<code>∀x∈N. 0 &lt; S(x)</code>となります。</p><p>すぐにテストしてみます。</p><p>ご存知のように、型は命題であり、プログラムは証明です。型<code>LT[_0, _1]</code>という値があるので、コンパイラは<code>0 &lt; 1</code>であることを証明しただけです（<a href="https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%AA%E3%83%BC%EF%BC%9D%E3%83%8F%E3%83%AF%E3%83%BC%E3%83%89%E5%90%8C%E5%9E%8B%E5%AF%BE%E5%BF%9C" rel="nofollow" title="" class="ext-link">Curry-Howard対応</a>をご覧ください）。</p><p>他の場合は全て、<code>∀ x,y ∈ N. S(x) &lt; S(y) ⇔ x &lt; y</code>のように、先行する数字を単に比較するだけです。</p><p>再度、コンパイラは基本となるケースへのステップをたどります。</p><p>では、テストしてみましょう。</p><p>クイックソートを実装するには、<code>≥</code>も使用します。Shapelessには<code>≥</code>はありませんが、<code>≤</code>を提供しているので、代わりにこちらを使用します。以下のコードがどのように機能するかお分かりになると思います。</p><p>さて、ここまで、自然数の扱い方を見てきましたが、ソートするには、自然数のリストも必要になりますね。しかし、リストはどのように機能するのでしょうか。以下は、<a href="https://github.com/scala/scala/blob/v2.11.5/src/library/scala/collection/immutable/List.scala" rel="nofollow" title="" class="ext-link">Scalaのリスト</a>を簡素化したものです。</p><p>リストは再帰的に定義され、次の2つの状態になり得ます。</p><p>リストの型を表すために、<code>HList</code>を使います。<code>HList</code>は、型システムに反復が生じない限り、全く同じように定義されます。繰り返しになりますが、<code>HList</code>はshapeless内で既に定義されています。</p><p>従来のリストのように、<code>HList</code>も空であるか、もしくは<code>head</code>と<code>tail</code>があるかのいずれかです。どちらのリストも定義が非常によく似ているのが分かりますね。本来は、<code>HList</code>も値を格納するリストです。今は、型システムの話をしているので、はっきりと分かるように不要なコードを削除しました。</p><p>それでは、自然数の型レベルリストを作成してみましょう。</p><p>必要なものはほとんど準備できました。まずはパーティションを作成し、HListを3つの要素に分割しなければなりません。</p><p>今回は、shapelessからはビルトインは提供されていないので、自力で対処します。</p><p>小さい要素を見つけ出すことから始めましょう。与えられたリスト<code>H</code>と、自然数<code>A</code>があります。ここから、新しい<code>Hlist</code>を作成したいと思います。</p><p>では、解決策の実装を始めましょう。先ほどのように、基本となるケース、つまり空のリストから始めます。</p><p>ここで”他にはどんなケースがあるのか”と、考えてみる必要があります。リストを使った関数の機能を決める際に、通常、最初の要素（<code>head</code>）でパターンマッチを行い、それを<code>tail</code>まで、再帰的に呼び出します。</p><p>やることは、それだけです。その場合、2つのケースが考えられます。最初の要素がピボットより小さいかピボットと等しい場合は、維持します。</p><p>上記以外の場合は、無視します。</p><p>コードをテストしてみます。</p><p>ピボットより大きい型のサブリストも、同様の方法で取得できます。</p><p>再度テストしてみます。</p><p>ゴールはもうすぐです。クイックソードのアルゴリズムでは、リストの連結が必要です。<code>Hlist</code>の先頭に、別の<code>Hlist</code>を追加する方法を実装しなければなりません。ここまでの過程で、自分で方法を見つけられるくらいに十分に内容を理解されていると思います。</p><p>テストしてみます。</p><p>ついに最終段階です。クイックソートの実装に必要なものはすべてそろいました。あとは、それらを統合するだけです。</p><p>ソートのアルゴリズムは、リストを与えると、リストを返します。</p><p>先ほどと同じように、最初は基本となるケースを扱います。空のリストをソートすると、空のリストが返されます。</p><p>次に、帰納的なケースです。</p><p>おっと、今回はかなりたくさんの型がありますね。ありがたいことに、それほど難しくはありません。</p><p>
</p>
<p>3. サブリストをソートします。</p><p>4. 小さい型のソートしたリストとピボット、そして大きい型のソートしたリストを連結します。</p><p>これで終了です。結果は、<code>preps.Out</code>です。</p><p>最後のテストをしてみましょう。</p>
