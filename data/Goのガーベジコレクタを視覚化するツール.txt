<p><a href="http://dave.cheney.net/2014/07/11/visualising-the-go-garbage-collector" rel="nofollow" title="" class="ext-link">Visualising the Go garbage collector</a>（2014-07-11）by <a href="http://dave.cheney.net/" rel="nofollow" title="" class="ext-link">Dave Cheney</a></p><p>本投稿では、私が取り組んでいる試験的なツールを紹介します。</p><p>gcvisはGoプロセスのガーベジコレクタのオペレーションを視覚化するシンプルな手法です。以下は、作動中のgcvisのスクリーンショットです。<br>
<img src="http://dave.cheney.net/wp-content/uploads/2014/07/Screenshot-from-2014-07-11-144528.png%20" class="aligncenter "><br>
ここからは、gcvisの仕組みとgcvisから得られる結果をどう解釈するかについて検証します。</p><p>Goプログラムからデータを取得するには、いくつかの方法があります。</p><p>ビルトインプロファイラは、<a href="http://golang.org/pkg/net/http/pprof/" rel="nofollow" title="" class="ext-link">net/http/pprof</a>、または、私の<a href="https://github.com/davecheney/profile" rel="nofollow" title="" class="ext-link">プロファイル</a>パッケージから利用できますが、プログラムのソースを改変できない場合があります。</p><p>他には、それぞれのGoプログラムに組み込まれている遠隔測定データのソースもあり、以下の環境変数を指定することでアクセスできます。</p><p>（環境変数GODEBUGは、<a href="http://golang.org/pkg/runtime/" rel="nofollow" title="" class="ext-link">ランタイム</a>パッケージで提供されています）</p><p>この環境変数を指定してプログラムを起動すると、標準出力に以下の追加出力が出力されます（少し簡略化されています）。</p><p>ここで提示されている2種類の情報は</p><p>次のセクションでは、gcvisの使い方とgcvisから得られるデータの解釈の仕方について述べます。</p><p>gcvisを使用するには、timeやniceと同じように、検証をしたいGoプログラムの前に置きます。</p><p>以下はインデクシングモードでgodocと一緒にgcvisを使用した例です（メモリとCPU時間を大量に消費し、興味深いデータを生成しています）。</p><p>以上です。</p><p>gcvisはGODEBUGの適切な値を設定し、生成された追加情報を取り除く処理をします。gcvisはまた可視化したデータを見るためにブラウザのウィンドウを開こうとします。この機能は<a href="https://github.com/pkg/browser" rel="nofollow" title="" class="ext-link">pkg/browser</a>によってもたらされ、オペレーティングシステムに、いくらか依存しているところがあります。</p><p>gcvisはリアルタイムでgcデバッグ行を記録しているので、タイムスタンプ情報を追加することが可能です。これは最初に記録されたままのデータであるGODEBUG出力に現在欠けている機能です。</p><p><img src="http://dave.cheney.net/wp-content/uploads/2014/07/Screenshot-from-2014-07-11-163509.png%20" class="aligncenter "></p><p>この例では、ヒープが増えるにつれ、gcサイクルの頻度が減少しているのが分かります。</p><p>gcデバッグデータの主な用途は、ヒープ上でライブオブジェクトのサイズを記録することにあります。しかしながら、これだとヒープの全体のサイズや、ライブオブジェクトがヒープ内に占める割合が分かりません。そのため、スカベンジャからデバッグ情報を追加する必要があります。</p><p>スカベンジャは現在では2分ごとにタイマーで実行されるのでプログラム開始の数分後にしかgcvisへデータの報告が開始されません。以下は約15分間稼働した後の例です。</p><p><img src="http://dave.cheney.net/wp-content/uploads/2014/07/Screenshot-from-2014-07-11-170131.png" class="aligncenter "></p><p>このグラフにおいて注意すべき興味深い点は以下のとおりです。</p><p>コードは<a href="https://github.com/davecheney/gcvis" rel="nofollow" title="" class="ext-link">Github上のオープンソース</a>なので、取得して自分のアプリケーションで試してみてください。</p><p>gcvisが役に立つかどうか、他のGoユーザからのご意見を心からお待ちしています。プルリクエストやバグレポートも大歓迎です。</p><p>Damian Gryski、Matthew Holt、Bill Kennedyの提案とフィードバックに深く感謝します。</p>
