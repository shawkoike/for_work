<p><a href="http://racksburg.com/choosing-an-http-status-code/" rel="nofollow" title="" class="ext-link">Choosing an HTTP Status Code — Stop Making It Hard</a> (2015-12-04) by <a href="https://twitter.com/michaelkropat" rel="nofollow" title="" class="ext-link">MICHAEL KROPAT</a></p><p>HTTPステータスコードを返すというのはとても単純なことです。ページがレンダリングできた？よし、それなら<code>200</code>を返しましょう。ページが存在しない？それなら<code>404</code>です。他のページにユーザをリダイレクトしたい？<code>302</code>、あるいは<code>301</code>かもしれません。</p><p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p><p><em>訳：HTTPのステータスコードのことは、市民ラジオの10コードみたいなものだと考えるのが好きです。「ブレーカー、ブレーカー、こちらホワイト・チョコレート・サンダー。200 OKを受信した。」</em></p><p>人生は至福のものです……そう、誰かが「RESTに則ってないじゃないか」と言ってくるまでは。やがて、あなたの新しいリソースが、<a href="https://en.wikipedia.org/wiki/Roy_Fielding" rel="nofollow" title="" class="ext-link">Roy-Fielding</a>が承認したRFC準拠のステータスコードを返しているかどうか知らなければならなくなり、そのために夜も眠れなくなることを思い知るでしょう。これはただの<code>200</code>でいいのだろうか？それとも本当は<code>204 No Content</code>だろうか？いや、明らかに<code>202 Accepted</code>か……ひょっとして<code>201 Created</code>だろうか？</p><p>事態をややこしくしているのが、HTTP/1.1のガイドライン(つまりRFC)が<a href="https://tools.ietf.org/html/rfc2068" rel="nofollow" title="" class="ext-link">最初に書かれたのが1997年である</a>ということです。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup> 33.6kbpsのモデムで、Netscape Navigaterでサイバーウェブをサーフィンしていた頃です。これでは、孫武の<em>『孫子』</em>を現代のビジネス戦略に適用しようとするようなものです。時代を超越したアドバイスであるとはいえ、正直に言って、「孫子の5つの火攻めの兵法を、どうやってマーケットのバリデーションに使えばいいのか」なんて、未だかつて分かったことがありません。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/02/win98-rfc2068-annotated.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/02/win98-rfc2068-annotated.png" alt="win98-rfc2068-annotated" width="640" height="480" class="alignnone size-full wp-image-6033"></a></p><p>「自分の状況に関係あるステータスコードを即座に判断できるような視覚的な決定木があって、不適切な/時代遅れのステータスコードを除外出来たらいいのになあ……」</p><p>どういたしましてインターネット。その日は来ました。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/02/StatusCodes.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/02/StatusCodes.png" alt="StatusCodes" width="1100" height="470" class="alignnone size-full wp-image-6029"></a></p><p>これはばかばかしいほどに当たり前のようにも見えますが、「これは<code>503 Service Unavailable</code>だろうか、それとも<code>404 Not Found</code>だろうか？」という疑問に迷い込む人を過去に多く見てきました。ちょっと待ってください。もしもあなたが「2つの特定のステータスコードのうち、どちらを選ぶか」について悩んでいて、その2つが完全に別の分類だった場合、その悩み方は間違っています。立ち戻って、上のフローチャートを見てください。</p><p>分類ごとに特化したフローチャートに入る前に、いくつか注意があります。</p><p>最後ですが重要な免責事項を。私はこの記事を書くための特別の資格を持った人間ではありません。日々有用なAPIを作ろうとしているRackburgのオフィスで働いており、いくらかRFCを読んだという、ただそれだけの人です。もしあなたがこれを読んで、私が間違っていると思ったり、あなたの好みのステータスコードが軽んじられていると思ったりしたら、それは私が愚かだからです。その際は、どう間違っているかを<a href="https://www.reddit.com/r/webdev/comments/3vslmp/choosing_an_http_status_code_stop_making_it_hard/" rel="nofollow" title="" class="ext-link">私に詳しく教えてください</a>。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/02/2xx3xx.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/02/2xx3xx.png" alt="2xx3xx" width="1310" height="1776" class="alignnone size-full wp-image-6030"></a></p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/02/4XX1.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/02/4XX1.png" alt="4XX" width="1190" height="3080" class="alignnone size-full wp-image-6041"></a></p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/02/5xx.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/02/5xx.png" alt="5xx" width="861" height="965" class="alignnone size-full wp-image-6027"></a></p><p>私はこの点について完全に確信があるわけではありません。</p><p>Facebookには賢い人がたくさんいますが、<a href="https://developers.facebook.com/docs/graph-api" rel="nofollow" title="" class="ext-link">彼らの提供するAPI</a>には<code>200</code>しか返さないものがあります。</p><p>特定のステータスコードを悩ます基本的議論は、「既存のステータスコードは、モダンなwebサイト/APIで使うにはあまりに一般的過ぎる」というものです。もし、クライアントが何らかの有意義な方法でレスポンスを取り扱えるようにするため、アプリケーションに特化した形式の詳細をレスポンスに含めなければならないのであれば(例えば「どのフィールドがバリデーションに失敗したか、そしてそれはなぜか」など)、それほど有用でもなく冗長なHTTPステータスコードを心配するのに時間を費やすのは何故なのでしょう？</p><p>特定のステータスコードを使うべき理由について、<a href="http://stackoverflow.com/a/31330860/27581" rel="nofollow" title="" class="ext-link">よく引用される一般的な理由</a>は、「HTTPはレイヤー化されたシステムであり、クライアントとサーバの間に存在するプロキシ・キャッシュ・HTTPライブラリがうまく動くにはステータスコードが有効であることが必要だから」というものです。しかし、この意見は、「全ての人がHTTPSに乗り換え、サーバが直接コントロールしていないキャッシュノード/プロキシが禁止されるようになる」といった状況にでもならない限り、従わなければならないほどのものではないと思います。</p><p>代わりに、私が「それでも、なぜステータスコードが重要なのか」と考える理由を3つ挙げます。</p><p>一番難しかったのは、どのコードを返すべきか決定することでした。しかし、正しい知識(つまり、そうですね、フローチャート形式などでしょうか)さえあれば、有効なコードを返すことはとても容易になります。</p>
