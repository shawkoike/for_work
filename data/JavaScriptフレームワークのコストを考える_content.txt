The Cost of Frameworks (2015-11-16) by Paul Lewisこんにちは。Paulです。Chrome開発リレーションチームでの提唱者の1人として、Googleで仕事をしています。開発者が自身のサイトやアプリの性能を高めるサポートをしています。先日、私はBrightonで開かれたJavaScriptのカンファレンスFFConfで「(ここにライブラリやフレームワークの名前を入れる)を使おう。これこそ最強中の最強中の最強だ！」と題して話をしました。ここに、そのプレゼンテーションの内容を書き起こします。もっと注目されるべき、最近のモバイルデバイスのフレームワークにかかるコストに関して、議論を広げる一助となればと思います。2015年11月16日更新 – テーブルに1行、プロダクション環境下のReactについての行を追加しました。良いニュースをお伝えしますと、これはvanillaよりも3倍遅いですが、TodoMVCに関して言えば速いと言えます！PolymerのTodoMVCサンプルも最新バージョン1.2.2にアップデートされ、同様により速くなりました。読むよりも見たい方へ、講演のビデオはこちらです。（必要なら、スライドも入手できます）読むほうが都合がよい方は、このまま進んでください。この年の初め、扱うツリーのサイズが大きくなっていくReactの性能の特徴について書きました（要は、大きいツリーほど、多くの計算をする）。その投稿に対する反応は、有益で建設的なものから、全く逆のものまで実に様々でした。おかげで私はまた新たな気づきを得たのですが、それは程度の差こそあれ全てのフレームワークにあてはまることです。ここにまとめてみます。時にははっきりと、たいていは暗に何度も言われたのは、労働効率こそが、多くの開発者にとって最も重要な要因である、ということでした。言い換えるなら、その心は、「もっと簡単にできるなら、ユーザにとってもっと使いやすいものを開発できる」です。言っていることは魅力的ですが、その考えには欠けているポイントがたくさんあります。ユーザにもニーズがあるのです。すぐに思いつくことを挙げます。
・サイトとアプリのローディングは速いのがいい。
・スムーズに反応してほしい。
・私の電話を遅くしないでほしい。
・クラッシュしないでほしい。
・私の欲しい機能が付いているべき。そこですぐに、トレードオフの可能性を考えることになります。一方で開発者の利便性と労働効率、他方でユーザのニーズ。私たちは、いやでもその2つの取引をしなければなりません。なぜならフレームワークはタダではないからです。ここで、いったんライブラリの話をして、今回の議論からは外します。理由は、ライブラリは良くないと分かれば取り除き、別のものに差し替え可能だと思うからです。ライブラリの日付書式が気に入らない？　問題なし、他の何かと取り替えましょう。他方、フレームワークは差し替えがずっと困難で、結局そのアプリを再構築する羽目に陥ることも多いのです。またその性質上、フレームワークはより大きく、影響範囲が広いのです。コストのかからないコードはありませんが、特にフレームワーク固有の下記のようなコストがあると考えています。
フレームワークの何らかが非推奨であることを伝える魔法のような瞬間。明らかにJavaに取って代わられています。謎です。開発者のコストとは別に、ユーザにもコストがかかります。以上のことに気をつけながら、これらのコストを測ることについてお話します。どのようなトレードオフを選んでいくのか、開発者が一緒になって、より詳しいイメージを描いていければと思います。フレームワークのモバイルにおける起動時間を見てみましょう。理論上、一定の条件のアプリを使えば、各フレームワークの起動時間を比較できるはずです。ここではTodoMVCをテストに使います。なぜなら、開発者から見て優れたWebアプリですし、ユーザとして見たときにはそれぞれの機能は同一であるためです。
TodoMVC: 起動テストのソース先にリストアップしたコストのうち、Nexus 5とiPhone 5S上でいくつかのフレームワークを起動する際の時間、帯域幅、そしてCPU使用率をチェックしました。
注釈：起動 / インタラクティブになるまでの時間
（ラベル上段左から）JSリクエスト – JS取得 – モデルデータリクエスト – モデルデータ取得 – ページがインタラクティブに
（ラベル下段左から）ロード – 評価、ロード＆実行
反応時間：アプリが反応可能な状態に至るまでにかかる時間を測ります。各フレームワークのJavaScriptの最初のペイロードの評価と実行、それからモデルに最初のデータセットをプロセスし設定するのにかかる時間を測ります。スタイル、レイアウト、描画などにかかるコストは、様々なTodoMVCにおいてほぼ違いはないので、ここでは除外します。また、転送時間もテストしません。ページをNexus 5にロードするためにWebPagetestを使い、それぞれの実行に対してタイムラインファイルを要求し、それをBig Rigに渡してプロセスするようにしました。iPhoneに関しては自身で行い、手動で計算する必要がありました。なぜなら、あいにくSafariのJavaScriptプロファイリングからはタイムライン、トラッキングファイルのエクスポートができなかったからです。
Big Rigを使い、フレームワークごとのTodoMVC起動時間を短時間で査定このようなテストを自身で行う場合は、少なくともChromeを走らせるデバイスを使うとして、次の作業が必要です。WebPagetestからタイムラインファイルを取得する過程のビデオです。様々なフレームワークのテスト結果です。結果は非常に明白でした。モバイルでフレームワークを使うと、特にVanilla JavaScriptで書いた場合と比較して、非常に負荷が大きいようです。Polymer 1.2.2が最速で、これは素晴らしいのですが、Vanillaと比べると3倍もの時間がかかっています。ReactはPolymerによく似ていますが、そのスケール不変性に懸念が残ります。以下は、より状況を明確にするためのメモです。
* TodoMVCはReactのJSX変換を行わないので、自分で行った。  Reactに関して3つのエントリがあるのは、TodoMVCのサンプルはJSXを変換せず、代わりにJSX変換ライブラリを含むためです。状況を良くするため（なぜならJSX変換には時間がかかるからです）、よりベースに近いバージョンのサンプルを作り、再度テストを行いました。欠点は、それはReactの小バージョンではないので、結局は別のデータであるということです。そこでReactをプロダクションバージョンに切り替えました。それがテーブル内Reactの3つ目のデータです。
* これらの時間は転送時間を含まない。　ここで計測したのはJavaScriptで、フレームワークが起動し最初のビューを取得するまでの時間です。実際TodoMVCのいくつかのフレームワークは小さくなっていません。フレームワークの転送サイズについての議論は、昨年のFilament Groupの記事をチェックしてみてください。このテストに対し、議論に値する反論が出てくると思われます。よって、次の問いは避けられません。「フレームワークを使うべき？」私はこの問いに答えることはできません。全てはあなたの必要次第だからです。それを使わなくては、と考えるに至るには何百万もの理由があります。ただ、フレームワークについて私の考えを述べておきます。

* フレームワークはアイデアとコンセプトに寄与する。　フレームワークは、どのアプローチが役に立ち、あるいは役に立たないかを理解する際の要です。それは究極にはプラットフォームレベルでの改良を達成し得ます。この点から言うと、フレームワークは将来のプラットフォーム変更を支える重要な試験の場であり、Webに永久に埋め込まれてしまう前に動きを理解する助けになります。
* フレームワークはコントロールの否定。　先ほどライブラリを除外したのは、取り替えが効くからです。一方、フレームワークは、コントロールを否定します。それらはアプリのライフサイクルを制御し、コードが走るエントリポイントを決定します。あなたはコードの最終形に責任がありますが、コントロールはできません。
* フレームワークはモバイルでは高コスト。　少なくとも、Vanillaと比較した場合です。私は高過ぎると思いますが、人それぞれ許容値は違います。フレームワークには、労働効率上の利点があると思います（これは重要、もちろん賛成です）。しかし、多くの開発者にとって、Webプラットフォームそのものの知識への投資は、長期で賭けるに値するものです。フレームワークは盛衰が激しく、Web上の潮の満ち引きのようなものです。そして上でも述べたように、アイデアとパターンに寄与します。しかし、現在使っているものがもう役立たないと気づいたり、修正不可のバグを見つけたりした場合、その土台となるプラットフォームを理解できることは大きな助けになります。今年の初め、Reactに関する記事で、次のように書きました。今もこの考えは変わりません。より気楽な生活を望むのと同じくらい、うまく動かないものを送り出したくないと思いますし、ユーザにコストを払わせたくないのです。今日は、モバイルでフレームワークを起動するコストに懸念を持ちました。これは最初の一歩でしかありません。起動以外にも、メモリ使用率、長期間のCPU利用量、フレームレートへの影響など、まだ検討していない基準があります。全体では、ユーザに送り出したコードの影響、ユーザに渡したコストを適切に評価するには、他にもしなければならないことがあると考えます。速い起動、低いメモリ使用率、スムーズな実行、さらに労働効率の良いフレームワークに到達できれば、成功です。その時まで、少なくともモバイルに関しては、Vanilla Webプラットフォームを使い続けたいと思います。
