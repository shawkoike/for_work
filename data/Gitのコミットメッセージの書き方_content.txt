How to Write a Git Commit Message （2014-08-31） by Chris Beams(訳注：2015/10/31、いただいた翻訳フィードバックを元に記事を修正いたしました。)
(訳注：2015/11/1、いただいた翻訳フィードバックを元に記事を再修正いたしました。)
#content .block-text blockquote p {font-size: 17px; font-weight: normal; line-height: 28px;}

訳：　プロジェクトが長引くほど、私のGitのコミットメッセージは情報が薄くなっていく。イントロダクション | 7つのルール | ヒントGitのリボジトリのログをランダムに閲覧すると、ひどいコミットメッセージを目にすることがあります。例として、私が昔書いたSpringにコミットしたこれらのgemを見てみましょう。訳：
e5f4b49 r814内で一旦削除したConfigurationPostProcessorTestsを再度追加。最近のビルドの失敗の原因だと分かったため、testCglibClassesAreLoadedJustInTimeForEnhancement()メソッドを@Ignore。ClassLoaderのハッキングがわずかなダウンストリームエフェクトの原因となり、関係のないテストを破壊。テストメソッドはそれでも使えるが、CGLIB が早まってclassloadをしないように手動で実行するべきで、自動ビルドの一部とし実行すべきではない。
2db0f12　ビルド失敗原因の2つのissueを修正＋ClassMetadataReadingVisitorをrevision 794に変更＋ダウンストリームテストが失敗する理由を突き止めるまでConfigurationPostProcessorTestsを消去（関係なさそうなClassPathXmlApplicationContextTestsなど）
147709f　package-info.javaファイルを変更
22b25e0　 UtilとutableAnnotationUtilsクラスを存在するAsmUtilsと統合
7f96f57　修正中
おえっ。これを、同じリボジトリから書いたより最近ののコミットメッセージと比べてみましょう。注釈：
$ git log –oneline -5 –author pwebb –before “Sat Aug 30 2014″
5ba3db6　 CompositePropertySourceTestsの不具合を修正
84564a0　先に解析したロジックで@PropertySourceを再作業
e142fd1　 ImportSelectorのメタデータのテストを追加
887815f　 docbookの付属をアップデートしてepubを生成
ac8326d　 mockitoの用法を修正
あなただったらどっちを読みたいですか？前者は文章も長いし見た目も幅広くなっています。後者は簡潔で一貫性があります。前者はデフォルトで書かれたものです。後者は偶発的に書かれたものではありません。前者のようなリポジトリのログを多く見かけますが、例外もあります。Linux kernelとGitそれ自体がそのいい例です。Spring BootなどTim Popeによって管理されているリポジトリを見てみてください。これらのリポジトリの作成者は、上手に記述されたGitのコミットメッセージが変更内容を仲間の開発者に伝える一番良い方法だと知っています（もちろん将来、自分で見た時のためにも）。diffで何が変更されたかが分かりますが、なぜ変更されたのか正しく理由を教えてくれるのはコミットメッセージです。Peter Huttere氏はこれをうまく説明しています。優れたGitのコミットメッセージを書くににはどうしたら良いか、まだ理解してないならば、今までにgit logや関連ツールをあまり使ってこなかったということかもしれません。それは悪循環を引き起こします。コミット履歴は統制が取れておらず矛盾が生じているので、使ったり手入れをしたりする時間を費やさなくなります。そして、コミット履歴は使われなかったり手入れをされない状態だと、統制が取れず矛盾が生じたままです。しかし、ログをしっかり手入れすれば、美しくて使い勝手の良いものとなります。そして、git blame、revert、rebase、log、shortlogや他のサブコマンドが活かせます。他の人が書いたコミットメッセージを見れば、プルリクエストが役に立つはずです。すると、突然自分でも書けるようになるはずです。数カ月、数年前になぜそのことが発生したのかを理解することが可能になるだけでなく、効果的にできるようになります。プロジェクトの長期的な成功の鍵は（とりわけ）メンテナンス性にあります。そして、メンテナンス担当者にとってプロジェクトのログ以上に強力なツールはありません。時間をかけても使い方を学ぶ価値はあります。最初は大変かもしれませんが、すぐに慣れます。そしてそれが自信となり、プロジェクトにかかわる全ての生産性を高めるでしょう。この投稿では、健全なコミット履歴を維持する最もベーシックなやり方をご紹介します。つまり、どうやってコミットメッセージを書くのか、ということです。コミットに関してはもう1つ、commit squashing という大事なものがありますが、今回は省略します。もしかしたら次回の投稿でご説明することになるかもしれませんが。プログラミング言語の多くは、どうすれば自然なスタイルになるかということに関して、うまく確立されたルールがあります。例えば、ネーミングやフォーマットなどです。これらのルールにバリエーションがあるのは当然ですが、1つのルールのみを使って、そのやり方に従うほうが、それぞれの開発者が別々の方法を使ってカオスになるよりマシであると多くの開発者は賛同してくれるでしょう。チームでコミットログに取り組む時も違いはありません。使えるリビジョン履歴をつくるには、チームは初めにコミットメッセージのルールを決めておくべきです。少なくも下記の3点に関しては合意を取っておきましょう。スタイル：マークアップ構文、空白、文法、大文字、句読点。これらのことに関して議論し、なんとなくで作業するのをやめ、可能な限り単純なスタイルにしましょう。これを実践すれば、一貫性のあるログになり、ログを読むことが習慣になってしまうくらい楽になるでしょう。内容：コミットメッセージの本文（もしあれば）が伝えたい情報はどんな内容ですか？ また、含まれていない情報は何ですか？メタデータ：Issue Tracking IDやプルリクエストの番号などはどうやって参照しますか？幸運にも、自然なGitのコミットメッセージを書くにはどうしたらいいのかという、確立されたルールが存在します。実際に、いくつかのルールはGitコマンドの機能に則って定められています。あなたが自分で再発明する必要はないのです。以下の7つのルールにただ従えばいいのです。そうすればプロと同じようにコミットできるようになります。

訳注 : このルールは英語での書き方に準拠するものであり、日本語でコミットメッセージを書く場合は異なる場合があります。例を挙げてみます。(訳：
だいたい50字以内で変更を要約必要であればより詳細な説明を書く。約72字以内で改行する。コンテキストによっては、初めの1文をコミットのタイトル、それ以下を本文とすることも。タイトルと本文の間は必ず1行空ける（本文を全く書かない場合を除く）。タイトルと本文を繋げて書くと、 log や shortlog 、rebase などのさまざまなツールが混乱するため。このコミットが解決している問題を説明する。どのように、ではなく、なぜこの変更をしたのかに重きを置く（どのように変更したかはコードを見れば分かる）。この変更で生じる副作用や直感的には分からない他の結果は生じないか？何かあればここで説明する。さらに文を追加する場合は、1行空ける。Issue Tackerを使用する場合は、以下のようにリファレンスをつけておく。Resolves: #123
See also: #456, #789
以下はgit commitのmanpageからの引用です。しかし、コミットは必ずしもタイトルと本文が必要ではありません。特に変更がとてもシンプルで、それ以上の説明が必要ない場合などは、1文のみで問題ない場合もしばしばあります。例えば以下のような形です。(訳：ユーザガイドの序文で誤字を修正)これ以上のことは言う必要はありません。もし、これを読んだ人が、誤字とは何だったのか知りたければ、git showやgit diffやgit log -pを使うなどして変更そのものを確認すればいいだけのことです。コマンドラインでこのように何かをコミットするなら、-mスイッチからgit commitを使ったほうが簡単です。注釈：　$ git commit -m “ユーザガイドの序文で誤字を修正”しかし、コミットが説明や内容を必要としていれば、本文を書いたほうがいいでしょう。以下が例です。注釈：
マスタコントロールプログラムを消去MCPは悪役で、世界征服を企んでいることが分かった。
このコミットは、トロンのディスクをMCPに投げて（これで、姿を消せます）、ディスクをチェスゲームに戻す。この場合は、-mスイッチでコミットするのは難しいです。適切なエディタが必要です。コマンドラインでGitを使うのにエディタをまだ設定してなければ、Pro Gitの項目を読んでください。どんな場合もタイトルと本文を分けることは、ログを閲覧する際に効果的です。ここにログエントリの全文があります。注釈：
マスタコントロールプログラムを消去MCPは悪で、世界征服を企んでいることが分かった。
このコミットは、トロンのディスクをMCPに投げて（これで、姿を消せます）、ディスクをチェスゲームに戻す。
ここで、タイトルだけを表示するgit log –onelineを使用すると、注釈：
42e769 マスタコントロールプログラムを消去
となります。もしくは、ユーザごとにコミットをグループ分けするgit shortlogを使うと、上記と同様にタイトルだけが簡潔に表示されます。注釈：
Kevin Flynn (1):
      マスタコントロールプログラムを消去Alan Bradley (1):
      セキュリティプログラム “Tron”の導入Ed Dillinger (3):
      チェスプログラムを”MCP”にリネーム
      チェスプログラムの変更
      チェスプログラムのアップグレードWalter Gibbs (1):
     チェスプログラムのプロトタイプの導入
Gitでは、他にもタイトルと本文を区別する箇所が多くありますが、タイトルと本文の間に空行が無ければ機能しません。50字というのは絶対的な制限ではなく、要約する際の単なるルールです。タイトルをこの長さに維持することで読みやすさが保証される上に、何が起きているかを最も簡潔に説明するにはどうしたらいいか、記述者が考えるように促すことになります。GitHubのユーザインターフェースはこうしたルールを完全に認識しています。50字の制限を超えてしまった場合、次のような警告が表示されます。
注釈：
プロのヒント：良いコミットの要約は、50字かそれ以内です。追加情報は説明欄に記述してください。
そしてタイトルが69字を超えると、省略記号を付けて切り捨てられます。というわけですので、50字を目標としますが、上限値は69字です。これは言葉通りの単純なことです。タイトルは全て大文字で書き始めます。例えば、ではなく、と記述します。タイトルにピリオドを付ける必要はありません。また、タイトルを50字かそれ以下にしようと思ったら、スペースは貴重です。例えば、ではなく、と記述します。命令法とは要するに”命令や指示をするような話し言葉または書き言葉”を意味します。いくつか例を挙げてみましょう。今皆さんが読んでいる7つのルールはそれぞれ、命令法で書かれています（”Wrap the body at 72 characters（本文を72字以内におさめよ）”など）。命令法は少し乱暴な言い方に聞こえるかもしれません。ですから私たちは普段あまり使いませんね。しかし、Gitコミットのタイトルにはまさにこれがうってつけなのです。あなたがコミットを作成する際に、Gitそれ自体が命令法で記述されているというのが理由の1つです。例えば、git merge読み込みの際に作成される初期メッセージは以下のようになります。注釈：ブランチ”myfeature”をマージせよそして、git revertを使う際には以下のようになります。注釈：
” Add the thing with the stuff “をrevertせよこのrevertのコミットはcc87791524aedd593cff5a74532befe7ab69ce9dである。
または、GitHubのプルリクエストの”Merge”ボタンをクリックする時は以下のようになります。注釈：
ユーザ／ブランチからの#123プルリクエストをマージせよ
ですので、命令法でコミットメッセージを記述する時には、Gitそれ自体がビルトインしているルールに従っていることになるのです。例えば、
このような書き方は、最初は少しぎこちなく感じるかもしれません。私たちは、事実を伝える際に使う直接法で話すことに慣れています。そのため、以下のような文章のコミットメッセージをよく見かけるということになってしまうのです。
さらにコミットメッセージは、内容の説明として以下のように記述されることもあります。
混乱を避けるために、いつでも正しく記述できるようなシンプルなルールを紹介します。適切に記述されたGitコミットのタイトルは常に、以下の文章を完成させるようなものになるべきです。例を挙げます。命令法以外の記述方法で書いた場合は、文章が正しく機能しないことに注意してください。覚えておいていただきたいのですが、命令法を使うのは、タイトルに対してだけです。本文を記述する際にはこの制限に縛られることはありません。Gitでは文字は自動的に切り詰められません。コミットメッセージの本文を記述する際には、右の余白と文字数制限に気を付けて手作業で行う必要があります。推奨する文字数は72字です。Gitにはテキストをインデントするために余白がたくさんありますが、全て含めて80字以内におさめます。優れたテキストエディタはこの作業を補助してくれます。例えば、Gitコミットを記述する際に、テキストを72字で制限するようにVimをコンフィギュレーションするのは簡単です。しかしこれまで、IDEでコミットメッセージのテキストを制限字数内におさめる際にスマートなサーポートを期待しても、提供されている方法はお粗末なものでした（この点に関しては、最近のバージョンであるintelliJ IDEAが、ついに改善しましたが）。このBitcoin Coreのコミットは、「何」と「なぜ」を説明している大変良い例です。注釈：
serialize.hの例外処理を簡素化する関連メソッドのように、”state”と” exceptmask “をserialize.hの streamインプリメンテーションから削除する。exceptmaskは常に”failbit “を含み、setstateは常にbits = failbitで呼び出されるので、実行するとただちに例外処理となる。これらの変数を取り除き、setstateをダイレクトな例外スローに置き換える（これによりデッドコードも取り除かれる）。結果として、エラー後にgood()は実行されず（callは2つだけで、1つはテスト内にある）、単にby !eof()によって置き換えることができる。fail()、 clear(n)、exceptions()は呼び出されない。それらを削除する。
全てのdiffを見てみましょう。そして、コメントの記述者が変更時に時間をかけて内容を提供してくれたことで、同僚や将来このコードを手掛ける人が、どんなに時間を節約できるか考えてみてください。もし彼が手間をかけてくれなければ、変更内容は永遠に分からなくなっていたことでしょう。大抵の場合、どのように変更が行われたかという詳細が書き残されます。この点についてですが、コードとは通常それ自体がコードの説明となっています（もしコードが非常に複雑で説明文が必要な場合には、ソースコメントという手があります）。まずは、変更した理由を明らかにすることに焦点を絞りましょう。変更前にはどのように機能していたのか（そして何が問題だったのか）、今はどのように機能しているのか、そしてなぜその方法で解決することに決めたのか、ということです。あなたに感謝する将来のメンテナンス担当者は、あなた自身かもしれませんよ。Gitのサブコマンドがあるのと同じくらい多くの理由から、コマンドラインを採用することは賢明なことです。Gitは非常に強力です。IDEも強力ですが、どのように強力であるかは異なります。私は毎日IDEを使用しており（IntelliJ IDEA）、他のものも幅広く使ってきました（Eclipse）。しかし（一度知ってしまうと）、コマンドラインの簡便さと強力さに匹敵するようなGit用のIDEインテグレーションは無いことが分かります。Git関連のIDEの関数の中には大変役に立つものもあります。例えばファイルを削除する際のgit rmの呼び出しなどです。また、リネームする際にgitで正しく処理できます。ただ、コミット、マージ、リベース、精密な履歴の分析などをしようと思った時に、IDEでは全てがバラバラになってしまいます。Gitのパワーをフル活用するならば、最適といえるのがコマンドラインなのです。使っているのがBashであれZ shellであれ、サブコマンドやスイッチを覚えておく労力を軽減してくれるタブ補完スクリプトがあることを覚えておいてください。Pro Gitの本はオンライン上で無料で入手できる素晴らしい本です。ぜひ利用してください。
