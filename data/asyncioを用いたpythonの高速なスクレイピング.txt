<p><a href="http://compiletoi.net/fast-scraping-in-python-with-asyncio.html" rel="nofollow" title="" class="ext-link">Fast scraping in python with asyncio</a> by <a href="https://twitter.com/georgesdubus" rel="nofollow" title="" class="ext-link">Georges Dubus</a></p><p>ウェブスクレイピングについては、pythonのディスカッションボードなどでもよく話題になっていますよね。いろいろなやり方があるのですが、これが最善という方法がないように思います。本格的な<a href="http://scrapy.org/" rel="nofollow" title="" class="ext-link">scrapy</a>のようなフレームワークもあるし、<a href="http://wwwsearch.sourceforge.net/mechanize/" rel="nofollow" title="" class="ext-link">mechanize</a>のように軽いライブラリもあります。自作もポピュラーですね。<a href="http://docs.python-requests.org/en/latest/" rel="nofollow" title="" class="ext-link">requests</a>や<a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow" title="" class="ext-link">beautifulsoup</a>、また<a href="http://pythonhosted.org/pyquery/" rel="nofollow" title="" class="ext-link">pyquery</a>などを使えばうまくできるでしょう。</p><p>どうしてこんなに様々な方法があるかというと、そもそも「スクレイピング」が複数の問題解決をカバーしている総合技術だからなのです。数百ものページからデータを抽出するという行為と、ウェブのワークフローの自動化（フォームに入力してデータを引き出すといったもの）に、同じツールを使う必要はないわけですから。私は自作派で、それは融通が利くからですが、大量のデータを抽出する時に自作はふさわしくありません。requestsは同期でリクエストを行うので、大量のリクエストが行われると待ち時間が長くなってしまうからです。</p><p>このブログ記事では<code>requests</code>の代わりに、最新のasyncioライブラリをベースにした案を紹介しましょう。<a href="https://github.com/KeepSafe/aiohttp" rel="nofollow" title="" class="ext-link">aiohttp</a>です。これで小さなスクレイパーを書いてみましたが、とても高速なものができました。どうやったかお見せしましょう。</p><p></p><p><a href="http://docs.python.org/3.4/library/asyncio.html" rel="nofollow" title="" class="ext-link">asyncio</a>は、python3.4で導入された非同期I/Oライブラリです。Python3.3のpypiからも入手できます。なかなか複雑なので詳細までは触れませんが、このライブラリを使って非同期コードを書くために必要な部分についてのみ説明します。もっと詳しく知りたい人は、ドキュメントを読んでくださいね。</p><p>簡単に言えば、知っておくべきことは2つ。コルーチンとイベントループです。コルーチンは関数に似ていますが、任意の箇所で一旦処理を中断したあと、処理を再開することができます。例えば、I/Oを待っている間（HTTPリクエストなど）コルーチンは一旦中断し、他の作業を実行させます。コルーチンを再開させるには、戻り値が必要だと宣言するキーワード<code>yield from</code>を用います。イベントループはコルーチンの実行を制御するために用います。</p><p>Asyncioについて学ぶことはたくさんありますが、当面はこれで十分でしょう。読んだだけでは分かりづらいかもしれませんから、実際にコードを見てみましょう。</p><p></p><p><a href="https://github.com/KeepSafe/aiohttp" rel="nofollow" title="" class="ext-link">aiohttp</a>は、asyncioと連携するために設計されたライブラリです。requestsのAPIに似ています。現状では、あまりいいドキュメントがないのですが、役に立つ<a href="https://github.com/KeepSafe/aiohttp/tree/master/examples" rel="nofollow" title="" class="ext-link">事例</a>がいくつかあります。まずは基本的な使い方について説明しましょう。</p><p>最初にコルーチンを定義してページを取得し、出力します。<code>asyncio.coroutine</code>を用いて、関数をデコレートしてコルーチンとします。<code>aiohttp.request</code>はコルーチンの一種で、<code>read</code>メソッドでもあります。ですから、これらを呼ぶときは<code>yield from</code>を使う必要がありますが、そういう注意点を除けば、コードはとても分かりやすいものです。</p><p>ご覧の通り、<code>yield from</code>を用いれば、１つのコルーチンから新たな別のコルーチンを発生させることもできます。同期コードからコルーチンを発生させるには、イベントループが必要です。<code>asyncio.get_event_loop()</code>から基準となるコルーチンを取得して、<code>run_until_complete()</code>メソッドを用いてそのコルーチンを実行させればよいのです。元のコルーチンを実行させるには、ただ次のように記述します。</p><p><code>asyncio.wait</code>という便利な関数があります。いくつかのコルーチンをリストとして取り出し、リスト内すべてのコルーチンを含有するひとつのコルーチンとして返してくれます。このようになります。</p><p>もうひとつ別の便利な関数としては<code>asyncio.as_completed</code>があります。こちらはコルーチンのリストを取り出し、処理が完了した順にコルーチンを再開するイテレータを返します。つまりこのイテレータを実行すると、それぞれの結果が出次第すぐに順次入手できるということです。</p><p></p><p>さて、非同期HTTPリクエストのやり方が分かったところで、スクレイパーを書いてみましょうか。残っているのは、htmlを読み込む部分です。今回は<a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow" title="" class="ext-link">beautifulsoup</a>を使ってみました。他の選択肢としては<a href="http://pythonhosted.org/pyquery/" rel="nofollow" title="" class="ext-link">pyquery</a>や<a href="http://lxml.de/" rel="nofollow" title="" class="ext-link">lxml</a>などがあります。</p><p>例題として、パイレート·ベイで配布されているlinuxのソフトウエア群の中からトレントリンクを取得する小さいスクレイパーを書いてみましょう。</p><p>まず、get requestsを処理するヘルパーコルーチンです。</p><p>解析部分。この記事の目的はbeautifulsoup について掘り下げることではありませんから、シンプルにダンプ出力に留めておきます。ページの最初のmagnetリストを取得します。</p><p>そしてコルーチンです。下記のurlについて、結果はシーダーの数でソートされます。つまり、リストの一番目が最もシードされているということになります。</p><p>最後に、これらすべてをコールするコードはこのようになります。</p><p></p><p>これで非同期の小規模スクレイパーができあがりました。様々なページが同時にダウンロードできます。requestsを使った同じコードよりも3倍も速く処理することができました。これで読者のみなさんも、自分独自のスクレイパーを書くことができますね。</p><p>この<a href="https://gist.github.com/madjar/9312452" rel="nofollow" title="" class="ext-link">gist</a>に、「おまけ」の分も含めた最終的なコードが掲載されています。</p><p>慣れてきたら、<a href="http://docs.python.org/3.4/library/asyncio.html" rel="nofollow" title="" class="ext-link">asyncio</a>についてのドキュメントや、aiohttpの<a href="https://github.com/KeepSafe/aiohttp/tree/master/examples" rel="nofollow" title="" class="ext-link">examples</a>なども見てみるといいですよ。asyncioでどんなことができるか、いろいろな例が記載されています。</p><p>このアプローチの制約は（実際のところ、自作の場合すべてに当てはまるのですが）フォームを処理するためのスタンドアロンライブラリが見当たらない、という点です。Mechanize とscrapy にはいいヘルパー関数があって、簡単にフォームを送信できますが、その2つを使わない場合は自分で何とかしなくてはなりません。これは結構面倒なので、いつか自作でライブラリを書いてしまうかもしれません…（期待はしないでくださいね）。</p><p></p><p>リクエストを一度に3つこなせるのはクールですが、5000となると話は別です。一度にあまりにも多いリクエストをしようとすると、やがて接続が切れてしまったり、そのウェブサイトにアクセスできなくなってしまったりするかもしれないからです。</p><p>このような事態を避けるために<a href="http://docs.python.org/3.4/library/asyncio-sync.html" rel="nofollow" title="" class="ext-link">semaphore</a>を使います。これは同期ツールで、ある時点で使われるコルーチンの数を制限するのに使います。ループの前にsemaphoreをクリエイトして、同時に最大いくつまでリクエストを処理するかを引数で渡してやればいいのです。</p><p>ここを入れ替えます。</p><p>機能は同じですが、semaphoreによって保護されています。</p><p>これで、最大でも同時に5つまでのリクエストしか処理されなくなりました。</p><p></p><p>もうひとつおまけです。<a href="https://github.com/noamraph/tqdm" rel="nofollow" title="" class="ext-link">tqdm</a>はプログレスバーを生成してくれるステキなライブラリです。このコルーチンは<code>asyncio.wait</code>と同様の動きをしますが、コルーチンの処理完了を示すプログレスバーを表示してくれます。</p>
