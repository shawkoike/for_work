Adventures in /usr/bin and the likes （2017-02-19） by Alexander Blagoev(注：2017/04/10、いただいたフィードバックを元に翻訳を修正いたしました。)私はLinuxが大好きです。コンピュータとのやりとりが楽しくなるし学ぶことも多くなります。OSとハードウェアの基盤となる基本原則を学びたい人にとって、Linuxはとてもいい出発点と言えるでしょう。ご存じのとおりLinuxとは大抵の場合プログラム（コマンド）を通してやりとりします。Linuxと他のUNIX系システムが持っている特徴は、コマンドラインと、パイプのコンセプトです。プログラムの提供する入力と出力を統合すれば、データを操作するのに非常にパワフルなプラットフォームになります。Linuxのコマンド、プログラム、バイナリ（何と呼んでもいいのですが）の大部分は、/usr/bin、/usr/sbin/、/binそして/usr/local/binに存在しています。これらのディレクトリを見れば、プログラムがたくさん見つかるでしょう。それでふと、これらのバイナリが日々の仕事にどう関わってくるのかと考えました。それで、宝探しをしてみることに決め、発見をこのブログに投稿してみることにしました。手始めに、私のマシンの/usr/binにある簡単なカウント機能で、データを参照してみます。これはもちろん日々私が使っているシステムで、ここで多くのものを保管しています。Centos 6.8（X Serverなし）の標準サーバに少しだけソフトウェアを追加して稼働しています。半分になりましたが、まだずいぶん数が多いですね。日常業務ではおそらく平均して20コマンドくらいしか使いません。以下はzsh環境でチェックする簡単な方法です。これで最新の146のコマンドが求められます。fcを使いタイムスタンプを参照し、今日の分だけのコマンドを抽出しました。このデータを念頭に置いて、/usr/binやその周辺の内部を掘り下げ、隠された宝石がないかどうか調べてみることにしました。私はCentos 6.8の標準インストールをしているので、違うディストリビューションであれば違いがあるでしょう。この投稿を書きながら各プログラムについて学びました。無知さ加減が目についたらご容赦ください。目次いいですね。私はいつも単発のジョブを設定しようとしてcronの構文を間違ってしまいますが、こういったユースケースに対してはずっと簡単に使えそうです。例を挙げます。date &gt; /tmp/test_at.logは同日の9:26p.m.に実行されます。保留中のジョブも参照可能です。atはイカした日時の書式をいくつか理解しているようです。例えばお茶の時間（at teatime）も知っています。クールですね。

今日の日付を反転表示して、しゃれたカレンダーを表示してくれます。個人的にはすごく便利だと思います。

これも便利です。mkfifoはシンプルなIPC（プロセス間通信）に使えます。この時生成されるnamed pipeは、Linuxでは通常そうであるように、ファイルです。つまりこのファイルに書き込むプロセス（writer）とこのファイルから読み込むプロセス（reader）が装備されています。下記の2つのPythonのスクリプトを参考にしてみてください。スクリプトを利用する前にFIFOを生成します。writerを起動します。readerも起動します。readerがFIFOの内容を出力する出力レートに注目してください。writerと同期しています。FIFOが通常のファイルだとしたら、readerは新しいアイテムがあろうがなかろうが、常に読み込むはずです。FIFOに対する読み込みと書き込みはブロッキングオペレーションだからです。FIFOを通常のファイルに変更して違いを確認してみてください。他にWikipediaのNetcatの項にもすばらしい例があります。これはプロキシの例で、ポート12345のリクエストをすべてポート80のwww.google.comに転送します。パイプが単方向性なので、FIFOが必要となります。

通常、ホストのIPアドレスを取得するのにはpingを使いますが、resolveipの方が簡単です。私と同類の人なら、しょっちゅうIPをコピーする必要にかられ、IPだけを返す-sオプションを使っているはずです。.bash_aliasesというファイルに保存するだけで、簡単に関数にできます。

コードを編集したくない時に便利です。例を挙げます。プログラムは10秒間実行され、そのあとTERMシグナルが送られます。シグナルや、時間の単位（例えば分、時間、日）は変更できます。

マルチユーザのシステムでは便利です。

watchはプログラムを定期的に実行したり出力を監視したりするのに便利なツールです。シンプルな時計は以下のようになります。-nオプションはwatchにプログラムを毎秒実行するように命令します。-dオプションは出力の差異を強調するようwatchに指示します。



この項目についてはブログの投稿をすべて費やしてもいいほどですが、私は正直詳細まで記述できるほど準備ができていません。理解している範囲では、システムのI/Oをiostatよりも低レイヤーで監視することができ、I/O関連のメトリクスを多く測定することができるというものです。この件に関してはこれが優れた投稿だと思います。これは新しいカーネルにのみ実装されています。古いものにはパッチを当てなくてはなりません。

システムに「niceness」を設定できることについてはご存じですよね。知らなかったのですが、CPUのスケジューリングポリシーも変更できます。現在、最新のカーネルは以下のポリシーをサポートしています。また、プロセスにはリアルタイムと標準の2種類があります。リアルタイムプロセスの方が優先度が高く、時間的な制約のあるアプリケーションに適用されます。プロセスのポリシーを変更することで、Linuxがプロセスをスケジュールする方法を変更できます。ユーザプロセスは通常リアルタイムではなく、デフォルトがSCHED_OTHERポリシーになっています。カーネルプロセスを調べてみたところ、SCHED_FIFOのものもありましたが、（少なくとも私のマシンには）SCHED_RRを持っているものはありませんでした。chrtを使えばプロセスのスケジューリングポリシーの変更やクエリが可能です。例えば、initをチェックするには以下のようになります。結果としてプロセスポリシーを以下のように変更することができます。しかし、実用的なユースケースや本番環境のポリシーに干渉する意味も見つけることができません。こちらの投稿ではいくつかの評価基準が掘り下げられています。ぜひ、このポリシーに関する皆様の経験や知識を共有していただけると嬉しいです。詳細は以下をお読みください。

これはかなりイケてます。マシン（のトポロジー）のハードウェアレイアウトの表示のために使用することができます。数多くの異なる出力フォーマットだけでなくASCIIアートにも対応しているところが最高です。以下に例を挙げています。Istopoコマンドはhwlocパッケージで提供されます。

これらのコマンドだけの投稿ができるほど話題につきません。私の知る限り、両コマンドはプロセスやスレッドのCPUアフィニティを制御するために使用されます。例えば、異なプロセスやスレッドを異なるコアやソケットに指定することが可能になります。さらに、プロセスやスレッドが使用するべきメモリノード（NUMA環境下でのバッファプール）を管理します。実際、Linuxスケジューラが最適ジョブを実行せず、スレッドや同様のプロセスをコア中に渡してしまう時に使用されています。始める前にまず、NUMAのアーキテクチャをおさらいしましょう。上は2つのCPUソケットと計16コアを持つ48ギガビットのサーバです。メモリは2つのノードに分かれています。numactlの簡単な例は以下のとおりです。これで1つ目のCPUソケット(0)上のprogramを実行します。プロセスのアフィニティを起動時に変更したい場合は、tasksetで実行できます。tasksetはソケットではなくコアで機能しますので、単体のソケットにプロセスを指定したい場合は、全てのコアを一覧にする必要があります。-c 0を使用することで、PIDをコア#0に指定します。cat /proc/cpuinfoを使用すればコアを見ることができます。さらに、プロセスの現在のCPUコアを見たい場合は、psのpsr列を見てください。つまり、この場合、initプロセスがコア#1になっていることが分かります。

たくさんのミス（プロセスの好むノードではないノードにメモリが割り当てられること）があるのは、システム上のどこかでアフィニティが最適ではないからと考えるのが論理的だと思います。

このコマンドは既定のプロセスのI/Oを監視するために使うことができます。先に進める前にpeekfdのLinux Manページから以下の引用をご紹介します。本番環境で使用する際は注意が必要です。どなたか安定性についてご存じの方は教えてください。いずれにせよ、保存時にvimの動作を監視します。ファイルに何が書き込まれるか見えるのがすごいです。もちろんstraceを使ったり出力のフィルタリングを行ったりしても同じことができます。

このコマンドは、既定のプロセスやシステム全体のあらゆる統計を監視するために使うことができます。top/htopに似ていますが、更に詳しい情報を提供してくれます。例えば以下のような情報です。最後の「1」は統計のポーリングを毎秒実行するようpidstatに指示します。-dオプションを使ってI/O統計を見ることができます。メモリは以下のとおりです。タスク（コンテクスト）の切り替えは以下のとおりです。

このコマンドは、プロセスによって操作中のディレクトリを簡単に取得できる使い勝手のいいツールです。



このコマンドは使い方が少し難しいのですが、使うだけの価値はあります。低レイヤーのプログラミングをしている人は日常的に異なる場合において使っています。私はsegfaultのデバッグに便利だと思って使っています。Segfaultは以下のような形式になっています。上の場合segfaultは共有ライブラリ（xcache.so）に出ています。ライブラリオフセット(xcache.so[7f46db763000+23000])を命令ポインタ(ip part)から減算してaddr2lineの正しいアドレスを算出する必要があります。アドレスが分かったら、共有のオブジェクトの位置情報と一緒にaddr2lineに与えます。このマシンの場合の出力は以下のとおりになります。これはsegfaultを生成するC言語ソースコードの違反行です。最高です。前述のとおり、このコマンドも単独の記事が書けるほど奥が深いのです。例えば、機能させるには、デバッグシンボルの設定をONにしてバイナリをコンパイルする必要があります。さらに、アドレス計算の裏には面白い理論が存在します（私の読むべきものリストに含まれています）。また、他にもさらに踏み込んだデバッグ（gdb）をしてくれるツールがあります。

繰り返しになりますが、すごいです。暴走プロセスのスタックトレースを見ることができるということは、問題解明に絶対役立ちます。使い方はいたって簡単です。このコマンドはgdbのラッパです。そのため、ディストリビューションにない場合は、gdbで同じような効果が期待できます。



このコマンドは素晴らしいのに今まで知りませんでした。列の書式入力に使うことができます。個人的に一番使い勝手がいいと思うのがCSVファイル形式です。とりわけすごいのは異なる列の区切り文字を指定することができることです。コマンドを実行します。次のコマンドと組み合わせて使うとさらに面白くなります。

このコマンドは入力から列を削除する場合に使えます。個人的にはawkを使い慣れていますが、単純なユースケースにおいては、colrmの方が使いやすいようです。前のコマンドで得た結果を元に、このコマンドを実行して最初の列を削除することができます。

commを使えば2つのファイルを比較して、片方のファイルにしか存在しない項目（行）の有無や両方のファイルに存在する行を確認することができます。例えば、以下のような2つファイルがあるとします。commを両方のファイルで実行することで、以下のような結果を得ることができます。列ごとに出力は分けられ、最初の列は最初のファイルのみに存在し、2つ目の列は2つ目のファイルのみに存在し、3つ目の列は両方のファイルに存在するといったように結果を表示します。ここでの注意点は、ファイルがアルファベット順に分類されている必要があるということです。そして、表示したい列を制御するオプションもあります。

このコマンドはsplit（ご存じない方は要チェックです）に似ていますが、csplitは大きいファイルを複数の小さいファイルに分割してくれます。splitとは異なり、csplitは正規表現で使うことができ、分割したファイルはそれぞれ異なる大きさにすることができます。以下の例を見てください（テキストファイル）。以下のコマンドを実行します。結果、アイテムブロックのみを含む3つのファイルが表示されます。--suppress-matchedオプションはcsplitに共通の行は出力結果に表示しないよう指示します。{*}はcsplitにパターンマッチングを可能な限り実行するよう指示します。残念ながら、csplitは行単位で実行します。例えば、正規表現の複数行モードでは使えません。

Cutはよく使われていますが、私はこれまで使ったことがありません。見た限りでは、とてもパワフルなツールのようです。colrm同様にcutコマンドはファイルの部分的（列）抽出を可能にしてくれますcolrmとは異なり、開始・終了オフセットの設定だけでなく、区切り文字を指定することもできます。これが、CSVファイルの強力な解析の実行を可能にしてくれます。例えば、以下のデータ(テキストファイル)があります。上でcutを実行すると以下のようになります。-dオプションで区切り文字を指定します（ここでは、「;」になります）。-fオプションで出力したい列の指定をします。列1と列3を出力したい場合は、以下のようになります。この他にもコマンドに柔軟性を持たせるオプションはあります。ここであえて挙げるとしたら、出力する区切り文字を制御するオプションでしょう。例えば以下のとおりです。–output-delimter $’\t’はタブ文字を使うようcutに指示します。

これも人気のあるコマンドです。詳しくは知りませんが、何とか説明してみましょう。2つのファイルのデータを、共通フィールド単位で結合します。例えば以下の2つのファイルがあります。joinを実行すると結果は以下のようになります。最初の列に基づいてファイルを結合することができました。このコマンドは両方のファイルでどの列を使うか、区切り文字に何を指定する（デフォルト設定は空白）かなどを柔軟に選ばせてくれます。

Pasteは複数のファイルを連結したい場合に使用できます。最も簡単なケースとしては、ファイルの中の全ての行を連結したい場合に使えます。以下のファイル(データ)を例に見てみましょう。コマンドを実行します。-d オプションによって区切り文字が指定され、-sオプションによってファイルの行を連結されます。ここで-sオプションの表現方法と単一ファイルでは機能しない理由が理解できていません。恐らく-sを実行しなければ、行単位で処理が実行されるのでしょう。ファイル結合の別の例を見てみましょう。以下のファイル(ex1とex2)があります。もちろん最初に挙げた例のように区切り文字を指定することもできます。

このコマンドをさえ知っていれば、簡単な検索や置換を実行するためにsedコマンドの構文を暗記する必要がなかったのにと思います。このコマンドはファイルの文字列の置き換えに使えます。以下のファイル（データ）を例として見てみましょう。replaceを実行して「variable」を「x」に置き換えます。速くて簡単です。複数の検索や置換を同時に実行することも複数のファイルで実行することもできます。

このコマンドは貴重です。ファイルの各行のうち、指定された文字列で始まっている行を表示します。基本的にはgrep “^PREFIX”と同じことをしてくれますが、正規構文なしで実行してくれます。以下のファイル（データ）で見てみましょう。Manページでlookをスペルチェックに使用する面白いユースケースが紹介されています。恐らく/usr/share/dict/wordsに英語辞典があり、lookコマンドでスペルチェックするようデフォルト設定されているのでしょう。以下のようになります。

とても便利なちょっとしたツールです。ファイルに行番号を追加してくれます。以下のファイル（データ）があります。上のファイルでnlを実行します。

Catのようなコマンドですが、ファイルを逆順に出力してくれます。これは簡単なコマンドですが便利です。タブをスペースに変換してくれます。上のコマンドとは反対のことをします。スペースをタブに変換してくれます。以上で終わりです。この投稿を書きながら多くのことを学ぶことができ、さらにLinux愛が深まりました。システムの透明性や詳細を提供してくれていることに感嘆します。他にもすごいコマンドを知っている方はぜひ下のコメント欄で共有してください。ここで挙げたコマンドの多くは初めて見るものもあったので、誤りがあるかもしれません。もしあるようでしたらぜひご指摘ください。
