How the Circle Line rogue train was caught with data （2016-12-01） by Data.gov.sg team members文：Daniel Sim　分析：Lee Shangqian、Daniel Sim、Clarence Ngここ数ヶ月、シンガポールのMRT環状線では列車が何度も止まるものの、その原因が分からないため、通勤客の大きな混乱や心配の種となっていました。私も多くの同僚と同じように環状線を使ってワンノースのオフィスに通っています。そのため、11月5日に列車が止まる原因を調査する依頼がチームに来た時は、ためらうことなく業務に携わることを志願しました。鉄道運営会社SMRTと陸上交通庁（LTA）による事前調査から、いくつかの電車の信号を消失させる信号の干渉があり、それがインシデントを引き起こすことが既に分かっていました。信号が消失すると列車の安全機能である緊急ブレーキが作動するため、不規則に電車が止まる原因となります。しかし8月に初めて発生した今回のインシデントは、不規則に起こっているように見えるため、調査チームが正確な原因を指定することは困難でした。私たちには、以下の情報を含むSMRTのまとめたデータセットが提供されました。私たちはデータのクリーニングから始めました。使ったツールは、Pythonコードのプログラミングや文書化によく使われるJupyter Notebookです。いつもと同じように、最初に便利なPythonライブラリをいくつかインポートしました。スニペット1 Gist次に、生データから使える部分を抜き出しました。スニペット2 Gist日付と時間の列を1つの列にまとめ、データを可視化しやすくしました。スニペット3 Gist以下のようになりました。
スクリーンショット1：最初の処理で得られた表下のグラフからも分かる通り、最初の予備解析では、はっきりとした答えを確認できませんでした。
図1：発生件数は利用動向のピークとオフピークを反映
図2：干渉の原因は地域的な要因ではないと予想される
図3：異なる60の車両が信号干渉の影響を受けた私たちの次の試みは、複数の特性を取り入れて予備解析を行うことでした。私たちが影響を受けたマレーチャートは、Edward Tufteが1983年に書いた『The Visual Display of Quantitative Information（定量的な情報の可視化）』の中で取り上げられています。また最近では、Mike BarryとBrian Cardがボストンの地下鉄のシステムを広範囲に渡って可視化したプロジェクトにも使われていました。
スクリーンショット2：http://mbtaviz.github.io/から引用この表では縦軸が時間を表し、上から下へと時間が進んでいきます。また横軸は路線の駅を、斜めに横切る線は列車の動きを示します。MRT環状線バージョンのマレーチャートを作るために、まず軸を描いてみました。
図4：環状線バージョンの未記入のマレーチャートハーバーフロント駅とドビー・ゴート駅の間を走る列車は、通常、下の表のように直線的な変位で移動し、片道を走るのに1時間と少しかかります。
図5：定型化された環状線の列車の反復的な動き私たちはインシデントを線で表現せず、点でグラフ上に書き込もうと考えました。まず、駅を示す3文字のコードを数字に変換しました。インシデントが駅と駅の間で発生した場合は、2つの駅の内、数字の小さい方に0.5を加えて示します。例えば、ハーバーフロント駅（数字は29）とテロック・ブランガ駅（数字は28）の間でインシデントが発生した場合、位置は”28.5″となります。こうすることで、水平軸に沿って点をプロットすることが容易になります。スニペット4 Gistそして、数値的な位置IDを計算しました。スニペット5 Gistそれから、以下をデータセットに追加しました。スニペット6 Gistその結果が下の表です。
スクリーンショット3：位置IDを加えた後に出力された表データ処理をすることで、緊急ブレーキが作動するインシデントを全てプロットした散布図を作ることができました。それぞれの点がインシデントを示しています。しかし、この方法でもインシデントが発生するパターンを明らかにすることはできませんでした。
図6：散布図で示された信号干渉のインシデント次に、点ではなく左向きと右向きの三角形を使ってインシデントの位置を示すことで、列車の進行方向をグラフに加えました。
図7：列車の進行方向を矢印と色で示す非常に不規則に見えますが、グラフを拡大するとパターンが浮き上ってくるように見えます。
図8：午前6時から午前10時の間に発生したインシデントグラフを注意深く観察すると、順番にインシデントが発生していることに気が付くでしょう。ある列車が信号干渉の影響を受けると、同じ進行方向の後続列車も、少し経ってから干渉の影響を受けています。この段階では1台の列車が犯人なのかどうかは、はっきりと分かっていませんでした。私たちが立証したのは、時間と場所でパターンがあるようだということです。インシデントが発生すると、次のインシデントは逆の進行方向で続けて発生しています。まるで”破壊の跡”があるかのようでした。インシデントの原因は、私たちのデータセットに含まれない何かなのでしょうか？実際、インシデント同士をつなぐ架空の線は、不気味なほどマレーチャートの線と似ています（スクリーンショット2）。信号の干渉を起こす原因は、逆方向に走る列車なのでしょうか？
図9：逆方向に走る列車が原因か？私たちは、この”悪さをする列車”の仮説について検証することにしました。環状線の駅間の走行時間は2～4分だと分かっていたので、4分以内に作動した緊急ブレーキは全て同じグループにまとめることができました。スニペット7 Gistこの条件を満たす全てのインシデントの組み合わせを探しました。スニペット8 Gistそれから、素集合データ構造を使い、関連する全てのインシデントの組み合わせを、大きなセットにグループ分けしました。これにより、同じ”悪さをする列車”に関係するインシデントをひとまとめにすることができました。スニペット9 Gistそして、私たちのアルゴリズムをデータに適用しました。スニペット10 Gist以下は、私たちが確認したクラスタの例です。次に、私たちのクラスタリングのアルゴリズムで説明可能なインシデントが発生する確率を計算しました。スニペット11 Gist結果は以下となりました。これは、データセットに含まれる259件の緊急ブレーキが作動したインシデントの内、189ケース、もしくは73パーセントが”悪さをする列車”の仮説で説明できるということです。私たちは、正しい方向に分析を進めていると思いました。クラスタリングの結果を基に、インシデントのグラフを色分けしてみました。同じ色の三角形が同じクラスタに属します。
図10：私たちのアルゴリズムでクラスタリングしたインシデント図5でお見せした通り、環状線を端から端まで走るのにかかる時間は、およそ1時間です。インシデントのプロットに合う線を描くと、図5に非常に近い線が引けます。これは”悪さをする列車”は1台だということを強く示唆しています。
図11：クラスタリングしたインシデントの時間から、干渉に関係している列車は1台の可能性が高いことが分かるまた観察結果から、未確認の”悪さをする列車”自体は散布図に現れず、信号関連の問題を抱えていないようだと分かりました。解明に向かっていると確信を持てたので、さらに調査を行うことにしました。日没後、”悪さをする列車”を特定するために、キム・チュアン車両基地へ行きました。その日はSMRTがデータを抽出する時間を必要としたため、列車のログを詳しく調査できませんでした。そのため、昔ながらの方法で該当する列車を特定することにしました。インシデントが発生した時間に各駅を発着する列車の映像記録を見直したのです。午前3時に、チームは第一容疑者を見つけました。それはPV46という、2015年から稼働している列車でした。11月6日（日曜日）にLTAとSMRTは、PV46が問題の原因かを検証するため、オフピークの時間帯にPV46を走らせました。私たちの仮説は当たりでした。PV46が、近くを走る列車同士の通信を遮断し、緊急ブレーキを作動させていたのです。検証を行った日のPV46が走るより前の時間に、同じようなインシデントは発生していませんでした。11月7日（月曜日）、チームはPV46の過去の位置データを処理し、8月から11月に起こったインシデントの95パーセント以上が私たちの仮説で説明できると結論付けました。残りのインシデントは、通常の状態で時々発生する信号の消失が原因と思われます。9月1日など、特定の日にパターンがはっきりと現れました。PV46が運行している時間帯およびその前後に障害が起こっていることが簡単に見て取れます。最終的にLTAとSMRTは、11月11日の合同のプレスリリースで、調査結果を一般に公表しました。私たちが調査を始めた頃、私と私の同僚は、LTA、SMRT、DSTAの職員が数多く参加する合同調査チームにとって興味深いパターンを見つけたいと思っていました。SMRTとLTAから提供されたインシデントログはきちんと整理されていたため、データをインポート、分析する前のクリーニングが最小限で済み、幸先のいいスタートを切ることができました。また、PV46のハードウェアの問題を確認したLTAやDSTAによる効果的な追跡調査も素晴らしかったです。データサイエンスの観点から考えると、各インシデントがとても近い場所で発生したことは幸運でした。そのおかげで、かなり短い期間で問題と原因の両方を確認することができました。もっとインシデントが孤立していたらジグザグのパターンは分かりにくく、謎を解くための時間とデータがさらに必要となったでしょうもちろん一番うれしいのは、通勤時に、また安心して環状線を使えるようになったことです。注意：ここに書かれているコードは、環状線のインシデントを解明するために、実際にSMRTのデータで作業していた2016年11月5日に書かれました。非効率なコードもあると思われます。私たちが使用したJupyter Notebookのコピーはこちらからダウンロードできます。Daniel Sim、Lee Shangqian、Clarence NgはGovTechのデータサイエンス部門で働くデータサイエンティストです。
