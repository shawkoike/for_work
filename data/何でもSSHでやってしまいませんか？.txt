<p><a href="https://medium.com/swlh/ssh-how-does-it-even-9e43586e4ffc" rel="nofollow" title="" class="ext-link">Why aren’t we using SSH for everything?</a> by <a href="https://medium.com/@shazow" rel="nofollow" title="" class="ext-link">Andrey Petrov</a> (<a href="https://twitter.com/shazow" rel="nofollow" title="" class="ext-link">Twitter</a>, <a href="https://shazow.net/" rel="nofollow" title="" class="ext-link">Website</a>)</p><p>私はかつて、<a href="https://github.com/shazow/ssh-chat" rel="nofollow" title="" class="ext-link">ssh-chat</a>というプログラムを書きました。</p><p><script src="//platform.twitter.com/widgets.js" async="" charset="utf-8"></script></p><p>アイデアは単純なもので、ターミナルを開いてこのようにタイプするだけのことです。</p><p><code>$ ssh chat.shazow.net</code></p><p>たいていの人はこの後に続けてlsコマンドをタイプするのでしょうが、ちょっと待って。よく見てください。そこにあるのはシェルではなく、なんとチャットルームですよ！</p><p>詳しいことはわからないけど、何かすごいことが起こっているようですね。</p><p>sshでサーバーに接続するときに、sshクライアントはいくつかの環境変数をサーバーへの入力として渡します。その中のひとつが環境変数$USERです。もちろんこれを上書きすることもできます。接続するときに、ユーザー名を指定すればいいのです。</p><p><code>$ ssh neo@chat.shazow.net</code></p><p>ほら、ごらんなさい。あなたこそが救世主。特別な存在なのです。これ以外に何ができるのでしょう？デフォルトで、環境変数$TERMの内容も受け取ってくれます。</p><p><code>$ TERM=inator ssh chat.shazow.net</code></p><p>ssh-chatがもう少し賢ければ、このカスタム端末がカラー対応していないことを察して、フォーマット文字の送信をスキップしてくれたことでしょう。</p><p>オプションフラグ<em>SendEnv</em>を使えばその他の環境変数も送れますが、ここではそこまで立ち入らないことにします。</p><p>SSHがサポートする認証方式には<em>none</em>、<em>password</em>、<em>keyboard-interactive</em>、<em>publickey</em>があります。それぞれ特徴がありますが、中でもいちばん便利なのが最後の方式です。</p><p>SSHクライアントがサーバーと接続するときには、お互いがサポートする認証方式のネゴシエーションを（通常は、先ほど挙げたのとは逆順で）行います。identityフラグを指定していたり、鍵を<em>~/.ssh/</em>ディレクトリに置いていたりする場合は、クライアント側からは公開鍵認証を提案するでしょう。サーバーが公開鍵を認識すれば（つまり、<em>authorized_keys</em>に記載されていれば）、セキュアなハンドシェイクが始まって、あなたがその公開鍵に対応する秘密鍵を持っていることを確認します。この流れにおいて、クライアントとサーバーの間では一時的な<em>セッション鍵</em>を使って通信を暗号化することに合意しています。</p><p>これは何を意味するのでしょう？要するに、SSHにはプロトコルレベルで認証の仕組みが組み込まれているということです。あなたがssh-chatにjoinしたときには、サーバー側ではあなたが何者なのかを知っているだけではなく、恒久的かつ確実にそのコネクションを特定できるのです。ユーザー側で何かをしてもらう必要はありません。登録フォームもいらなければメールのリンクをクリックしてもらう必要もないし、すてきなモバイルアプリだっていらないのです。</p><p>ssh-chatの将来のバージョンでは、ssh-chat専用のアカウントを作ってユーザーの鍵ペアで認証できるようになるでしょう。この専用アカウントとシェルアカウントとの紐付けや常駐機能、そしてPushoverやメールによるプッシュ通知といった機能も用意できるかもしれません。</p><p>サーバー側でも、クライアントと同じような鍵ペアを使っています。SSHで新しいホストに接続すると、「鍵のフィンガープリント」を確かめてくださいというメッセージが表示されます。このフィンガープリントは、サーバーの公開鍵のハッシュを十六進形式で表したものです。</p><p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*riKs6PVsoBuW0yO7a5Ojxw.png" alt=""></p><p>たとえば、chat.shazow.netに接続しようとしたときに今までとは<em>違う</em>フィンガープリントハッシュが表示されたとしたら、それは<a href="https://ja.wikipedia.org/wiki/%E4%B8%AD%E9%96%93%E8%80%85%E6%94%BB%E6%92%83" rel="nofollow" title="" class="ext-link">中間者攻撃</a>を受けていることを意味します。</p><p>どこかの極秘セキュリティ機関がSSHサーバーを用意して、あなたがふだん接続するSSHサーバーの前に（<a href="http://linux.die.net/man/8/sshmitm" rel="nofollow" title="" class="ext-link">sshmitm</a>などを使って）プロキシーとして割り込ませ、通信内容をすべて記録することだってありえます。幸いなことに、元のサーバーの秘密鍵がプロキシーに漏れていない限り、鍵のフィンガープリントは一致しません。</p><p>一度受け入れたフィンガープリントは<em>~/.ssh/known_hosts</em>に追記され、接続先のホストに<em>ピン留め</em>されます。その後の接続でもしホスト側のキーが変わっていたら、こんな恐ろしいメッセージが表示されるでしょう。</p><p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*mva2_6fu-3QfdTDfueclEg.png" alt=""></p><p>接続しようとしているホストが提示した公開鍵が、以前に同じホストに接続したときのものとは異なります。（同じIPアドレスで新しくVPSを起動したり、サーバー側でSSH鍵ペアを作り直したなどの）心当たりがない場合は、注意しましょう。別のネットワーク経由でこのホストに接続して、同じ結果になるかどうかを確認しましょう。同じにならない場合は、サーバー側のコネクションではなくローカルのコネクションを誰かに乗っ取られています。</p><p>クライアントはサーバーに接続すると、<em>チャネル</em>をオープンします。このチャネルに対して、いろいろな機能をリクエストします。クライアントからは、<em>pty-req</em>（擬似端末）や<em>exec</em>（コマンドの実行）などのリクエストを送信できますし、<em>tcpip-forward</em>（ポートフォワーディング）だってできます。それ以外にも<a href="http://www.ietf.org/rfc/rfc4254.txt" rel="nofollow" title="" class="ext-link">いろいろなチャネルがあります</a>し、クライアントとサーバーを実装した独自のチャネルも作れます。そのうち<em>chat</em>チャネルができるかもしれませんね。</p><p>いちばんよいところは、これらを並列に実行できるということです。ポートフォワーディングをしながら、シェルを開いてバックグラウンドでコマンドを実行できるのです。</p><p>パイプをオープンすれば、<em>more</em>コマンドの結果を流し込めます。クライアントが<em>pty-req</em>をオープンしたら、たとえばターミナルのサイズを変更するたびに<em>window-change</em>イベントを送信します。</p><p>「それってモバイルでも使える？」ご冗談を。当たり前じゃないですか！思いつく限りのあらゆるプラットフォーム上にSSHクライアントが用意されています。iOSやAndroidはもちろん、Windowsにだってさえ！OSXや各種Linuxディストリビューションには、SSHクライアントが標準で含まれています。<a href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en" rel="nofollow" title="" class="ext-link">ブラウザをSSHクライアントにするエクステンション</a>だってあるのです。</p><p>セキュアなプロトコルとしてSSHよりも広まっているものといえば、HTTPSくらいでしょう。</p><p>さて、ここまでを振り返ってみましょう。SSHはバイナリプロトコルです。強制的に暗号化されます。鍵のピン留めに対応しています。多重接続に対応しています。圧縮に対応しています（そう、実は圧縮もできるのです）。</p><p>これらの機能って、HTTP/2を作るきっかけになったものじゃありませんでしたっけ？</p><p>確かに、SSHには足りないところもあります。バーチャルホストの概念がなくて、ひとつのIPアドレス上でホストネームごとに別々のエンドポイントを提供することができません。</p><p>しかしその一方で、SSHにはHTTP/2よりも優れた機能もあります。クライアント認証の仕組みが組み込まれているので、余計なパスワードを覚えさえる必要がないのです。</p><p>SSHを使ったチャットも楽しいけど、これはSSHの可能性のほんの一部を使っただけにすぎません。</p><p>いつの日か、<em>mud.shazow.net</em>にSSHでログインすればちょっとしたRPGの世界を冒険できるようになるでしょう。今はまだないけど、きっといつかはそうなるでしょう。</p><p>技術的に高度ではありますが、可能性はありますよ…… <a href="https://twitter.com/shazow/status/549348566972370944" rel="nofollow" title="" class="ext-link">https://twitter.com/shazow/status/549348566972370944</a></p><p>いっそのこと、ZeroMQみたいなソケットをセキュアな暗号化環境で扱うというのはどうでしょう。Jeff Lindsayの<a href="https://github.com/progrium/duplex" rel="nofollow" title="" class="ext-link">Duplex</a>について調べてみましょう。まだ概念実証のレベルですが、クールなデモがたくさん用意されています。</p><p>SSHに組み込まれている認証や暗号化の仕組みは、APIなどにとっても実に便利です。複雑なOAuth2ハンドシェイクやHMACとシグネチャなどが不要になります。</p><p><code>ssh api.example.com multiply a=4 b=5</code></p><p>SSH経由での接続をHTTPと同じくらい簡単にできるようにするライブラリが、そのうち出てくるでしょう。そんなライブラリがあれば、ごく普通にREST APIにアクセスするコードの裏側ではSSHを使っていることになるでしょう。</p><p>いずれにせよ、APIドキュメントに<em>curl</em>での実行例を書くような時代は終わるのです。</p><p>RPC APIが手に入ったら、静的なファイルも操作したくなるものでしょう。</p><p><code>ssh static.example.com get /images/header.png</code></p><p>SSHは持続的接続にも対応していたことを思い出しましょう。ブラウザからSSHチャネル<em>get</em>に接続して、<em>get</em>リクエストを並列に送信すればいいのです。ETAGなどだって実装できるでしょう。</p><p>ここまでくれば、HTTP/1やHTTP/2をSSH上で実装できないわけがないですよね。<em>header</em>チャネルを追加してバーチャルホスト対応のための<em>&gt;Host</em>を指定したり、<em>Cookie</em>ヘッダを送信したり……。他のHTTPメソッドも追加したいですって？もちろんできますよ。たとえば<em>post</em>のようなチャネルを作ればいいだけです。もう少し丁寧に作るなら<em>http-post</em>みたいな名前にしてもいいでしょうね。</p><p>うん、いい質問ですね。</p><p><a href="https://medium.com/@jzila" rel="nofollow" title="" class="ext-link">John Zila</a>、<a href="https://medium.com/@limedaring" rel="nofollow" title="" class="ext-link">Tracy Osborn</a>、<a href="https://medium.com/@Lukasa" rel="nofollow" title="" class="ext-link">Cory Benfield</a>に感謝します。</p>
