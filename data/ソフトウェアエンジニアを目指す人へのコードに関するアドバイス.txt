<p><a href="http://jefflunt.com/rpce/" rel="nofollow" title="" class="ext-link">Coding advice for aspiring software engineers</a> （2014） by <a href="http://jefflunt.com" rel="nofollow" title="" class="ext-link">Jeff Lunt</a></p><p>この短い記事で私は、ある素晴らしいアイデアを提案します。それは、製品品質のコードは、下記リストに挙げた特性で説明することができるということです。それぞれ、重要性の高いものから順番に記述しています。もしあなたが、学校もしくは独学でプログラミングを学ぶ、真面目な学生なのであれば、製品品質のシステムを構成するコードの特性を学びたいと思うのではないでしょうか。</p><p>是非、<a href="http://www.reddit.com/r/compsci/comments/2mzq44/rpce_a_suggested_learning_approach_for_new_and/" rel="nofollow" title="" class="ext-link">ご意見・ご感想</a>をお寄せください。</p><p>価値のあるものを構築する際、コードが<strong>正確である</strong>ことは絶対ですから、“正確さ”が一番目にリストされると思うかもしれません。ですが、それぞれの特性は次の特性の土台となるので、ほとんどの場合、この順番で構築していけば、より早く正確なコードを書けるようになるのも事実なのです。この見解が正しい理由は、次のようにまとめることができます。</p><p>これらのルールに明らかに当てはまらないのが一時使用のためのコードです。これには、（a）一度しか実行されないタスクのコードと、（b）問題の解決方法を調査するための単なる実験的なコードが含まれます。実際、この種類のコードは頻繁に書く必要があります。つまり、一時使用のためのコードは良いコードである必要はなく、ただ動作すればよいのです。</p><p>そこで、「間違いなく一時使用が目的のコードはどれか？　これらのルールを無視しても大丈夫なのはいつか？」という疑問が出てきます。この答えは、経験によって得られるもので、実践を重ねることで身につくものなのです。</p>
