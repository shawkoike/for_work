<p><a href="http://tomerfiliba.com/blog/dlang/" rel="nofollow" title="" class="ext-link">D for the Win</a> by <a href="http://tomerfiliba.com/" rel="nofollow" title="" class="ext-link">tomer filiba</a><br>
tomer filiba： Pythonの低レベルプログラマであり、<a href="http://rpyc.readthedocs.org/en/latest/" rel="nofollow" title="" class="ext-link">RPyC</a>、<a href="http://construct.readthedocs.org/en/latest/" rel="nofollow" title="" class="ext-link">Construct</a>、<a href="http://plumbum.readthedocs.org/en/latest/" rel="nofollow" title="" class="ext-link">Plumbum</a>の作成者です。Pythonやアルゴリズム、ソフトウェアアーキテクチャ、その他、頭に浮かんだことを綴っています。</p><p><img src="http://tomerfiliba.com/static/res/2014-08-20-darkside.png" title="We have cookies" style="" class="blog-post-image"></p><p>私は転向しました。新たな言語を見出したのです！</p><p>そうそう、ぜひ<a href="http://tomerfiliba.com/blog/dlang-part2/" rel="nofollow" title="" class="ext-link">パート2</a>も読んでくださいね。</p><p>さて、ご存知のとおり、Pythonには様々な良いところがあり、非常に多くの分野で目覚ましい働きをします。しかし増え続けるこの業界の需要を満たすように作られたものではありません。もちろん、Pythonで大規模なプロジェクトを構築することはできます（私も構築したことがあります）。しかし検討段階から実際の開発段階に入ると、ものすごくコストがかかります。本当に高いのです。CPUの1サイクルあたりの仕事で換算すると、途方もない額になります。</p><p><a href="http://c10m.robertgraham.com/p/manifesto.html" rel="nofollow" title="" class="ext-link">C10M問題</a>は、<a href="http://www.kegel.com/c10k.html" rel="nofollow" title="" class="ext-link">C10K問題</a>の繰り返しです。つまり、現在のコモディティ・ハードウェアは1秒に数百万パケットの処理が可能となっていますが、実際にそんな数字に達することはめったにありません。例えば、私が一時期働いていた会社はAWSを使用しており、要求を受け入れログを取るための（実際の仕事はしていない）TwistedベースのPythonサーバが数十台ありました。この装置が（マシン1台あたり）1秒に約500の要求を搾り出し、すぐにコストが上がっていきます。PyPyにしたら（トラブル避けられませんでした）、処理量は3倍くらいになりましたが、コストはそこまで変わりませんでした。</p><p>私はPythonが大好きです。しかしPythonを見ていると <a href="http://ja.wikipedia.org/wiki/%E3%83%B4%E3%82%A3%E3%83%AB%E3%83%88%E3%81%AE%E6%B3%95%E5%89%87" rel="nofollow" title="" class="ext-link">ゲイツの法則</a>を思い出すのです。“ソフトウェアは18ヵ月ごとに50%低速化する”です。結局私たちは、自分のCPUサイクルにお金を払い、利益を最大化させたいと願います。Pythonが悪いというよりは、私自身の問題でしょう。私がC10Mの世界に来てしまったからです。ここでは強くて最新型のシステムを持つ、<strong>システムプログラミング</strong>のために設計されたプログラミング言語が必要なのです（結局、私が好きなのはダック・タイピングです）。インターフェースで外部システムとの接続が必要なので、C ABIが望ましいし（多言語関数インターフェースは無い）、メタプログラミングは大きなプラスになります（そうすれば扱いにくいコード生成を自分の構築するシステムに組み入れる必要がなります）。言うまでもなく、ミッションクリティカルのコードに、時々<code>NameError</code>や<code>NoneType has no member __len__</code>といった例外が出てしまうことなど許されません。コードのコンパイルは必須です。</p><p>私は<a href="http://www.rust-lang.org/" rel="nofollow" title="" class="ext-link">Rust</a>（良いのですが、大規模プロジェクトに使えるまで成熟するには2～3年かかりそうです）と<a href="http://golang.org/" rel="nofollow" title="" class="ext-link">Go</a>（Googleが本当にこれをシステムプログラミングのために開発したのだとしたら笑えます）についても調べました。しかし、変だと思われるかもしれませんが、私はずっと探し求めていたものを<a href="http://dlang.org/" rel="nofollow" title="" class="ext-link">D</a>に見出したのです。</p><p><img src="http://tomerfiliba.com/static/res/2014-03-27-dlogo.png" title="Dlang" class="blog-post-image"></p><p>システムプログラミングは、自分自身の特定の需要によって生まれる特殊性と専門性、そして制約がひしめく、広大な海のようなものです。こんな話では皆さんを死ぬほど退屈させてしまいそうなので、もっと面白そうなDとPythonの比較で皆さんの興味を引きたいと思います。つまり、<strong>Dがどんなに流暢にPythonを話すか</strong>をお伝えします。</p><p>まずは大事なことを説明しておきましょう。（もしかしたら）Dのことをよく知らない方もいるかもしれませんから。Dは、C++が理想に近づいたような言語です。Dはよりクリーンな構文、はるかに短いコンパイル時間、（任意の）ガーベジコレクション、非常に表現力のあるテンプレートと型推論、Pythonの演算子オーバーロード（リライトとして実装される）、オブジェクト指向や関数の機能（Pythonのようなマルチパラダイム）といったもを提供してくれます。また、効率の良いコードを生成するため高レベルのconstruct（クロージャなど）と低レベルのconstruct（インラインアセンブリのnaked関数など）を混合しており、さらに、強力なコンパイル時のイントロスペクションの性能や、コード生成のドメインに大変便利な機能を持つ言語です。コンパイル時にDコードの任意の文字列を評価するミックスイン、コンパイル時間数実行のCTFEといった機能があるのです。<br>
おっと、長くなりました。</p><p>概して、DはPythonのダック・タイピングの（またはプロトコル思考の）精神を追従しています。型が演算に必要なインターフェース（“プロトコル”）を提供すれば、一応きちんと機能します。しかしそれだけでなく、コンパイル時にコンプライアンスのテストをすることもできるのです。例えば、レンジはPythonのジェネレータを汎用化したものです。InputRangeとして実装するには、ただbool empty()とvoid popFront()とauto front()を実装すればいいだけです。そうすればisInputRange!Tを使って、Tがプロトコルに忠実であるかどうかをテストできます。ところで、感嘆符（!）はコンパイル時の引数をランタイムの引数と区別するためのものです。きっとすぐに慣れるでしょう。</p><p>簡潔にしたいので、ここに挙げた全てのプロパティについて説明はしません。代わりに、私がなぜPythonのプログラマはDを好きになるはずだと思うのかをお伝えします。</p><p><img src="http://tomerfiliba.com/static/res/2012-10-03-haml.gif" title="HAML" class="blog-post-image"></p><p><a href="http://tomerfiliba.com/blog/Hypertext/#the-code" rel="nofollow" title="" class="ext-link">以前のブログ記事</a>で、HTMLテンプレート言語についての私見を述べましたが、それは「全て駆逐せよ」という主旨でした。そういったものは概してPythonの機能をショボくしたようなもので、構文も醜いのです。ですから、Pythonを使って、DOMをプログラム的に操作する簡単な方法があればいいと述べました。</p><p>その後、私はその素案をそのままライブラリとして発展させて<a href="https://github.com/tomerfiliba/srcgen" rel="nofollow" title="" class="ext-link">srcgen</a>と名付けました。これを使えば<a href="https://github.com/tomerfiliba/srcgen/blob/master/tests/test_html.py" rel="nofollow" title="" class="ext-link">HTML</a>や、<a href="https://github.com/tomerfiliba/srcgen/blob/master/tests/test_c.py" rel="nofollow" title="" class="ext-link">Cのような</a>言語、そして<a href="https://github.com/tomerfiliba/srcgen/blob/master/tests/test_python.py" rel="nofollow" title="" class="ext-link">Python/Cython</a>のコードを生成できます。過去に商用のプロジェクトでコードを生成する必要があった時、何度もこれを使いました。</p><p>srcgenの中身について、抜粋を掲載します。</p><p>これはD言語では以下のようになります。</p><p>Githubでこの<a href="https://github.com/tomerfiliba/dlang/blob/9bb0902809570742c070723a0a7e" rel="nofollow" title="" class="ext-link">ソースコード</a>を公開しています。これはあくまでもこのブログ記事のために書いた試作品で、仕様の確定したライブラリではないということだけご承知おきください。</p><p>面白いのは、PythonのwithとD言語のwithはこれっぽっちも相関がないということです。Pythonの実装で<em>コンテキストマネージャ</em>のスタックを構築しますが、Dでは単にsymbol lookupを変更するだけです。それにしても驚きですよね。波括弧を除けば2つのバージョンはほとんどそっくりで、両方に同等の表現力があるのです。</p><p><img src="http://tomerfiliba.com/static/res/2012-05-16-construct-logo-small.png" title="Construct" class="blog-post-image"></p><p>しかし何といっても極めつけは私がD言語で作成した <a href="http://construct.readthedocs.org/en/latest/index.html" rel="nofollow" title="" class="ext-link">Construct</a>でしょう。私は<a href="https://code.google.com/p/sebulbasvn/source/browse/#svn%2Ftrunk%2Fccon" rel="nofollow" title="" class="ext-link">何年も苦労して</a>Constructのコンパイル版を作成しようとしてきました。宣言型のconstructから効率的でスタティックなコードを生成すると、ライブラリが実環境のデータ、すなわちパケットの解析や大きなファイルの処理などを扱えるようになります。つまりConstructで小型のパーサを書いておいて、その後それをC++で（手で）書き換えるというような作業が必要なくなるのです。</p><p>C言語版のConstructを作った時には問題がたくさんありましたが、結局のところそれは、強力なオブジェクトモデルがないために、文字列や動的配列など、そして<a href="http://construct.readthedocs.org/en/latest/adapters.html" rel="nofollow" title="" class="ext-link">アダプタ</a>などを表現できないということでした。Constructの本来の実力はアダプタに由来していて、バイナリ形式というよりはデータの表現 (“DOM”)レベルで処理されます。ラムダやクロージャ、また他の高レベルな概念が必要となりますがこれはC言語には欠けています。Haskellは高レベルで関数型なのでHaskell版も書いてみようとしましたが、同僚と私はすぐに諦めました。</p><p>先週のことですが、D言語がうってつけなのではないかと突然思いつきました。D言語は必要となる高レベルのコンセプトを備えており、更にメタプログラミングで効率の良いコードを生成することができます。D言語版に着手すると、非常に有望だと分かってきました。そこで、難しい話は抜きにして <a href="https://github.com/tomerfiliba/dlang/blob/9bb0902809570742c070723a0a7e684350c352e1/source/dconstruct.d#L260" rel="nofollow" title="" class="ext-link">dconstruct</a>を紹介しましょう。ライブラリの最初の試作品です。</p><p>Pythonでの標準的なPascalStringの宣言は以下のようになります。</p><p>D言語ではこうです。</p><p>メタプログラミングを用いると（そしてインラインと最適化を前提とすると）このコードは下記のようにまとめることができます。</p><p>このように非常に効率的です。</p><p><img src="http://tomerfiliba.com/static/res/2014-08-20-theresmore.jpg" title="There's more" style="max-width: 150px;" class="blog-post-image"></p><p>でもちょっと待って、それだけじゃありません。本当の美しさは、<a href="http://construct.readthedocs.org/en/latest/meta.html" rel="nofollow" title="" class="ext-link">コンテキスト</a>の処理の仕方にあります。PythonではConstructはディクショナリを構築し、それがパース/ビルドプロセスに伝わり、これまでに見たオブジェクトを参照することをconstructに許可します。これはもちろんD言語でも可能ですが、かなり非効率（型安全でもない）です。代わりに、deconstructはテンプレートが有効な言語で共通に見られるワザを用います。つまり、必要に応じて型を作るのです。</p><p>この見慣れない<code>alias _curr this</code>というのはサブタイピングとして知られるD言語の素敵な機能です。これは、structの領域に存在しないプロパティは<code>_curr</code>にフォワードされるということを意味します。つまり<code>myCtx.foo</code>を書いた時<code>myCtxにはfoo</code>という名前のメンバはなかったので、コードは<code>myCtx._curr.foo</code>と書き換えられたのです。</p><p>さてconstructでは次に、カレントのコンテキストをその上位(_)とリンクします。これはconstructのどの組み合わせでも、どのネスティングのレベルでも、ユニークに型付けされたコンテキストを得られるということです。実行時、このコンテキストはポインタのペア以上のものではありませんが、コンパイル時には型安全を保証してくれます。言い換えると、nonexistentフィールドを参照してコンパイルはできません。</p><p>もう少し面白い例を挙げましょう。</p><p>MyStruct（再帰的にYourStructをアンパックする）をアンパックする時、新たなコンテキストのctxが、<code>ctx._curr=&amp;ms.child</code>と<code>ctx._=&amp;ms</code>と共に作成されます。<code>YourStruct</code>が<code>_.length</code>を参照する時、ストリングはctxに埋め込まれ<code>ctx._.length</code>を生成します。もし間違ったパスを参照していたりミススペルがあったりした場合には、単にコンパイルされませんし、実行時のdictionary lookupsは必要ありません。すべてコンパイル時に解決されます。</p><p>もう一度言いますが、これはConstructの非常に暫定的なバージョンです。製品レベルには程遠いですが方向性を知るのには役立つと思います。</p><p>ちなみに <a href="http://dpaste.dzfl.pl/" rel="nofollow" title="" class="ext-link">dpaste</a>ではD言語をオンラインで試せます。<a href="http://dpaste.dzfl.pl/f0fccc09707e" rel="nofollow" title="" class="ext-link">そこ</a>で私のdconstructのデモ版をいじってみることもできますよ。</p><p>Pythonに対する私の特別な思いは今後も変わることはないでしょう。しかし(Pythonでキャリアを築いてきた者としては)意外かもしれませんが、このあまりよく知られていない、急速に進化してきたD言語を、プログラミング時にまず選択したいと思うように<br>
なりました。表現力に富み、簡潔でパワフル、（C++と比較すれば）コンパイル時間も短く、プログラムが楽しく効率的になります。C10M時代の言語と言えるでしょう。</p>
