<p><a href="http://houssein.me/redux/immutablejs/angular2/2016/07/04/angular2-with-immutablejs-and-redux.html" rel="nofollow" title="" class="ext-link">building angular 2 applications with immutable.js and redux</a> （2016-7-4） by <a href="http://twitter.com/hdjirdeh" rel="nofollow" title="" class="ext-link">Houssein Djirdeh</a></p><p><img src="http://houssein.me/public/angular2-redux.jpg" alt="angular2 redux" title="Angular 2 and Redux" class="article-image-with-source"></p><p>過去にJavaScript開発をやったことがある人であれば、<a href="http://redux.js.org/" rel="nofollow" title="" class="ext-link">Redux</a>のことは聞いたことがあるでしょう。Reactとともに一般に普及し、開発者の中には「当時のJavaScript関係で一番興奮した出来事だった」、「アプリケーションの構築に大変革をもたらした」、はては「Reduxのおかげで地球温暖化が完全に止まった」と言う人もいるくらいです。</p><p>失礼、ちょっと我を忘れてしまいました。しかし、真面目な話、Reduxはアプリケーションの構築方法に、変化をもたらしたのは本当です。この投稿では、Reduxを別のライブラリの<a href="https://facebook.github.io/immutable-js/" rel="nofollow" title="" class="ext-link">Immutable.js</a>と一緒に、Angular 2と統合するやり方をご説明します。</p><p>この投稿では、FluxアーキテクチャとReduxの基本的な概念を考えていきます。それから、簡単な連絡先リストのアプリケーションを段階的に作っていきます。初めは基本的なセットアップを構築し、その後、不変性を追加し、最後にはReduxの状態のコンテナを作成します。</p><p><a href="https://embed.plnkr.co/ns1tfi/" rel="nofollow" title="" class="ext-link">デモを見る</a><br>
<a href="https://github.com/hdjirdeh/angular2-redux-contact-list" rel="nofollow" title="" class="ext-link">ソースコード</a></p><p><img src="http://houssein.me/public/contact-list.gif" alt="contact list" title="Contact Link Example" class="article-image"><br>
進めていく上で、なぜそれをしなければいけないかを1つずつ丁寧に説明していくよう努めます。最後までいってもアプリケーションは完成しませんが、おおまかなやり方をつかんでいただけると思います。</p><p>Fluxはユーザインターフェースを構築するための、簡単なアーキテクチャパターンです。フレームワークやライブラリではありません。クライアントサイドのアプリケーションを構築するためのデザインパターンなのです。</p><p><img src="https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png" alt="flux architecture" title="The Flux Architecture" class="article-image-with-source"><br>
<a href="https://facebook.github.io/flux/docs/overview.html#structure-and-data-flow" rel="nofollow" title="" class="ext-link">ソース：Flux Documentation『Structure and Data Flow』</a></p><p>Reduxは<a href="https://medium.com/@dan_abramov" rel="nofollow" title="" class="ext-link">Dan Abramov氏</a>が開発したFluxの実装です。Fluxはそれ自身がライブラリではないので、FacebookはFlux中心のアプリケーションが利用できる<a href="https://github.com/facebook/flux" rel="nofollow" title="" class="ext-link">Dispatcherライブラリ</a>を作成しました。Reduxも同じアーキテクチャですが、これは特定の抽象化を簡単にするために作られたものになります。</p><p>基本的な性質を見てみましょう。</p><p>1) アプリケーション内の変更はすべて、1つのJavaScriptオブジェクト、つまり<strong>ストア</strong>に格納される。<br>
2) オブジェクトストアはアプリケーションの状態のコンテナとして機能します。<br>
3) 状態は読み取り専用で、変更できない（つまり、<strong>不変</strong>である）。<br>
4) 状態に変更を加える（ユーザイベントやAPIインタラクションなど）には、変更を説明するJavaScriptオブジェクトを送る必要がある。つまり、<strong>アクション</strong>を<strong>ディスパッチ</strong>する。<br>
6) データはストアから<strong>ビュー</strong>に転送され、その逆方向への転送はない。よって、ビューは状態を変更することができない。</p><p>前述したように、状態変更は現在の状態を変更することはできません。Reduxでは、変更が発生するたびに、新しいJSONオブジェクトが返されなければいけません。これを実現するために、状態の変更は<strong>純粋関数</strong>を使ってトリガーさせる必要があります。純粋関数は同じ入力に対しては常に同じ値が帰ってくるという関数です。つまり、外のものは何も変更ができないということです。外部変数を変更したり、データベースを呼び出すこともできません。</p><p>Reduxでは、これらは<strong>Reducer</strong>として知られ、アプリケーションの状態がアクションに対応してどのような変更するかの決定を下します。</p><p>ここまでできて、まだはっきりと理解できていなくても大丈夫です。先に読み進め、Reducerやアクション、ストアが具体例の中でどう使われているのか見ていけば、理解はどんどん深まるはずです。</p><p>では、連絡先リストを実際に構築していきましょう。まだの人がいれば、<a href="https://angular.io/docs/ts/latest/quickstart.html" rel="nofollow" title="" class="ext-link">Angular 2 QuickStart</a>を使ってアプリケーションをセットアップすることもできます。今回は、埋め込みコードでのクラスの定義やスタイルの要素などの必要のないものは省略し、必要なものだけを説明しますが、それぞれのステップの最後には、完全なソースコードのリンクを貼っておきますので、参考にしてください。</p><p>まずは、純粋にAngularの要素で簡単なものを構築してみましょう。最初にContact Storeでアプリケーションのロジックを処理します。</p><p>このやり方はAngular 1.xでサービスをセットアップする方法にとても似ています。これで、ストアが連絡先を追加、削除、お気に入りに登録できるアプリケーションの状態を制御するようになりました。</p><p>では、コンポーネントをセットアップします。</p><p>ここでは、プライベートな<code>store</code>プロパティを定義し、それを<code>ContactStore</code>インジェクションとして特定するコンストラクタがあります。<code>addContact</code>、<code>removeContact</code>、<code>starContact</code>などの入力のメソッドはすべて、<code>ContactStore</code>のそれぞれのメソッドにリンクしています。</p><p>今のところ、使用可能なシンプルなものを構築することに成功しました。いい滑り出しです。ソースコードは<a href="https://github.com/hdjirdeh/angular2-redux-contact-list/tree/basic-setup" rel="nofollow" title="" class="ext-link">こちら</a>からどうぞ。</p><p>Angular 2はコンポーネントベースなので、連絡先ごとにコンポーネントがあることは理にかなっています。実際のリスト上で親コンポーネントを設定しましょう。</p><p>そして、子コンポーネントはこの連絡先のコンポーネントとなります。</p><p>ご覧のとおり、ストアインスタンスは親コンポーネントにも子コンポーネントにも挿入されました。少し理解が深まったのではないでしょうか。ソースコードは<a href="https://github.com/hdjirdeh/angular2-redux-contact-list/tree/child-contact-component" rel="nofollow" title="" class="ext-link">こちら</a>からどうぞ。</p><p>Angular 2では、すべてのコンポーネントがそれぞれでChange Detectorを持っており、それぞれのテンプレートでバインドするようになっています。例えば、私たちは<code>Contact</code>コンポーネントにバインドする<code>{{ contact.name }}</code>を持っています。つまり、<code>Contact</code>コンポーネントの裏にあるChange Detectionは、<code>contact.name</code>と<strong>その変更</strong>のデータを提示するのです。</p><p>では、イベントが引き起こされると何が起きるのでしょう。Angular 1.xでは、digestサイクルが起動すると、すべてのバインディングがアプリケーション全体で引き起こされます。Angular 2でも似ていて、すべてのコンポーネントがチェックされます。Angularは、イベントが起きるたびではなく、入力プロパティの中の1つが変更されたときだけ、コンポーネント上でChange Detectionを始めるんです。いいでしょう？　私たちのコンポーネントレベルではAngularの<code>ChangeDetectionStrategy</code>を使ってこれができます。</p><p>こんなに簡単なんです！　このコンポーネントのChange Detectionは、コンポーネントのバインディングに変更が起きたときのみ、起動するようになりました。</p><p>ちなみに、今回のようなシンプルなアプリケーションでこれは本当に重要なことでしょうか？　そもそもアプリケーションに多くのバインディングがなければ意味はありません。しかし、巨大なアプリケーションでは、イベントが引き起こされるたびにバインディングの数をかなり減らすができ、とても有効です。</p><p>Change Detection Strategyを有効活用するには、状態を完全に不変にしておく必要があります。しかし、JavaScriptオブジェクトの性質として、初期設定で可変になっています。そこで、Facebookのチームが開発したライブラリである<a href="https://facebook.github.io/immutable-js/" rel="nofollow" title="" class="ext-link">Immutable.js</a>を使用します。</p><p>簡単に言えば、不変オブジェクトは本質的に変更されないオブジェクトなのです。それらを変更するには、変更したい内容の参照オブジェクトを新たに作成し、元のオブジェクトは残しておく必要があります。Immutable.jsは、アプリケーションに含めることのできる不変データストラクチャを数多く提供してくれます。</p><p>不変性は、<code>npm install immutable</code>でインストールできます。インストールができたら、SystemJSの設定をアップデートしなければなりません。もし、Angular 2 QuickStartに従ってアプリケーションをセットアップしたなら、<code>systemjs.config.js</code>ファイルの中にあります。あとは、割り当てられたらフィールドをもう1つ追加し、システムローダが、<code>immutable</code>が参照されたときに正しいファイルを探せるようにするだけです。</p><p>これだけです。では、<code>ContactStore</code>を更新しましょう。</p><p>ご覧の通り、<code>contacts</code>のインスタンス化を変更し、配列の代わりに<code>List</code>を使っています。<code>List</code>はJavaScriptの配列と類似していますが、不変であり、完全に持続性があります。</p><p>リストへの変更を持続させるために、<code>push</code>と<code>delete</code>と<code>update</code>のメソッドを使っています。配列と同じように、<code>indexOf</code>もリストの中の選択された連絡先を探すのに使われます。重要なのは、これらのすべてのメソッドでは、現在のコレクションは変更されませんが、新しく不変コレクションが生成されるということです。</p><p>ソースコードの<a href="https://github.com/hdjirdeh/angular2-redux-contact-list/tree/immutable-store" rel="nofollow" title="" class="ext-link">リンク</a>はこちらです。</p><p><em>注釈：もしかしたら、なぜ<code>starContact</code>メソッドで、<code>&lt;any&gt;</code>を使うのか疑問に思っている人もいるかもしれません。これはただのTypeScriptの型のアサーションで、アップデートされた連絡先のオブジェクトを返す時のコンパイラエラーを防いでいます。これは、リストに対してメソッドを実行したときの型定義にともなう問題があるため、単なる回避策なのです（<a href="https://github.com/facebook/immutable-js/issues/684#issuecomment-153812280" rel="nofollow" title="" class="ext-link">こちら</a>で詳しく解説しています）。</em></p><p>Reduxは、<code>npm install --save redux</code>でインストールできます。また、ここでシステム設定のアップデートを再度してください。</p><p>ここで、アクションファイル追加します。</p><p>ご覧のとおり、すべてのアクションは、シンプルなJavaScriptオブジェクトなのです。例えば以下のようになります。</p><p>Reduxでは、アクションは実行されるアクションの型を説明する<code>type</code>プロパティを必ず必要とします。また、文字列定数として定義することをおすすめします。これ以外にも、アクションのストラクチャをあなたの好きなようにセットアップできます。私はそれぞれのアクションで必要なもののみを含むようにセットアップし、<code>id</code>と<code>name</code>で連絡先を追加し、<code>id</code>で削除とお気に入りに登録することができるようにしました。</p><p>それぞれのアクションが、それを作った関数の中に含まれているのが分かるはずです。</p><p>これらは<em>action creator</em>として知られ、それぞれが、生成した<code>IContactAction</code>インターフェースに定義されます。</p><p>では、次にreducerのセットアップの仕方を見ていきましょう。</p><p>純粋関数に関して先ほど言ったことを覚えているでしょうか？　reducerは状態を変更しませんし、副作用もありません。それぞれのアクションに対して、新しく生成された状態をただ返すだけなのです。</p><p>では、必要なストアのアップデートを実行しましょう。</p><p>シンプルでいいですね。<code>createStore</code>メソッドは、アプリケーションの完全な状態を持っているReduxストアを生成します。第二引数では、アプリケーションのプリロードされた状態に不変の連絡先リストを挿入します。現在の状態は<code>getState</code>でアクセスされ、アクションは<code>dispatch</code>メソッドでディスパッチされます。</p><p>そして、<code>Contact</code>クラスに<code>id</code>フィールドを追加します。では、コンポーネントコンタクトメソッドをアップデートしましょう。</p><p>インクリメントしたIDの値は追加されたそれぞれの連絡先にセットされます。<code>actions</code>から適切なアクションをインポートし、<code>dispatch</code>でアクションを実行します。では、子コンポーネントを見てみましょう。</p><p>これで終わりです。アプリケーションでのReduxの基本的な使い方はすべて説明しました。最後のソースコードは<a href="https://github.com/hdjirdeh/angular2-redux-contact-list/tree/master/app" rel="nofollow" title="" class="ext-link">こちら</a>からどうぞ。</p><p><img src="http://houssein.me/public/thatsawrap.jpg" alt="that's a wrap" title="That's a wrap" class="article-image"></p><p>お気付きだとは思いますが、Reduxの状態コンテナと一緒に不変コレクションを実装することは、アプリケーションに複雑性が増すことにつながります。<strong>今回の方法はAngularアプリケーションを構築する唯一の選択肢ではないですし、最善のやり方でもありません。</strong>複数ある中の1つのやり方であり、特定の状況下では力を発揮するものになっているはずです。</p><p>初期設定で、Angularのchange detectionはアプリケーションで変更が生じたすべてのコンポーネントをチェックすることになっています。不変性を強制することで、いくつかのコンポーネント上で、<code>ChangeDetectionStrategy.OnPush</code>を使えるようになり、必要なときだけ、チェックするようになりました（つまり、入力プロパティが変更されたときです）。このシンプルで使いやすい方法を実行するにはImmutable.jsのようなライブラリを使いましょう。</p><p>これよりもいい質問はこうでしょう。「アプリケーションでFlux型アーキテクチャはいつ実行すべきか？」。これに対する答えは、<a href="https://github.com/petehunt/react-howto/issues/12#issuecomment-169546558" rel="nofollow" title="" class="ext-link">この回答</a>がすべてを語ってくれています。</p><p>Angular 2でChange Detectionがどのように機能するのかを詳しく説明している資料です。</p><p><a href="http://victorsavkin.com/post/110170125256/change-detection-in-angular-2" rel="nofollow" title="" class="ext-link">Change Detection in Angular 2</a>―Victor Savkin<br>
<a href="http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html" rel="nofollow" title="" class="ext-link">Angular 2 Change Detection Explained</a>―Thoughtram</p><p>Dan Abramov氏がegghead.ioにすばらしいレッスンを載せています。―<a href="https://egghead.io/courses/getting-started-with-redux" rel="nofollow" title="" class="ext-link">Getting Started with Redux</a></p><p>Colin Eberhardt氏が状態の永続性とタイムトラベルをRuduxと統合する方法を分かりやすく説明しています。―<a href="http://blog.scottlogic.com/2016/01/25/angular2-time-travel-with-redux.html" rel="nofollow" title="" class="ext-link">Angular 2 Time Travel with Redux</a></p>
