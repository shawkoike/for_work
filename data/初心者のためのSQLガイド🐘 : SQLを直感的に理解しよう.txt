<p><a href="http://www.sohamkamani.com/blog/2016/07/07/a-beginners-guide-to-sql/" rel="nofollow" title="" class="ext-link">A beginners guide to thinking in SQL 🐘</a> （2016-07-07） by <a href="https://twitter.com/sohamkamani" rel="nofollow" title="" class="ext-link">Soham Kamani</a></p><p>もしあなたが私のようなプログラマだったら、SQLは、初めは優しく見える言語の1<br>
つかもしれません（ただ単に普通の英語通り読めばいいですから）。ですが、何かしらの理由で、なんてことのないクエリにもいちいち正しいシンタックスをググらなければいけないでしょう。<br>
いずれJOINにAGGREGTATION、サブクエリにたどり着くでしょうが、読んだとしてもさっぱりでしょう。例えば次のような感じです。</p><p>うわっ！　これを見たらどんな初心者も震え上がるでしょうし、もしかしたら初めてSQLを見る、それなりの経験のある開発者でさえビビッてしまうかもしれません。実際はこうである必要はないのです。</p><p>直観的なものを覚えるのは、常に簡単です。このガイドを通して、SQL初心者の皆さんやSQLを使って仕事をしているけれども、新鮮な視点が欲しい皆さんが、SQLに対する壁を取っ払うことができればなと思っています。</p><p><em>この投稿で使用したすべてのクエリはPostgreSQL用ですが、データベース全体でSQL構文は似ているので、ここで紹介するクエリの中には他のSQLデータベースでも、私のSQL上と同じように動くものもあるはずです。</em></p><p>
</p>
<p>SQLではたくさんのキーワードが使われていますが、<code>SELECT</code>、<code>FROM</code>、<code>WHERE</code>はどのクエリにも登場するであろうワードです。先を読み進めれば、このキーワードがデータベースをクエリする上で最も基礎的な面を担っていることに頷けるでしょうし、他の、もっと複雑なクエリも、このキーワードの延長線上であるというのが分かるはずです。</p><p>
</p>
<p>この記事でこれ以降使うサンプルデータを見ていきましょう。</p><p><iframe src="https://docs.google.com/spreadsheets/d/1HX6DhT0vkGzWEjoSKcvUovVN6jbVz6RVYgkQYSTZAuU/pubhtml?widget=true&amp;headers=false" style="width: 100%" class="google-docs-excel-table" nuan_newframe="true"><br>
</iframe></p><p>図書館があって、蔵書と会員がいます。別のテーブルには貸し出し者用のデータがあります。</p><p>
</p>
<p>最初のクエリから始めてみましょう。著者が”Dan Brown”である本の全ての<em>タイトル</em>と<em>ID</em>が知りたいとします。</p><p>以下のようなクエリになるでしょう。</p><p>結果は以下のようになります。</p><p>簡単ですね。それでは実際に何が起きたか理解するために、クエリを細かく見ていきましょう。</p><p>
</p>
<p>現段階でははっきりしているかもしれませんが、これから結合とサブクエリに触れる際に、とても重要になってきます。<code>FROM</code>は、テーブル、つまりデータを探さなければならない場所を問い合わす役割を果たします。このテーブルは、単にすでに存在する（前の例のような）もの、あるいは結合、サブクエリを通して作成したテーブルであるはずです。</p><p>
</p>
<p><code>WHERE</code>は私たちが表示したい行を抽出するという、とてもシンプルな命令をしてくれます。今回の例の場合では、<code>author</code>列の値が”Dan Brown”である行だけ考慮すればいいわけです。</p><p>
</p>
<p>探しているテーブルからお目当ての行にたどり着いたら、次は得たデータからまさに欲しいデータを取り出すにはどうしたらいいかということです。今回の場合では、本のタイトルとIDが知りたいわけです。そこで<code>SELECT</code>を使います。<code>AS</code>を使って表示したいカラムの名前を付け替えることもできます。</p><p>最後に簡単な図として、これまでのクエリを表しておきます。</p><p><img src="http://www.sohamkamani.com/assets/images/posts/sql-beginners/diagram1.svg" alt=""></p><p>
</p>
<p>次は”Dan Brown”の（特定の本ではなく）全ての著書の中から、貸し出しがあった本のタイトルと貸出期間を表示させましょう。</p><p>結果は以下のようになります。</p><p>クエリの大部分は先ほどの例と似ていますが、<code>FROM</code>句が<em>異なります</em>。つまり、<em>クエリで参照するテーブルが変わった</em>ということです。今回は”books”テーブルや”borrowings”テーブルではなく、この2つを結合した<em>新たなテーブル</em>に対してクエリを実行します。</p><p><code>borrowings JOIN books ON borrowings.bookid=books.bookid</code>の部分は、”books”テーブルと”borrowings”テーブルそれぞれの<code>bookid</code>が一致した場合に、これら2つのテーブルに含まれるエントリを全て結合し、別のテーブルを作成するという意味です。以下は、結合したテーブルです。</p><p><iframe src="https://docs.google.com/spreadsheets/d/1pHCgnSNmS3ut192JB6gAjzeJ1XmL9vRiaPvCl7aWZkE/pubhtml?gid=867473953&amp;single=true&amp;widget=true&amp;headers=false" class="google-docs-excel-table" style="width: 100%" nuan_newframe="true"></iframe></p><p>このテーブルから、先ほどの例と同様にデータを取得します。このようにテーブルを結合する際は、必ず結合方法に配慮するようにしましょう。そうすると、あとは上述の”シンプルなクエリ”のレベルまでクエリを簡略化することができます。</p><p>では2つのテーブルをもう少し複雑な方法で結合してみましょう。</p><p>今回は”Dan Brown”の著書を借りた人全員の氏名をフルネームで表示します。</p><p>では、これをボトムアップ手法で実現してみましょう。</p><p>以下は結合したテーブルです。</p><p><iframe src="https://docs.google.com/spreadsheets/d/1pHCgnSNmS3ut192JB6gAjzeJ1XmL9vRiaPvCl7aWZkE/pubhtml?gid=1040789930&amp;single=true&amp;widget=true&amp;headers=false" style="width: 100%" class="google-docs-excel-table" nuan_newframe="true"></iframe></p><p>すばらしいですね。最後に上の3つの要素を組み合わせれば、以下のクエリの完成です。</p><p>結果は以下のようになります。</p><p>見事ですね。ただ同じ名前が重複しているので、この点は少し改善しましょう。</p><p>
</p>
<p>一言で表現すると、<em>集約とは複数行を1行にまとめるための手法です。</em>集約のパターンによって、各列に適用するロジックだけが異なります。</p><p>さて、先ほどの例ではクエリ結果の中に重複したデータがありました。Ellen Hortonは本を複数冊借りていますが、この情報を先ほどのように表示するのはベストとは言えません。では、クエリを次のように書いてみましょう。</p><p>結果は以下のようになります。</p><p>集約には、大抵<code>GROUP BY</code>句を使います。これによりテーブル、またはクエリで返されたテーブルをグループ分けできます。各グループは、<code>GROUP BY</code>句で指定した列の固有値（または値の集合）に対応しています。<br>
今回は、先ほどの例で取得した結果を行のグループに変換します。さらに<code>count</code>で集約を行い、複数行を1つの値（この例では行数）に変換します。つまり、この値は各グループから得られる値ということです。</p><p>結果の各行は、各グループの集約結果を表しています。</p><p><img src="http://www.sohamkamani.com/assets/images/posts/sql-beginners/diagram2.svg" alt=""></p><p>論理的に言えば、結果として表示するフィールドは全て<code>GROUP BY</code>句で指定するか、集約する必要があるということになります。他のフィールドは全て行指向型に変わってしまうので、<code>SELECT</code>されても、どの値を取得すべきか判別できないからです。</p><p>上の例では（行数をカウントするだけでよいので）<code>COUNT</code>関数を全ての行に適用しています。一方、その他の<code>sum</code>や<code>max</code>などの関数は、特定の列にのみ作用します。例えば著者別の全蔵書数を知りたい場合は、以下のクエリを使用します。</p><p>結果は以下のようになります。</p><p>ここでは<code>stock</code>列にのみ<code>sum</code>関数が適用され、グループごとに全ての値が合計されています。</p><p>
</p>
<p><img src="http://www.sohamkamani.com/assets/images/posts/sql-beginners/meme1.jpg" style="width:60%;"></p><p>サブクエリは通常のSQLクエリを、大きなクエリの中に組み込んだものです。</p><p>サブクエリは、返す結果によって以下の3つのタイプに分かれます。</p><p>
</p>
<p>これは複数列を返すクエリで、その良い例が先ほど集約の演習で扱ったクエリです。サブクエリを使うと単純に、さらにクエリをかけた別のテーブルが返されます。先ほどの例で”Robin Sharma”の著書の蔵書数だけを取得するには、以下のようにサブクエリを使うこともできます。</p><p>結果は以下のようになります。</p><p>
</p>
<p>単一カラムから成る複数行を返すクエリは、配列や2次元テーブルと同じように使用できます。</p><p>例として、蔵書数の合計が3冊を超える著者について、全ての本のタイトルとIDを取得してみましょう。この処理は以下の2ステップに分かれます。</p><p>結果は以下のようになります。</p><p>これは<code>['Robin Sharma', 'Dan Brown']</code>とも書けます。</p><p>2. この結果を次のクエリに利用します。</p><p>結果は以下のようになります。</p><p>これは次のように書いても同じです。</p><p>
</p>
<p>これは1行1列の結果を返すクエリです。定数として使用できるため、比較演算子のように値を使用する箇所であればどこでも使用できます。さらに要素を1つしか持たない2次元テーブルや配列と同じように使用できます。</p><p>例として、蔵書数がその平均値よりも多い本の情報を取得してみましょう。</p><p>蔵書数の平均値は以下で取得できます。</p><p>結果は以下のようになります。</p><p>これはスカラー値の<code>3</code>と同じように使用できます。</p><p>よって最終的なクエリは次のようになります。</p><p>これは次のように書いても同じです。</p><p>結果は以下のようになります。</p><p>
</p>
<p>データベースの書き込み操作は、複雑な読み取り用のクエリに比べると格段にシンプルです。</p><p>
</p>
<p><code>UPDATE</code>構文は、意味としては読み取り用のクエリに似ています。唯一の違いは、一式の行の中から列を<code>SELECT</code>する代わりに、列を<code>SET</code>するという点です。</p><p>例えば、突如”Dan Brown”の本が全てなくなったので、蔵書数を0に更新したいとしましょう。この処理は以下のように書けます。</p><p><code>WHERE</code>の部分は、ここでも行を選択するという処理になります。読み取りクエリの時は<code>SELECT</code>を使っていましたが、今回は<code>SET</code>を使います。列名に加えて、選択された列に新たに設定する値を指定します。</p><p><img src="http://www.sohamkamani.com/assets/images/posts/sql-beginners/diagram3.svg" alt=""></p><p>
</p>
<p><code>DELETE</code>は、単純に<code>SELECT</code>や<code>UPDATE</code>クエリの列名がないものです。<code>WHERE</code>句の処理は<code>SELECT</code>や<code>UPDATE</code>と同じで、選択した列を削除します。<code>DELETE</code>は行ごと削除するので、列名を指定する必要はありません。では、蔵書数を0に更新する代わりに、以下のようにDan Brownのエントリを全て削除してしまいましょう。</p><p>
</p>
<p>他のクエリと唯一異なっているのが、<code>INSERT</code>クエリです。以下はそのフォーマットです。</p><p><code>a, b, c</code>は列名で、<code>x, y, z</code>は各列に挿入する値です。値は指定した順番通りに挿入されます。<code>INSERT</code>の説明はそれくらいでしょう。</p><p>以下により具体的なサンプルを示します。これは<code>books</code>テーブルの全データを<code>INSTERT</code>するクエリです。</p><p>
</p>
<p>本ガイドも最後まできたので、ここで簡単なテストに挑戦してみましょう。この記事の冒頭で紹介したクエリを見てください。さて、このクエリはどのような処理を行っているのでしょうか？　<code>SELECT</code>、<code>FROM</code>、<code>WHERE</code>、<code>GROUP BY</code>、そしてサブクエリのコンポーネントに分解して考えてみてください。</p><p>以下に、もう少し読みやすく書き直したものを載せます。</p><p>このクエリでは、蔵書数の合計がその平均値よりも多い本を借りたメンバーのリストを取得しています。</p><p>結果は以下のようになります。</p><p>難なく正答が分かったでしょうか？　分からなかった方もフィードバックやコメントをお寄せください。いただいたご意見を参考に、本記事を改善していきます。お読みいただきありがとうございました！</p>
