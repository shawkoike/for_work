<p><a href="http://insightdataengineering.com/blog/streaming-search/" rel="nofollow" title="" class="ext-link">Building a Streaming Search Platform</a> （2016-02-17） by Ryan Walker<br>
posted on <a href="http://insightdataengineering.com/" rel="nofollow" title="" class="ext-link">Insight Data Engineering</a> blog</p><p><em><strong>7週間の<a href="http://insightdataengineering.com/" rel="nofollow" title="" class="ext-link">Insightのデータエンジニアリングのための特別研究員プログラム</a>では、直近の卒業生と経験豊富なソフトウェアエンジニアが、大きなリアルタイムのデータセットを扱うためのデータプラットフォームの構築を通じて<a href="http://insightdataengineering.com/blog/pipeline_map.html" rel="nofollow" title="" class="ext-link">最新のオープンソース技術</a>について学びます。Ryan Walker（今はCasetextのデータエンジニア）が自身のストリーミング検索プラットフォームのプロジェクトを考察します。</strong></em></p><p>平均すると、世界中のTwitterユーザにより<a href="https://blog.twitter.com/2013/new-tweets-per-second-record-and-how" rel="nofollow" title="" class="ext-link">1秒間に約6,000ツイート</a>されています。明らかに、この膨大かつ騒がしいデータストリームからリアルタイムシグナルを抽出することはとても興味深いことです。より一般的には、リアルタイムイベントをトラックするために高速度のストリーミングテキストソースを用いる際に、数多くの面白い未解決の問題があります。この投稿では、TwitterのFirehoseのようなストリーミングテキストデータソースのリアルタイム検索に近いプラットフォームのキーコンポーネントについて説明します。</p><p>このようなプラットフォームは、Twitterのモニタリングだけではなく、はるかに多くのアプリケーションを持っているのです。例えば、音声認識モニタのネットワークは、ラジオやテレビのフィードをテキストに変換し、プラットフォームにそのトランスクリプションを渡すこともできます。キーフレーズや特徴がフィードに見つかった場合に、プラットフォームがリアルタイムイベントマネジメントを引き起こすような設定をすることも可能です。このアプリケーションは、金融やマーケティング、リアルタイム情報処理に頼っているその他の分野との関係を深めていく可能性を秘めています。</p><p>ここで説明するプラットフォームのコードは全て、Githubのリポジトリ、<a href="https://github.com/rwalk333/straw" rel="nofollow" title="" class="ext-link">Straw</a>にあります。コードベースには以下が含まれています。</p><p>私は<a href="http://www.insightdataengineering.com/" rel="nofollow" title="" class="ext-link">Insightのデータエンジニアリングプログラム</a>でフェローとしてこのプロジェクトを完遂しました。このプロジェクトに対する最初のひらめきは、以下の2つのストリーミング検索に関する優れたブログの投稿から生まれました。</p><p>従来のテキスト検索の問題を解決するためのキーのデータ構造は、クエリできるようにしたいドキュメント群から構築した転置インデックスです。そのもっとも単純な形では、転置インデックスは、マップのキーがドキュメント内で全て一意に定まる語のセットとなるような、単なるマップとなります。マップで個々の語と結び付けられる値は、その語を使用する全てのドキュメントの一覧となります。</p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/inverted.jpeg" alt="Architecture" width="700"><br>
<em>注釈：転置インデックス</em></p><p>インデックスが構築された後、ユーザはインデックスに対して処理を走らせるクエリを実行することができます。例えば、”llama（ラマ） pajamas（パジャマ）”というフレーズの両方の語を含む全てのドキュメントを戻り値とするクエリがあるとしましょう。まずクエリエンジンは、入力されたフレーズを”llama”と”pajamas”という2つのトークンに分割します。次に”llama”という語を含む全てのドキュメントの一覧と”pajamas”という語を含む全てのドキュメントの一覧を得るために、転置インデックスをチェックします。エンジンは、これら2つのリストの共通部分、つまり両方のリストに存在しているドキュメントのリストを返します。</p><p>ストリーミングの場合、ドキュメントは格段に速いペースで到達しています（例えば、Twitterの場合1秒間に平均6000ツイートです）。この速さと量では、リアルタイムにドキュメントの転置インデックスを構築することは非現実的です。更に言えば、ツイートの静的インデックスを作ることが目的ではなく、どちらかと言えば、ツイートが届いたときにリアルタイムでツイートをスキャンし、登録されたクエリとマッチするかどうかを判定することが目的なのです。ここで巧妙な手段が使えます。ドキュメントから転置インデックスを構築しないで、代わりにクエリ自体からインデックスを構築するのです。</p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/streaming-text.jpeg" alt="Architecture" width="700"><br>
<em>注釈：<br>
ストリーミングテキスト検索<br>
従来のテキスト検索<br>
転置インデックスはドキュメントを保持<br>
構築は遅いがクエリは早い<br>
ストリーミング検索<br>
転置インデックスはクエリを保持<br>
ドキュメントは検索エンジンを通り抜ける</em></p><p>簡単な例を挙げましょう。ユーザが”llama”と”pajamas”という単語を含んだツイートを見たいと仮定します。このクエリを転置インデックスに追加するには次のようにします。</p><p>ツイートがストリームの形で配信されると、クエリエンジンはテキストをトークンに分割します。それからクエリエンジンはキーが.転置インデックスの中のトークンと同じリストの値の共通部分を全て返します。</p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/inverted1.jpeg" alt="Architecture" width="700"><br>
<em>注釈：<br>
クエリの転置インデックス<br>
「淑女はラマが好きだがラマはパジャマが好き」</em></p><p>ラッキーなことに、クエリの転置インデックスを構築するのに使えるツールがいくつか存在しています。</p><p>ストリーミング検索の基本的なツールが出揃ったところで、(Elasticsearch-Percolator、またはLucene-Luwak)、プラットフォームのアーキテクチャについて解説しましょう。Strawのプラットフォームは以下のコンポーネントから構成されます。</p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/arch.jpeg" alt="Architecture" width="700"><br>
<em>注釈：<br>
サブスクライバに結果をパブリッシュする</em></p><p><a href="https://dev.twitter.com/streaming/overview" rel="nofollow" title="" class="ext-link">TwitterのストリーミングAPI</a>は特別な権限がない限りFirehoseへのアクセスを許可しません。StrawがFirehoseレベルの読み込みでどのように振る舞うか見るためには、サンプルのエンドポイントを使って大量のツイートを収集します。そのツイートをファイルに保存するか、または、Kafkaクラスタのドキュメントトピックに直接送信するかします。</p><p><script src="https://gist.github.com/rwalk333/3ca1a2aac6af3a5ae635.js"></script></p><p>または、簡単なプロデューサスクリプトを使ってファイルからKafkaにツイートを読み込むこともできます。</p><p><script src="https://gist.github.com/rwalk333/1f0598b7e46b13bf9ca0.js"></script></p><p>高負荷を維持するため、このスクリプトのインスタンスを複数実行し、<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps" rel="nofollow" title="" class="ext-link">supervisor</a>などを使って、スクリプトがファイルを読み終えたらすぐに再起動します。</p><p>Strawプロジェクトは離散したJSONドキュメントを扱うために設計されましたが、内部パーサを変更すればXMLなど他のフォーマットを利用するのも非常に簡単になるかもしれません。挑戦する価値がありそうなのは、一連のストリームデータ、例えば音声トランスクリプションなどを扱うことです。この場合、いくつかの戦略が考えられます。例えば、文の改行を検出し、検出された改行をストリームの中では別のドキュメントとして扱う、などです。</p><p>Kafkaクラスタは2つのトピックを持っています。ドキュメントとクエリです。上述のプロデューサスクリプトはドキュメントトピックを追加するのに使えます。フロントエンドのクライアントはユーザサブスクリプションのクエリトピックを追加します。本番環境では、5つのノードを持つKafkaクラスタはTwitterレベルのボリュームを容易に収容できるということが分かりました。ドキュメントトピックについて、私は5個のパーティションファクタと2個のレプリケーションファクタを使いました。大量のストリームを収容するのに、高い供給性は大変重要ですが、ドキュメントを多少失っても大した問題ではなさそうです。クエリには3個のレプリケーションファクタと2個のパーティションだけを使いました。クエリは頻度が低いので供給に関してはそれほど重要ではありませんが、クエリの紛失は許容できません。パーティションファクタはStormトポロジの中のKafkaスパウトの数以下でなくてはならないことに注意してください。各スパウトがきっちり1つのパーティションを消費するからです。</p><p>他にKafkaの設定で重要なことがkafka.server.propertiesにあります。</p><p><em>注釈：削除される対象となるログファイルの古さの最低値はlog.retention.hours=1</em></p><p>Kafkaのデフォルト値は168時間で、これでは、負荷をかけたそれなりのサイズのディスクがすぐにいっぱいになってしまいます。理想的にはメッセージはリアルタイムに消費されるべきなので、最低値の1時間にすることをお勧めします。ただし、Kafkaのログのために十分大きな容量を確保しておく必要があります。本番環境では、Kafkaのノードごとに、64GBの容量と1時間の保持を設定しています。</p><p>StormのトポロジはドキュメントのためにKafkaスパウトを実装し、トピックをクエリします。本番環境では、私は5つのドキュメントスパウトと3つのクエリスパウト（Kafkaのパーティショニングと一貫性がある）を使いました。トポロジの中のボルトがドキュメントストリームを検索し、マッチしたものがあればRedisにパブリッシュします。本番環境では、全部で6ワーカを割り当てました。クラスタを適切にサイジングするのは少し大変でした。この<a href="http://www.michael-noll.com/blog/2012/10/16/understanding-the-parallelism-of-a-storm-topology/" rel="nofollow" title="" class="ext-link">投稿</a>はStormパラレリズムの主要な概念について説明しているので、読むことを強くお勧めします。また、StormにビルドインされたUIも、クラスタの振る舞いをモニタし理解するのに役立ちます。</p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/topology1.jpeg" alt="Architecture" width="700"><br>
<em>注釈：<br>
Stormトポロジ<br>
ドキュメントがシャッフルされる<br>
クエリが伝達される</em></p><p>もっとも基本的なシナリオでは、クエリの数が少なく、一台のマシン上のメモリで足りるはずです。そこからストリームのボリュームを拡張するのはとても簡単です。つまり各ボルトにLucene-Luwakインデックスのインメモリを全部コピーするのです（クエリはここにインデックスされていることを思い出してください）。ですからユーザが新たなクエリを登録するたびに、ローカルのクエリインデックスを維持するため、トポロジの全ボルトにそれを伝達しなくてはなりません。ドキュメントがストリームから到着すると、各ボルトがクエリインデックスの全コピーを持っているので、そこからランダムにどれかのボルトに割り当てることができます。フェイルオーバーを処理するには、全クエリのグローバルコピーを保持することもできるので、ボルトが使えなくなっても新しい物と交換することができ、グローバルストアからそのインデックスを追加できます。次のJavaスニペットでこのトポロジを定義できます。</p><p>このプラットフォームはマルチユーザとマルチテナントを想定しているので、クエリの数がどのボルトのインメモリにも実際には適合しないような状況も容易に想像できます。この場合、Stormトポロジにもう1つボルトのレイヤを追加すればいいのです。</p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/topology2.jpeg" alt="Architecture" width="700"></p><p>上記のように、処理が完了したクエリのインデックスは、小さなボルトのクラスタにパーティション分けされています。入ってくるクエリはファンボルトに伝達され、各ファンボルトは伝達されたクエリをインデックスするために、1つのLuceneワーカをランダムに選択します。ストリームからのドキュメントは、ファンボルト間でシャッフルされ、各ファンボルトがドキュメントを伝達します。そうすることで、各Luceneボルトは、インデックスのパーティションに対してドキュメントをチェックするようになります。<br>
Luwakの代わりにPercolatorを使用すると、各ボルトにElasticsearchクライアントが含まれるようになります。この場合、Elasticsearchクラスタをサーチボルトと連結し、高性能なレプリケーションを使用すれば、ネットワークのオーバーヘッドを最小限にすることができます。ただし、Percolatorクエリもインメモリに保存されるので、依然として、多くのクエリのサイズが大きくなるという問題には直面します。</p><p>インメモリのアプリケーションキャッシュとして、最も一般的に使用されているのがRedisです。これにもまたシンプルで見事なPub/Subフレームワークが備わっています。以下は、Redis-cliを使用したPub/Subの例です。</p><p>ターミナルAでは、リスナーがトピックをサブスクライブ。</p><p>別のターミナルBでは、パブリッシャーがトピックをパブリッシュ。</p><p>するとターミナルAでは、サブスクライバがメッセージを受信。</p><p>これだけです。全ての標準Redisクライアントは、Pub/Subフレームワークと相互作用するために、APIを露出します。</p><p>ユーザがStrawプラットフォームにクエリを登録すると、以下のようなことが起こります。</p><p>クエリIDとしてハッシュを使うことで、単体のクエリをインデックスする必要がある場合のみ、2つもしくはそれ以上のユーザが同じクエリをサブスクライブすることを可能にします。</p><p>Strawのクライアントには、以下の役割があります。</p><p>Strawプラットフォームは、シンプルなPython FlaskのWebサーバであるデフォルトのクライアントと一緒にパッケージされており、Webサーバがセッション化されているので、ユーザは特定のクエリを追跡することができます。サーバはKafkaにクエリをパブリッシュするために基本的なKafkaプロデューサを実装しており、Redisが各ユーザに対してサブスクライブされたクエリIDのリストを監視します。リスニングは、アクティブユーザの全セットに渡る、全てのユニークなクエリに対してサブスクライブされたRedisクライアントを持つ、シングルバックグラウンドスレッドによって処理されます。クエリIDとドキュメントのペアが見つかると、バックグラウンドスレッドがRedisに対して、該当するクエリIDをサブスクライブしたユーザを見つけるようにクエリを行うのです。そして、サブスクライブした各ユーザに対して、ドキュメントテキストを結果プールにコピーします。ユーザインターフェースは、ユーザのプールが更新されているかを0.5秒毎に確認するので、結果はコンソールへとストリームされるわけです。以下は、UIの動作を動画にしたものです。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/62uOmnYVzH8" frameborder="0" allowfullscreen></iframe></p><p>今回のStrawプロジェクトの目的の1つは、Easticserch-PercolatorsとLucene-Luwakのパフォーマンスを比較、測定することでした。パフォーマンスの測定は、そう簡単なものではないので、スループットを測定するために以下の非常に基本的なアプローチを使用しました。</p><p>Redisでベンチマークチャネルを監視することによって、システムのサーチスループットを追跡することができます。以下の画像は、この手順を数時間起動して得られた、毎秒の合計スループットを割り出すためのプロット密度です。</p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/benchmarks1.jpeg" alt="Architecture" width="700"><br>
<em>注釈：あるベンチマーク<br>
m4.xlargeインスタンスの5ボルトStormクラスタ上で、500以下の登録されたクエリに対する毎秒のスループット<br>
密度<br>
Twitterの平均スループット：毎秒6000ツイート以下<br>
ツイート/秒</em></p><p><img src="http://insightdataengineering.com/blog/streaming-search/img/benchmarks2.jpeg" alt="Architecture" width="700"><br>
<em>注釈：あるベンチマーク<br>
m4.xlargeインスタンスの5ボルトStormクラスタ上で、10万以下の登録されたクエリに対する毎秒のスループット<br>
密度<br>
Twitter：毎秒6000ツイート以下<br>
ツイート/秒</em></p><p>これらの仮推定値に対する解説と結論は、以下の通りです。</p><p><em><strong>データベースエンジニアへの転職をお考えの方は・・・<br>
ニューヨークやシリコンバレーで実施されている<a href="http://insightdataengineering.com/" rel="nofollow" title="" class="ext-link">Insightのデータエンジニアリングのための特別研究員プログラム）</a>をご覧ください。今すぐ申し込む方は<a href="http://www.insightdataengineering.com/apply.html" rel="nofollow" title="" class="ext-link">こちら</a>から、プログラムの最新情報を入手したい方は<a href="http://www.insightdataengineering.com/notify.html" rel="nofollow" title="" class="ext-link">こちら</a>にアクセスしてください。</strong></em></p><p><em><strong>データサイエンティストまたはデータベースエンジニアの方は・・・<br>
データプロフェッショナルに関する<a href="http://insightdatalabs.com/" rel="nofollow" title="" class="ext-link">上級者向けワークショップ</a>をご覧ください。2日間で行われる<a href="http://insightdatalabs.com/#spark-core" rel="nofollow" title="" class="ext-link">Apache Spark</a>や<a href="http://insightdatalabs.com/#data-visualization" rel="nofollow" title="" class="ext-link">Data Visualization</a>のワークショップ申し込む方は<a href="http://insightdatalabs.com/register" rel="nofollow" title="" class="ext-link">こちら</a>から、ワークショップの最新情報を入手したい方は<a href="http://insightdatalabs.com/#call-to-action" rel="nofollow" title="" class="ext-link">こちら</a>にアクセスしてください。</strong></em></p>
