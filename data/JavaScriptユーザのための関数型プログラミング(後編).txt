<p><a href="https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504#.75wz83k9n" rel="nofollow" title="" class="ext-link">Functional Programming for JavaScript People</a> （2016-03-01） by <a href="https://medium.com/@chetcorcos" rel="nofollow" title="" class="ext-link">Chet Corcos</a></p><p>この記事の前編はこちら：<a href="http://postd.cc/functional-programming-for-javascript-people-1/">JavaScriptユーザのための関数型プログラミング(前編)</a></p><p><a href="https://ja.wikipedia.org/wiki/%E9%81%85%E5%BB%B6%E8%A9%95%E4%BE%A1" rel="nofollow" title="" class="ext-link">遅延評価</a>は、<a href="https://en.wikipedia.org/wiki/Thunk" rel="nofollow" title="" class="ext-link">サンク</a>や<a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)" rel="nofollow" title="" class="ext-link">ジェネレータ</a>などのもっと具体的な概念をカバーする一般的な用語の一種です。遅延評価は、その言葉が表すとおりのことを行います。つまり、値が必要になるまで評価しません。可能な限りずるずると、先延ばしにします。例えば、洗わなければならない食器が大量に、もしかすると無限にあるとします。食器を全て流しに置いて一度に洗うのではなく、ゆっくり、一度に1つずつ取って洗うのに似ています。</p><p>遅延評価の本質を少しでも理解しやすくするために、Haskellを使って説明したいと思います。まず、<a href="https://ja.wikipedia.org/wiki/%E8%A9%95%E4%BE%A1%E6%88%A6%E7%95%A5" rel="nofollow" title="" class="ext-link">プログラムがどのように評価を行うか</a>を理解する必要があります。皆さんが慣れているほとんど全ての言語は、<em>最内簡約</em>を用いています。最内簡約とは、次のようなものです。</p><p>これはプログラムを評価する健全かつ合理的な方法です。しかし、ここで、最外簡約について考えてみましょう。</p><p>最外簡約は明らかにあまり効率的ではありません。3 + 4を2回計算しなければならないので、このプログラムは、4ステップではなく5ステップ必要です。効率が良くないですね。しかし、<strong>Haskellは、それぞれの式への参照を保持し、共有しながら、最外簡約によってその参照を親の式に渡します。</strong>従って、3 + 4が最初に評価された時、この式への参照は式7を指します。ですから、重複するステップはスキップされます。</p><p>Haskellはプログラムの内部でこのような処理を全て行います。つまり、無限リストのようなものを定義することができるということです。例えば、自分自身の先頭に1という要素を追加するonesという無限リストを再帰的に定義することができます。</p><p>リストの先頭からn個の要素を取り出す<em>take(n, list)</em>という関数があるとします。リストは無限なので、最内簡約を用いた場合、リストを永遠に再帰的に評価し続けるでしょう。しかし、最内簡約ではなく、最外簡約を用いた場合は、必要な数だけリストonesを遅延評価します！</p><p>とはいえ、JavaScriptや他のほとんどのプログラミング言語は、最内簡約を採用しています。従って、先程と全く同じ構成要素を生成する唯一の方法は、配列を関数として扱うことです。以下にその例を挙げます。</p><p>これで同じ再帰定義に基づく遅延評価の無限リストが効率良く作成できました。では、自然数の無限リストを作成しましょう。</p><p>ES2015には、実はこのための標準機能があり、<a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%83%B3%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF" rel="nofollow" title="" class="ext-link">ジェネレータ関数</a>と呼ばれています。</p><p>遅延によって飛躍的にパフォーマンスの向上を図ることができます。例えば、<a href="http://danieltao.com/lazy.js/" rel="nofollow" title="" class="ext-link">Underscore及びLodashと比較したLazy.jsの1秒当たりのオペレーション数</a>を見てください。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1350/1*gmsdj0qNqAbgxIlqO089dw.png" src="https://cdn-images-1.medium.com/max/1350/1*gmsdj0qNqAbgxIlqO089dw.png"><br>
なぜ遅延が優れているのかを示す良い例が（<a href="http://danieltao.com/lazy.js/" rel="nofollow" title="" class="ext-link">Lazy.jsのウェブサイトに</a>）あります。peopleという非常に大きな配列があって、その配列を少し変換するとします。</p><p>これを素直に行う方法は、全てのlastNameを抜き出し、配列全体をフィルタにかけ、先頭の5要素だけを取り出すことです。<a href="http://underscorejs.org/" rel="nofollow" title="" class="ext-link">Underscore.js</a>や他のほとんどのライブラリはこの方法で行います。しかし、ジェネレータを使うと、”Smith”で始まるlastNameが5件見つかるまで、一度に1件ずつ処理することによって式を遅延評価することができます。</p><p>Haskellで驚くべき点は、これが全て、最外簡約と共有を使って言語に織り込まれていることです。基本的に、リストは全て遅延です。たぶんJavaScriptではLazy.jsを使うだけで可能ですが、何かしらこうした物を自作したければ、上記の各ステップが新しいジェネレータを返すということを理解する必要があります。ジェネレータから値を取り出すためには<em>.next()</em>を呼ぶ必要があります。<em>chain</em>メソッドによって<em>people</em>配列がジェネレータに変換され、それぞれの変換はジェネレータを受け取り、更に別のジェネレータを返します。その後<em>.value()</em>が呼び出されると、値が無くなるまで<em>.next()</em>を単に繰り返し呼び出します。更に<em>.take(5)</em>で、これ以上処理する値が無いことを確認します。</p><p>前に述べた定理を思い出してください。</p><p>遅延評価は本質的に、こうした種類の最適化を行ってくれます。</p><p>ここまでずいぶんとHaskellについて話したので、こうした全てのことに関して、Clojureの場合はどうなるのかを説明したいと思います。Clojureには参照透過性があり、データ型は不変で、<em>atom</em>と呼ばれる特殊なトランザクションの型を除いて、変数をインプレースで変更することはできません。これはHaskellに比べると、非常に便利な場合があります。Haskellでは他の場所で再度呼び出す連想配列内に値を単に格納しますが、そのためにストリームに対して値をスキャンしなければなりません。またClojureには、強い型システムや、<a href="https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler" rel="nofollow" title="" class="ext-link">Glasgow Haskell Compiler</a>のように非常に強力なコンパイラがありません。更にClojureにはnullのようなものがありません。つまり、Clojureでは関数型パターンを使うように強く推奨されていて、使わずにいる方が難しいのです。</p><p>Clojureには際立った2つの特徴があるように思われます。その1つは、<strong>Clojureでは全てがプリミティブデータ型である</strong>ということです。これは<a href="https://github.com/edn-format/edn" rel="nofollow" title="" class="ext-link">EDN</a>と呼ばれ、JSONのClojure版と言えます。オブジェクトや型を持つのではなく、とにかく全てが単なるプリミティブなデータ構造で、好きなように解釈できます。例えば、JavaScriptにはネイティブなDateオブジェクトがありますが、データをJSONにシリアライズしようとするとどうなるでしょうか。自分用にカスタマイズしたシリアライザやデシリアライザを作らなければなません。しかしClojureでは、タイムスタンプやタイムゾーンを使った連想配列として日付を表せます（Javaの実装を使っていなければの話ですが）。どんな文字列フォーマット関数も、同じデータ構造を前提としているので、Clojureではデータやデータ変換、データ処理が重視されているのです。<em>あらゆるものがデータなのです。</em></p><p><strong>Clojureのもう1つの素晴らしい点は、コードがデータであるということです。</strong>Clojureは<em>リストの処理</em>を特徴とする<a href="https://ja.wikipedia.org/wiki/LISP" rel="nofollow" title="" class="ext-link">Lisp</a>です。この言語は、最初の項目が関数で残りの項目が引数であるリストを解釈するだけです。そのため、<em><a href="http://danthedev.com/2015/09/09/lisp-in-your-language" rel="nofollow" title="" class="ext-link">Lispはあらゆる言語に存在する</a></em>と言われることがよくあります。Lispは、非常に強力な<a href="https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%AF%E3%83%AD_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E7%94%A8%E8%AA%9E)" rel="nofollow" title="" class="ext-link">マクロ</a>を作成することができるという優れた特徴があります。多くの人になじみ深いマクロといえば、文字列テンプレートのようなものを使ってコードを生成する<em>テキスト置換</em>のマクロです。JavaScriptには、こうしたマクロを生成できる<a href="http://sweetjs.org/" rel="nofollow" title="" class="ext-link">Sweetjs</a>という優れたライブラリがあります。しかしClojureでは、コード自体が単なるリストなので、コンパイル時にコードをリストとして調べ、変換し、評価できます。繰り返し使用するボイラープレートを作成する際に実に便利ですし、<strong>何かを表現したい場合、基本的にどんな構文でも作成できます。</strong>JavaScriptで同じことをするには、<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/plugin-handbook.md" rel="nofollow" title="" class="ext-link">Babel PluginsとJavaScriptの抽象構文木(AST)</a>を読み込んで、自分で独自のトランスパイラを作成しなければなりません。しかしClojureでは、抽象構文木は単なるリストなのです。</p><p>Clojureの大きな特徴の1つに非同期通信を処理するための<a href="http://www.braveclojure.com/core-async/" rel="nofollow" title="" class="ext-link">core.async</a>ライブラリがあります。このライブラリを利用すると、マクロをうまく使うことができます。以下の例では、チャネルを作成していますが、go関数は実際にはマクロです。</p><p>驚くべきことに、<em>go</em>は実際に引数をリストとして解釈し、誰も書きたがらない多くの厄介な非同期コードを生成しています。また、基本的にチャネルをサブスクライブしていることを示す記号である&lt;!を探しています。それから、ジョブを行うコードをいくつか生成します。書いたり扱ったりする必要がないコードですが、この厄介なコードを全て見てみましょう。</p><p>私がここ数カ月で関数型プログラミングについて学んだことは、基本的に以上です。この記事によって、特にJavaScriptコミュニティの人々が、より良いコードを書き、必然的に更に素晴らしいものを作成できるようになれば、うれしく思います。</p><p>HaskellとClojureを比較する果てしない議論に関しては、その2つは異なるので、どちらが<em>優れている</em>か判断するのは不可能だと思います。Haskellは関数型プログラミングの原理です。Haskellを使う人々は自らを文字どおりプログラミング<em>原理主義者</em>と呼びます。Haskellは、厳格で具体的であり、堅固で、とんでもなく高速でコンパクトです。Clojureは、柔軟で抽象的であり、力を与えてくれます。Clojureは<a href="https://ja.wikipedia.org/wiki/Java%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3" rel="nofollow" title="" class="ext-link">JVM</a>上に書かれているので、何でもできます（Javaでほとんど何でもできます）。Clojureでは、テスト済みのJavaアルゴリズムで数十年にもわたる作業を構築することができます。また、Clojureの背後には創造的なプログラマ独自の文化があり、<a href="http://overtone.github.io/" rel="nofollow" title="" class="ext-link">Overtone</a>や<a href="http://quil.info/" rel="nofollow" title="" class="ext-link">Quill</a>のような実に素晴らしいライブラリがあります。</p><p>JavaScriptの世界に限って言えば、もっと純粋関数の領域に入り込んでいるものを見たいと思っています。もう二度と<em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" rel="nofollow" title="" class="ext-link">this</a></em>を見たくありません。可変の<em>var</em>や<em>let</em>より<em>const</em>型だけを使う習慣を身につけましょう。</p><p>私が本当に好きなJavaScriptライブラリは、<a href="http://ramdajs.com/0.19.1/docs/" rel="nofollow" title="" class="ext-link">Ramda</a>と<a href="https://github.com/paldepind/flyd" rel="nofollow" title="" class="ext-link">Flyd</a>の2つです。しかし、Ramdaは遅延評価ではなく、<a href="https://facebook.github.io/immutable-js/" rel="nofollow" title="" class="ext-link">Immutable.js</a>でうまく動作しません。カリー化され、遅延評価された構成可能なユーティリティ関数と永続的／共有／不変データ構造といった概念を全て兼ね備えたライブラリを見てみたいものです。</p><p>また、記述するためのより一貫性のある言語を使ったライブラリも見てみたいです。例えば、ES2015の<em>Promise</em>のAPIでは、<em>Promise</em>が完全にモナドだとしても、<em>map</em>の対になるものとして<em>.then</em>を使います。<em>R.map</em>は動作しないので、ネイティブpromise内でデータを処理するためにRamdaを使用することはできないということです。適切な名前がつけられた<a href="https://github.com/fantasyland/fantasy-land" rel="nofollow" title="" class="ext-link">Fantasyland仕様</a>は立派な理想だと思います。その仕様は全てのプログラミングデータ構造で使われる言語を統一しようとしているからです。Ramda、Lodash、Lazy.js、Immutable.jsのようなライブラリ全てと、promiseのようなネイティブデータのプリミティブがこの共通言語を使用する場合、より多くのコードの再利用方法を使用できます。RamdaやLazy.jsで使用しているデータ処理コードを全て書き換える必要なく、Immutable.jsリスト向けのネイティブJavaScript配列を交換できるでしょう。</p><p>とにかく、この記事を楽しく読んでくれるとうれしいです。理解できなかった点があるか、非常に納得がいく点があったら、お知らせください。<em>ccorcos@gmail.com</em>にご連絡いただければ、文章や嫌な部分を改善することができます。</p><p>Happy Hacking</p>
