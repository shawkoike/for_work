<p><a href="https://medium.com/learning-new-stuff/a-simple-technique-to-learn-hard-stuff-ffaa7879bf7c#.jd5m1yknd" rel="nofollow" title="" class="ext-link">The Easy Way To Learn Hard Stuff</a> （2016-01-09）<br>
by Per Harald Borgen (Link : <a href="https://medium.com/@perborgen" rel="nofollow" title="" class="ext-link">Medium</a>,<a href="https://twitter.com/perborgen" rel="nofollow" title="" class="ext-link">Twitter</a>)</p><p>ここ数年、私はWeb開発と機械学習の自習に多くの時間を割いてきました。</p><p>学習のテーマは、Javascript、Node、ReactからPython、scikit-learn、ニューラルネットワークに至るまで多岐にわたりましたが、全てに対して私は一貫したアプローチで取り組みました。</p><p>そのアプローチとは、単純な（陳腐と言ってもいい）3ステップで進める、という手法です。しかし、<a href="https://medium.com/learning-new-stuff/from-non-technical-to-hired-in-5-months-d010f601b1bc" rel="nofollow" title="" class="ext-link">Web開発のシロウトだった私が5カ月で、プロだと自覚できるほどになった</a>のはひとえに、このアプローチで臨んだ自習の成果だと思っています。</p><p>そこで私は、この自習法がほかの誰かのお役に立てるかもしれないと思い、少し記事を書いてみることにしました。</p><p>この記事は、何も分からないままやみくもに挑戦を始めた、2012年当時の自分自身に教えるつもりで書いています。</p><p>新しいテクノロジを学ぶためにまず実行する最初のステップは、理屈を学ぶよりとにかく使ってみることです。まず理論を頭に入れようというアプローチよりもはるかに優れています。</p><p>といっても、そのテーマについて何も知らない状態なのですから、自力ではどうしようもありません。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/d1UyEc6zIlw" frameborder="0" allowfullscreen></iframe></p><p><em>Justin MitchelによるDjangoのコースは、「習うより慣れろ」式のチュートリアルとして完璧です。</em></p><p>ここでやるべきことは、小さいダミーの何かを作る過程を一通り説明してくれる、チュートリアルビデオを見ることです。作者がセットアップのところから<strong>1行ずつ</strong>最後までコードを説明してくれるチュートリアルを探して、<strong>自分も同じようにコーディングしながら</strong>ビデオを見てください。その練習用プロジェクトが、そもそもちゃんと動作するものであることを確認しながら、1行ずつ追いかけます。</p><p>ビデオの長さが10分だとすると、それを最後まで追いかけながら見るには1時間かかると考えてください。</p><p>なお、立派なMOOCのコースよりも、腕のいいシロウトがYouTubeに投稿しているビデオの方が、むしろ勉強しやすいかもしれません。MOOCはこの時点で見るには完璧すぎる場合があります。</p><p>チュートリアルビデオを追いかけている途中で、自分が何をやっているのか分からなくなり、不愉快になることがあるかもしれません。でもそのことはあまり気にしないでください。理解できないことが出てきたら、とりあえずメモを取っておいて、ステップ2に入ってから見直しましょう。</p><p>このアプローチの、短所をしのぐ長所を以下に示します。</p><p>初日から実際にモノを作るので、理論を読んで学ぶだけよりも、満足感が味わえます。満足感があると、学習を続けようという意欲が高まるものです。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/900/1*EK01uygPyaJT9hz_ZooKQw.png" src="https://cdn-images-1.medium.com/max/900/1*EK01uygPyaJT9hz_ZooKQw.png"><br>
<em>私が最初に構築したNode.jsサーバです。数え切れないほど、後で何度も参照しました。</em></p><p>さらに、ここで入力しながら学ぶことで、今後の学習プロセスで見直すことのできるサンプルコードが手元に残ります。これが、後のステップですごく役に立ちます。</p><p>私は、そのテーマに対する理解が深まったと実感するたびに、最初に入力したサンプルコードに何度も立ち返り、記憶を新たにしています。</p><p>また、自分が勉強する際に、特に力を入れなければならない領域はどこなのかを見つけるには、この方法が一番手っ取り早いと私は気づきました。</p><p>学習を始める前は何が分からないかも分からない状態ですから、そのテクノロジのどの部分で自分はつまずきそうなのかを知る<strong>方法すら分かりません</strong>。だから特に注意が必要です。しかしそういう部分はなるべく早く把握したいものです。これが後で、解消しなければならない障壁となるからです。</p><p>私が様々なテーマを学び始める時に役立ったのは、以下のチュートリアルです。</p><p>ステップ1で挙げた教材を少なくとも1つやり終えれば、仕組みのイメージがざっとつかめて、そのテーマが少しだけ見えてくるようになるでしょう。しかし、きっと頭の中はごちゃごちゃしているはずです。そこで次に、その混乱を解消すべく資料に当たります。</p><p>このステップについて、実は具体的にお薦めできる形式はありません。基本的には、状況に応じて書籍、公式ドキュメント、Stack Overflowなど、どんなものでも調べる必要があります。</p><p>非常に難しいテーマである場合は、正確に理解できるよう、多くの資料に当たるべきでしょう。</p><p>あるいは、基礎が十分身に着いていないようであれば、一歩距離を置いて基本的スキルを磨くべきかもしれません。</p><p>ステップ1と2は絶対に欠かせないものですが、実はこのステップへの足掛かりにすぎません。新しいテクノロジを学びたいというのは、その技術を使って何かを作れるようになるためですから、ここでいよいよ実行に移します。</p><p>自分で新しいモノを作れるようになったと感じたらすぐ、全力で取り掛かってみましょう。</p><p>なぜかって？　実際に作ると本当の意味で学べるからです。</p><p>ステップ1や2をごまかすことはできても、このステップ3はごまかせません（コードを単にコピー＆ペーストするのではなく、自分自身で書くのが前提）。</p><p>作るのは、自分が強く関心を持っていることに関連したものがいいでしょう。例えば、HTMLとCSSを学んでいてワインが大好きという人なら、ワインのテイスティングに関するWebサイトのプロトタイプを書いてみるのです。機械学習について学ぼうとしている医師であれば、健康関連のデータセットでいろいろ試してみてはどうでしょうか。</p><p>私の初期のプロジェクトでは、以下のようなものを作りました。どれも自慢できるわけではありませんが、大変勉強になりました。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/900/1*df-jHb-jSAc0dx6Oj7nO5g.png" src="https://cdn-images-1.medium.com/max/900/1*df-jHb-jSAc0dx6Oj7nO5g.png"><br>
<em>私の最初のAjaxプロジェクトです。2014年の初めに<a href="http://www.foundersandcoders.com/" rel="nofollow" title="" class="ext-link">Founders&amp;Coders</a>で、チームで構築しました。</em></p><p>最後にお伝えしておきたいのですが、以上の3ステップは時に絡み合っていて、この記事で見てきたように順々に通るだけとは限りません。</p><p>私は必ずステップ1から始めてステップ3で終えますが、学習の途中でステップ間を行き来することもよくあります。</p><p>要するに、この3つのステップはどれも、新しいスキルを学ぶのに同じくらい大事な要素だということです。</p><p>皆さんの成功を祈っています！</p><p>追記：この記事が気に入ったら、ハート形のマークをぜひ押してくださいね（訳注：ソース記事にこの機能があります）。</p>
