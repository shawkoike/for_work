<p><a href="http://swizec.com/blog/animating-with-react-redux-and-d3/swizec/6775" rel="nofollow" title="" class="ext-link">Animating with React, Redux, and d3</a> (2016-03-24) by <a href="http://swizec.com/" rel="nofollow" title="" class="ext-link">Swizec Teller</a></p><p>これは小さな粒を生成するものです。あなたがクリックした場所から、小さな円が生まれて飛び出していくのです。マウスを持って、動かしてみましょう。粒はカーソルから生み出され続けます。</p><p>モバイル機器や、マウスではなく指で動かすタイプのコンピュータだったらどうでしょうか。同じように動きます。</p><p>私はオタクなので、これが楽しいと思います。皆さんの見解は様々かもしれません。埋め込み画像をクリックして、円が飛ぶのを見てください。クールじゃないですか？</p><p>これは全てReact、Redux、D3を使って作られています。アニメーションのトリックはありません。少しの賢さが必要なだけです。</p><p>一般的な方法を、以下で説明してみます。</p><p>私たちは、ページ、SVGエレメント、内部の粒といった<strong>全てをレンダリングするためにReact</strong>を使います。この全ては、propを使ってDOMを返す、Reactコンポーネントを使って作られています。これによって私たちは、どのノードを更新すべきか、いつ古いノードから不要なデータを回収するべきかを決定する、Reactのアルゴリズムを利用できます。</p><p>そして私たちは<strong>D3の計算とイベント検出</strong>を利用します。D3は優れたランダムジェネレータを持っているので、それを利用することができます。D3のマウスとタッチイベントハンドラがSVGと関係のある座標を計算します。私たちにはこれが必要で、Reactはこれを行えません。ReactのクリックハンドラはDOMのノードに基づいていて、<code>(x, y)</code>座標とは対応していません。D3は画面上の実際のカーソルの位置を見ているのです。</p><p>全ての<strong>粒子の座標は、Reduxのストアにあります。</strong>各粒子は動きのベクトルも持っています。ストアには役立つフラグや一般的なパラメータもあります。これによってアニメーションをデータの変換として扱えるのです。少し、ご説明しましょう。</p><p>私たちは、粒子を作る、アニメーションを始める、マウスの位置を変えるといった<strong>ユーザのイベントとコミュニケーションをとるために、アクション</strong>を使います。各requestAnimationFrameで、<strong>“1歩進んだアニメーション”アクションをディスパッチします。</strong></p><p>それぞれのアクションで、reducerはアプリ全体の<strong>新しい状態を計算します。</strong>これには、アニメーションの各段階での<strong>新しい粒子の位置</strong>も含まれます。</p><p>ストアが更新されると、Reactはpropを経由してそれを反映します。<strong>座標は状態</strong>ですから、<strong>粒子は動くのです。</strong></p><p>その結果は、スムーズなアニメーションになります。</p><p>詳細を学ぶために、読み進めてください。<a href="https://github.com/Swizec/react-particles-experiment" rel="nofollow" title="" class="ext-link">コードはGitHubにもあります</a>。</p><p>この記事は、近々出版される「<a href="http://swizec.com/reactd3js/" rel="nofollow" title="" class="ext-link">React＋d3js ES6</a>」という私の著書の1つの章になる予定です。</p><p>まずはプレゼンテーションのコンポーネントから始めます。これが一番簡単だからです。粒子の一団をレンダリングするためには、次のことが必要になります。</p><p>このうちのどれも、状態を持っていません。しかし<code>App</code>は<code>componentDidMount</code>を使うための適切なコンポーネントを持っています。これをD3イベントリスナーにくっつける必要があります。</p><p><code>Particle</code>コンポーネントは円です。それは次のようになります。</p><p>これは<code>x</code>と<code>y</code>の座標を取り、SVGの円を返します。</p><p><code>Particles</code>コンポーネントは、それほど賢くありません。次に挙げるように、グループ化のエレメントに覆われた円のリストを返します。</p><p><code>key={particle.id}</code>の部分に注目してください。これがないと、Reactは際限なくコンプレインし続けます。おそらく、似ているコンポーネントを区別するためのものだと思います。これですてきなアルゴリズムが機能するようになります。</p><p>すばらしい。<code>{id, x, y}</code>オブジェクトの配列を与えられれば、SVGの円をレンダリングすることができるのです。そこで出てくるのが、最初の楽しいコンポーネント、<code>App</code>です。</p><p><code>App</code>はシーンのレンダリングやD3イベントリスナーの結合を担当します。レンダリングの部分は、次のようになります。</p><p>
</p>
<p>まだ続きがありますが、要点としては<code>&lt;div&gt;</code>を<code>Header</code>や<code>Footer</code>、<code>&lt;svg&gt;</code>と一緒に返すということです。<code>&lt;svg&gt;</code>の内部で、私たちはたくさんの円をレンダリングするために<code>Particles</code>を使います。HeaderやFooterは、心配しなくて大丈夫です。ただのテキストです。</p><p>注意してほしいのは、レンダリング関数の核は、<em>“全てのParticlesをここに集めてください”</em>と言っているだけだということです。何が動かされるか、何が新しいか、何がもう必要ないかについては何も言っていません。それについては心配しなくていいのです。</p><p>座標のリストを入手して、単純に円を描きます。後は、Reactがしてくれます。私に言わせれば、それがここでの本当の魔法です。</p><p>そうそう、ユーザがこの領域をクリックすると、<code>startTicker()</code>が呼び出されます。粒子が現われる<em>前に</em>クロックを動かす必要はありません。</p><p>ユーザが粒子を生成するには、<code>propTypes</code>で述べた関数を使わなければなりません。それは、このような感じです。</p><p>いくつか考えなければならないイベントがあります。</p><p>そして、<code>updateMousePos</code>と<code>updateTouchPos</code>はD3の魔法を使って、SVGエレメントと関係する新しい<code>(x, y)</code>座標を計算します。粒子生成段階では、このデータを各粒子の最初の位置として使用します。</p><p>はい、複雑なのです。</p><p>注意したいのは、Reactが、マウスの位置を描画領域に対して相対的に決定する程賢くはないということです。Reactは、DOMノードがクリックされたことは認識しています。<a href="https://github.com/mbostock/d3/blob/master/src/event/mouse.js" rel="nofollow" title="" class="ext-link">D3が、魔法を使って</a>正確な座標を見つけるのです。</p><p>タッチイベントについては、最初のタッチの位置だけを考慮します。一度に複数の指で粒子を描くようなことも<em>可能ではありますが、</em>今の最初の位置の考慮だけで十分でしょう。</p><p>レンダリングとユーザイベントについては以上です。<a href="https://github.com/Swizec/react-particles-experiment/blob/master/src/components/index.jsx" rel="nofollow" title="" class="ext-link">コードは、107行</a>あります。</p><p>Reduxのアクションは、「<em>おい、何か起こったぜ</em>」の凝った言い方です。これらは、最新情報についての構造化メタデータを得るために呼び出す関数です。</p><p>6つのアクションがあり、最も複雑なものは、このような感じです。</p><p>これは、<code>(x, y)</code>座標に<code>N</code>個の粒子を生成するようシステムに命令しています。Reducerを見ると、どのような動きをするかが分かり、コンテナを見ると、そのトリガーが分かります。</p><p>アクションは、ある<code>type</code>を持っていなければなりません。Reducerは、すべきことを決定するためにそのtypeを使用します。</p><p><a href="https://github.com/Swizec/react-particles-experiment/blob/master/src/actions/index.js" rel="nofollow" title="" class="ext-link">その他のアクション</a>は、<code>tickTime</code>、<code>tickerStarted</code>、<code>startParticles</code>、<code>stopParticles</code>、<code>updateMousePos</code>です。どういう意味か分かるでしょう。<img src="http://d3nulzlctd9uky.cloudfront.net/blog/wp-includes/images/smilies/simple-smile.png?63d7a1" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" scale="0"></p><p>コンテナは、ちょうどこのプレゼンテーション部分のようなReactコンポーネントです。プレゼンテーションコンポーネントと異なり、コンテナは、Reduxデータストアにアクセスします。</p><p>この区別が厳密に必要かどうかよく分かりませんが、これによってコードの見栄えが良くなります。その区別とは、プロパティをエレメントに変換する、関数的にきれいなプレゼンテーションコンポーネントと、外部にアクセスする汚い汚いコンテナです。</p><p>これらをデータストアのモナドと考えても良いでしょう。</p><p><code>AppContainer</code>の概要は、このような感じです。</p><p>必要なものをインポートして、<code>AppContainer</code>を本来のReact<code>Component</code>として定義します。ライフサイクルメソッドを使う必要がありますが、これは処理状態を把握しないコンポーネントでは使えません。</p><p>このコードには、重要な部分が3つあります。</p><p>コンテクストは、素晴らしいです。なぜなら、暗黙的にプロパティを渡すからです。コンテクストは、何でも良いのですが、Reduxは、ストアであることを好みます。アプリケーションの処理状態の<em>全て</em>を含んでいます。UIもビジネスデータもです。</p><p>そこからモナド比較が始まるのです。私は、Haskellに手を出したために、壊れてしまったかもしれません。モナドは至る所で見られました。</p><p>理解できない人のために言っておきますが、その<code>{::this.startTicker}</code>というシンタックスは、ES2016に見られます。<code>{this.startTicker.bind(this)}</code>と同等です。これを使うには、Babelのコンフィギュレーションの<code>stage-0</code>を有効にしてください。</p><p>素晴らしい。あなたはもう基本が理解できています。では、これらのコールバックを定義して、<code>App</code>にアクションを始動させるようにしましょう。大体は、決まった指示のようなアクションラッパーです。このような感じです。</p><p>これがテンプレートです。アクション関数が<code>{type: ..}</code>オブジェクトを提供するので、ストア上にそれをディスパッチします。</p><p>そのプロセスが起こると、Reduxは、reducerを使ってステートツリーの新規インスタンスを作成します。次の章でもっと詳しく説明しましょう。</p><p>まず、<code>startTicker</code>コールバックを見る必要があります。これが魔法の始まりです。</p><p>すぐに”ゲット”できなくても心配しないでください。私も作成に数時間かかりましたから。</p><p>これがアニメーションループを動かします。ゲームループとも呼ばれます。</p><p>あらゆる<code>requestAnimationFrame</code>に<code>tickTime</code>アクションをディスパッチします。ブラウザがレンダリング可能になるたび、Reduxデータストアを更新する機会が得られます。理論的には、1秒に60回ですが、多くの要因によって異なります。調べてみましょう。</p><p><code>startTicker</code>はストアを2段階で更新します。</p><p>そうです、つまり、reduxアクションを非同期的にディスパッチするということです。問題はありません。「とりあえず動く」のは、不変データの大きな利点です。</p><p><code>maybeCreateParticles</code>関数そのものは、大して面白くありません。<code>store.mousePos</code>から<code>(x, y)</code>座標を取得し、<code>generateParticles</code>フラグをチェックし、<code>createParticles</code>アクションをディスパッチします。</p><p>ここまでがコンテナで、<a href="https://github.com/Swizec/react-particles-experiment/blob/master/src/containers/AppContainer.jsx" rel="nofollow" title="" class="ext-link">83行のコード</a>です。</p><p>いいですね。発射と描画のアクションができたら、粒子ジェネレータのロジック全体を見てみましょう。たった33行のコードと少しの変更でできてしまいます。</p><p>いや、正直に言いましょう。多くの変更が必要です。しかし、<code>CREATE_PARTICLES</code>と<code>TIME_TICK</code>の変化を作り上げる33行は最も興味深いところです。</p><p>全てのロジックはreducerに集約されます。<a href="http://redux.js.org/docs/basics/Reducers.html" rel="nofollow" title="" class="ext-link">Dan Abramov</a>は、reducerは<code>.reduce()</code>に置く関数として考えるべき、と言っています。状態と一連の変化を指示されたら、新規状態はどのようにして作ればよいでしょうか。</p><p>最も簡単に書くとすれば、次のようになるでしょう。</p><p>全ての数字は、その前の合計を取って数字を足します。</p><p>ここで使う粒子ジェネレータはそれをもう少し複雑にしたものです。現在のアプリケーションの状態を取り、アクションを組み入れ、新規のアプリケーションの状態を返します。なるべくシンプルにするため、全てを同じreducerに置き、大きな<code>switch</code>宣言を使って<code>action.type</code>を基盤に動きを決めます。</p><p>より大きなアプリケーションでは複数のreducerに分けることになりますが、基本の原則は変わりません。</p><p>基礎から始めましょう。</p><p>これがreducerです。</p><p>重力定数と2つのランダムジェネレータから始めましょう。それから初期状態を定義します。</p><p>これだけではreducerは何も変えません。常に最低1つの不変状態を返すことが重要です。</p><p>以下に示すように、多くのアクションでreducerは単一値を更新します。</p><p>ここではブーリアンフラグの値と2桁の配列を変えるだけですが、<em>新しい状態を作らなければなりません。</em>常に新規状態を作るのです。Reduxはアプリケーションの状態が不変であることに依存します。</p><p>そのため、毎回<code>Object.assign({}, …</code>を使います。新しい空のオブジェクトを作り、現在の状態を入力し、特定の値を新規の値で上書きします。</p><p>それを毎回行うのでなければ、不変データ構造用のライブラリを使ってもいいでしょう。後者はおそらくうまく機能しますが、私はまだテストしていません。</p><p>2つの重要な状態の更新 –  アニメーションのティックと粒子の作成 – は次のようになります。</p><p>大量のコードがあるように見えます。確かに、非常に長くなっています。</p><p>最初の部分 – <code>CREATE_PARTICLES</code> – は、全ての現状の粒子を新規配列にコピーし、<code>action.N</code>の新規粒子を先頭に追加します。私がテストしたところ、粒子を末尾に追加するよりもそのほうがスムーズに動きました。各粒子は<code>(action.x, action.y)</code>で動き出し、ランダムな動きのベクトルを取得します。</p><p>Reduxの観点からすると、これは悪い例です。reducerは純粋な関数であるべきところ、ランダムな動きは本来、純粋ではないからです。しかし今回のケースでは問題ありません。</p><p>他に考えられる方法としては、このロジックをアクションに落とし込むことです。これには幾つか利点がありますが、1箇所で全てのロジックを網羅するのが困難になります。それはよいとして…</p><p>2つ目の部分 – <code>TIME_TICK</code>-は粒子をコピーしません（そうすべきかもしれませんが）。参照すると配列が渡されるので、既存データを何らかの方法で変異させることになります。これも良くない方法ですが、<em>絶対悪いというわけでもありません。</em>何よりこうすると動きが速いです。<img src="http://d3nulzlctd9uky.cloudfront.net/blog/wp-includes/images/smilies/simple-smile.png?63d7a1" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" scale="0"></p><p>可視エリア外に出た粒子は全て取り除きましょう。その他については、動きのベクトルをそれらの位置に追加します。それから<code>Gravity</code>定数を使っているベクトルの<code>y</code>部分を変更します。</p><p>以上が簡単に加速を実装する方法です。</p><p>これで終わりです。reducerができました。粒子ジェネレータが機能します。アニメーションもスムーズですね。</p><p><img class="alignnone size-full wp-image-6776" src="http://d3nulzlctd9uky.cloudfront.net/blog/wp-content/uploads/2016/03/particles-step-5.gif?63d7a1" alt="Particle generator gif" scale="0"></p><p>この粒子ジェネレータをReactとReduxでビルドしたことで、3つの重要な発見がありました。</p><p><img class="" src="http://i.imgur.com/ug478Me.gif" alt="" width="832" height="678" scale="0"><br>
粒子3000個は多過ぎる。</p><p>どうでしょうか。React、Redux、それからD3を使ったアニメーションができました。新しいスーパーパワー？ そうかもしれません。</p><p>まとめです。</p><p>忘れないでください。これらのクールなワザは、今月出る私の著書の新版、<a href="http://swizec.com/reactd3js/" rel="nofollow" title="" class="ext-link">React+d3</a>でも紹介しています。<br>
<img src="http://d3nulzlctd9uky.cloudfront.net/blog/wp-includes/images/smilies/simple-smile.png?63d7a1" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" scale="0"><br>
Primoz Cigler、Sigurt Bladt Dinesen、Will Fanguy、この記事のドラフトを読んでくれて<em>ありがとう。</em></p><p>本記事の著者によるReact+d3jsの著書については<a href="http://swizec.com/reactd3js/" rel="nofollow" title="" class="ext-link">こちら</a><br>
<a href="http://swizec.com/reactd3js/" rel="nofollow" title="" class="ext-link"><img src="http://postd.cc/wp/wp-content/uploads/2016/04/cover.png" alt="cover" width="425" height="500" class="alignnone size-full wp-image-6546"></a></p>
