<p><a href="https://juliansimioni.com/blog/https-on-nginx-from-zero-to-a-plus-part-2-configuration-ciphersuites-and-performance/" rel="nofollow" title="" class="ext-link">HTTPS on Nginx: From Zero to A+ (Part 2) – Configuration, Ciphersuites, and Performance</a> （2015-02-06） by <a href="https://twitter.com/juliansimioni" rel="nofollow" title="" class="ext-link">Julian Simioni</a></p><p><em>今日のインターネットの世界では、一般的な静的Webサイトも含め、<a href="https://www.eff.org/encrypt-the-web" rel="nofollow" title="" class="ext-link">全てのWebサイト</a>に、強固で安全なHTTPSのセットアップが必要となります。この記事は、Nginxセキュリティをどのようにセットアップするのかに関するシリーズのパート2です。</em></p><p><a href="http://postd.cc/https-on-nginx-from-zero-to-a-plus-part-1/">パート1</a>は、Webサーバに有効な署名証明書をセットアップする話で終了しました。しかしこれには、最適な設定とは言い難い、デフォルトのNginxの設定を使用していました。</p><p>この記事を読み終えれば、SSL Labsのレポートで、A+の評価を獲得できる安全なHTTPSの設定ができます。それだけでなく、追加でいくつかの微調整も行い、パフォーマンスそしてUXも向上させていきます。</p><p><img src="https://juliansimioni.com/images/nginx-https/website-aplus.png" alt="A+ score on juliansimioni.com"></p><p>ここに掲載した記述やコードの抜粋の他にも、すぐに使えるNginx向けの<a href="https://github.com/orangejulius/https-on-nginx/blob/master/ssl.conf" rel="nofollow" title="" class="ext-link">SSL設定ファイル</a>、ほぼこのままで使用できる<a href="https://github.com/orangejulius/https-on-nginx/blob/master/example-site.conf" rel="nofollow" title="" class="ext-link">事例サイトの設定ファイル</a>、そして、記事を書くに当たってリサーチした結果、実際に私が使用した<a href="https://github.com/orangejulius/https-on-nginx/blob/master/resources.md" rel="nofollow" title="" class="ext-link">全てのリスト</a>をGithubに掲載しましたので、自由に使ってください。</p><p>Nginxのデフォルトの設定では、SSLv3が有効になっています<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>。このSSLv3は、<a href="https://community.qualys.com/blogs/securitylabs/2014/10/15/ssl-3-is-dead-killed-by-the-poodle-attack" rel="nofollow" title="" class="ext-link">POODLE</a>の攻撃に対する脆弱性を持っていることが、2014年10月に確認されています。IE6は、初期設定のままで新しいプロトコルをサポートしていない<a href="http://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers" rel="nofollow" title="" class="ext-link">唯一のブラウザ</a>で、TLSv1を使用するように設定されています。そのため、SSLv3をサポートする理由がありません。</p><p>SSLv3が有効である場合、SSL LabsはサーバのSSL評価がCとなるように制限をかけるようになっているので、まずはこの設定変更を行いましょう。</p><p>信頼されるべきサーバ証明書（例えば、あなたのWebサイトのもの）がどれなのかを判断するには、ブラウザは認証局から発行してもらうルート証明書を使用します。しかし、そこには大抵、中間証明書が存在するので、サーバ証明書が有効であるかどうかを確認するには、ブラウザはこの中間証明書のことを知らなければなりません。</p><p>もちろん、ブラウザが中間証明書を探し出し、ダウンロードすることは可能ですが、Webサイトに接続するプロセスが遅くなります。全てのプロセスが更に複雑化することで攻撃者にとっての抜け道を更に増やすことになってしまいます。</p><p><img src="https://juliansimioni.com/images/nginx-https/incomplete-certificate-chain.png" alt="An Incomplete Certificate chain"><br>
<em>不完全な証明書チェーン</em></p><p>ですから、ユーザが最初に接続した際に中間証明書が送信されるようにNginxを設定しておけば良いのです。実際、こうしておかなければ、SSLはBの評価しか得られません。</p><p>認証局は恐らく、中間証明書がダウンロードできるリンクを送ってくるでしょうから、それを受け取ったら、サーバの安全な場所に保存し、以下のような要領でNginxにそのことを伝えます<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>。</p><p>SSL/TLSプロトコルは、これら自身が暗号を提供するわけではありません。その代わり、サーバとクライアント間での合意を許可し、数ある暗号スキームの1つを使用するチャネルを通じて、通信が開始されるようにしています。</p><p>サーバとクライアント間でSSL/TLSを使うには、4つのことに合意しなければなりません。鍵交換アルゴリズム（サーバとクライアント間で安全に鍵暗号を共有する方法）、認証（意図する送信者／受信者だけが確実にコミュニケーションする）、暗号化アルゴリズム（メッセージが読み取れないように暗号化する）、そしてメッセージダイジェストアルゴリズム（メッセージが盗まれていたり、壊されていたりしていないか確認する）の4つです。</p><p>それぞれのアルゴリズムには、多くの異なるアルゴリズムが存在し、機能やパフォーマンス、暗号強度、ブラウザサポートは多様です。多くのアルゴリズムには、実際に使用するには不適切な弱点があります。最新バージョンのブラウザを使用すれば、個人のユーザを保護するには十分です。しかし、残念なことに、多くの旧ブラウザのデフォルト設定では、安全ではありません。</p><p>Ciphersuiteを設定する目的は、セキュリティシステムに不正にアクセスされたり、大したことはないにしてもパフォーマンスに影響を及ぼしたりすることなく、可能な限り多くのブラウザ間での互換性を維持することです。</p><p>これは、OpenSSLがNginxの設定で認識されるように、設定の文字列を入れることで可能になります。これを簡単に行うために、関連する設定を以下に挙げておきます。</p><p>ここで、この根本的理由を説明します。</p><p>多くのブラウザ、中でも古いものは、ciphersuiteの選択がお粗末です。サーバは、ブラウザとサーバの両方がサポートされているciphersuiteをリストから選択するように最初に指示を出さなくてはなりません。</p><p>不思議なことに、設定が正しくないと、SSL/TLSが暗号化されずに送信されてしまうことがあります。でも安心してください。これは簡単に無効化することができます。OpenSSLには、低セキュリティとして知られる独自の内部cipersuiteリストがあります。手始めにこれらを無効化してみましょう。</p><p>いくつかのアルゴリズムでは脆弱性、またはその疑いのあるものが確認されています。これらは、必要に応じて無効化もしくは制限をかけることができます。特に以下に挙げるアルゴリズムは無効化すべきでしょう。</p><p><a href="https://ja.wikipedia.org/wiki/MD5" rel="nofollow" title="" class="ext-link">MD5</a>のハッシュアルゴリズムは一般的に使用されていますが、1996年から脆弱性が確認されています。これは、MD5が導入されるようになってから、わずか4年後のことでした。今日では、MD5は衝突に対しては弱く、特にGPUで解読できるということで有名です。今後使用し続けることは、安全とは言えません。</p><p><a href="https://ja.wikipedia.org/wiki/RC4" rel="nofollow" title="" class="ext-link">RC4</a>での暗号化もまた、一般的に使用されています。しかも<a href="https://blog.cloudflare.com/killing-rc4/" rel="nofollow" title="" class="ext-link">最近まで</a>、使用が広く推奨されていたアルゴリズムです。しかし、他でもないあのEdward Snowdenが、「NSAはRC4の暗号を解読できる技術を持っている可能性がある」ということを示唆したため、その危険性が公になりました。</p><p>RC4に関する理論的な脆弱性を示すリサーチ結果と結び付けてみても、RC4の実環境で攻撃を受ける可能性があるということは、到底無視できません。Microsoftは、<a href="http://blogs.technet.com/b/srd/archive/2013/11/12/security-advisory-2868725-recommendation-to-disable-rc4.aspx" rel="nofollow" title="" class="ext-link">RC4を無効化することを推奨するセキュリティアドバイザリ</a>を公表し、IETFは<a href="https://tools.ietf.org/html/draft-ietf-tls-prohibiting-rc4-01" rel="nofollow" title="" class="ext-link">クライアントやサーバは決してRC4を使用しないようにとの覚書の草案</a>をまとめました。</p><p>パート1では、<a href="http://ja.wikipedia.org/wiki/SHA-1" rel="nofollow" title="" class="ext-link">SHA1</a>ではなく<a href="http://ja.wikipedia.org/wiki/SHA-2" rel="nofollow" title="" class="ext-link">SHA256</a>を使って、証明書リクエストを生成しました。パート1の時と同じ理由で、ハッシュアルゴリズムにSHA1を使っているciphersuiteも無効化しなければなりません。現時点においては、SHA1に対する攻撃が行われたという事例は報告されていませんが、恐らくそれも<a href="https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html" rel="nofollow" title="" class="ext-link">そう先のことではない</a>でしょう。</p><p>ほとんど使われていない暗号鍵は一般的ではありません。無効化することで状況がシンプルになり、攻撃<sup id="fnref:3"><a href="#fn:3" class="footnote-ref">3</a></sup>で狙われる部分が減ります。</p><p><a href="https://ja.wikipedia.org/wiki/Forward_secrecy" rel="nofollow" title="" class="ext-link">Perfect forward secrecy</a>（PFS）を使うことで、特定のセッションにカスタマイズされた暗号鍵を使えるので、安全に接続することができます。このことは安全性に対する素晴らしい利点となります。<strong>たとえサーバの秘密鍵が漏れてしまったとしても、過去にサーバに送られたメッセージがデコードされることはないのです。</strong></p><p>また、サーバが利用しているセッション鍵が攻撃者に破られてしまったとしても、攻撃者はその鍵を1回のセッションにしか利用することができません。攻撃者にとっては、サーバの通信を攻撃するコストが増える割に、その結果として得られるものが減ることになります。</p><p>最近あった好例としてはハートブリードがあります。PFSを使っていれば、攻撃者が攻撃できるのは<a href="https://twitter.com/ivanristic/status/453280081897467905" rel="nofollow" title="" class="ext-link">個々のセッション</a>だけです。サーバの秘密鍵を更新する必要はありますが、秘密鍵が漏洩したとしても、ユーザデータの大部分に対するセキュリティは守られます。</p><p>IE8は明らかに例外ですが、最近使われているブラウザはPFSを使った鍵交換アルゴリズムをサポートしています。</p><p>PFSをサポートするciphersuiteの安全性を維持するためには、設定の変更をもう1カ所行う必要があります。Nginxはデフォルトで、PFS暗号化に1024ビットのRSA鍵を生成しますが、これはオーバーライドできます。以下のように設定を変更し、2048ビットの鍵を生成するためにopensslを必ず使ってください（この処理には数分かかる可能性があります）。</p><p>アルゴリズムの脆弱性が度々発見されることはありますが、実は最近のブラウザは極めてパワフルなセキュリティツールの総合的なパッケージソフトをサポートしています。現在一般的に使われているブラウザの多くで、AESやSHA2を含めて、NISTの<a href="https://www.nsa.gov/ia/programs/suiteb_cryptography/index.shtml" rel="nofollow" title="" class="ext-link">Suite B 暗号化</a>によって定義された4つ全てのアルゴリズムがサポートされているのです。</p><p>セキュリティ専門家の多くは、現在サポートされている最長の鍵を使っても、<a href="http://www.mail-archive.com/dev-tech-crypto@lists.mozilla.org/msg11247.html" rel="nofollow" title="" class="ext-link">セキュリティに対して目に見える効果</a>はなく、ただパフォーマンスが低下するだけである<sup id="fnref:4"><a href="#fn:4" class="footnote-ref">4</a></sup>と考えています。</p><p>このことを考慮した共通の設定では、最も安全性の高いバリアントがサポートできますが、鍵の長さとしては妥当なものが求められます。例えば、上記の設定はECDHE-ECDSA-AES256-SHA384とECDHE-ECDSA-AES128-SHA256のciphersuiteを両方サポートしていますが、より短い鍵のバリアントの方が好まれるでしょう。それに両方とも攻撃されたことはなく、最高の安全性を提供しています。つまり、ユーザの大多数にとっては安全でかつ妥当なパフォーマンスを得られる方法がデフォルトとなっていますが、ユーザが望めば、最も安全性の高いciphersuiteを選択することもできるのです。</p><p>セキュリティに関する多くのコンセプトは、数学的に証明されたレベルのセキュリティが得られる暗号アルゴリズムのように、明確かつ詳細な手順を、正確に実装することにあります。<a href="http://ja.wikipedia.org/wiki/HTTP_Strict_Transport_Security" rel="nofollow" title="" class="ext-link">HSTS</a>は、そのようなものではありません。</p><p>HSTSを有効化することは、<em>今後一切</em>サーバへのプレーンテキストのリクエストをしないように、ブラウザに伝えるだけのことです。</p><p>理論上、上記については、全てのリソースに対して有効なHTTPS接続を必須とするように適切に設定されたサーバに対しては、何の利点もありません。しかし、実際には、<strong>HSTSは簡単に起こり得る膨大な数の設定エラーからサーバを守ります。</strong></p><p>実装するのも簡単です。サーバに必要なのは、それぞれのHTTPリクエストと一緒に有効なHSTSヘッダを送ることだけで、残りの処理はブラウザがやってくれます。</p><p>これを実行することでブラウザは、サーバや全てのサブドメインに対して1年間、プレーンのHTTPリクエストを送らなくなります。もしサブドメインの中にHTTPSを受けられないものがある場合、includeSubdomainsは含めなくても全く問題ありません。</p><p>HSTSを有効化することは、結局、ヘッダの有効期限が切れるまではサーバがHTTPSに対して正確に応答することをブラウザに対して保証していることであると留意しておきましょう。つまり、これは<strong>HTTPSの公開初日に有効化すべきものではないということです。</strong></p><p>問題なくHTTPSのセットアップができた時点で、HSTSプリロードに<a href="https://hstspreload.appspot.com/" rel="nofollow" title="" class="ext-link">サイトを登録</a>して、よく使われている最新バージョンのブラウザに対して、自分のサーバがHTTPSリクエストのみを受け付けることを知らせましょう。これは効果的です。<strong>あなたのサーバに対して最近のブラウザがHTTPリクエストを送信することは、決してなくなります。</strong></p><p>HSTSのセキュリティ面での利点は絶大で、SSL LabsはこれをSSLでA+の評価を得るための最終条件にしています。</p><p>最後に、パフォーマンスを向上させるために必要となる設定変更をいくつかご紹介します。私が把握している限り、これらの変更はセキュリティ上何の害も及ぼしません。実際のところ、セキュリティの向上につながるものも含まれています。</p><p>HTTPSを使ってサーバと通信を始める前に、ブラウザ側はまず、サーバが使っている証明書がまだ有効かどうかを確認しなければなりません。何らかのアップグレードや攻撃に対する対応等の結果、証明書が無効になっていることもあるからです。証明書の状況を確認しておくことは大切なことです。</p><p>サーバに何も設定していない場合、そのサーバに接続しようとする全てのブラウザは、取得した証明書が無効になっていないかをまずOCSPサーバに確認しなければならないため、その分時間がとられることになります。OCSP Staplingが設定されていれば、前もってこの確認作業をサーバ側で行っておくことができます。OCSPレスポンスはサーバ側の認証局によって署名されているので、サーバが直接ブラウザに返してきたものであっても信頼することができます。</p><p>この設定を加えることで、OCSPサーバへのトラフィックを削減することもできます(これは素晴らしいことです）。またOCSPサーバは攻撃を受けて、サービスが動かなくなったり、リクエストが拒否されたりするかもしれません。この設定変更は、そういった事象によって起こる予期しない中断からサーバを守ることにもつながります。</p><p>HTTPSに移行する際に直面する最も大きな課題は、パフォーマンスに関するものです。サーバにとって許容範囲を超える稼働とならないか、ユーザにとってページを読み込む速度がもっと遅くなるのではないか、といった懸念です。データサイズに関して言えば、安全なセッションを確立するために必要なオーバーヘッドの大きさは今や<a href="https://www.imperialviolet.org/2010/06/25/overclocking-ssl.html" rel="nofollow" title="" class="ext-link">問題ではありません</a>。</p><p>とはいえHTTPSを使って最初に接続を確立するプロセスでは、HTTPを使った通信に比べると、クライアントとサーバの間でより多くのラウンドトリップが発生することになります。つまり、今なおページの読み込み時間に対して顕著な影響を与えていることが明らかです。</p><p>このことを考慮すると、ほんの数秒の間だけでもSSLセッションのキャッシュを保存することは道理にかなっています。そうすればユーザは、たった一度だけセッションを確立すればいいことになります。Nginxではこの機能が<em>ほぼ</em>正しく設定されているので、難しい設定を加える必要はありません。セッションキャッシュのタイムリミットに関する設定だけ、次のように変更しましょう。</p><p>このガイドが皆さんにとって分かりやすく、十分に役立つものであることを願っています。でも、全てをカバーできているわけではありません。セキュリティとは複雑で、最新の情報がすぐに変わってしまう、挑戦しがいのあるものです。この事実を念頭においた上で、私がこれまでに見つけた中から特に分かりやすい参考記事をいくつかここに挙げておきましょう。より多くの情報を皆さんが得られることを期待しています。そして、これらの素晴らしい記事を書かれた作者の皆さんに感謝します。</p><p><a href="http://postd.cc/https-on-nginx-from-zero-to-a-plus-part-1/">「【翻訳】NginxでHTTPS : ゼロから始めてSSLの評価をA+にするまで（Part 1）」へのリンクはこちら</a></p>
