<p><a href="http://robertheaton.com/2014/06/20/code-review-without-your-eyes/" rel="nofollow" title="" class="ext-link">Code review without your glasses</a> by <a href="http://robertheaton.com/" rel="nofollow" title="" class="ext-link">Robert Heaton</a></p><p>Stripe社に所属するRubyエンジニアでありライターでもある。Twitterのリンクは<a href="https://twitter.com/robjheaton" rel="nofollow" title="" class="ext-link">こちら</a>。</p><p>例えば、あなたが驚くほど聡明な開発チームのメンバーで、コードレビューのみに一日の時間を確保しているとします。しかし作業を開始して2時間後、眼鏡を忘れてきてしまい、午前中はぼんやりとしたカラフルな表示を見つめていただけだったということに気づいたとします。さて、あなたはどうしますか?</p><p>家まで歩いて10分もかからないし、天気も良ければ、眼鏡を取りに帰るのが一番です。でも朝家を出るとき、攻撃的なスズメバチの群れが眼鏡の置いてある部屋に巣を作って、邪魔されたくない様子だったらどうしますか？</p><p>そういう時はもちろん、コンタクトレンズを付けてきたふりをして、恥ずかしい思いをしないようにするのがよいでしょう。実際に読むことなく膨大な量のファイルを見分けることができるということを覚えておいて下さい。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2014/07/ex1.jpg" alt="ex1" width="500" height="103" class="aligncenter size-full wp-image-637"></p><p>不安の種は隔離するべきだということに誰も異論はないでしょう。そしてもちろん、あらゆるクラスは一つのことを行うためだけに責任を持つべきです。しかし、あなたがここで作成したこの<code>UserCreator</code>オブジェクトは、たぶん少しやり過ぎです。 <code>UserCreator</code> がやらなければならないことがこれだけであれば、さしあたって <code>Users</code> が自分自身を作成することができます。さもないと、かつてシンプルだった<code>User.new</code>が、いたずらに地獄のような悪夢に変わります。あなたが何かを変更したり、fooがどういう挙動をしているのか理解したい時はいつでも、たくさんの小さなファイルの中を地球の裏側までgrepしなければならなくなるのです。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2014/07/ex2.jpg" alt="ex2" width="500" height="549" class="aligncenter size-full wp-image-638"></p><p>クラスに偽装したこのかなり大きなメソッドを見ると、技術的に言うとDRYの典型で、言葉の文字通りの意味でこれ以上分解できることはなにもないことがわかります。しかし、どうやらあなたはユニットテストをする人ではないことぐらいはわかります。そして、もしあなたが濃いコーヒーを出してくれたなら、私は中央の20行のコード ブロックがメールを送る必要のあるユーザーを決定するものだと見破ることができたのですが、「<code>def users_to_send_emails_to</code>の中をよく見た方がいいですよ」とそっとあなたに勧めておきます。私がそうしなくてすみますから。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2014/07/ex3.jpg" alt="ex3" width="500" height="575" class="aligncenter size-full wp-image-639"></p><p>オーケー。このクラスのメソッドはずっと短くなっています。たぶんこれは進歩でしょう。しかし、過ぎたるは及ばざるがごとしです。行が変わるごとにあなたがメソッドの間をぴょんぴょん跳び回るのを、Rubyインタープリターは気にしませんが、ほとんどの人間インタープリターは気にします。ファイルをちょっとスクロールさせたりしている間は私も他の人と同じように満足しています。でも、どこから跳んで来たのか忘れないように自分の腕にスタック トレースを書き込まなければならなくなると、おそらくその時にはいくつかのメソッドをくっつけてごちゃまぜにしてしまうでしょう。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2014/07/ex4.jpg" alt="ex4" width="500" height="411" class="aligncenter size-full wp-image-640"></p><p>あなたがこのクラスが正しく厳密な名前空間を使っているようにしようと心がけているのはわかります。いいでしょう。名前空間を使うのはいいです。しかし、第6レベルに到達するということは、あなたが小さなスペースにあまりにも多くのことを詰め込もうとしているからかも知れません。名前空間を細かく分割するのをやめるか (たしかにその2つのヘルパークラスは自分の名前空間を持てたと思いますが、次の1階層上のなにかとぶつかったりしているでしょうか?)、コードを分離分割してまったく別のベース名前空間に全て入れてしまうことを考えてみましょう。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2014/07/ex5.jpg" alt="ex5" width="500" height="384" class="aligncenter size-full wp-image-641"></p><p>明確化のためのコメントには賛成! 理解するのに何章にもなる作文が必要なコードには反対!</p><p><img src="http://postd.cc/wp/wp-content/uploads/2014/07/ex6.jpg" alt="ex6" width="500" height="242" class="aligncenter size-full wp-image-642"></p><p>2つ目のメソッドに目を凝らしてみてください。もしもあるメソッドが自分の仕事とそのやり方を知るために8つの引数を必要とするなら、そのメソッドはかなりの過労状態です。春のようなリファクタリングで、負荷を分散して、その肩にかかる重荷のいくぶんかでも取り去ってやりましょう。メソッドを2つ (か、それ以上) に分けるか、この引数のいくつかをイニシャライザー内のインスタンスに持って行くのが理にかなっているかも知れません。そもそもあなたは8つの引数を同時に扱えますか?それならあなたのメソッドにも同じ期待はしないでください。</p><p>さてこれが、眼鏡を忘れてしまったか、医学的に望ましくないくらい長く太陽を直接見つめてしまったか、そういう時のためのコード レビューのやり方です。もしも私がもっと優れたプログラマーなら、ずっとはるかに鋭い例を思い付くことがきっとできたでしょう。一方で、取るに足らないようなことが時に興味深くなることもあるし、ほとんどの場合、私たちが考えるよりも重要だともいえます。あなたのデザインがどんなに明確で、シンプルで、よくパターン化されていても、セメントや釘を使わなかったらそれは無駄に終わります。</p><p><a href="https://news.ycombinator.com/item?id=7998657" rel="nofollow" title="" class="ext-link">Hacker Newsでの議論</a></p>
