<p><a href="https://github.com/AnthonyCalandra/modern-cpp-features" rel="nofollow" title="" class="ext-link">AnthonyCalandra/modern-cpp-features</a> by <a href="https://github.com/AnthonyCalandra" rel="nofollow" title="" class="ext-link">Anthony Calandra</a></p><p><small>(注：2017/02/07、タグが誤っていたので修正いたしました。)</small></p><p>C++11/14/17に関する記述や例の多くは、様々なリソース（詳しくは謝辞の項目をご覧ください）を参考にしており、それらを自分の言葉でまとめてみました。</p><p>C++17には、以下の新しい言語機能が導入されています。</p><p>C++17には、以下の新しいライブラリ機能が導入されています。</p><p>C++14には、以下の新しい言語機能が導入されています。</p><p>C++14には、以下の新しいライブラリ機能が導入されています。</p><p>C++11には、以下の新しい言語機能が導入されています。</p><p>C++11には、以下の新しいライブラリ機能が導入されています。</p><p>これは、テンプレート引数の推論を自動的に行うもので、関数に対して実行される方法に似ています。今回、これにクラスのコンストラクタが導入されました。</p><p>許可された型[*]の非型テンプレートパラメータリストを順守しながら<code>auto</code>の推論規則に従うと、テンプレート引数をその引数の型から推測することができます。</p><p>
</p>
<p>フォールド式は、二項演算子に対してテンプレートパラメータパックの折りたたみを行います。</p><p>
</p>
<p>統一的な初期化構文と共に使用された場合、<code>auto</code>推論に変更します。以前は、<code>auto x{ 3 };</code>が<code>std::initializer_list&lt;int&gt;</code>を推論していましたが、今回から<code>int</code>を推論するようになります。</p><p>
</p>
<p><code>constexpr</code>を使用したコンパイル時ラムダです。</p><p>
</p>
<p>インラインの指定子は変数や関数に適用することができます。インライン宣言された関数は、インライン宣言された関数と同じセマンティクスを持ちます。</p><p>
</p>
<p>入れ子になった名前空間の定義を作成するために、名前空間のスコープ解決演算子を使用します。</p><p>
</p>
<p>非構造化の初期化に対する提案をします。これによって、<code>expr</code>がタプルライクなオブジェクトで、その要素が変数<code>x</code>、<code>y</code>、<code>z</code>（これらがコンストラクトを宣言します）にバインドされた<code>auto {x, y, z} = expr;</code>の書き込みを許可します。<em>タプルライクなオブジェクト</em>には、<code>std::tuple</code>、<code>std::pair</code>、<code>std::array</code>、アグリゲート構造が含まれます。</p><p>
</p>
<p>共通コードパターンを簡素化させ、ユーザがスコープを固定した状態に保つことを助ける、新しいバージョンの<code>if</code>と<code>switch</code>です。</p><p>
</p>
<p>コンパイル時条件次第でインスタンスが作成されるコードを書きます。</p><p>
</p>
<p>クラステンプレート<code>std::variant</code>は、タイプセーフな<code>union</code>を表しています。いつでも<code>std::variant</code>のインスタンスは、それに取って代わる型の1つの値を保持します（それを無価値にすることも可能です）。</p><p>
</p>
<p>クラステンプレート<code>std::optional</code>は、値を含んだoptionalを管理します。言い換えれば、値は存在するかもしれませんし、存在しないかもしれません。optionalの一般的な使用事例として、機能しない可能性のある関数の戻り値があります。</p><p>
</p>
<p>あらゆる型の単一値におけるタイプセーフコンテナです。</p><p>
</p>
<p>ストリングへの非所有リファレンスです。ストリング上に抽象化を提供するのに便利です（例えば、パーシングに対してなど）。</p><p>
</p>
<p>パラメータと共に<code>Callable</code>オブジェクトを呼び出します。<code>Callable</code>オブジェクトの例として、オブジェクトが通常の関数と同様に呼び出される<code>std::function</code>または<code>std::bind</code>が挙げられます。</p><p>
</p>
<p>引数のタプルと共に<code>Callable</code>オブジェクトを呼び出します。</p><p>
</p>
<p>コストのかかるコピーや移動、ヒープの割り当てまたは割り当て解除などのオーバーヘッドなしで、ノードを移動したり、コンテナを統合したりします。</p><p>1つのmapから他のmapへと要素を移動するには以下のようにします。</p><p>全てのsetを挿入するには以下のようにします。</p><p>コンテナをより長生きさせる要素を挿入するには、以下のようにします。</p><p>map要素のキーを変更するには、以下のようにします。</p><p>
</p>
<p>バイナリリテラルは2進法の数を表すための便利な方法を提供します。<code>'</code>を使って桁を区切ることができます。</p><p>
</p>
<p>C++14では、パラメータリストで<code>auto</code>型指定子を使用できるようになり、多相的ラムダが可能になりました。</p><p>
</p>
<p>これにより、任意の式で初期化されたラムダキャプチャを作成することが可能です。キャプチャされた値に与えられる名前は、エンクロージングスコープ内の変数と関連する必要はなく、ラムダ本体の内部で新しい名前が導入されます。初期化の式はラムダが（<em>呼び出された</em>時ではなく）<em>作成された</em>時に評価されます。</p><p>従来はコピーまたは参照によってしかキャプチャできなかったラムダに、値を<em>移動</em>（または<em>転送</em>）することが可能になったので、値によりラムダ内にmove-only型をキャプチャすることができます。以下の例では、<code>=</code>の左辺、<code>task2</code>のキャプチャリスト内の<code>p</code>は新しいラムダ本体のプライベート変数であり、元の<code>p</code>とは関係がないことにご注意ください。</p><p>この参照キャプチャを使用すると、参照された変数と異なる名前を付けることができます。</p><p>
</p>
<p>C++14で戻り値の型<code>auto</code>を使うと、コンパイラはその型を推論しようとします。ラムダでは、<code>auto</code>を使って戻り値の型を推論することができ、推論された参照、あるいは右辺値参照を返すことが可能となります。</p><p>
</p>
<p><code>decltype(auto)</code>型指定子は<code>auto</code>が行うような型も推論します。しかし、その一方でその参照や”定数性”を維持したまま、戻り値の型を推論します。これに対し<code>auto</code>ではこの推論はできません。</p><p>
</p>
<p>C++11では、<code>constexpr</code>関数本体には、<code>typedef</code>、<code>using</code>、単一の<code>return</code>文のような（でも、それだけに限定されない）非常に限られた構文のセットしか含めることができませんでした。C++14では、許容される構文のセットは拡張され、<code>if</code>文、複数の<code>return</code>、loopのような最も一般的な構文を含むことができるようになりました。</p><p>標準ライブラリ型のユーザ定義リテラルは、chronoと<code>basic_string</code>の新しいビルトインのリテラルを含む標準ライブラリ型の新しいユーザ定義リテラルです。これらは<code>constexpr</code>であり、つまりコンパイル時に使用されることになります。このようなリテラルの使い方には、コンパイル時の整数パース、バイナリリテラル、および虚数リテラルが含まれます。</p><p>クラステンプレート<code>std::integer_sequence</code>はコンパイル時整数シーケンスを表します。ここには幾つかのヘルパが構築されています。</p><p>以下のように、配列をタプルに変換します。</p><p>
</p>
<p>移動セマンティクスは、主にパフォーマンスの最適化に関することであり、コピーのコストのかかるオーバーヘッドなしに移動することをいいます。コピーと移動の違いは、コピーではソースは変更されないのに対し、移動ではソースが変更されない、あるいは完全に異なったものになります。これは、ソースが何であるかに左右されます。POD型では移動とコピーは同じことになります。</p><p>オブジェクトを移動するということは、そのオブジェクトが管理する幾つかのリソースの所有権を他のオブジェクトに移動することを意味します。移動先のソースオブジェクトによって、ソースオブジェクトが保持しているポインタを移動させる、もしくは新たに保持するように変更することと考えることができます。つまり、リソースはメモリ内のその場所に留まるということです。このようなコストのかからないリソースの移動は、<code>rvalue</code>のソースが移動後に変わってしまうといった副作用が起こる可能性がある場合にとても便利です。というのも、そのソースは一時的なオブジェクトで、後でアクセスすることができないからです。</p><p>移動により、オブジェクトをあるスコープから別のスコープに移動することも可能になります。例えば、<code>std::unique_ptrs</code>といった、一意のオブジェクトへのポインタを保持するような設計のスマートポインタなどです。</p><p>以下の右辺値参照、特殊メンバ関数の移動の定義、<code>std::move</code>、<code>std::forward</code>の各項をご覧ください。</p><p>
</p>
<p>C++11では、<em>右辺値参照</em>と呼ばれる新しい参照が導入されており、<code>A</code>に対する右辺値参照は<code>A&amp;&amp;</code>という構文で作成されます。これによって有効になる主要な機能は2つです。1つは移動セマンティクス、そしてもう1つは、引数に関する情報を一般的な方法で左辺値/右辺値として維持しながら渡すことができる<em>Perfect Forward</em>です。</p><p>左辺値および右辺値による<code>auto</code>型推論：</p><p>関連項目：<code>std::move</code>、<code>std::forward</code></p><p>
</p>
<p><code>...</code>構文は、<em>パラメータパック</em>を作成または展開します。テンプレート<em>パラメータパック</em>とは、0個以上のテンプレート引数を受け入れるテンプレートパラメータです（非型、型、またはテンプレート）。少なくとも1つのパラメータパックを含むテンプレートのことを<em>可変値引数テンプレート</em>と呼びます。</p><p>
</p>
<p>“波カッコのリスト”構文で作成される配列に類似した軽量の要素のコンテナです。例えば、<code>{ 1, 2, 3 }</code>は、<code>std::initializer_list&lt;int&gt;</code>型を持つ整数のシーケンスを作成します。オブジェクトのvectorを関数に渡す代わりとして便利です。</p><p>
</p>
<p>アサーションが、コンパイル時に評価されます。</p><p>
</p>
<p><code>auto</code>型の変数が、その初期化子の型に従ってコンパイラにより推論されます。</p><p>特に複雑な型の場合、可読性が向上し非常に便利です。</p><p>関数が<code>auto</code>を利用することで、戻り値の型を推論することもできます。C++11では、戻り値の型は明示的に指定するか、あるいは以下のように<code>decltype</code>を使わなければなりません。</p><p>上の例にある後続の戻り値の型は、<code>x + y</code>式の<em>宣言型</em>（<code>decltype</code>の項を参照）です。例えば、<code>x</code>が整数で<code>y</code>がdoubleの場合、<code>decltype(x + y)</code>はdoubleとなります。従って上記の関数は、<code>x + y</code>式がどのような型を取るかによって型を推論します。なお、後続の戻り値の型はそのパラメータ、および該当する場合は<code>this</code>を取得します。</p><p>
</p>
<p><code>lambda</code>は、スコープ内の変数を取り込める無名関数オブジェクトで、その機能として<em>キャプチャリスト</em>、オプションの後続の戻り値の型を持つオプションのパラメータセット、そしてボディなどが挙げられます。キャプチャリストの例は以下の通りです。</p><p>デフォルトでは、コンパイラ生成メソッドが<code>const</code>としてマークされているため、値のキャプチャはラムダ内では変更できません。ただし、<code>mutable</code>キーワードを使用すると、キャプチャされた変数の変更が可能です。キーワードはパラメータリスト（空であっても記述は必要）の後に置きます。</p><p>
</p>
<p><code>decltype</code>は、渡された式の宣言型を返す演算子です。<code>decltype</code>の例は以下の通りです。</p><p>
</p>
<p><code>typedef</code>を使うのに意味的には似ていますが、<code>using</code>によるテンプレートエイリアスは可読性が高く、テンプレートと互換性があります。</p><p>
</p>
<p>C++11では、Cの<code>NULL</code>マクロを置き換えるために設計された新しいNULLポインタ型が導入されています。<code>nullptr</code>自体は<code>std::nullptr_t</code>型で、暗黙的にポインタ型に変換できますが、<code>NULL</code>とは違い<code>bool</code>以外の整数型には変換できません。</p><p>
</p>
<p>タイプセーフな列挙型が解決するCスタイル列挙型の様々な問題の中には、暗黙的な変換、基盤となる型を指定できないこと、スコープの汚染が含まれます。</p><p>
</p>
<p>属性は、<code>__attribute__(...)</code>や<code>__declspec</code>などの汎用構文を提供します。</p><p>
</p>
<p>定数式は、コンパイル時にコンパイラによって評価される式です。定数式では、複雑ではない計算だけが実行できます。<code>constexpr</code>指定子により、変数や関数などが定数式であることを示します。</p><p><code>constexpr</code>値は、コンパイラがコンパイル時に評価できます。</p><p>クラスを持つ定数式は以下の通りです。</p><p>
</p>
<p>コンストラクタは、初期化子リストを利用して同じクラス内の別のコンストラクタを呼び出せるようになりました。</p><p>
</p>
<p>ユーザ定義リテラルにより、言語を拡張し、独自の構文を追加できます。リテラルを作成するには、<code>X</code>の名前で型<code>T</code>を返す<code>T operator "" X(...) { ... }</code>関数を定義します。ちなみに、この関数の名前がリテラルの名前を定義することに留意しておいてください。アンダースコアで始まらないリテラル名は保留され、呼び出されません。ユーザ定義のリテラル関数が受け入れるべきパラメータには、リテラルがどの型で呼び出されているかによるルールがあります。</p><p>摂氏から華氏への変換：</p><p>文字列から整数への変換：</p><p>
</p>
<p>仮想関数が別の仮想関数をオーバーライドするという明示をします。仮想関数が親の仮想関数をオーバーライドしない場合、コンパイラエラーがスローされます。</p><p>
</p>
<p>コンストラクタなどのような関数の既定化を提供する、より効率的で洗練された方法です。</p><p>
</p>
<p>関数の削除指定を提供する、より効率的で洗練された方法です。オブジェクトへのコピーを回避するのに有効です。</p><p>
</p>
<p>コンテナの要素を反復する糖衣構文です。</p><p><code>int</code>を使う際には<code>int＆</code>との違いに注意してください。</p><p>
</p>
<p>コピーが作成されるとコピーコンストラクタおよびコピー代入演算子が呼び出されますが、C++11では移動セマンティクスの導入により、移動用に移動コンストラクタと移動代入演算子があります。</p><p>
</p>
<p><code>std::move</code>は、渡されたオブジェクトが移動されること、言い換えるなら、コピーすることなく、あるオブジェクトから別のオブジェクトに移動されることを示します。渡されたオブジェクトは移動後、特定の状況下では使用してはなりません。</p><p><code>std::move</code>の定義（移動の実行は、右辺値にキャストするといった程度の意味です）：</p><p><code>std::unique_ptr</code>を移動：</p><p>
</p>
<p>渡された引数を、左辺値あるいは右辺値のいずれかとしてそのまま返し、cv修飾を含みます。該当する場合、例えばファクトリのように、参照（左辺値または右辺値のいずれか）が必要な汎用コードに便利です。転送は<em>テンプレート引数の推論</em>によって可能になります。</p><p><code>std::forward</code>の定義：</p><p>単に、他の<code>A</code>オブジェクトを新しい<code>A</code>オブジェクトのコピーまたは移動コンストラクタに転送する<code>wrapper</code>関数の例：</p><p>
</p>
<p>数値の引数を<code>std::string</code>に変換します。</p><p>
</p>
<p>型特性は、型のプロパティを照会または変更するための、コンパイル時におけるテンプレートベースのインターフェースを定義します。</p><p>
</p>
<p>C++11では、<code>std::unique_ptr</code>、<code>std::shared_ptr</code>、<code>std::weak_ptr</code>という新しい（改善された）スマートポインタが導入されました。<code>std::auto_ptr</code>は現在では非推奨になっており、最終的にC++17で廃止されています。<code>std::unique_ptr</code>はコピー不可の移動可能なスマートポインタで、配列とSTLコンテナを適切に管理します。</p><p>
</p>
<p>chronoライブラリには、<em>持続時間</em>、<em>時計</em>、<em>タイムポイント</em>を扱うユーティリティ関数と型のセットが含まれています。このライブラリの使用例の１つにベンチマークコードがあります。</p><p>
</p>
<p>タプルは、異なる値の固定サイズコレクションです。<code>std::tie</code>または<code>std::get</code>を使ってアンパックし、<code>td::tuple</code>の要素にアクセスします。</p><p>
</p>
<p>左辺値参照のタプルを作成します。<code>std::pair</code>および<code>std::tuple</code>オブジェクトをアンパックするのに便利です。無視される値に関しては、プレースホルダとして<code>std::ignore</code>を使用します。C++17では、代わりに構造化束縛を使う必要があります。</p><p>
</p>
<p><code>std::array</code>は、Cスタイル配列の上に構築されるコンテナです。並べ替えなどの一般的なコンテナ操作をサポートします。</p><p>これらのコンテナは検索、挿入、削除操作に関して、平均した一定の時間計算量を維持します。バケツに要素をハッシングすることで速度を犠牲にし、一定の時間計算量を実現しています。unorderedコンテナは以下の4種類です。</p><p>C++11ではC++のメモリモデルが導入されており、スレッド化とアトミック操作ライブラリをサポートしています。これらの操作の一部（全てではありません）には、アトミックロード/ストア、コンペア・アンド・スワップ、アトミックフラグ、FutureやPromise、ロック、条件変数などが含まれます</p><p>Anthony Calandra</p><p>新規コンテンツを追加したユーザが、ここに順不同でリストされています。</p><p>MIT</p>
