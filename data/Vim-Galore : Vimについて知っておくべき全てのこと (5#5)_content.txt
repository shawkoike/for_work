Everything you need to know about Vim by Marco Hinz特定のトピックについての記述をご希望ですか？ Issueを立てるか、Twitterで私までお知らせください！ありがとう！Vimのディストリビューションはある作成者の目線によるVim＋カスタムセッティング＋カスタムプラグインです。そのため、非常に独りよがりなものです。このディストリビューションの問題は、初心者によって使われる傾向があることです。（より上級のユーザは、結局、自分自身のプラグインとセッティングの選び方を心得ています）。問題が表面化するまでは全て順調です。さて、問題はどこで起こったのでしょう？　初心者はどうしていいかわからず、インターネットでアドバイスを得ようとします。長い堂々巡りのあと、ディストリビューションにより提供された妙なマッピングが問題だと見当が付きます。でも初心者は、Vimのマッピングはデフォルトのままなのにと思います。時間の無駄でした。うんざりです。ディストリビューションそれ自体に問題があるわけではありません。お願いです、何をしているのかを正確に理解できないなら、緊急時に誰かに助けてもらおうとしないでください。エディタのカスタマイズに何時間もかけたくはないと考える人が多いことは分かっています（実際、いよいよ夢中になって、vimrcのカスタマイズをやめられません）。しかし長期的には、最初の段階でマニュアル作業の方法を学ぶのは素晴らしいことで、時間効率も良くなります。私に続いて繰り返してください。「プログラマーはツールを理解すべし」とにかく、何をしているのかが分かっていれば、ディストリビューションを見て、そこから何らかのインスピレーションが得られるかもしれません。*　cream
*　janus
*　spf13多くの人が驚くでしょうが、Vimはデフォルトでは、自動的にロードされるようなプラグインをほんのわずかしか搭載していません。すべてのソースファイルを確認するために、Vimを起動した後、:scriptnamesをチェックしてください。ほとんどが使われていないので、適当に判断し無効にしてください。ソースとして表示はされますが、実際には最初の行だけを読み込んで、Vimはプラグインから抜けていきます。それ以上のコード（マッピング、コマンド、ロジック）は処理されません。

CapsLockはキーボードで一番役に立たないキーのうちの1つですが、ホームポジションと同じ行にあるため、Controlよりも押しやすいのです。大量にプログラミングを行うような場合、CapsLockにControlをマッピングすることは、RSIを防いだり、少なくとも軽減させたりするのに有効な手段となります。留意点：　そのキー配置に慣れてしまうと、それ以外ではもう生きていけないかもしれません。OSXの場合:System Preferences -&gt; Keyboard -&gt; Keyboard Tab -&gt; Modifier Keys“CapsLock” を “Control” に変更します。Linuxの場合:Xのキーを変更するには、以下を~/.xmodmapに追加します。ソースを追加した後、$ xmodmap ~/.xmodmapを実行して有効にします。
他にもxcapeを使うことがあります。Windowsの場合superuser.comの「Windows 8.1でCaps LockをCtrlに変換する方法」を確認してください。



Bill JoyがVimの前進であるviを作った時、カーソルキーのないADM3A上で開発しました。皆さんお分かりですよね？　代わりにhjklを使ったのです。実際のキーボードレイアウトを見るにはクリックして下さい。Unixシステムでホームディレクトリを表すのに~を使うのも同様の理由です。



パフォーマンスに大きな影響を与える要素は2つあります。

注：本当にパフォーマンスの問題がある時だけ対策をすれば大丈夫です。大抵の場合、上記の対応で事足りるはずです。

大きいファイルの最大の問題点は、Vimがファイル全体を一度に読み込んでしまうという点です。なぜそんなことが行われるのかというと、その理由は内部でバッファを表わす方法に関係しています（Discussion on vim_dev@）。読み取りだけを行いたい場合、tail hugefile | vim -は優れた回避策です。差し当たり、構文や設定、プラグインなどがなくても大丈夫なら、下のコードを使ってください。これでナビゲーションが格段に速くなります。なぜなら構文をハイライトする負荷の高い正規表現が使われなくなるからです。また、書き込みに時間がかかりすぎないように以下のコードを使って、Vimがswapファイルやviminfoファイルを使わないようにするといいでしょう。簡単に言えば、とても大きなファイルを書く場合はVimを避けたほうが賢明です。

ファイル内のNUL文字（\0）は、メモリ内に改行文字（\n）としてメモリ内に保存され、バッファ内で^@と表示されます。さらに詳しい情報はman 7 asciiや:h NL-used-for-Nulを確認してください。

括弧付きペーストモードを使うと、ターミナルエミュレータがタイプされたテキストとペーストされたテキストを区別できるようになります。Vimにコードをペーストしようとして、全てがめちゃくちゃになってしまった経験はありませんか。これは、cmd+vやshift-insert、middle-clickなどのショートカット機能を使ってペーストした場合にのみ起こります。原因はテキストの塊がターミナルエミュレータに一瞬で書き込まれてしまうことにあります。Vimはテキストがペーストされているだけだということが分からず、ものすごい速さでタイピングされていると思ってしまうのです。そのため、ラインにインデントを付けようとしますが失敗してしまいます。もちろん、"+pなどのVimレジスタを使えばVimはペースとされていると分かるので、全く問題ありません。この問題を回避するために、set pasteを使うと、そのままペーストできます。:h 'paste'や:h 'pastetoggle'を試してみてください。毎回、pasteに切り替えるのが面倒であれば、皆さんの代わりに切り替えてくれる、bracketed-pasteという便利なプラグインがあります。更に興味がありましたら、このプラグインの作者が書いた記事をこちらからご覧ください。Neovim：ターミナルエミュレータにサポートされている場合、Neovimはこれら全てをよりシームレスにし、括弧付きペーストモードが自動で設定されるようにします。

コマンドラインに慣れている方の場合、xtermやgnome-terminanal、iTerm2などのいわゆるターミナルエミュレータを使うことがあると思います（本来のターミナルとは別の物です）。ターミナルエミュレータの祖先と同様に、これらはカーソルの移動や文字色を変更するなどの操作をコントロールするために、エスケープシーケンス（または制御シーケンス）を使います。これらは、エスケープ文字で始まる単純なASCII文字コードの文字列で（画面では、^[といったキャレット文字で表示されます）、このような文字列が現れると、ターミナルエミュレータは、terminfoデータベースから付随して生じる動作を探し出します。問題を明確にするために、まずマッピングのタイムアウトについて説明しましょう。これは、マッピング間で曖昧な表現が出てきた場合に常に起こります。どちらのマッピングも期待通りの反応を示しますが、,aと入力すると、1秒の遅延があります。これは、ユーザが次にbと入力するかどうかをVimが判断しているためです。エスケープシーケンスでも同様の問題が起きます。実際に試してみてください。vim -u NONE –N、i&lt;c-v&gt;&lt;left&gt;と入力すると、エスケープ文字を意味する^[で始まるシーケンスが挿入されるのが分かると思います。ひと言でいうと、Vimは、&lt;esc&gt;文字と適切なエスケープシーケンスが入力された場合の違いを認識するのが困難なのです。Vimでは、デフォルトで:set timeout timeoutlen=1000を使用するので、曖昧なマッピングかつキーコードが入力された場合、1秒の遅延が起こります。1秒という時間は、マッピングする上では良識的な値ではありますが、キーコードのタイムアウトを任意で設定することができます。これがこの問題に対する、最も一般的な回避策でしょう。:h ttimeoutの下に小さな表がありますが、これはこれらのオプション間の関係性を示しています。Vimとターミナルエミュレータ間でtmuxを使用するのであれば、これを~/.tmux.confに入れてください。以下は、一般的に使用されているカラースキームのリストです。
