<p><a href="http://www.marekrei.com/blog/26-things-i-learned-in-the-deep-learning-summer-school/" rel="nofollow" title="" class="ext-link">26 THINGS I LEARNED IN THE DEEP LEARNING SUMMER SCHOOL</a> (2015-08-19) by <a href="http://www.marekrei.com/" rel="nofollow" title="" class="ext-link">MAREK REI</a></p><p><small>(訳注：2015/11/4、いただいた翻訳フィードバックを元に記事を修正いたしました。)</small></p><p>8月の初めに、モントリオールでディープラーニングのサマースクールに参加することができました。サマースクールは10日間にわたるもので、著名なニューラルネットワークの研究者の講演で構成されていました。この10日間で、私は1件のブログ投稿にはまとめきれないほど多くの事を学びました。ここで私は、60時間で得られたニューラルネットワークの知識をそのままお伝えしようと試みるのではなく、1パラグラフに要約できるようなちょっとした面白い情報のリストを作ることにしました。</p><p>これを書いている現在、<a href="https://sites.google.com/site/deeplearningsummerschool/schedule" rel="nofollow" title="" class="ext-link">サマースクールのウェブサイト</a>は現存しており、全てのプレゼンテーションのスライドが載せられています。全ての情報とイラストはこれらのスライドから利用しており、権利はそれぞれのオリジナルの著者に帰属するものです。またサマースクール内の講演は録画もされており、その動画も同様に閲覧可能になるでしょう。</p><p><strong>追記</strong>: <a href="http://videolectures.net/deeplearning2015_montreal/" rel="nofollow" title="" class="ext-link">ディープラーニングのサマースクールのビデオが公開されました</a>。</p><p>それでは始めましょう。</p><p>Yoshua Bengio氏は彼の最初の講演で「これが私の最も重要なスライドです」と述べました。そのスライドがこちらです。<br>
<a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss-3aug2015.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss-3aug2015.png" alt="dlss-3aug2015"></a></p><p>ある人が男性か女性か、眼鏡をしているかしていないか、長身かそうでないかを分類する分類器があると仮定しましょう。非分散表現では2*2*2=8個の異なる人のクラスを扱うことになります。正確な分類器になるよう学習するには、8クラスそれぞれについて十分な数の訓練データが必要になります。しかし、分散表現の場合、それぞれの性質を異なる次元でとらえることができるのです。これはつまり、「分類器が今までに『背が高く、眼鏡をした男性』のサンプルを見たことがなくても、他の全てのサンプルから性別・眼鏡の有無・背の高さをそれぞれ個別に学習したことによりこれを識別できる」ということです。</p><p>Yoshua Bengio氏のチームは、「高次元のニューラルネットのパラメータを最適化するとき、局所解は事実上存在しない」ということを実験的に突き止めました。代わりに、全次元のうち数次元のみにおいて極値を取る鞍点が存在します。つまり、パラメータのトレーニングはこういった鞍点において急に遅くなり、その点からどう脱出するかをニューラルネットワークが突き止めるまでその状態は続きます。突き止めるまで訓練を待つと訓練が長くなるので、それまで訓練させるように設計者が望んで待つ場合にしか脱出は起こりません。</p><p>以下のグラフは、「鞍点への接近」「鞍点からの脱出」の2つの状態を行き来するニューラルネットワークのトレーニング過程を表すグラフになります。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss-3aug20152.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss-3aug20152.png" alt="dlss-3aug20152"></a></p><p>ある特定の1つの次元について、「ある点が大域解ではない局所解である」確率が<script type="math/tex">p</script><br>
という小さな確率だとします。すると、1000次元空間上のある点が<strong>全ての</strong>次元において誤った局所解である確率は<script type="math/tex">p^{1000}</script>となり、これは天文学的に低い確率になります。しかし、<strong>ごく数次元</strong>においての局所解を取る確率は極めて高いのです。そういった局所解に陥った場合に、脱出すべき正しい方向を見つけるまでの間そこに捕らわれているように見えてしまいます。</p><p>加えてこの確率<script type="math/tex">p</script>は損失関数が大域解に近づけば近づくほど高くなります。たとえ本当に局所解である箇所で探索を止めてしまっても、どのみち大域的な最適解の近くであることにはなるため、問題はないということになるのです。</p><p>Leon Bottou氏は、活性化関数と損失関数、およびそれぞれに対する導関数に関する有用な表をプレゼンしてくれました。後々のためにここで示しておきます。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/bottou1.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/bottou1.png" alt="bottou1"></a></p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/bottou2.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/bottou2.png" alt="bottou2"></a></p><p><strong>Update</strong>: コメントで指摘があったように、Ramp式における最小/最大関数は変更する必要があります。</p><p>ニューラルネットワークの重み付けの初期値を定める際について、現在推奨されている手法は、<script type="math/tex">[-b,b]</script>から一様にサンプリングされた値を<script type="math/tex">W_{i,j}^{(k)}</script>とするものです。ここでは</p><p><script type="math/tex">b = \sqrt{\frac{6}{H_k + H_{k+1}}}</script></p><p>とします。</p><p><script type="math/tex">H_k</script>と<script type="math/tex">H_{k+1}</script>は重み行列の前後の隠れ層の個数に相当します。</p><p>Hugo Larochelle氏の講演で紹介されたもので、論文としての初出はGlorot &amp; Bengio (2010)からのものです.</p><p>Hugo Larochelle氏は、実践的な提案をいくつか紹介していました。</p><p>自分で実装したバックプロパゲーションが上手く機能しない場合、99%の確率で勾配の計算にバグがあります。問題の特定のために、勾配のチェックをしましょう。</p><p>勾配の定義を使うための考え方は次のように言えます。「ある重み付けを少量増やした場合、モデルの誤差がどのぐらい変化するか」</p><p><script type="math/tex">\frac{\partial f(x)}{\partial x} \approx \frac{f(x+\epsilon) – f(x-\epsilon)}{2\epsilon}</script></p><p>より詳細な説明はここから見ることができます。: <a href="http://ufldl.stanford.edu/wiki/index.php/Gradient_checking_and_advanced_optimization" rel="nofollow" title="" class="ext-link">Gradient checking and advanced optimization</a></p><p>人間の動きはは驚くほど正確にトラッキングできます.以下はGraham Taylor氏らによる2010年の論文、<a href="http://www.uoguelph.ca/~gwtaylor/publications/cvpr2010/gwtaylor_cvpr2010.pdf" rel="nofollow" title="" class="ext-link">Dynamical Binary Latent Variable Models for 3D Human Pose Tracking</a>からの例です。この手法では条件的制限付きボルツマンマシンを利用しています。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/gwtaylor_cvpr2010.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/gwtaylor_cvpr2010.png" alt="gwtaylor_cvpr2010"></a></p><p>Chris Manning氏とRichard Socher氏は、伝統的な構文解析手法にニューラルな手法を組み合わせた合成モデルの開発について多大な努力をしてきました。構文木に沿って単語の意味を結合していく際に、加算的/乗算的な相互作用を用いる<a href="http://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf" rel="nofollow" title="" class="ext-link">Recursive Neural Tensor Network</a> (Socher et al., 2013)という論文はその最たるものと言えます。</p><p>その後、そのモデルに対して(大きく差をつけて)成果を挙げたのが<a href="http://arxiv.org/abs/1405.4053" rel="nofollow" title="" class="ext-link">Paragraph Vector</a> (Le &amp; Mikolov, 2014)という論文ですが、この論文は、文の構造やシンタックスについての知識を全く与えずに行うものでした。Chris Manning氏はこれについて、「『良い』合成ベクトルを作ることに負けた」と言及していました。</p><p>しかし、最近では構文木を使ったさらなる研究がこれを上回る結果を打ち出しました。<a href="http://www.cs.cornell.edu/~oirsoy/files/nips14drsv.pdf" rel="nofollow" title="" class="ext-link">IrsoyとCardieの論文(NIPS, 2014)</a>では前述のParagraph Vectorに打ち勝つために、複数次元においてネットワークをより”深化”させました。最終的に、<a href="https://aclweb.org/anthology/P/P15/P15-1150.pdf" rel="nofollow" title="" class="ext-link">Tai氏らの論文(ACL, 2015)</a>がLSTMと構文木の組合せによりさらにその結果を向上させています。</p><p>これらのモデルの、5分類の感情に関するスタンフォードのデータセットでの結果が以下の通りです。</p><p>現段階では、構文木を使ったモデルがシンプルなアプローチよりも上回っているように見えます。シンタックスに依存しない新たな手法が現れてこの競争に勝つのか、それが起こるとしたらいつか、ということに私は興味津々です。何と言っても、多くのニューラルモデルのゴールは文法を捨て去ることではなく、同じネットワークで暗示的にそれを捉えることにあるのです。</p><p>Chris Manning氏は、混用されがちな以下の2単語についてその意味を明確に示しました。</p><p><strong>Distributed</strong>: 多くの要素の連続的な活性化レベルのこと。Dense word embeddingのように、ワン・ホットなベクトルと対比される。</p><p><strong>Distributional</strong>: 使われるコンテクストによって表される。 Word2vecはdistributionalだが、カウントベースの単語ベクトルもdistributionalである。単語の意味をモデリングするのに言葉のコンテクストを用いるため。</p><p>Penn Treebankにある、依存文法解析の比較を以下に示します。</p><p>一番下の結果は、スタンフォードのニューラル解析器のトレーニングにGoogleが多大な量のリソースを利用して行った結果のものです。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/14439811.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/14439811.png" alt=""></a></p><p>実のところ、以前は<a href="http://deeplearning.net/software/theano/" rel="nofollow" title="" class="ext-link">Theano</a>について少ししか知らなかったのですが、サマースクールの間に色々と学ぶことができました。これはとても素晴らしいものです。</p><p>Theanoはモントリオールで生まれたライブラリなので、その開発者たちに直接質問できたのが特にためになりました。</p><p>ほとんどの情報は<a href="https://github.com/mila-udem/summerschool2015" rel="nofollow" title="" class="ext-link">interactive python tutorials</a>という形でネット上で入手可能です。</p><p>Nvidiaは、<a href="https://developer.nvidia.com/digits" rel="nofollow" title="" class="ext-link">Digits</a>というツールキットを有しています。これは、一切のコーディングを要せずに複雑なニューラルネットワークモデルを訓練したり可視化したりできるものです。また、NvidiaはDigitsや他のディープラーニングのソフト(TheanoやCaffeなど)を実行するためにカスタマイズした<a href="https://developer.nvidia.com/devbox" rel="nofollow" title="" class="ext-link">DevBox</a>というマシンも販売しています。Titan XのGPUを4つ搭載しており、現在$15,000という価格になっています。</p><p><a href="https://github.com/mila-udem/fuel" rel="nofollow" title="" class="ext-link">Fuel</a>は、データセット上での繰り返しをマネジメントしてくれるツールキットです。ミニバッチへの分割やシャッフル、様々な前処理の適用などができます。また、MNISTやCIFAR-10、Googleの10億語のコーパスなどの既存データセット用に作られた関数などもあります。これはTheanoでのネットワーク構築をシンプルにしてくれる<a href="http://github.com/mila-udem/blocks" rel="nofollow" title="" class="ext-link">Blocks</a>というツールキットと併用するようにデザインされています。</p><p>“王様 – 男 + 女 = 女王”というのをご存知でしょうか？画像上でこれができることが示されています(Kiros et al., 2015).</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/talk_Montreal_part2_pdf.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/talk_Montreal_part2_pdf.png" alt="talk_Montreal_part2_pdf"></a></p><p>現在<script type="math/tex">x_0</script>にいるところから<script type="math/tex">x</script>へ移行しようとするとき、新しい点での関数の値は導関数によって概算することができます。テイラー展開を用いるのです。</p><p><script type="math/tex">f(x) = f(x_0) + (x – x_0)f'(x) + \frac{1}{2} (x – x_0)^2 f”(x) + …</script></p><p>同様に、パラメータを<script type="math/tex">\theta_0</script>から<script type="math/tex">\theta</script>に更新したときの関数の損失についても概算が可能です。</p><p><script type="math/tex">J(\theta) =J(\theta_0) + (\theta – \theta_0)^T g + \frac{1}{2} (\theta – \theta_0)^T H(\theta – \theta_0) + …</script></p><p>ここで、<script type="math/tex">g</script>には<script type="math/tex">\theta</script>に対応する導関数が含まれており、また<script type="math/tex">H</script>は<script type="math/tex">\theta</script>に対応する2次導関数のヘッセ行列です。</p><p>これはテイラー展開による2次近似ですが、さらに高次の導関数も用いることによりさらに精度を向上させることができます。</p><p>Adam Coates氏は、GPU上での行列計算の速度を解析するための手法について講演してくれました。これは、処理時間が「メモリ読み書き」「計算の実行」のどれに費やされているかを示す簡略化されたモデルです。どちらも並列的に行えると仮定し、どちらがより時間を取るかについて調べます。</p><p>例として、ベクトルに行列を掛ける計算を考えます。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss_systems_1.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss_systems_1-300x209.png" alt="dlss_systems_1"></a></p><p><script type="math/tex">M=1024</script>で<script type="math/tex">N=512</script>の場合、読み書きしなければならないバイト数は以下のようになります。</p><p><script type="math/tex">4\text{ bytes }\times (1024 \times 512 + 512 + 1024) = 2.1e6\text{ bytes}</script></p><p>そして、必要な計算回数は以下の通りです。</p><p><script type="math/tex">2\times 1024\times 512 = 1e6\text{ FLOPs}</script></p><p>6 TFLOP/sのGPUと、300GB/sの帯域幅のメモリで計算する場合、トータルの実行時間は以下の通りになります。</p><p><script type="math/tex">\text{max}\{2.1e6\text{ bytes }/ (300e9\text{ bytes}/s), 1e6\text{ FLOPs} / (6e12\text{ FLOP}/s) \} \\ = \text{max}\{ 7\mu s, 0.16\mu s \}</script></p><p>つまり、このプロセスはメモリへの読み書きに費やされる<script type="math/tex">7\mu s</script>という時間がネックとなり、GPUを速いものにすることには効果がないという事になります。おそらくこれは読んでいる方も推測しているとおり、より大きな行列やベクトルの計算をする場合、あるいは行列と行列を掛ける場合においては、この状況は改善されます。</p><p>また、Adam氏は、ある処理の密度を計算するためのアイデアを解説していました。</p><p>密度 = (算術処理の数) / (読み書きするバイト数)</p><p>先ほどのシナリオで言えば、</p><p>密度 = (1E6 FLOPs) / (2.1E6 bytes) = 0.5 FLOPs/bytes</p><p>となります。低い密度は「メモリがボトルネックである」ということを、高い密度は「GPUがボトルネックである」という事を示します。これは、システム全体をスピードアップするにはどちらを改善する必要があるのか、どこにスイートスポットがあるのかを発見するためにビジュアライズが可能です。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss_systems_2.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss_systems_2.png" alt="dlss_systems_2"></a></p><p>密度計算から続いて、ネットワークの計算密度を上げる(メモリの代わりに計算で制約される)ための方法が、データをミニバッチで処理することです。これはメモリ処理をいくらか避けることが可能で、またGPUは巨大な行列を並列的に処理するのに優れています。</p><p>しかし、バッチサイズを上げ過ぎると学習アルゴリズムに悪影響を及ぼし始め、収束が遅くなってしまいます。最前の結果と最短の時間を得るために、良いバランスを見つけ出すことが重要です。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss_systems_3.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/dlss_systems_3.png" alt="dlss_systems_3"></a></p><p>最近判明したことなのですが、ニューラルネットワークは反対の例によって容易に惑わされてしまうことが分かってきました。以下の例では、左の画像は正しく金魚として分類されます。しかし、真ん中の画像のノイズのパターンを適用してしまうと、右の画像がヒナギクとして分類されてしまうようになりました。この画像はAndrej Karpathyのブログ記事、<a href="http://karpathy.github.io/2015/03/30/breaking-convnets/" rel="nofollow" title="" class="ext-link">“Breaking Linear Classifiers on ImageNet”</a>からのものであり、詳細はその記事で読むことができます。 <br>
<a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/fish.jpeg" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/fish.jpeg" alt="fish"></a></p><p>このノイズパターンはランダムではなく、ネットワークを騙すように巧妙に計算されたものです。とはいえ、右の画像が明らかに金魚であってヒナギクでないことは変わりません。</p><p>アンサンブルモデル、複数サッケード後の投票、教師なし前学習などの戦略ではこの問題に対処できません。強い正規化を適用することは助けになりますが、それも精度がノイズパターンに影響される前のクリーンなデータで行わなければいけません。</p><p>Ian Goodfellow氏は、こういった反対例の学習についてのアイデアについて講演しました。こういう例はトレーニングセットに対して自動的に生成・追加することができます。反対例に適応した学習を行うことで、そういった例を含むデータセットのみならずクリーンなデータセットに対しても精度が向上したことを示すのが以下の図です。<br>
<a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/goodfellow_adv.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/goodfellow_adv.png" alt="goodfellow_adv"></a><br>
結局、オリジナル画像から予想される分布と生成された反対例から予想される分布について、その間のカルバック・ライブラー情報量にペナルティを与えることでより精度が向上します。これにより、ネットワークがよりロバストになり、また似た画像を似た分類の分布として予想できるように最適化できるのです。</p><p>Phil Blunsom氏の講演では、ほとんどすべてのNLPは言語モデルとして構造化できるという話をしてしました。インプットとアウトプットを連鎖的に繋ぎ、配列全体の確率を予測しようとすることでこれを行うことができます。</p><p>翻訳:</p><p><script type="math/tex">P(\text{Les chiens aiment les os || Dogs love bones})</script></p><p>質問への回答:</p><p><script type="math/tex">P(\text{What do dogs love? || bones .})</script></p><p>会話:</p><p><script type="math/tex">P(\text{How are you? || Fine thanks. And you?})</script></p><p>下2つについては、加えて世界の知識の条件が必要となります。第二の部分については言葉である必要がありませんが、ラベルであったり、依存関係などのように構造化されたアウトプットである必要があります。</p><p>Frederick Jelinek氏とIBMのチームが統計的機械翻訳についての最初の論文を1988年のCOLINGに投稿したとき、以下のような匿名のレビューを受けました。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/blunsom-lm-mt2.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/blunsom-lm-mt2-270x300.png" alt="blunsom-lm-mt2"></a></p><p><em>著者の言及通り、機械翻訳に対する統計的(情報理論的)なアプローチは、1949年という早さでWeaverが言及して認知されている。しかし、1950年には一般に誤りだったとして認識されるようになった(Hutchins, MT – Past, Present, Future, Ellis Horwood, 1986, p. 30ffおよびその参考文献)。コンピューターの未熟なパワーは科学ではなく、この論文はCOLINGの範囲外にある。</em></p><p>とてもシンプルなニューラルモデルが驚くほどよい結果を残しています。Phil Blunsom氏のスライドの、中国語から英語への翻訳の例が以下です。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/blunsom-lm-mt.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/blunsom-lm-mt.png" alt="blunsom-lm-mt"></a></p><p>このモデルでは、中国語の単語のベクトルを単純に足し合わせることで文のベクトルにしています。デコーダーは、生成された最新の2つの英単語のベクトルとともに文ベクトルを入力にとる条件的言語モデルで、翻訳の次の単語を生成します。</p><p>しかし、ニューラルモデルはまだ伝統的な機械翻訳システムを上回る成果を出していません。かなり近いところまでは来ていますが。以下が、Sutskeverらによる2014年の論文、<a href="http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf" rel="nofollow" title="" class="ext-link">“Sequence to Sequence Learning with Neural Networks”</a>からの結果です。</p><p><strong>追記:</strong> <a href="https://twitter.com/stanfordnlp" rel="nofollow" title="" class="ext-link">@stanfordnlp</a>が指摘してくれたのですが、いくつかの最新の結果ではニューラルモデルが最新の伝統的な機械翻訳システムよりいい結果を出したとのことです。 “<a href="http://arxiv.org/pdf/1508.04025.pdf" rel="nofollow" title="" class="ext-link">Effective Approaches to Attention-based Neural Machine Translation</a>” (Luong et. al., 2015)をご覧ください。</p><p>Richard Socher氏は、画像をアップロードすることにより学習させられるMetaMindの<a href="https://www.metamind.io/vision/train" rel="nofollow" title="" class="ext-link">画像分類器のデモ</a>をしてくれました。分類器にエジソンとアインシュタイン(テスラの画像は十分に見つけられませんでした)の画像で学習させました。それぞれの分類に5個の画像例を使い、それぞれの人物の他の画像を用いてテストしましたが、上手く機能しているようでした。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/edison_vs_einstein.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/edison_vs_einstein.png" alt="edison_vs_einstein"></a></p><p>Mark Schmidt氏の2つのプレゼンテーションは、異なるシナリオでの数値最適化に関するものでした。</p><p><strong>決定論的</strong>勾配法では、データセット全体に対して勾配を計算して更新します。繰り返しのコストはデータセットのサイズに比例します。</p><p><strong>確率論的</strong>勾配法では、1つのデータポイントに対して勾配を計算して更新します。繰り返しのコストはデータセットのサイズに依存しません。</p><p>確率論的勾配法では各繰り返しは断然速いのですが、ネットワークをトレーニングするために必要な繰り返しの回数は多くなります。以下のグラフがそれを示します。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/2015_DLSS_ConvexOptimization.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/2015_DLSS_ConvexOptimization-300x233.png" alt="2015_DLSS_ConvexOptimization"></a></p><p>両者のうちのベストを得るために、バッチングを利用します。より具体的には、データセットのうち1つに対して確率論的勾配法を用いて正しい勾配方向を算出し、バッチサイズを上げ始めます。バッチサイズが大きくなるにつれて勾配の誤差は減っていきますが、繰り返しのコストは再びデータセットのサイズに依存してくるようになります。</p><p>確率論的平均勾配(Stochastic Average Gradient, SAG)はこの方式をとる手法で、繰り返しごとに1つの勾配を線形に増やしていきます。全てのデータポイントについての勾配の更新を記憶する必要があり、それに従いメモリの消費量が大きくなってしまうため、残念ながら巨大なニューラルネットワークには適しません。確率的分散減少勾配(Stochastic Variance-Reduced Gradient, SVRG)はこのメモリコストを減らす手法で、繰り返しごとに2つの勾配のみを計算するものです(加えて、時により全ての勾配を用います)。</p><p>Mark氏は生徒に対し、彼が実装した多くの最適化手法(AdaGrad, モーメンタム, SAGなど)について話しました。「ブラックボックス的なニューラルネットワークに対してはどういう手法を用いるのか」と生徒に質問された際には、彼は2つの手法を用いると答えました。一つは<a href="http://arxiv.org/pdf/1412.6606.pdf" rel="nofollow" title="" class="ext-link">Streaming SVRG</a> (Frostig et al., 2015)、もう一つはまだ論文化していないもの、とのことでした。</p><p>THEANO_FLAGSに“profile=True”を書き込むと、プログラムを解析し、各処理のうちどこに多くの時間が割かれているかを見せてくれます。ボトルネックを見つけるのに非常に便利です。</p><p>Ian Goodfellow氏の反対例に関する講演のあと、Yoshua Bengio氏が「それぞれ競い合う2つのシステム」について話しました。</p><p>システムDは分類システムで、実データと人工的なデータを分類することを目的としたものです。</p><p>システムGは生成システムで、システムDが誤って実データと認識してしまうように人工的にデータを生成することを目的としています。</p><p>片方を訓練することで、もう片方はより高精度にならなければなりません。実際にこれは上手く機能していますが、システムDがシステムGについていくためにはその訓練のステップ幅を極めて小さくしなければなりません。以下が“<a href="http://arxiv.org/abs/1506.05751" rel="nofollow" title="" class="ext-link">Deep Generative Image Models using a Laplacian Pyramid of Adversarial Networks</a>”からの例で、教会の画像を生成するモデルのものです。</p><p><a href="http://www.marekrei.com/blog/wp-content/uploads/2015/08/denton_generating_images.png" rel="nofollow" title="" class="ext-link"><img src="http://www.marekrei.com/blog/wp-content/uploads/2015/08/denton_generating_images.png" alt="denton_generating_images"></a></p><p>arXivのナンバリングは、投稿年月と投稿された順番からなります。1508.03854 とナンバリングされた論文は、2015年に投稿された3854番目の論文ということになります。知れて良かったです。</p>
