<p><a href="https://lukasa.co.uk/2016/12/Debugging_Your_Operating_System/" rel="nofollow" title="" class="ext-link">Debugging Your Operating System: A Lesson In Memory Allocation</a> by <a href="http://twitter.com/lukasaoz" rel="nofollow" title="" class="ext-link">Cory Benfield</a></p><p><em>追記：やあやあHacker Newsさん！おひさしぶり！メモリ管理を深く掘り下げた私の投稿を読む邪魔はしたくないし、私の投稿のあら探しをする人たちを邪魔するつもりもありません。技術的なマル秘テクニックに注目するのもいいでしょう（いや、わかりますよ。楽しいですしね！）。でも、私たちはひとりぼっちでソフトウェアを書いているわけではないのです。だから、ためになる技術的なコンテンツ（私の記事もそうでありたいものです）を捜すだけじゃなくて、政治的な話題にも目を向けることを強くおすすめします。ソフトウェア開発者である私たちは、今後数十年にわたって社会を変える最前線に立つ特権を与えられています。私たちは、自分たちの仕事を社会全体に役立てられるようにするための情報や知識を必要としています。</em></p><p><em>そういう意味でみなさんには、<a href="https://news.ycombinator.com/item?id=13108404" rel="nofollow" title="" class="ext-link">Hacker Newsが「政治的」なコンテンツを検閲すると言い出したこと</a>に反対してもらいたいのです。このコンテンツのモデレートが難しいことはわかっています。でも、<a href="https://www.africa.upenn.edu/Articles_Gen/Letter_Birmingham.html" rel="nofollow" title="" class="ext-link">世界をよりよくするためには、私たちが世界にもたらしうる害を直視することによる不快感を受け入れる必要があるのではないでしょうか</a>。みなさんにも考えてもらいたいのです。よりよい世界をつくるために、自分たちができることをしていく義務があるのかどうか、そしてあなたの考えに同意しない人たちと積極的にかかわっていくのかどうかを。また、価値のある別の視点をもたらしてくれる長期的な作品を提供する出版物を支援することも検討しましょう。よくわからない人は、まずは<a href="https://modelviewculture.com/" rel="nofollow" title="" class="ext-link">Model View Culture</a>や地元の調査ジャーナリズムを見てみるといいでしょう。欧米における<a href="https://www.theguardian.com/artanddesign/jonathanjonesblog/2016/dec/09/war-memorials-have-failed-peter-eisenman-holocaust" rel="nofollow" title="" class="ext-link">ファシズムの台頭のリスク</a>についても何かしらのアクションが必要ではないでしょうか。あなたの雇用者や周囲のコミュニティが、前世紀半ばの恐怖を繰り返さないようにするためにも、それが大切です。</em></p><p><em>閑話休題。いつものコンテンツに戻りましょう。それでは、スタート！</em></p><p>多くの調査がそうであるのと同様に、そもそものはじまりは<a href="https://github.com/kennethreitz/requests/issues/3729" rel="nofollow" title="" class="ext-link">あるバグレポート</a>でした。</p><p>バグレポートのタイトルは「HTTPS接続上でチャンクサイズが大きいときにiter_contentが遅い」というシンプルなものでした。このタイトルを見た私はちょっと警戒しました。その理由は二つあります。まず、定量的なてがかりがまったくないこと。「遅い」ってどういうこと？どんなふうに遅いの？「大きい」ってどのくらい？もうひとつは、もし深刻な影響が出るのであれば、これまでにも同様の報告がきているはずだということ。<code>iter_content</code>メソッドは古くからあるものです。それなりに一般的な使いかたをしていて目に見えて遅くなるのなら、もっと早い段階で指摘されていたに違いありません。</p><p>最初の報告に対して元の報告者が補足しました。まだまだ詳細はわかりませんが、曰く「CPU使用率が100%になって、スループットも1MB/s未満になってしまう」のだとのこと。これが私の目を引きました。本当だとは思えなかったのです。データをダウンロードする最小限の処理だけでそんなに速度が低下するなんてあり得ない！</p><p>しかし、バグレポートを却下するならするで、その前にきちんと調査しなければいけません。元の報告者との何度かのやりとりを経て、バグを再現させることに成功しました。PyOpenSSLのRequestsを使った次のコードを実行すると、CPU使用率が100%に張り付いたうえにスループットが最小限に落ちてしまったのです。<br>
<code></code></p><p><br>
これは<strong>すばらしい</strong>再現シナリオです。Requestsスタックに問題があるであろうことがはっきりわかるからです。ここには、ユーザーが書いたコードは<strong>一切</strong>ありません。すべてのコードはRequestsライブラリやその依存ライブラリに組み込まれているものであり、パフォーマンスが落ちるようなコードをユーザーが書いたわけではないのです。それだけでもすばらしいのですが、さらにすばらしい点があります。この再現シナリオは公開URLを使っているので、<strong>誰でも試せる</strong>のです。実際、私の環境で実行してもバグを再現させることができました。何度やっても結果は同じでした。</p><p>このバグにはさらに興味深い点がありました。</p><p>これがおもしろいのは、チャンクサイズの<strong>リテラル値</strong>が作業負荷に影響を及ぼしているという点です。この情報と、PyOpenSSLでだけこのバグが発生するという事実やスタックが次の行に処理時間の大半を費やしていることなどから、問題がより明確になりました。<br>
<code></code></p><p><br>
さらに調べたところ、CFFIの<code>FFI.new</code>が返すメモリがデフォルトで<strong>ゼロ埋め</strong>されていることがわかりました。つまり、確保するメモリのサイズに比例したオーバーヘッドが発生するということです。確保するサイズが増えれば増えるほど、ゼロ埋めに必要な時間も増えます。したがって、大きなサイズの確保は好ましくないということになります。CFFIの機能を使ってバッファメモリのゼロ埋め処理を無効にしたところ、この現象は解決しました<a href="#fn1">*1</a>。これで一件落着……だと思いましたか？</p><p>残念でした。</p><p>冗談はさておき、これで確かに問題は解決しました。しかしその数日後、Nathaniel Smithから鋭い指摘がありました。「<a href="https://bitbucket.org/cffi/cffi/issues/295/cffinew-is-way-slower-than-it-should-be-it" rel="nofollow" title="" class="ext-link">そもそも、なぜわざわざゼロ埋めしていたのでしょう？</a>」この疑問を理解するには、POSIXシステムのメモリアロケーションについて少し掘り下げる必要があります。</p><p>プログラマーの多くは、OSにメモリの確保を要求する標準的な方法を知っていることでしょう。Cの標準ライブラリ関数<code>malloc</code>を使うのです（<code>man 3 malloc</code>と打ち込めば、マニュアルを読めます）。この関数が受け取る引数は一つで、確保したいメモリのバイト数を指定します。C標準ライブラリはさまざまな戦略の中から一つを選んでメモリを確保し、要求されたメモリと<strong>少なくとも同じサイズ</strong>以上のメモリへのポインタを返します。</p><p>標準規格では、<code>malloc</code>が返すのは<strong>初期化していないメモリ</strong>です。C標準ライブラリは、どこかに確保したメモリをそのまま呼び出し側に返します。その際に、<strong>もともとそこに書かれていた</strong>内容には一切手を加えません。つまり、<code>malloc</code>を普通に使っていると、すでにプログラム内で何かのデータを書き込んだバッファを受け取ることもあるということです。メモリセーフではないC言語などでは、この挙動がやっかいなバグを引き起こすことがありがちです。一般に、初期化していないメモリの内容を読み込むのは危険なことだとされています。</p><p>しかし、<code>malloc</code>にはお友達がいます。マニュアルで一緒に書かれている<code>calloc</code>です。<code>calloc</code>と<code>malloc</code>との最大の違いは、前者が<strong>二つ</strong>の引数（要素数とサイズ）を受け取るという点です。<code>malloc</code>はC標準ライブラリに「少なくとも<em>n</em>バイトのメモリを確保して欲しい」と依頼するのに対して、<code>calloc</code>はC標準ライブラリに「サイズが<em>m</em>バイトのオブジェクトを<em>n</em>個用意できるだけのメモリを確保して欲しい」と依頼するのです。<code>calloc</code>の<strong>本来の狙い</strong>はもちろん、オブジェクトの配列用のヒープメモリを安全な方法で確保することです<a href="#fn2">*2</a>。</p><p>しかし<code>calloc</code>には副作用があります。配列用のメモリを確保するという本来の目的に関連するもので、マニュアルにもひっそりと書かれています。</p><p>これは、<code>calloc</code>の本来の目的に沿った挙動です。値の配列を確保しようとしたときには、配列がデフォルトの状態からはじまるのが役立つことが多いでしょう。最近のメモリセーフな言語の中には、配列や構造体を作るときのデフォルトの挙動をそのようにしているものもあります。たとえばGo言語の場合は、構造体を初期化するとすべてのメンバーがデフォルトの「ゼロ」値になります。これは「すべてがゼロにセットされていた場合の値」です。これは要するに、Go言語の構造体はすべて<code>calloc</code>を用いて確保されるものだと考えてかまわないということです<a href="#fn3">*3</a>。</p><p><code>malloc</code>が初期化していないメモリを返すのに対して、<code>calloc</code>は<strong>初期化済み</strong>のメモリを返すということです。この厳密な約束があるので、OSは処理を最適化することができます。そして実際、最近のOSの大半は<strong>実際に</strong>最適化しているのです。</p><p><code>calloc</code>を実装するいちばんシンプルな方法は、このように書くことでしょう。<br>
<code></code></p><p><br>
この関数のコストは、確保するサイズにほぼ正比例することが明白です。確保するバイト数が増えれば増えるほど、各バイトをゼロクリアするコストがかさみます。実際、大半のOSに含まれるC標準ライブラリは<code>memset</code>用の<strong>最適化</strong>されたパスを持っています（特別なCPUベクトル命令を用いて、個々の命令が大量のバイトをゼロクリアしているのが一般的です）。それにもかかわらず、そのコストは線形になります。</p><p>しかし、OSはこれ以外にも、大規模なメモリ確保のためのトリックを用意しています。仮想メモリを利用するものです。</p><p>仮想メモリそのものについての説明は残念ながらこの記事で扱う範囲を超えてしまうのですが、事前に仮想メモリについて調べておくことを強くおすすめします（とても興味深いものですよ！）ひとことで言うと「仮想メモリ」とは、OSのカーネルがプロセスに対してメモリについてのウソをつくようなものです。マシン上で動くそれぞれのプロセスには、それぞれのプロセスに属するメモリビューがあります。このメモリビューを、物理メモリへ間接的に「マップ」しています。</p><p>これでOSは、あらゆるトリックを活用できるようになります。よくあるトリックのひとつは、「メモリ」といいつつその実態はファイルで持たせるようなことです。これは、メモリをディスクにスワップアウトするときに使われます。また、ファイルのメモリマッピングにも使われます。ファイルのメモリマッピングの場合なら、プログラムからOSに対してこのように問い合わせます。「<em>n</em>バイトのメモリを確保して、このファイルをディスクに書き戻してください。私がメモリに何か書き込んだときにはそれをディスク上のファイルに書き込んで、メモリの内容を読み込んだときにはディスク上のファイルの内容を読み出してください」</p><p>カーネルレベルで見ると、プロセスがメモリを読み込もうとしたときにそのメモリが実際には存在しないことにCPUが気づくと、そのプロセスを一時停止して「ページフォルト」を発生させます。すると、OSのカーネルが動いてデータをメモリに<strong>持ち込み</strong>、アプリケーションから読めるようにします。元のプロセスの一時停止が解けるとプロセス側からは、ファイルの内容がそのメモリから読めるようになっています。</p><p>この仕組みを使ってその他のトリックを実行することもできます。そのひとつが、巨大な確保済みメモリを「解放」することです。より正確に言うと、メモリの解放にかかるコストが「<strong>確保された</strong>」メモリサイズではなく「実際に<strong>使われた</strong>」メモリサイズに比例するようにすることです。</p><p>わざわざそうする理由は、歴史的に、大量のメモリを必要とするプログラムの多くが「起動時に<strong>莫大な</strong>サイズのバッファを一括確保して、必要に応じてそこから内部的に切り出していく」方式をとっているからです。それらのプログラムは仮想メモリを使わない環境を想定して書かれているので、後でメモリが足りなくなることを防ぐためには事前にその使用権を確保しておく必要があったのです。しかし、仮想メモリがある今では、そんな対策は不要です。それぞれのプログラムが必要に応じてその場でメモリを確保できるし、メモリが足りなくなってしまう心配もありません<a href="#fn4">*4</a>。</p><p>そこで、これらのアプリケーションの起動時のコストを下げるために、大規模メモリ割り当てをOS側でごまかすようになりました。大半のOSでは、128キロバイトを超えるメモリを1回の呼び出しで確保しようとすると、Cの標準ライブラリはそれをカバーできる仮想メモリページをOSに要求します。しかし、ここがポイントなのですが、<strong>仮想メモリページを確保するコストはゼロに等しいのです</strong>。OS側では、この時点で実際にメモリを確保することはありません。単に、仮想メモリマッピングの準備をするだけです。そのため、<code>malloc</code>を呼んだときの処理コストが<strong>劇的に低下</strong>します。</p><p>もちろん、まだメモリがプロセスに「マッピング」されてはいないので、アプリケーションがメモリを<strong>実際に使おう</strong>とするとページフォルトが発生します。この時点でOSが、メモリ内で実際のページを探して割り当てます。ちょうどメモリマップトファイルにおけるページフォルトの対応と同じです（仮想メモリをファイルに書き戻すかわりに物理メモリに書き戻します）。</p><p>これらのおかげで、最近のOSの多くは、たとえば<code>malloc(1024 * 1024 * 1024)</code>で1ギガバイトのメモリを確保するのも一瞬でできてしまいます。実際には、プロセスにメモリを渡す操作は一切行われないからです。その結果として、起動時に数ギガバイトのメモリを確保するけれども実際にはほとんど使わないようなプログラムは極めて高速に立ち上がります。</p><p>さらに驚くべきことに、同じような最適化が<code>calloc</code>でも行えるのです。OSは、新しいページをいわゆる「ゼロページ」にマップできるからです。ゼロページは読み込み専用のメモリページで、全体がゼロになっています。このマッピングは最初にコピーオンライト方式で行われます。つまり、プロセスがそのメモリマップに実際に書き込もうとしたときにカーネルが介入して、すべてのゼロを新しいページにコピーしてからプロセスの書き込みを受け付けるのです。</p><p>OSがこのトリックを使えるので、<code>calloc</code>で大規模なメモリを確保する際にも<code>malloc</code>と同様にできて、新しい仮想メモリページを要求します。これもまた、実際にメモリが使われるときまでは一切コストがかかりません。この最適化が意味するのは、<code>calloc(1024 * 1024 * 1024, 1)</code>のコストが（ゼロクリアするという約束があるにもかかわらず）<code>malloc</code>で同じサイズを確保するコストとまったく同じになるということです。すごいですね！</p><p>さてNathanielが言いたかったのはこういうことです。CFFIが<code>calloc</code>を使っているなら、いったいなぜ改めてゼロ埋めする必要があったのでしょう？</p><p>理由のひとつはもちろん、常に<code>calloc</code>を使っているわけではないということです。しかし私は、直接<code>calloc</code>を使ってもこのスローダウンが再現するのではという疑いを持ったので、ちょっとした再現プログラムを書いてみました。こんなコードです。<br>
<code></code></p><p><br>
極めて単純なCのプログラムです。<code>calloc</code>による100MBのメモリ確保と解放を10000回繰り返してから終了します。このプログラムでは、次の二つのいずれかが起こるものと思われます<a href="#fn5">*5</a>。</p><p>一般的なOSならまず間違いなく前者の振る舞いをするのではないかと考えるでしょう。実際、Linuxではまさにそうなります。このコードを<code>gcc</code>でコンパイルして走らせると、あっという間に終わることがわかります。ページフォルトはほとんど発生せず、メモリが逼迫することもありません。しかし、同じプログラムをmacOSで走らせると、<strong>とてつもなく</strong>長い時間がかかることがわかります。私が試したときには<strong>8分</strong>近くかかりました。</p><p>さらに奇妙なことに、<code>ALLOCATION_SIZE</code>をもっと大きく（たとえば<code>1000 * 1024 * 1024</code>などと）すると、macOS版のプログラムも瞬時に終わるようになるのです！<strong>なんということでしょう</strong>。</p><p>いったい何が起こっているのでしょう？</p><p>macOSには<code>sample</code>というユーティリティが含まれています（<code>man 1 sample</code>を参照）。これは、実行中のプロセスについて、その状態をサンプリングすることでさまざまな情報を知らせてくれるものです。先ほどのプログラムの<code>sample</code>による出力は、このようになります。</p><p>ここで重要なのは、<code>_platform_bzero$VARIANT$Haswell</code>に大部分の時間を費やしているのが明白であることです。このメソッドは、バッファをゼロクリアするために使うものです。つまり、macOSではメモリをゼロクリアしているということになります。いったいなぜ？</p><p>ちょうど都合のいいことに、Appleは、リリースからある程度経過したOSのコア部分のコードの大部分をオープンソースにしています。このプログラムは処理時間の大半を<code>libsystem_malloc</code>に費やしていることがわかったので、<a href="https://opensource.apple.com/" rel="nofollow" title="" class="ext-link">Appleのオープンソースのウェブページ</a>から<a href="https://opensource.apple.com/source/libmalloc/libmalloc-116/" rel="nofollow" title="" class="ext-link">libmalloc-116</a>のtarballをダウンロードしました。そして、ソースを探検してみたのです。</p><p>すべての鍵は<a href="https://opensource.apple.com/source/libmalloc/libmalloc-116/src/magazine_large.c.auto.html" rel="nofollow" title="" class="ext-link">large_malloc</a>にあることがわかりました。これは127kBより大きなサイズのメモリを確保する際に使われるもので、最終的には先ほど説明した仮想メモリのトリックを利用しています。なのになぜ、実行速度が遅くなってしまうのでしょう？</p><p>ここで、Appleはよかれと思って気を回しすぎてしまったようです。<code>large_malloc</code>の中には、<code>#define</code>で定義した定数<code>CONFIG_LARGE_CACHE</code>の背後に隠されたコードがあります。このコードは基本的に、プログラムに割り当てられた大きなメモリページの「フリーリスト」にあたります。macOSのプログラムが127kBから<code>LARGE_CACHE_SIZE_ENTRY_LIMIT</code>（ほぼ125MB）までの間の連続したメモリバッファを確保すると、<code>libsystem_malloc</code>は、もし別の場所で確保されたページが使えそうならそのページの再利用を試みます。これで、Darwinカーネルへのメモリページの要求を減らすことができて、コンテキストスイッチやシステムコールを減らせます。理屈の上では、これは大きな節約になるはずです。</p><p>しかし<code>calloc</code>の場合は必然的に、これらのバイトをゼロクリアする必要があります。そのため、macOSが再利用可能なページを見つけているときに<code>calloc</code>が呼び出されると、<strong>そのメモリをゼロクリアすることになります</strong>。全体を、毎回です。</p><p>これは完全に不合理だというわけでもありません。ゼロ埋めされたページは限られたリソースです。リソースに制約のあるハードウェアならなおさらでしょう（Apple Watchを見ながら）。つまり、もしページを再利用できるなら、それは本当に大きな節約になる可能性があるということです。</p><p><strong>しかし</strong>、ページキャッシュは、<code>calloc</code>を使ってゼロクリアしたメモリページを提供する最適化を台無しにしてしまいます。ページが「ダーティ」である場合は悪くありません。つまり、ゼロクリアしたページにアプリケーションからの書き込みがなされている場合（おそらくゼロではなくなっていると思われる場合）がそうです。しかしmacOSは、<strong>有無を言わさず</strong>この処理を行うのです。たとえば<code>calloc</code>、<code>free</code>、<code>calloc</code>をこの順に呼んでその間メモリに何も手を加えなかったとしましょう。二度目の<code>calloc</code>の呼び出しのときには最初の呼び出しで確保されたページを受け取ることでしょう。これは実際のメモリに書き戻されることがなかったものです。たとえ<strong>すでにゼロになっている</strong>としても、OSはこのページを<strong>改めて</strong>ゼロで埋めようとします。これはまさに、仮想メモリベースのアロケータで大規模なメモリ割り当てをする際に避けようとしてきたことです。このメモリはまだ実際には使われておらず、「フリーリスト」で使われるように<strong>なるはず</strong>でした。</p><p>これらを踏まえると、macOSにおける<code>calloc</code>のコストは、125MBまでは確保するサイズに比例してしまうということです。ほとんどのOSでは、127kBを超えるとO(1)のオーダーに落ち着くのにもかかわらずです。125MBを超えるとmacOSはページキャッシュをやめるので、その時点で急に処理速度が向上します。</p><p>ひとつのPythonのプログラムから見つかったまったく予期せぬバグであり、いろいろ気になることもあります。たとえば、すでにゼロになっているメモリを改めてゼロにするために、どれだけのCPUサイクルをムダにしているのでしょう？決して使われていなくてその必要がないメモリをページインさせるために、どれだけのコンテキストスイッチがムダになったのでしょう？</p><p>結局これは、古い格言を実証しているのだと思います。つまり「<a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow" title="" class="ext-link">あらゆる抽象化は破綻する</a>」ということです。自分はPythonプログラマーであるからといってそこから目を背けることはできません。深く掘り下げていけば、あなたが動かしているプログラムが動いているマシンにはメモリが積まれていて、トリックが効いているのです。いつの日か、自分の書いたプログラムが<strong>あり得ないくらいに</strong>遅くなることがあるかもしれません。そして、原因を見つけるためにOSのレベルまで潜り込んで、メモリの動きがどうなっているかを調べざるを得なくなるかもしれません。</p><p>このバグは<a href="rdar://29508271">Radar 29508271</a>として登録されました。私が今までに見たなかでも最大級の奇妙なバグですね。</p><p><strong>追記</strong>：この投稿の前のバージョンでは、OSのカーネルがアイドル時間にページをゼロクリアする処理について紹介しました。これは最近のOSでは使われておらず、かわりにコピーオンライト方式が採用されています。これもれっきとした最適化のひとつで、カーネルが使用済みページにゼロを書き込むために大量の時間を費やさずに済ませています。アプリケーションが実際にデータを書き込むページにだけゼロを書き込むようにしているのです。これには、CPUサイクルを節約するという効果もあります。アプリケーションが要求したメモリがまったくの未使用であったなら、そこにゼロを書き込むコストはかからないのです。すばらしいですね！</p>
