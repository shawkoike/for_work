<p><a href="http://nikic.github.io/2015/05/05/Internal-value-representation-in-PHP-7-part-1.html" rel="nofollow" title="" class="ext-link">Internal value representation in PHP 7 – Part 1</a> （2015-5-5） by <a href="https://twitter.com/nikita_ppv" rel="nofollow" title="" class="ext-link">Nikita Popov</a></p><p>前回の投稿では、PHP7に取り入れられた<a href="http://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html" rel="nofollow" title="" class="ext-link">improvements to the hashtable implementation（ハッシュテーブル実装の改善）</a>について書きました。それに続く形で、今回はPHPの全般的な値の新しい表現形式に目を向けてみます。</p><p>取り上げる内容の量から考えて、2つのパートに分ける予定です。このパートでは、PHP5とPHP7の間におけるzval（Zend値）の実装の違い、それから参照の実装について説明し、パート2では、文字列やオブジェクトなど、個別の型の実現について、詳細に検討していこうと思います。</p><p>PHP5では、zval構造体は次のように定義されます。</p><p>見ての通り、zvalには<code>value</code>、<code>type</code>それから<code>__gc</code>情報（後ほど話します）が含まれています。<code>value</code>メンバは、zvalに格納できる複数の値の共用体です。</p><p>C言語の共用体は、1度に1つのメンバのみがアクティブになる構造で、そのサイズは、最も大きなメンバのサイズと同じです。共用体の全てのメンバは、<em>同じ</em>メモリ領域に保持され、アクセスされるメンバに応じて異なる解釈がされます。例えば上記の共用体の<code>lval</code>メンバを読み込めば、その値は符号付き整数として解釈され、<code>dval</code>メンバを読み込めば、値は代わりに倍精度浮動小数点数として解釈されるというわけです。</p><p>共用体のどのメンバが使用中であるかを把握するため、zvalの<code>type</code>プロパティは整数の型タグを保持します。</p><p>PHP5のzvalは（少数の例外を除いて）ヒープに割り当てられており、PHPは、どのzvalが使用中で、どのzvalを解放すべきかを把握しなければなりません。この目的のために参照カウントが取り入れられています。ある時点におけるzvalの”参照されている”頻度を、zval構造体の<code>refcount__gc</code>メンバが保持します。例えば<code>$a = $b = 42</code>では、値<code>42</code>が2つの変数から参照されているため、refcountは2です。もしrefcountが0なら、その値は使われていないということなので、解放することができます。</p><p>ちなみに、refcountが参照するリファレンス（値が現在、使用されている回数）はPHPの（<code>＆</code>を使う）リファレンスとは何の関係もないのでご注意ください。以降は2つのあいまいさを回避するため、用語を分けて”リファレンス”と”PHPリファレンス”としますが、今のところ、PHPリファレンスのことは無視しておきましょう。</p><p>参照カウントと密に関係しているコンセプトと言えば”コピーオンライト”です。zvalを複数ユーザで共有している時、そのzvalは変更できません。共有されたzvalを変更するには複製（”分離”）を作らなければならず、その複製においてのみ変更が適用されます。</p><p>コピーオンライトとzvalの破壊の例を見てみましょう。</p><p>参照カウントには重大な欠陥が1つあります。循環参照を検出して解除できないということです。これに対応するため、PHPは追加の<a href="http://php.net/manual/ja/features.gc.collecting-cycles.php" rel="nofollow" title="" class="ext-link">サイクルコレクタ</a>を使っています。zvalのrefcountがデクリメントされ、循環の一部になりそうな時は、zvalが”ルートバッファ”に書き込まれます。このルートバッファがいっぱいになると、マーク・アンド・スイープ・ガベージコレクションにより、可能性のある循環が収集される仕組みです。</p><p>追加のサイクルコレクタをサポートするため、実際のzval構造体は以下のようになります。</p><p><code>zval_gc_info</code>の構造体には、通常のzvalと共に追加のポインタが埋め込まれています。なお、<code>u</code>は共用体（union）を表しているので、実際のところ、これは1つのポインタで2つの型を指しているということに注意してください。<code>buffered</code>ポインタは、zvalがルートバッファ内のどこで参照されているかを保持するために使われており、サイクルコレクタが実行する前に破壊された場合は（その可能性は非常に高いです）削除しても構いません。ちなみにコレクタが値を破壊する時には<code>next</code>が使われますが、それについてはここでは割愛します。</p><p>ここでサイズについて話をしたいと思います（以下、全てのサイズは64ビットシステム上でのサイズです）。まず、<code>str</code>と<code>obj</code>は両メンバ共に16バイトのため、<code>zvalue_value</code>の共用体も16バイトになります。<code>zval</code>全体の構造体は（パディングにより）24バイトで、<code>zval_gc_info</code>は32バイトです。それと、ヒープにzvalを割り当てることで、アロケーションオーバーヘッドの16バイトが加算されます。zvalは複数の場所で使うことができますが、それはともかくとして、zvalごとに48バイト使う計算になりますね。</p><p>ここで、このzval実装の（数ある）非効率性について考えてみましょう。zvalが整数を保持する単純なケースを頭に思い描いてみてください。その場合、それ自体では8バイトになります。加えて、どんな場合でも型タグの格納が必要となってきます。これについては、本来なら1バイトですが、パディングのせいで8バイトが必要とされます。</p><p>（最初の概算で）実際に”必要”とされるこの16バイトに加え、参照カウントと循環収集のための16バイトが必要となり、さらにアロケーションオーバーヘッドの16バイトも必要になります。言うまでもありませんが、割り当てと解放は実際にやらなければならず、どちらとも非常に高コストな演算です。</p><p>ここで、ある疑問が生じます。単純な整数値は、参照カウントされる値や循環収集される値として、またヒープに割り当てられる値として、<em>本当に</em>保持する必要があるのでしょうか？　その答えはもちろんノーです。これは理にかなっていませんよね。</p><p>以下にPHP5におけるzval実装の主な問題点をまとめてみました。</p><p>ではPHP7で新しくなったzvalの実装についてお話しします。基本的な変更点として、zvalはもはや個別にヒープに割り当てられることはなく、自身にrefcountを保持するものでもなくなりました。代わりに、zvalがポイントする先の（文字列、配列、オブジェクトなどの）複雑な値自身にrefcountが格納されます。これにより次のような利点があります。</p><p>ではzvalの定義方法を見てみましょう。</p><p>最初のメンバは前と同様、valueの共用体です。次のメンバは型情報を格納する整数で、共用体を使って更に分割されています（<code>ZEND_ENDIAN_LOHI_4</code>は、異なるエンディアンのプラットフォーム間でレイアウトを引き継ぐためのマクロですので無視してください）。このサブストラクチャで重要なのは、<code>type</code>（以前のバージョンと同様です）と<code>type_flagｓ</code>です。それについては今から説明します。</p><p>この時点でちょっとした問題があります。それは、<code>value</code>メンバは8バイトの大きさですが、パディングが挿入されるため、1バイト追加するだけでzvalのサイズは16バイトにふくれてしまうのです。当然、型を格納するためだけに、8バイトも必要ありません。そのためzvalはもう1つの共用体<code>u2</code>を持っています。これはデフォルトでは使用しませんが、周辺のコードから、4バイトのデータを格納する目的を持たせることができます。さまざまな共用体メンバが、この予備のデータスロットをそれぞれの用途で使用します。</p><p>PHP7では、<code>value</code>共用体はわずかに変更されます。</p><p>まず、value共用体は16バイトではなく8バイトになっていることに注目してください。整数（<code>lval</code>）と倍精度浮動小数点数（<code>dval</code>）のみ直接格納することができます、他はいずれもポインタです。全てのポインタ型は（上記の例でspecial（特別）とされているものを除き）、参照カウントを使用し、<code>zend_refconted</code>で定義された共通のヘッダを持っています。</p><p>もちろんこの構造にはrefcountが含まれています。更に<code>type</code>、<code>flags</code>、<code>gc_info</code>もあります。<code>type</code>が行うのは、zval型を複製し、zvaｌを格納せずに参照カウントされた別の構造体をGCに識別させることです。<code>flags</code>は異なる型に異なる目的で使用されますが、それについては次のパートで個別に説明します。</p><p><code>gc_info</code>は、従来のzvalの<code>buffered</code>エントリと同じですが、ポインタをルートバッファに格納する代わりに、インデックスを含むようになりました。ルートバッファは固定サイズ（10000エレメント）で、64ビットのポインタの代わりに16ビット数を使用するには十分です。<code>gc_info</code>情報は、コレクションを行っているノードの識別に使用する”色”を符号化します。</p><p>zvalが個別にヒープに割り当てられないことは既に言及しました。しかし、当然<em>どこかの領域には</em>配置される必要があります。ではどのように機能するのでしょうか？　zvalはヒープに割り当てられた構造の一部でありながら、直接埋め込まれているのです。例えば、ハッシュテーブルのバケツが、別のzvalを指すポインタを格納する代わりに直接<code>zval</code>を埋め込むのです。関数のコンパイル済みの変数テーブルやオブジェクトのプロパティテーブルはzval配列になり、1つのチャンクとしてアロケーションされます。別のzvalへのポインタを格納することはありません。したがって新しいzvalは間接参照が1段階少なくなります。以前<code>zval*</code>だったものが今では<code>zval</code>になるのです。</p><p>新しい領域でzvalが使用される際、以前は<code>zval*</code>をコピーして、そのrefcountをインクリメントする必要がありました。新しいバージョンでは、<code>zval</code>の中身（<code>u2</code>は無視します）をコピーし、例えばその値が参照カウントを使用する場合は、それがポイントしているrefcountの値を1つ増やす<em>かもしれないと</em>いうことになります。</p><p>値が参照カウントされていることを、PHPはどのように把握するのでしょうか？　単に型のみでは判断できません。文字列や配列などの型が必ず参照カウントされるとは限らないからです。代わりに1ビットのzval type_infoメンバが、そのzvalが参照カウントされているかどうかを決定します。型のプロパティを符号化しているビットは他にもたくさんあります。</p><p>型が持つことの出来る最初の3つのプロパティは”refcounted（参照カウントされる）<br>
“、”collectable（コレクションできる）”、”copyable（コピーできる）”です。refcountedについてはもうご存知ですね。collectableはそのzvalがサイクルに参加できるかどうかを表します。例えば、文字列は（頻繁に）参照カウントされますが、そこの文字列でサイクルを作ることはできません。</p><p>copyableは”複製”が実行されたときに、その値がコピーされる必要があるかどうかを決定します。複製とはハードコピーを意味します。例えば、ある配列をポイントしているzvalを複製する場合、単純にその配列のrefcountを増やすことにはならず、新しく別の配列が生成されます。しかし、オブジェクト型やリソース型など場合は、複製であってもrefcountをインクリメントすることになります。このような型はnon-copyable（コピーできない）と呼ばれます。これはオブジェクトやリソースを渡すセマンティクスと合致します（念のため言っておくと、これらはリファレンスで渡されるのではありません）。</p><p>次のテーブルはそれぞれの型と、その型が使用するフラグを示したものです。”Simple types”は、別の構造体へのポインタを使用しない整数値やブーリアン値などを指します。”immutable”フラグのカラムもあります。これは、不変の配列を識別するために使用されますが、詳細は次のパートで説明します。</p><p>ここで、zval管理が実際どのように行われているか、例を2つ見てみましょう。まずは上のPHP5の例から整数を使用する例です。</p><p>非常につまらないですね。整数は共有されていませんし、2つの変数はそれぞれ異なるzvalを使用します。ポインタを表す<code>-&gt;</code>の代わりに<code>=</code>を書いて強調した部分は、zvalがアロケーションされているのではなく埋め込まれているということを忘れないでください。変数を設定しない場合、当該のzvalの型は<code>IS_UNDEF</code>をセットすることになります。次は、複雑な変数が使われる際の面白い例を見てみましょう。</p><p>ここでも、各変数はそれぞれ異なる（埋め込まれた）zvalを使用していますが、どのzvalも同じ（参照カウントされた）<code>zend_array</code>構造体をポイントしています。変更されると、その配列は複製されなければいけません。この例はPHP5での動きと似ています。</p><p>PHP7でサポートされている型を詳しく見てみましょう。</p><p>上記の項目はPHP5でサポートされているものとほとんど変わりませんが、追加されたものがいくつかあります。</p><p>今<code>IS_LONG</code>型は普通のC言語longの代わりに、<code>zend_long</code>が値として使われています。今までは、64ビットWindows(LLP64)でも、<code>long</code>型は32ビット幅しかなかったので、PHP5でも32ビット整数を使うしかありませんでした。しかし、PHP7では、使っているOSが64ビットであれば、Windowsでも、64ビット整数が使えるようになっています。</p><p>次のパートで、<code>zend_refcount</code>型を詳しく説明します。ここでは、実装されているPHPリファレンスを見ていきたいと思います。</p><p>PHP7におけるPHP<code>&amp;</code>リファレンスの扱いは、PHP5でのアプローチとは全く異なります。これが、PHP7でバグが発生する主な原因であると言えると思います。まずは、PHP5ではリファレンスがどのように機能しているのか見ていきましょう。</p><p>通常のコピーオンライトの原理では、zvalを書き換える前に、zvalを共有している全ての場所の値が変更されないよう、原本とコピーを分ける必要があるとされています。書き換え時にコピーすることで、値渡しのセマンティクスに合わせています。</p><p>しかし、この原理はPHPリファレンスには当てはまりません。値がPHPリファレンスである場合、その値を使う全ての場所に変更を適用させる<em>必要が</em>あります。PHP5では、zvalの一部であった<code>is_ref</code>フラグによって、値がPHPリファレンスであるか、書き換える前に分ける必要があるかを判断します。例えば下記のようになります。</p><p>このデザインの重大な問題は、PHPリファレンスである変数とそうでない変数で値を共有できないことです。下記の例をご覧ください。</p><p>PHPでは、最終的に普通の値よりリファレンスの値を使う方が動きを遅くしてしまいますが、このリファレンスの動きがその原因の1つです。これが問題となる場合の簡単な例は下記の通りです。</p><p><code>count()</code>は値を値渡しとして受け取りますが、<code>$array</code>はPHPリファレンスのため、配列のコピーを全て完了してから<code>count()</code>へ渡されます。<code>$array</code>がリファレンスでなければ、<code>count()</code>と<code>$array</code>は同じ値を共有できます。</p><p>では、PHP7に実装されたリファレンスを見ていきましょう。PHP7ではzvalが個別に割り当てられなくなっているため、PHP5と同じアプローチはできません。その代わり、<code>zend_reference</code>構造を値とする<code>IS_REFERENCE</code>型が追加されています。</p><p>つまり、<code>zend_reference</code>は単に参照カウントされたzvalなのです。リファレンス集合内の変数は、<code>IS_REFERENCE</code>型のzvalとして同じ<code>zend_reference</code>のインスタンスに関数ポインタが指しています。<code>val</code> zvalは他のzvalと同じように振る舞う上に、ポインタ先が複雑な値であっても共有することが可能です。例えば、リファレンスである変数とそうでない変数の間で配列を共有することができます。</p><p>もう一度上記のコードを見てみましょう。今度はPHP7での動きを見ます。簡潔にするために、各変数のzvalを書かずにポインタ先の構造のみを書きます。</p><p>参照渡しでの代入で、新しい<code>zend_reference</code>が作成されました。ちなみに、リファレンスの値は（変数がPHPリファレンス集合の一部のため）refcountが2ですが、値自体は（1つの<code>zend_reference</code>構造のポインタ先であるため）refcountが1です。では、リファレンスである変数とそうでない変数が混在する場合を考えてみましょう。</p><p>PHP5からの重要な変更点は、リファレンスである変数とそうでない変数の全てを同じ配列で共有することが可能であることです。ただし、書き換えを行うと配列は分かれます。つまり、PHP7で、安心して大きな参照配列を<code>count()</code>に渡すことができ、重複することがありません。リファレンスの値が普通の値より動きを遅くしてしまうのは、<code>zend_reference</code>の割り当て（および間接参照）をする必要があり、必ずしもそれが速いエンジンコードのパスで行われていないからです。</p><p>要約すると、PHP7での主な変更点は、zvalが個別にヒープに割り当てられなくなったことと、参照カウントを格納しなくなったことです。代わりに、ポインタ先の文字列や配列、オブジェクトなどの複雑な値が参照カウントを格納しています。さらに、割り当てや間接参照が減り、メモリ消費量の減少につながっています。</p><p>次のパートでは複雑な型についてご説明します。</p>
