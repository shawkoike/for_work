<p><a href="https://blogs.ncl.ac.uk/andreymokhov/an-algebra-of-graphs/" rel="nofollow" title="" class="ext-link">An algebra of graphs</a> （2016-12-05） by <a href="https://twitter.com/andreymokhov" rel="nofollow" title="" class="ext-link">Andrey Mokhov</a></p><p>数学や計算幾科学の分野において、<a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E7%90%86%E8%AB%96" rel="nofollow" title="" class="ext-link">グラフ理論</a>は私のお気に入りのテーマです。この記事では、私が長年研究している<em>グラフ代数</em>についてご紹介します。代数学は私にとって、グラフを扱う上で欠かせないツールになっています。皆さんにも、その便利さが伝われば幸いです。</p><p>私がグラフ代数の研究を始めたきっかけは、CONCUR 09という学会向けに提出した論文です。その論文は不採録でしたが、私はその後も特定用途向けのいくつかの論文を発表し、代数学の知識を深めていきました。その全容が記載された論文は、<a href="http://dl.acm.org/citation.cfm?id=2601432.2627351" rel="nofollow" title="" class="ext-link">ACM TECS</a>でご確認いただけます（査読前の原稿は<a href="https://www.staff.ncl.ac.uk/andrey.mokhov/algebra.pdf" rel="nofollow" title="" class="ext-link">こちら</a>です）。では早速、最もシンプルなグラフ代数の概要と、Haskellでの実装方法を紹介します。</p><p>ここでは、固定領域に存在する頂点を持つ一式のグラフをGと表記します。例として、正整数の頂点を持つグラフについて考えてみましょう。グラフg ∈ Gは、(V, E)のペアで表現されます。Vはグラフに含まれる頂点の集合で、E ⊆ V × Vはグラフの辺集合です。</p><p>最も単純なグラフは<em>空</em>グラフです。この空グラフを数式の中ではεで、Haskellのコード内では<code>empty</code>と表記します。つまり、ε = (∅, ∅)、ε ∈ Gと書きます。</p><p>単一の頂点vが含まれるグラフは、単純にvと表記します。例えば、1 ∈ Gは単一の頂点1を含むグラフで、({1}, ∅)と表します。Haskellでは、任意の頂点をグラフの一つとして扱うために<code>vertex</code>を使用します。</p><p>上記の基本要素から、より大きなグラフを構成するためには、<em>overlay（重ね合わせ）</em>と<em>connect（連結）</em>の二項演算子を使用します。それぞれ+と→の記号で表記します。以下は、2つのグラフのoverlay（+）の定義です。</p><p>(V1, E1) + (V2, E2) = (V1 ∪ V2, E1 ∪ E2)</p><p>つまり、2つのグラフのoverlayは、単純に頂点と辺の和集合になります。同様に、connect（→）の定義は以下のようになります。</p><p>(V1, E1) → (V2, E2) = (V1 ∪ V2, E1 ∪ E2 ∪ V1 × V2)</p><p>overlayと違って、2つのグラフをconnectする場合は、左の変数に含まれる各頂点から右の変数に含まれる各頂点に対して引いた辺を加えます。以下に、いくつか例を示します。</p><p>上記のグラフをHaskellで表現すると、次のようになります。</p><p>では、いくつかグラフを作成してみましょう。connectされていない任意の頂点のリストを含むグラフは、次のように作成できます。</p><p>以下は、任意の頂点のリストから成る<em>クリーク</em>（あらゆる頂点のペアが連結されているグラフ）です。</p><p>例えば、<code>clique [1..]</code>は、すべての正整数を対象とする無限のクリークです。このように全空間を網羅するクリークを<em>完全グラフ</em>と呼びます。さらに、<em>辺のリスト</em>からも次のように任意のグラフを作成できます。</p><p>次のセクションで説明するように、グラフはいくつかの法則を満たし、<a href="https://ja.wikipedia.org/wiki/%E5%8D%8A%E7%92%B0" rel="nofollow" title="" class="ext-link">半環</a>によく似た代数的構造を形成しています。</p><p>先ほど紹介した構造(G, +, →, ε)は、次のようなさまざまな一般法則を満たします。</p><p>グラフ代数が半環と違う点は、以下の<em>分配法則</em>のみです。</p><p>x → y → z = x → y + x → z + y → z</p><p>実際、半環においては、2つの演算子にはそれぞれ異なる単位元があります。ここでは、それらをε+ とε→で表記します。この2つが等価であることを、分配法則を使って証明してみましょう。</p><p>分配法則によって+の冪等性も得られます。</p><p>以下は、グラフ代数を表現するための最小限の公理です。</p><p>読者への練習問題：上記の最小限の公理から、εが+の単位元であることを証明してください。これは簡単な問題ではありません。さらに、+が冪等であることも証明してください。</p><p>なお、有向グラフから無向グラフに切り替えるには、→の交換性の公理を追加するだけです。この内容については<a href="https://blogs.ncl.ac.uk/andreymokhov/graphs-a-la-carte/" rel="nofollow" title="" class="ext-link">別のブログ記事</a>で説明します。</p><p>ここで、前のセクションの公理を満たす<em>Graph</em>型クラスの基本的なインスタンスを2つ取り上げましょう。1つ目は<em>Relation</em>というインスタンスで、これはoverlayとconnectの演算子セットに対する定義を満たします。つまり<em>フリーな</em>（他の法則は一切適用されない）インスタンスです。</p><p>さらに、便宜上+と<em>の演算子を使えるように、</em>Relation<em>を</em>Num*型のクラスのインスタンスにします。</p><p>注：<em>Num</em>の法則<code>abs x * signum x == x</code>が成り立つのは、x → ε = xであるためです。実際、どの<em>Graph</em>インスタンスも、必要に応じて<em>Num</em>インスタンスにできます。では、インタラクティブなGHCを使用してグラフを扱ってみましょう。</p><p>基本的な代数的データ型にグラフのコンストラクタをすべて組み入れると、別のシンプルなインスタンスが得られます。</p><p>生成された<em>Eq</em>インスタンスは代数学の法則に明らかに反するため、ここでは使用できません。例えば、<code>Overlay Empty Empty</code>は構造的に<code>Empty</code>とは異なります。ただし、以下のようにカスタムの<em>Eq</em>を実装することは可能です。</p><p><em>Basic</em>インスタンスの利点は、複雑に連結したグラフをコンパクトに表現できることです。例えば<code>clique [1..n] :: Basic Int</code>の場合、メモリ内のデータ表現は線形サイズになりますが、<code>clique [1..n] :: Relation Int</code>は各辺を別々に保存するため、必要なメモリは<em>O(n<sup>2</sup>)</em>になります。別のブログ記事でも紹介しますが、辺のリストを処理する既存のグラフアルゴリズムに比べて、コンパクトなグラフ表現を利用して生成したアルゴリズムでは、複雑なグラフを漸近的に高速処理することができます。</p><p>この記事で紹介したグラフ代数は非常に便利なので、私は長年にわたりさまざまなプロジェクトに活用してきました。<a href="https://blogs.ncl.ac.uk/andreymokhov/tag/algebra/" rel="nofollow" title="" class="ext-link">後続のブログ記事</a>では、無向グラフや推移閉包グラフ（別名、<em>半順序グラフ、依存性グラフ</em>）、グラフ群、さらにこれらの多様な組み合わせを扱うためのさまざまな代数学を紹介しています。その内容はどれも、複数の公理を拡張することで導かれるものです。</p><p>また、現在開発中の<a href="https://github.com/snowleopard/alga" rel="nofollow" title="" class="ext-link">alga</a>というグラフ代数を実装したHaskellのライブラリを、近日リリース予定です。この記事に載せたコードスニペットの改善案がありましたら、ぜひお聞かせください。</p>
