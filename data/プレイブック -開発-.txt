<p><a href="http://playbook.thoughtbot.com/#developing" rel="nofollow" title="" class="ext-link">Playbook #Developing</a> by <a href="http://thoughtbot.com/" rel="nofollow" title="" class="ext-link">thoughtbot</a></p><p>開発手法の大半は、まずKent Beckの有名な著書『<a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Edition-ebook/dp/B000OZ0N5S/ref=tmm_kin_title_0" rel="nofollow" title="" class="ext-link">Extreme Programming Explained: Embrace Change</a>』（邦訳『XPエクストリーム・プログラミング入門』）、そしてGerald Weinbergの『<a href="http://www.amazon.com/The-Psychology-Computer-Programming-Anniversary/dp/0932633420" rel="nofollow" title="" class="ext-link">The Psychology of Computer Programming</a>』（邦訳『プログラミングの心理学』）で詳細に述べられています。それらを試したところ、多くの手法を開発中に採用することで、作業の品質とチームの幸せを高められることが分かりました。</p><p>私たちは常にソースコード管理を行います。タイムマシンのようなものです。ソースコードが平行宇宙のように存在し、作業内容を失う恐れなく実験できるのです。うまくいかない場合はロールバックします。</p><p><a href="http://git-scm.com/" rel="nofollow" title="" class="ext-link">Git</a>は、Linus Torvaldsによって書かれた、オープンソースのソースコード管理システムです。高速で分岐作業に優れています。</p><p>Gitリポジトリをホスティングするには<a href="https://github.com/" rel="nofollow" title="" class="ext-link">GitHub</a>を使用します。</p><p>私たちは、コードの読みやすさとチームの円滑なコミュニケーションを重視する、一貫した<a href="https://github.com/thoughtbot/guides/tree/master/style" rel="nofollow" title="" class="ext-link">スタイル</a>でコードを書きます。</p><p>上位レベルのガイドライン：</p><p>隣同士に座る2人が、1台のコンピュータを使って書いたコードは<a href="http://www.extremeprogramming.org/rules/pair.html" rel="nofollow" title="" class="ext-link">ペアプログラミングされた</a>コードと言われます。そのようなコードは高品質で、保守性も高いことから低コストにつながると考えられます。</p><p>長い目で見ると、この開発スタイルでは、バグが減り、あとで修正する必要も少ないことから、コストが低減されます。</p><p>ペアプログラミングは有用であり、頻繁に行われるべきだという例を以下に示します。</p><p>作業時間の100%をペアプログラミングするわけではありませんが、離れたところで作業している場合はお互いにチームとして働くことに難しさを感じます。設計者同士、開発者同士、または設計者と開発者間での円滑なコラボレーションを生み出すのに、同じキーボードに向かうことほどよいものはありません。</p><p><a href="http://www.extremeprogramming.org/rules/testfirst.html" rel="nofollow" title="" class="ext-link">テスト駆動開発（TDD）</a>は、私たちが実践するエクストリーム・プログラミング（XP）の中で、恐らく最も重要なルールです。</p><p>ビジネスにおけるTDDの効果：</p><p>コードにおけるTDDの効果：</p><p>プロセスにおけるTDDの効果：</p><p>非常にシンプルな上位レベルのテスト：</p><p>より詳細を知りたい場合は、Upcaseが月1回開催する<a href="https://upcase.com/test-driven-rails?__hstc=28062627.f8ba0a2be9b82c0e703be3fcb331f332.1413546449376.1413895527551.1413936032216.4&amp;__hssc=28062627.2.1413936032216&amp;__hsfp=1740436698" rel="nofollow" title="" class="ext-link">Test-Driven Rails</a>のワークショップをお勧めします。特にRuby on Railsの開発者向けにTDDのワークフローについてかなり詳細に説明しています。</p><p>受け入れテストはユーザの要求から作られるコードです。<a href="https://gist.github.com/croaky/d8699363382d86c10c54" rel="nofollow" title="" class="ext-link">このような感じです</a>。このコードはアプリケーションに対して実行されます。最初に実行されたとき、テストは失敗するでしょう。開発者はテストに合格するまでアプリケーションのコードを書きます。</p><p>テストに合格すると、開発者はそのコードをバージョン管理システムへ以下のようなメッセージを添えてコミットします。</p><p>次にコードは受け入れテストが本番環境と一致するような環境でも合格するか確かめるために<a href="http://playbook.thoughtbot.com/#continuous-integration" rel="nofollow" title="" class="ext-link">継続的インテグレーション（CI）</a>サーバ上で実行されます。</p><p>それと同時にコードはステージング環境へプッシュされ、開発者と顧客はブラウザでスモークテストを実行します。</p><p>受け入れテストがCIサーバにおいてグリーンで、あなたや他の設計者・開発者・クライアントがステージングでユーザの要求を満たしていると満足すれば、その機能は自由に本番環境へデプロイできます。これにより様々な機能が本番環境へ極めて頻繁にプッシュできるので、より多くの価値が顧客へより早く供給されます。</p><p>“レッド、グリーン、リファクタリング”の3番目のステップはリファクタリングであり、外的な振る舞いを変えることなく既存コードの設計を改善するプロセスです。これは開発プロセスにおいて重要なステップですが、しばしば見落とされます。私たちはリファクタリングについてとても熱心なので、それについて『<a href="https://upcase.com/ruby-science?__hstc=28062627.f8ba0a2be9b82c0e703be3fcb331f332.1413546449376.1413895527551.1413936032216.4&amp;__hssc=28062627.2.1413936032216&amp;__hsfp=1740436698" rel="nofollow" title="" class="ext-link">Ruby Science</a>』全体で書きました。</p><p>以下はコードレビューの流れです。Gitコマンドについては<a href="https://github.com/thoughtbot/guides/tree/master/protocol" rel="nofollow" title="" class="ext-link">Gitプロトコル</a>を参照してください。</p><p>テスト駆動開発は開発過程の初期においてコードの不具合を修正します。本番環境より開発マシン上で不合格のテストを生じさせる方が好ましいです。またフィードバック周期をより短くすることもできます。</p><p>コードがマスターとなる直前でのコードレビューは同様の恩恵をもたらします。</p><p>継続的インテグレーション（CI）については、Martin Fowlerが<a href="http://martinfowler.com/articles/continuousIntegration.html" rel="nofollow" title="" class="ext-link">詳しい解説</a>を行っています。基本となるのは以下の点です。</p><p>これは、テスト合格が開発者のマシン特有の環境に依存していないということを確実にするのに役立ちます。バージョン管理を行っているコードは、のちに本番環境で正しく動作する必要があるので、本番環境へのデプロイを行う前にCIサーバまたはサービス上で動かすのです。</p><p>ビルドが失敗したときにはSlackにアラートが通知され、メールも届きます。アラートをクリックしてバックトレースを見ると、”ビルド修正”のヒントを得ることができます。</p><p>修正コードを書いてバージョン管理システムに再びコミットすると、”成功ビルド”のアラートがSlackに通知され、メールも届きます。アラートをクリックすると、そのビルドを確認できます。</p><p>グリーンは成功を表します。</p><p>信頼性のあるテストスイートはWebアプリケーションの絶対的な要件であると、私たちは考えています。しかし、テストスイートには、サイズが大きくなると時間がかかるという大きな問題があります。</p><p>CIは、テストを同時に動かすことで、この問題に対処できます。私たちはこの技術を使って、45分のテストスイートを2分に短縮しています。</p><p>私たちは管理ツールとして、CruiseControl、Integrity、Hudson（現在はJenkinsと呼ばれています）などのCIライブラリを使用してきました。その結果、コストの高い作業に多くの時間をかけられるようになりました。</p><p>私たちは、オープンソースプロジェクトには<a href="http://travis-ci.org/" rel="nofollow" title="" class="ext-link">Travis CI Free</a>、プライベートリポジトリには<a href="https://www.travis-ci.com/" rel="nofollow" title="" class="ext-link">Travis CI Pro</a>を使っています。なぜなら、ユーザインターフェイスが一貫しており、設定がシンプルで、GitHubと緊密に連携しているからです。</p><p>CIのテストは<a href="https://help.github.com/articles/post-receive-hooks" rel="nofollow" title="" class="ext-link">GitHubのpost-receiveフック</a>によって実行されます。私たちがGitHubリポジトリの多くで設定しているフックは、以下のとおりです。</p>
