The Most Expensive Anti-Pattern （2015-7-22） by Igor Null本記事では、私の知る最も割高なアンチパターンとなるプログラミングについて述べます。それは、構造化されたデータフォーマットを文字列関数を使って操作することです。以後これを”printfアンチパターン“と称します。私がこれを”最も割高な”アンチパターンと呼ぶのは、根拠のない主張ではありません。cve.miter.orgのデータを使って脆弱性をタイプ別にカウントし、下記のように、上位を占める脆弱性のタイプ別リストを作りました。私の方法に対する批判や良いご提案があれば遠慮なくどうぞ。上位を見ると、XSSとSQLインジェクションの数が大きく目立っています。私が言いたいのは、「ほとんどのXSSとSQLインジェクションはprintfアンチパターンが引き起こしている」ということです。HTMLへ手当たりしだいに文字列を入れ込もうというのは、ひどい発想です。SQLについても同様です。printfアンチパターンの定義が分かると、それが偏在していることであると気付くでしょう。このアンチパターンはHTMLとSQLにおいて極めてありふれており、これがSQLインジェクションやXSS脆弱性が非常に多い理由です。以下にいくつか例を挙げます。

それでは、文字列関数を使ってHTMLを生成している場合、代わりにどうすればいいのでしょうか？提案された解決策の全てに共通のテーマがあることが分かるでしょう。基となるデータ構造を操作し、シリアライズするのです。シリアライズされたデータ構造を文字列として変更するのは無駄なことです。以下はjQueryの例です。なぜこうなったのでしょうか。
人々が怠惰なせいで起こったのだと私は疑っています。そういうわけで、文字列の連結を用いてHTMLを生成してしまっているのです。もちろん、本当に細心の注意を払っていれば、インジェクションが問題になることはなく有効なHTMLやSQLを生成できます。しかし、Webサイトを作成する際に、手動のメモリ管理やポインタ演算は使いませんよね？安全にプログラミングできるなら、あえて危険な方法を取る必要はありません。もちろん、この話にも面白い部分があります。ブラウザです。多くのWebサイトが無効なHTMLをブラウザに表示させようとしたため、ブラウザベンダは正しくないHTMLにもパーサを適合させる必要がありました。人々は、自分のお気に入りのWebサイトが表示されるように、ほぼ任意のバイトの塊をHTMLとして処理できるブラウザを選びました。Webサイトは、ユーザのリクエストをそのまま直接HTMLに含めてしまうことが多いので、ブラウザベンダはXSSフィルタを実装する必要がありました。XSSフィルタを用いる根拠は簡単です。ブラウザベンダが、ユーザに対するXSS攻撃の90％を防げるなら、ユーザはうれしいですよね。しかしXSSフィルタは、すべてのXSS攻撃を単純に防ぐことはできません。これら2つの例では、ブラウザが問題から引き起こされる症状を扱っていますが、問題そのものに対処していないのです。問題は、文字列を操作して動的なHTMLを生成することが合理的だと思うプログラマの考え方にあります。かなり初期段階からHTMLが文字列として操作されるようになったため、HTMLは、構造化されたデータフォーマットとして、ひどい状態です。このように、HTMLフォーマットを誤った方法で扱うことで、多くの問題が発生しています（XSSや無効なHTML、ブラウザのパーサの違いだけでなく、他の問題も含まれます）。おそらく、あくまで推測ですが、利用できるツールがHTMLを文字列として生成するように促さなければ、Webの世界はもっとマシな環境だったでしょう。おそらく、あくまで推測ですが、Webのドキュメントについて、異なるシリアライズのフォーマットを選んでいたら、HTMLをprintfで書ける文字列として扱うことはなかったでしょう。また、もしプログラマが、文字列関数を使って構造化されたデータフォーマットを構築することを許容しなければ、脆弱性は確実に減らせていたでしょう。
