Aha! Moments When Learning Git (2010-03-10) by Kalid AzadGitは速く柔軟性がありますが、理解に時間のかかる分散型バージョン管理システムです。Gitを始める前に次を理解しておきましょう。本や学習書、指南書はGitを理解するのに役に立ちました。しかし、その他にもGitの理解に至ったきっかけがありますのでご紹介します。Gitにはステージング・エリアがあります。繰り返しますが、ステージング・エリアがあるのです。これには混乱しました。リポジトリ（「オブジェクトデータベース」）とステージング・エリア（「インデックス」と呼ばれる）の両方がGitにはあります。チェックインには2段階あります。なぜステージなのでしょう？　Gitには柔軟性があります。例えばa、b、cが変更された場合、個別にコミットすることもできれば、同時にコミットすることができます。取り消し方法も2つあります。追加してコミットする、追加してコミットする。Gitにはリズムがあります。ブランチはSaveAsメソッドのようにディレクトリに保存します。しかも、次のような利点があります。なぜブランチなのでしょう？　通常のファイル保存の際に使用するSaveAsメソッドを考えてみてください。オリジナルファイルは安全な場所に保管しておいて、試行錯誤をするものです。Gitでもこれを可能にするだけでなく、オリジナルとの統合を可能にしてくれています（実際、svnは1回しかバックアップを取らない1つの共有ドライブのようなものです）。私はブランチを.gitフォルダの中にある「仮想ディレクトリ」として見ています。物理的なディレクトリ（c:\projectまたは~/project）においては、仮想ディレクトリ間をチェックアウトで行き来します。私は、「devディレクトリに変更（チェックアウト）、変更して、変更を保存（追加・コミット）、masterディレクトリに変更、devへの変更をコピー（統合）」と覚えています。物理的なディレクトリはメモ帳です。仮想ディレクトリはgitコマンドの入力で動きます。現在のディレクトリを確認する時のように、現在のブランチをプロンプトに表示してください。
私の.bash_profileは次のとおりになっています。Gitでは好きなようにブランチを構築することができます。Nvie.comでは、素晴らしいブランチングモデルを紹介しています(訳注 : 日本語訳の記事があります)。ブランチのレイアウトは整理整頓しておきましょう。私の場合、masterでsvnプロジェクトを管理し、devでコードを管理しています。私は通常、masterをクリーンな状態にしておくので、必要になった場合、いつでも修正ブランチを作成することができます。Gitにはローカル操作とリモート操作があります。私も初めは混乱しました（git checkoutとgit pullの使い方など）。基本的にローカルで作業して、リモートでの作業は必要に応じて行えばいいのです。なぜローカルとリモートなのでしょう？　未完成の作業をコミットしないように、Subversionのチェックインは集中管理されています。Gitでは、頻繁にローカルコミットを実行し、プッシュは準備が整った場合のみ実行します。Gitではコンテンツをハッシュ値（GUIDで管理します。2つのブランチが同じ場合は、同じGUIDを持ちます（異なるブランチの場合、GUIDも当然異なります）。なぜこれが素晴らしいのでしょう？　独立したブランチを複数作成し、それらを統合しても、共通のGUIDを持つことができます。集中的な番号管理は必要ありません。大抵の場合、最初の数桁を見ます。例えば、「a93」で始まっているかなど。次を.gitconfigに利用してみてください。Git用のGUIツールは存在しますが、私はツールを使わず、コマンドを覚えながら学ぶ方が好きです。Gitは、自己主張のあるソフトウェアです（私の気に入っているポイントです）。ロジックがgitの世界観を分かりやすくしてくれていると思います。他にも記事をGuidesやProgrammingに投稿しています。この記事はgitやversion controlにタグしています。
