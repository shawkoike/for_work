<p><a href="https://www.trustwave.com/Resources/SpiderLabs-Blog/How-I-Cracked-a-Keylogger-and-Ended-Up-in-Someone-s-Inbox/" rel="nofollow" title="" class="ext-link">How I Cracked a Keylogger and Ended Up in Someone's Inbox</a> （2016-07-01） by <a href="https://twitter.com/drole" rel="nofollow" title="" class="ext-link">Rodel Mendrez</a></p><p><small>(訳注：2016/9/28、頂きましたフィードバックを元に記事を修正いたしました。)</small></p><p>ことの始まりは、あるスパムキャンペーンでした。画像1は、スパム向けに仕掛けた罠に最近引っかかった、疑わしいドキュメントファイルが添付されたメールです。文面の英語がとても稚拙なことに気付くかと思いますが、この稚拙さがメール受信者への警告サインとなります。</p><p><img alt="Spam Samples" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b8d1fe7391970c image-full img-responsive" src="https://a1.typepad.com/6a01676411d5a7970b01b8d1fe7391970c-800wi" title="Spam Samples"><br>
画像1：スパムサンプル</p><p>添付のファイルは、”.doc”のファイル拡張子を使っていますが、実際はRTF（リッチテキストファイル）ファイル形式で、特別に細工されたRTFファイルによるスタックオーバーフローの脆弱性が含まれています。この脆弱性は、CVE-2010-3333で文書化されており、”pFragments”の形をしたプロパティを扱う際にMicrosoft Word RFTパーサを攻撃するものです。これに対する修正モジュールは5年以上前にパッチされています。</p><p><img alt="RtfExploit" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181eec970d image-full img-responsive" src="https://a4.typepad.com/6a01676411d5a7970b01bb09181eec970d-800wi" title="RtfExploit"><br>
画像2：特別に細工されたRTFファイルにある難読化されたシェルコード</p><p>画像2を見てお分かりの通り、アンチウィルスソフトに検出されないよう、脆弱性やシェルコードが難読化されています。この脆弱性を抜き出し、きれいにしてから解読すると、シェルコードは<em>volafile[.]io</em>ドメインからファイルをダウンロードして実行することが分かりました。</p><p><img alt="Shellcode" border="0" class="asset  asset-image at-xid-6a0133f264aa62970b01b8d2020678970c image-full img-responsive" src="https://a1.typepad.com/6a0133f264aa62970b01b8d2020678970c-800wi" title="Shellcode"><br>
画像3：シェルコードの16進ダンプ</p><p><strong>ペイロード</strong></p><p><img alt="Malware_icon" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b8d1fe73f6970c img-responsive" src="https://a6.typepad.com/6a01676411d5a7970b01b8d1fe73f6970c-800wi" title="Malware_icon"><br>
画像4：ダウンロードされた実行ファイル</p><p>ダウンロードされたファイルは、Microsoft .NET Win32の実行ファイルです。ファイルの16進ダンプのプレビューをざっと見たところ、面白いことに、私はHawkEyeのキーロガービルドに取り組もうとしていることが分かりました。</p><p><img alt="HawkEyeHexDump" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b7c874ad67970b image-full img-responsive" src="https://a7.typepad.com/6a01676411d5a7970b01b7c874ad67970b-800wi" title="HawkEyeHexDump"><br>
画像5：マルウェアのボディにある、HawKEyeのキーロガーストリング</p><p>また、ちょっとした検索で、このキーロガーを開発しているWebサイトを文字列が指し示してくれました。Webサイトでは、全ての”素晴らしい機能”をリストアップしています。</p><p><img alt="HawkEyeFeaturesList" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b7c874ad74970b image-full img-responsive" src="https://a4.typepad.com/6a01676411d5a7970b01b7c874ad74970b-800wi" title="HawkEyeFeaturesList"><br>
画像6：HawkEyeのキーロガーの機能</p><p>簡単に動的プログラム分析をしたところ、キーロガーは、キーロガー自身のコピーをアプリケーションデータ（%appdata%）フォルダに落とし、<em>WindowsUpdate.exe</em>というファイル名を使っていることが分かりました。これは、再起動した後でもWindowsシステム内で持続的になるように、自動実行のレジストリをセットするためです。</p><p><img alt="AddToStartupsrcCode1" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b8d1fe743d970c image-full img-responsive" src="https://a5.typepad.com/6a01676411d5a7970b01b8d1fe743d970c-800wi" title="AddToStartupsrcCode1"><br>
画像7：キーロガーのインストール動作</p><p>また、感染したシステムに以下のファイルも落としていました。</p><p>その後、キーロガーのプロセスからネットワークアクティビティを観察し、checkip.dyndns.comから感染したシステムの外部IPアドレスの入手を試みました。この正規のWebサイトは、感染したシステムのIPアドレスを確認することを目的に、マルウェアによって一般的に使用されています。</p><p><img alt="CheckIP" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181f39970d image-full img-responsive" src="https://a1.typepad.com/6a01676411d5a7970b01bb09181f39970d-800wi" title="CheckIP"><br>
画像8：感染したマシンのIPアドレスのパケットキャプチャ</p><p>少ししてから、SMTPのネットワークアクティビティが、感染したシステムのシステム情報を攻撃者のメールアドレスに送信したことを確認しました。</p><p><img alt="EmailSystemInformation_" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b7c874adca970b image-full img-responsive" src="https://a2.typepad.com/6a01676411d5a7970b01b7c874adca970b-800wi" title="EmailSystemInformation_"><br>
画像9：キーロガーによって、攻撃者のメールアドレス送信されたシステム情報を含むメール。</p><p>含まれるシステム情報は以下のようなものです。</p><p>前述したとおり、キーロガーはMicrosoft .NETでコンパイルされていました。そこで私が次に行ったのは、実行ファイルのデコンパイルです。この作業には、オープンソースで公開されている<a href="https://github.com/icsharpcode/ILSpy" rel="nofollow" title="" class="ext-link">ILSpy</a>と呼ばれる.NETのデコンパイラを使いました。</p><p><img alt="IlSpy" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b8d1fe7489970c image-full img-responsive" src="https://a1.typepad.com/6a01676411d5a7970b01b8d1fe7489970c-800wi" title="IlSpy"><br>
画像10：デコンパイルしたHawkEyeのキーロガーのソースコード</p><p>デコンパイルされたソースコードを詳しく調べ、”素晴らしい機能”とそれを比較してみると、その要求は100%正当なものであることが確認できました。コードには以下のような機能がありました。</p><p>キーロギング</p><p><img alt="KeyloggingSrcCode1" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181f8a970d image-full img-responsive" src="https://a2.typepad.com/6a01676411d5a7970b01bb09181f8a970d-800wi" title="KeyloggingSrcCode1"><br>
画像11：キーロギングのルーチン</p><p>クリップボードを盗む/ロギング</p><p><img alt="ClipboardSrcCode" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181f99970d img-responsive" src="https://a1.typepad.com/6a01676411d5a7970b01bb09181f99970d-800wi" title="ClipboardSrcCode"><br>
画像12：クリップボードロギングのルーチン</p><p>ブラウザ、FTP、そしてメールクライアントのパスワードを盗むのです。また、パスワードマネージャの認証情報やWindowsキーも盗もうとします。</p><p><img alt="BrowserStealer" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181fa2970d image-full img-responsive" src="https://a2.typepad.com/6a01676411d5a7970b01bb09181fa2970d-800wi" title="BrowserStealer"><br>
画像13</p><p>ワームに似たUSBの感染ルーチンは、キーロガーを他のWindowsマシンに拡散することができます。</p><p><img alt="USBSrceCode" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181fad970d image-full img-responsive" src="https://a5.typepad.com/6a01676411d5a7970b01bb09181fad970d-800wi" title="USBSrceCode"><br>
画像14：USBの感染ルーチン</p><p>また、オンラインゲームのプラットフォームであるSteamを利用するユーザがターゲットになることもあります。コンフィギュレーションデータやログインデータを削除することで、ユーザに再ログインを強制します。そうすることで、ユーザが使用するSteamの認証情報をキーロガーが盗めるようにするのです。</p><p><img alt="SteamClear" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181fbc970d image-full img-responsive" src="https://a4.typepad.com/6a01676411d5a7970b01bb09181fbc970d-800wi" title="SteamClear"><br>
画像15：Steamの削除ルーチン</p><p>デスクトップのスクリーンショットを含む盗まれた情報は、キーロガーの設定に従い、攻撃者のメールアドレスまたはFTPサーバに送られます。</p><p><img alt="SendEmail" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181fc5970d image-full img-responsive" src="https://a5.typepad.com/6a01676411d5a7970b01bb09181fc5970d-800wi" title="SendEmail"><br>
画像16：メールの送信ルーチン<br>
<!--  --><br>
攻撃者はキーロガーを設定し、HTTPトンネルを介してPHPホストに盗んだ情報をアップロードすることもあるようですが、コードは無効化されているようです。</p><p><img alt="UploadPHPSourceCode" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181fca970d image-full img-responsive" src="https://a2.typepad.com/6a01676411d5a7970b01bb09181fca970d-800wi" title="UploadPHPSourceCode"><br>
画像17</p><p>しかしながら、デコンパイルしたプログラムの中で私が発見した最も興味深い点は、<strong>Form1()</strong>と名付けられたC#のコンストラクタです。ここにキーロガーのコンフィギュレーションが保存されています。しかし、攻撃者のメールやFTPの認証情報がばれないように、これらのデータは、RijndaelアルゴリズムとBase64を使って暗号化されていました。</p><p><img alt="Form1SrcCode" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b8d1fe74ab970c image-full img-responsive" src="https://a3.typepad.com/6a01676411d5a7970b01b8d1fe74ab970c-800wi" title="Form1SrcCode"><br>
画像18：キーロガーのコンフィギュレーション</p><p>恐らくご存じかもしれませんが、これらの暗号化されたデータは、常に保護されているとは限りません。特に暗号化ルーチンがデコンパイルされたソースコードであれば尚更です！</p><p><img alt="DecryptData1" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b8d1fe74c1970c image-full img-responsive" src="https://a1.typepad.com/6a01676411d5a7970b01b8d1fe74c1970c-800wi" title="DecryptData1"><br>
画像19：キーロガーはDecryptメソッドを呼び出します</p><p>以下の画像は、<em>encryptedBytes</em>と<em>secretKey</em>の2つのパラメータを受け取る”Decrypt”メソッドです。秘密鍵は、ハードコードされた文字列、<em>HawkSpySoftwares</em>です。</p><p><img alt="DecryptSrcCode" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb09181fed970d image-full img-responsive" src="https://a5.typepad.com/6a01676411d5a7970b01bb09181fed970d-800wi" title="DecryptSrcCode"><br>
画像20：暗号化ルーチン</p><p>記述したとおり、キーロガーはRijndaelアルゴリズムを使用しており、秘密鍵はUnicode文字列、”099u787978786″でソルトされています。こちらもハードコードされていました。</p><p><img alt="GetAlgorithmSrcCode" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01bb0918200a970d image-full img-responsive" src="https://a2.typepad.com/6a01676411d5a7970b01bb0918200a970d-800wi" title="GetAlgorithmSrcCode"><br>
画像21：Rijndaelアルゴリズムを使ったキーロガー</p><p>ちょっと気になったので、復号部のコードをコピーし、適切に修正した後、MS Visual Studioでコンパイルしてみました。もちろん、復号は成功しました（すみません、認証情報はぼかさざるを得ませんでした :)）。</p><p><img alt="KeylogConfigCompiled1" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b8d1fe7519970c image-full img-responsive" src="https://a1.typepad.com/6a01676411d5a7970b01b8d1fe7519970c-800wi" title="KeylogConfigCompiled1"><br>
画像22：復号されたメールとFTPの認証情報</p><p>どうやらメールアカウントは感染したシステム上にあるようです。この受信トレイに送信されたメールは、自動的に攻撃者のGmailアカウントにリルートされています。</p><p><img alt="ForwardedEmailAccount_O" border="0" class="asset  asset-image at-xid-6a01676411d5a7970b01b7c874aea5970b img-responsive" src="https://a5.typepad.com/6a01676411d5a7970b01b7c874aea5970b-800wi" title="ForwardedEmailAccount_O"><br>
画像23：メールは、攻撃者が保持するメールアドレスにリルートされます</p><p><strong>まとめ</strong></p><p>恐らく攻撃者は、HawkEyeのキーロガーを簡単にクラックできることを知っているのでしょう。そして、自分のメールの認証情報を保護するために、最初のメール受信者として、感染したメールアカウントを乗っ取り、最終的にメールを自分のメールアドレスに転送するのです。</p><p>私たちは、感染したメールアカウントの所有者に被害を報告しました。彼らにパスワードを変更してもらい、メッセージのリルート設定から攻撃者のメールアドレスを削除してもらうためです。</p><p>この記事を投稿してから、よく似たRTF形式が添付されたスパムメッセージを受け取ったのですが、これにはCVE-2012-0158の脆弱性が含まれていました。ペイロードは同じキーロガーでしたが、異なるメールの認証情報が使われていました。</p><p>これらの攻撃に使用された2つの脆弱性は古いものですが、いまだにメール攻撃にはよく使われています。例によって、サイバー犯罪者が使用するこれらの古い脆弱性から保護するためにも、最新のパッチでシステムを更新しておくことをお勧めします。<br>
Trustwave Secure Email GatewayのAMAX（高度なMalware and Exploit Detection）は、メールのゲートウェイ内でこれらの添付されたRTFの脆弱性を検出しています。</p>
