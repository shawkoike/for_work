<p><a href="http://blog.mitemitreski.com/2014/12/how-to-not-hate-java-script-tips-from.html#.VJuvmsAgHk" rel="nofollow" title="" class="ext-link">How to Not Hate JavaScript: Tips from the Frontline</a> （2014-11-26） by <a href="http://blog.mitemitreski.com" rel="nofollow" title="" class="ext-link">Mite Mitreski</a></p><p><em>この記事のオリジナルは <a href="https://www.voxxed.com/blog/2014/11/how-to-not-hate-java-script-tips-from-the-frontline/" rel="nofollow" title="" class="ext-link">voxxed</a>に投稿されたものです。</em></p><p>JavaScript関連の問題を抱えるチームをサポートする仕事を通じて、いくつか共通の問題点があることに気づきました。もしあなたもJavaScriptに対するイライラを感じているのであれば、この記事は何らかの助けになるかもしれません。おことわり：私がお教えするヒントはすでにご存知のものもあるとは思いますが、うまくいけば、多少なりとも有用な情報があるかもしれません。特にエンタープライズアプリケーションやCMSソリューションを構築する際に有効なヒントです。チームの誰もが話したがらないCMSのコードについてお話しします。いずれも必要に応じて採用できるものです。</p><p>大半のブラウザでサポートされているにもかかわらず、JavaScriptを書く際に最も活用しきれていない機能の1つです。debuggerステートメントは、ECMAScript第1版から標準化されているため、かなり前から存在していることになります。</p><p>基本的にはブレークポイントを追加するという単純な方法です。ループ文を使った要素リストを実行する場合を見てみましょう。</p><p><img src="http://1.bp.blogspot.com/-F0KU_JodO3U/VL7wC_wubTI/AAAAAAAAIWs/arOu9k24Bj4/s1600/Screen-Shot-2014-11-26-at-17.08.56.png"></p><p>ループ内にdebuggerステートメントを追加すると、処理を繰り返すたびにブレークポイントで止まります。</p><p><img src="http://3.bp.blogspot.com/-vPosBe31Ks8/VL7wOUdQScI/AAAAAAAAIW0/P-Iy4Szhti8/s1600/Screen-Shot-2014-11-26-at-17.10.59.png"></p><p>コードを実行すると、ブレークポイントを追加した場所でトリガが発生します。debuggerハンドラがない場合、例えばデベロッパーツールが搭載されていないほとんどのブラウザでは、このステートメントは効力を発揮しません。</p><p>デベロッパーツール側では手動でブレークポイントを配置したものと認識されます。</p><p><img src="http://2.bp.blogspot.com/-aR9hO1ddQWw/VL7wWMjXWcI/AAAAAAAAIW8/c0n8ybp2szg/s1600/Screen-Shot-2014-11-26-at-17.11.37.png"></p><p>当然、本番用のコードに残しておきたいものではありません。ただ、これは開発中においては非常に便利な機能です。私にとっては人生が変わるほどの、特にコールバックが頻繁に行われるベンダーのJavaScriptコードを扱う際には役立つ機能です。</p><p>開発者のほとんどがデバッグの目的でconsole.logを使用します。しかし<a href="https://developer.mozilla.org/en-US/docs/Web/API/Console.warn" rel="nofollow" title="" class="ext-link">console.warn</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Console.error" rel="nofollow" title="" class="ext-link">console.error</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Console.info" rel="nofollow" title="" class="ext-link">console.info</a>についてはご存知でしたか？　</p><p><img src="http://3.bp.blogspot.com/-7XvH3WGSrmk/VL7wcTmTmSI/AAAAAAAAIXE/h7F69ognCUg/s1600/Screen-Shot-2014-11-26-at-17.13.23.png"></p><p>いずれも以下のようなC言語で使われるような出力<a href="https://developer.chrome.com/devtools/docs/console-api#consolelogobject-object" rel="nofollow" title="" class="ext-link">フォーマット</a>をサポートします。</p><p>JavaScriptには<a href="https://www.google.com/search?q=javasciprt+logging+framewors&amp;oq=javasciprt+logging+framewors&amp;aqs=chrome..69i57j0.5145j0j7&amp;client=ubuntu-browser&amp;sourceid=chrome&amp;es_sm=93&amp;ie=UTF-8#q=javascript+logging+frameworks&amp;spell=1" rel="nofollow" title="" class="ext-link">ロギング</a>フレームワークも多くあります。適切なロギングは、ほとんどのプログラミング言語において重要であり、JavaScriptにおいても例外ではありません。全てのロギング機能が標準化されているわけではなく、フォールバックが必要となるブラウザもあることに注意してください。<a href="http://dailyjs.com/2012/02/02/console/" rel="nofollow" title="" class="ext-link">こちら</a>に現実問題としてのロギングに関する詳細記事がありますので、参考までにご覧ください。</p><p>私たちは、さまざまなサービスからデータをロードしますが、特にそのデータがオブジェクトのリストであるような場合は、コンソール上でより見やすく表示できたらと思います。例えば、<a href="http://openbeerdatabase.com/" rel="nofollow" title="" class="ext-link">openbeerdatabase.com</a>からビールのリストをロードする場合を見てみます（この素晴らしいデータは実在します）。 <a href="http://openbeerdatabase.com/documentation/beers-get" rel="nofollow" title="" class="ext-link">http://openbeerdatabase.com/documentation/beers-get</a>にあるHTTP GET/beersをコールして、オブジェクトのリストを受け取ります。リストを受け取った後は、console.logを使って出力するだけです。</p><p><img src="http://4.bp.blogspot.com/-zeD8_Prv45M/VL7wj1F4qLI/AAAAAAAAIXM/aElgCcJaMlc/s1600/Screen-Shot-2014-11-26-at-17.14.35.png"></p><p>コンソール内で結果のリストをうまく閲覧するのは困難です。データが示すものを明確に把握しづらいのです。データ全体を見るのも面倒です。JavaScriptオブジェクトであるどんな大きさのリストについても同じことが言えます。</p><p>console.logをconsole.tableに置き換えて再度コールすると以下の通りに出力されます。</p><p><img src="http://1.bp.blogspot.com/-gMvzao17H0U/VL7wtQh1CPI/AAAAAAAAIXU/wxF0RhnJ_g4/s1600/Screen-Shot-2014-11-26-at-17.15.31.png"></p><p>ご覧の通り、結果はテーブルで出力され、オブジェクトの属性でソートすることができます。一覧するのも楽になります。例えば、次の方法で2つの配列を、視覚化して簡単に比較することができます。</p><p>さらに多くの配列が含まれている場合でも、この方法を使えば見やすい結果が出力されます。</p><p><img src="http://2.bp.blogspot.com/-NlQ6MVJd3Ao/VL7wzTs66mI/AAAAAAAAIXc/GXfiTkA5lmw/s1600/Screen-Shot-2014-11-26-at-17.16.40.png"></p><p>コールトレース、つまり”誰が私の関数を呼び出しているか”を知りたい場合があります。コールとレースは私たちがなにか失敗した時に見られるものですが、console.traceを使用すれば、失敗した時だけでなく、成功した時にもコールトレースを確認することができます。</p><p><img src="http://3.bp.blogspot.com/-yoiK9gy9LvA/VL7xbFElJJI/AAAAAAAAIXk/ZcPlOY4oFsM/s1600/Screen-Shot-2014-11-26-at-17.17.27.png"></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Console.trace" rel="nofollow" title="" class="ext-link">console.trace</a>は非標準の関数であり、本番のコードに残すものではないことに注意してください。そうは言っても、主要なデスクトップブラウザではサポートされています。<br>
非同期コールを実行するTraceConsole.traceは通常の関数呼び出しでは正常に機能します。ほとんどのデベロッパーツールでは、ブレークポイントで停止したときに同様のコールトレースを取得します。関数呼び出しが非同期（コールバック）の場合は、クロージャ（コールバック関数）のスコープが限られるため、この情報は取得できません。幸い、Chromeのデベロッパーツールの新バージョンにはAsyncのチェックボックスがあります。関数呼び出しの情報は、以前は次のように一部しか確認できませんでしたが…</p><p><img src="http://4.bp.blogspot.com/-tY7w9H5XKZY/VL7xbbwjUaI/AAAAAAAAIXs/ZIYYQGBG26g/s1600/Screen-Shot-2014-11-26-at-17.18.12.png"></p><p>新バージョンでは、呼び出し元とコールバック全てを含むコールトレースになりました。</p><p><img src="http://2.bp.blogspot.com/-wH3kbzLZ3mQ/VL7xbJ_RrvI/AAAAAAAAIXo/98qldvuu25Y/s1600/Screen-Shot-2014-11-26-at-17.18.59.png"></p><p>個人的な意見としては、今日のような非同期処理が溢れた世界の中では、最も重要な機能だと言えます。非同期コールトレースがどのように機能するかについては<a href="http://www.html5rocks.com/en/tutorials/developertools/async-call-stack/" rel="nofollow" title="" class="ext-link">こちら</a>のHTML5rocksの記事をお薦めします。</p><p>オブジェクトのプロパティの一部が変更されることがありますが、私たちにはその原因が分かりません。このような場合Object.observeが役に立ちます。personオブジェクトに対する全ての変更を確認する場合を見てみましょう。</p><p><img src="http://4.bp.blogspot.com/-DFcvDoage60/VL7xb74_3MI/AAAAAAAAIX0/HLOrRHjuoPo/s1600/Screen-Shot-2014-11-26-at-17.19.45.png"></p><p>console.traceと併用すると、コールトレースも確認できるのです。素晴らしいですよね？　</p><p>いや、それほどでもありません。これを書いている今現在、Chromeのみがこの機能をサポートしており、非標準機能です。幸い<a href="http://wiki.ecmascript.org/doku.php?id=harmony:observe" rel="nofollow" title="" class="ext-link">EMCAScript第7版</a>の一部として提供はされています。Geckoベースのブラウザには、よく似た実装として<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch" rel="nofollow" title="" class="ext-link">object.watch</a>があります。ここでもまた、デバッグに関して言えば、取得できるものは何でも有用であると考えてください。Objects.observeの第一の用途はデバッグではありませんが、素晴らしい効用があるのです。</p><p>複雑なアプリケーションでは、HTML要素がどのように変更、移動、追加され、属性が修正されたのか分からなくなってしてしまうことがあります。そうした変更を検知する方法の1つに、今はもう非推奨となった<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events" rel="nofollow" title="" class="ext-link">Mutation Event</a>リスナを使う方法があります。変更を検知するAPIは理想からほど遠い上に、他にもいろいろと欠陥があります。<a href="http://caniuse.com/#feat=mutationobserver" rel="nofollow" title="" class="ext-link">新しい</a>バージョンのブラウザには<a href="https://developer.mozilla.org/en/docs/Web/API/MutationObserver" rel="nofollow" title="" class="ext-link">MutationObserver</a>と呼ばれるオブジェクトがあり、これによってDOM要素の監視が可能になります。</p><p>ドキュメント全体で発生した全ての変更をリストアップしたい場合を考えてみましょう。この場合、ドキュメントは選択されたどのDOM要素にも当てはまります。</p><p><img src="http://3.bp.blogspot.com/-QZ-ab1gbUbg/VL7xcKQZ4iI/AAAAAAAAIX4/UP9FkLUAzJY/s1600/Screen-Shot-2014-11-26-at-17.20.25.png"></p><p>Chromeでは、プログラミング以外の解決策も使えます。<a href="https://chromedevtools.googlecode.com/svn-history/r421/trunk/tutorials/breapoints/index.html#dom" rel="nofollow" title="" class="ext-link">DOM Breakpoints</a>と呼ばれるもので、バックグラウンドでは依然としてMutation Eventを使っています。</p><p>実に簡単なのですが、Windowオブジェクトにonerrorイベントハンドラを追加するだけでクライアント側の処理は完了です。ハンドラは、サーバ上にエラー情報を蓄積するRESTのエンドポイントに対してAjaxリクエストを行うことができます。IE9より前のバージョンには<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim" rel="nofollow" title="" class="ext-link">string.trim()</a>が無いので、クライアントがIE8を使っている場合は、この方法ではいろいろと問題が多いと思う方もいるでしょう。string.trimはそれほど重要ではないと思います。</p><p>いずれにせよ、サーバ側でクライアントのエラーログを取るこの最も基本的な方法は以下のようになります。</p><p><img src="http://2.bp.blogspot.com/-GM-WAOPJ7CE/VL7xcfinDoI/AAAAAAAAIX8/AVlYdBIUcaI/s1600/Screen-Shot-2014-11-26-at-17.22.16.png"></p><p>もちろん、これは最も基本的な解決策です。もっと良い解決策が<a href="http://www.stacktracejs.com/" rel="nofollow" title="" class="ext-link">http://www.stacktracejs.com/</a>や<a href="http://jsnlog.com/" rel="nofollow" title="" class="ext-link">http://jsnlog.com/</a>といったサイトにたくさんあります。<a href="https://hacks.mozilla.org/2014/08/javascript-error-and-xhr-log-recording-with-every-bug-report/" rel="nofollow" title="" class="ext-link">Mozilla hacks</a>には豊富な手法が載っています。<a href="https://news.ycombinator.com/item?id=3796869" rel="nofollow" title="" class="ext-link">Hacker News</a>という素晴らしいサイトでも、このテーマでディスカッションが行われています。いずれにせよ、この基本的な解決策は、スタートとしては良いと言えますね。</p><p>バックエンドのコーディングをする時間も無いほど忙しいというあなた。それなら、Google Analyticsにデータを収集してみてはどうですか？　</p><p><img src="http://2.bp.blogspot.com/-lZs2zzrmdBw/VL7xcoibmDI/AAAAAAAAIYA/jIrNJDSNGUQ/s1600/Screen-Shot-2014-11-26-at-17.23.15.png"></p><p>確かにこれならできますね。ただしこれは、とりあえずの手段です。徹底的に行いたければ、例えば他にも<a href="http://usersnap.com/" rel="nofollow" title="" class="ext-link">http://usersnap.com</a>など、もっと優れた多くの製品から選ぶことができます。でも、お手軽な方法だって何も情報が無いよりはマシです。何も情報が無い人がほとんどなのですから。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2015/02/Screen-Shot-2014-11-26-at-17.23.54.png" alt="I do not use debuggers, I stare at the code until it confesses" width="323" height="461" class="alignleft size-full wp-image-2476"><br>
<em><span style="color:#666666; font-size:0.7em;">俺にデバッガはいらない<br>
コードが尻尾を出すまで見張り続ける</span></em></p><p>私はこのことについて長年考えてきましたが、数年前、JavaScriptへのアプローチが全く間違っていることに気づきました。JavaScript に対しても、JavaやC#やRubyなどと同様に真剣に向き合うべきなのです。</p><p>病気になることを避けられないように、JavaScriptを学ぶことも避けられません。</p><p>他のプログラミング言語と同じように、JavaScript を使う人は<a href="http://www.amazon.com/gp/product/0596517742?ie=UTF8&amp;camp=213733&amp;creative=393185&amp;creativeASIN=0596517742&amp;linkCode=shr&amp;tag=mitemitreskic-20&amp;linkId=YA2OVMM5NEK2CQSS" rel="nofollow" title="" class="ext-link">本</a>やプログラミングの練習、複数のプロジェクトでの経験が必要です。そしてJavaScript自体にも、コーディングスタイルガイドやフレームワークの<a href="http://karma-runner.github.io/0.12/index.html" rel="nofollow" title="" class="ext-link">テスト</a>や、<a href="http://www.jshint.com/about/" rel="nofollow" title="" class="ext-link">コード分析</a>などが必要です。基本的に”本物のコード”に向き合う際に必要なもの全てが必要なのです。統合的にサポートしてくれる<a href="http://yeoman.io/" rel="nofollow" title="" class="ext-link">Yeoman</a>や<a href="https://jhipster.github.io/" rel="nofollow" title="" class="ext-link">JHipster</a>といった完全な解決策もあります。</p><p>こうしたことを何もしないでいると、あなたは必ずJavaScriptを大嫌いになってしまうでしょう。JavaScriptは周り中にあふれているというのに残念なことです。ベストプラクティスに従えば、コードのデバッグに時間をかけることも、手のこんだコツに頼ることもなくなるでしょう。あなたがチャック・ノリスでなければ、ですが。</p><p><a href="https://github.com/DeveloperToolsWG/console-object/blob/master/api.md" rel="nofollow" title="" class="ext-link">https://github.com/DeveloperToolsWG/console-object/blob/master/api.md</a><br>
<a href="https://developer.chrome.com/devtools#debugging-JavaScript" rel="nofollow" title="" class="ext-link">https://developer.chrome.com/devtools#debugging-JavaScript</a><br>
<a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger" rel="nofollow" title="" class="ext-link">https://developer.mozilla.org/en-US/docs/Tools/Debugger</a><br>
<a href="http://msdn.microsoft.com/en-us/library/dd565625%28v=vs.85%29.aspx" rel="nofollow" title="" class="ext-link">http://msdn.microsoft.com/en-us/library/dd565625%28v=vs.85%29.aspx</a><br>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow" title="" class="ext-link">https://developer.mozilla.org/en-US/docs/Web/JavaScript</a><br>
<a href="www.HTML5rocks.com">www.HTML5rocks.com</a></p>
