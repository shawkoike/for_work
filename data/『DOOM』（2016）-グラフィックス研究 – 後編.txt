<p><a href="http://www.adriancourreges.com/blog/2016/09/09/doom-2016-graphics-study/" rel="nofollow" title="" class="ext-link">DOOM (2016) – Graphics Study</a> （2016-09-09） by <a href="https://twitter.com/ado_tan" rel="nofollow" title="" class="ext-link">Adrian Courrèges</a></p><p>前のパスの様々な動的リフレクション（とその制限）について述べましたが、今度は<a href="https://en.wikipedia.org/wiki/Image-based_lighting" rel="nofollow" title="" class="ext-link">イメージベースドライティング（IBL）</a>を用いた静的リフレクションの出番です。<br>
この手法は、あらかじめ生成された128×128のキューブマップに基づいています。キューブマップは、マップの様々なロケーションの環境ライティング情報を表すもので、「環境プローブ」とも呼ばれています。前に錐台のクラスタ化の際に見たライトやデカールとよく似ているのですが、各クラスタに対して、プローブも同じようにインデックス化されています。<br>
そのレベルのキューブマップは全て1つの配列内に格納されています。キューブマップは数十ありますが、以下はこのシーンで主要なものです（この部屋のキューブマップ）。</p><p><a href="http://www.adriancourreges.com/blog/2016/09/09/doom-2016-graphics-study/" rel="nofollow" title="" class="ext-link"><img src="http://postd.cc/wp/wp-content/uploads/2016/10/d_capture.jpg" alt="d_capture" width="1227" height="227" class="alignleft size-full wp-image-8205"></a><br>
ピクセルシェーダは深度バッファ、法線バッファ、スペキュラバッファから読み取りを行い、クラスタ構造の中でどのキューブマップがそのピクセルに影響を及ぼしているか調べて（キューブマップが近いほど影響大）、静的リフレクションマップを生成します。</p><p><img src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/26_env_refl.jpg" style="display: block; margin: auto;  "><br>
静的リフレクションマップ</p><p>このステップでは、コンピュートシェーダが以前に生成された全てのマップを組み合わせます。<br>
深度・スペキュラマップを読み取り、フォワードパスのライティングを以下にブレンドします。</p><p><img src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/31_combine_pre.jpg" style="display: block; margin: auto;"><br>
ブレンド + フォグ：適用前</p><p><img src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/31_combine_post_notes.jpg" style="display: block; margin: auto;  "><br>
ブレンド + フォグ：適用後</p><p>このシーンには煙のパーティクルがいくつかあり、ライティングは実際にはスプライトごとに計算されます。<br>
各スプライトは、ワールドスペースにあるかのようにレンダリングされます。位置、ライトリスト、そしてそれぞれのシャドウマップが検索され、クアッドのライティングも計算されます。その結果は、4kアトラスのタイルに格納されますが、タイルはパーティクルのカメラからの距離や画質設定などに基づいて、様々な解像度になり得ます。このアトラスは、同じ解像度のスプライトに対する専用領域を持ちます。以下は64×64のスプライトの外観です。</p><p><img src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/30_light_particles.png" style="display: block; margin: auto;  "><br>
パーティクルライティングアトラス</p><p>そしてこれは、そのような低解像度で格納されているライティング情報にすぎません。後にパーティクルが実際に描画される時にはフル解像度のテクスチャが用いられ、ライティングクアッドはアップスケールされてそれにブレンドされます。DOOMはここでは、パーティクルライティングの計算をゲームの実際のメインレンダリングから切り離しています。つまり、プレイしている解像度（720p、1080p、4kなど）にかかわらず、パーティクルライティングは常に計算され、そうした小さな固定サイズのタイルに格納されるのです。</p><p>このシーンは数回ダウンスケールされて、40ピクセルになります。ダウンスケールされた小さなレベルでは、別個の垂直パスと水平パスを使ってぼかされます。</p><p><img class="img-nobox" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/33_blur_chain.png" style="margin-top: -1em; margin-bottom: -1em;"><br>
なぜ、これほど早い段階でぼかされるのでしょうか。そのような処理は通常、明るいエリアからのブルームエフェクトを出すために、ポストプロセッシングの最後に行われます。<br>
ですがここでは、そうした様々なぼかしレベルは全て、ガラスの屈折をレンダリングする次のパスで役立つことになります。</p><p>透明オブジェクト（ガラス、パーティクル）は全て、シーンの上にレンダリングされます。</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/34_transparency_pre.jpg"><br>
透明オブジェクト：レンダリング前</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/34_transparency_post.jpg"><br>
透明オブジェクト：レンダリング後</p><p>ガラス、特につや消しガラスやくすんだガラスは、DOOMにおいて非常にうまくレンダリングされます。ガラスの屈折をある程度ぼかすため、デカールがガラスの一部だけに影響するように使われるのです。<br>
ピクセルシェーダは屈折の「ぼかし度」の要素を計算し、その要素に最も近い2つのマップを一連のぼかしの中から選択します。そしてこの2つのマップから読み取りを行ったら、2つの値の線形補間を行い、その屈折に適した最終的なぼかしの色を概算します。ガラスがピクセルごとに様々なぼかし度で精密な屈折を生み出せるのは、この処理のおかげです。</p><p><img src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/35_distortion.png" style="display: block; "><br>
歪みマップ</p><p>画像には、非常に高温なエリアの熱歪みを作ることができます。この例では、<em>Gore Nest</em>によって画像がわずかに歪んでいます。</p><p>歪みは深度バッファに対してレンダリングされ、低解像度の歪みマップが生成されます。<br>
赤と緑のチャンネルは、水平・垂直軸に沿った歪み量を表しています。青のチャンネルは適用すべきぼかし量です。</p><p>実際のエフェクトは後ほど、どのピクセルを移動すべきか識別するための歪みマップを使って、ポストプロセスとして適用されます。<br>
ただし、特にこのシーンでは、あまり目立たないわずかな歪みしかありません。</p><p><img src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/36_ui.png" style="display: block; ">UI</p><p>UIは、LDR（低ダイナミックレンジ。1チャンネルにつき8ビット）フォーマットで格納された乗算済みアルファモードで、別個のレンダターゲットにレンダリングされます。</p><p>最終フレームの上に直接描画されるのとは対照的に、UI全体を単独のバッファに持つ利点は、ゲームが、色収差や視覚的歪みのようなフィルタやポストプロセッシングを、シングルパスで全てのUIウィジェットに同時に適用できることです。</p><p>このレンダリングは特別なバッチ手法を使わず、約120回のドローコールで、UIアイテムを1個ずつ描画します。<br>
その後のパスで、UIバッファはゲーム画像の上にブレンドされ、最終結果を生成します。</p><p><a href="https://en.wikipedia.org/wiki/Temporal_anti-aliasing" rel="nofollow" title="" class="ext-link">テンポラルアンチエイリアシング（TAA）</a>と<a href="https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%96%E3%83%A9%E3%83%BC" rel="nofollow" title="" class="ext-link">モーションブラー</a>は、ベロシティマップと以前のフレームのレンダリング結果を使って適用されます。<br>
フラグメントは、現在処理されているピクセルが前のフレームでどの位置にあったかをピクセルシェーダが認識するために、再投影されることができます。このレンダリングは実際には、メッシュの投影を1フレームおきに半ピクセルだけずらします。これは、サブピクセルのエイリアシングアーティファクトを除去するのに役立ちます。</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/40_taa_mb_pre.jpg"><br>
TAAとモーションブラー：適用前</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/40_taa_mb.jpg"><br>
TAAとモーションブラー：適用後</p><p>素晴らしい結果です。メッシュのエッジが滑らかになるだけでなく、スペキュラエイリアシング（あるフレームで1つの明るいピクセルだけがポップインする場合）の処理も行われるのです。画質は、FXAAのようなポストプロセスの方法を使った時よりもはるかに良くなります。</p><p>このステップでは、シーンの平均<a href="https://ja.wikipedia.org/wiki/%E8%BC%9D%E5%BA%A6_(%E5%85%89%E5%AD%A6)" rel="nofollow" title="" class="ext-link">輝度</a>を計算します。これは、後ほどトーンマッパーに渡されるパラメータの1つです。</p><p>HDRライティングバッファは、ループにおいて半分の解像度にダウンスケールされて2×2のテクスチャになり、それぞれの繰り返しでは、高解像度マップから4つの親ピクセルの平均輝度としてピクセルの色の値が計算されます。</p><p><img src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/45_bloom.jpg" style="display: block; "><br>
ブルーム</p><p>明るいパスのフィルタは、シーンの中で暗いエリアを見えにくくするために適用されます。</p><p>その結果はループにおいてダウンスケールされ、前に見た類似の処理でぼかされます。</p><p>レイヤは<a href="https://ja.wikipedia.org/wiki/%E3%82%AC%E3%82%A6%E3%82%B7%E3%82%A2%E3%83%B3%E3%81%BC%E3%81%8B%E3%81%97" rel="nofollow" title="" class="ext-link">ガウシアンぼかし</a>でぼかされて垂直・水平パスに分けられ、そのパスではピクセルシェーダが1方向に沿って加重平均を計算します。</p><p>ぼかされたレイヤはその後組み合わされ、元の解像度の1/4であるHDRテクスチャのブルームを生成します。</p><p>以下のステップは全て、単一のピクセルシェーダで実行されます。</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/50_tonemap_pre.jpg"><br>
トーンマッピング：適用前</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/50_tonemap_post.jpg"><br>
トーンマッピング：適用後</p><p>トーンマッピングは、広範な明度の色を含むHDRライティングバッファを受け取り、フレームをモニタに表示できるよう、そのバッファを変換して1つのコンポーネントにつき8ビット（LDR）にまで落とします。<br>
式<code>(x(Ax+BC)+DE) / (x(Ax+B)+DF) - (E/F)</code>に基づいた<a href="http://duikerresearch.com/2015/09/filmic-tonemapping-ea-2006/" rel="nofollow" title="" class="ext-link">フィルミックトーンマッピングオペレータ</a>が用いられますが、この技法は<a href="http://filmicgames.com/archives/75" rel="nofollow" title="" class="ext-link">『アンチャーテッド2』のトーンマッパー</a>や『<a href="http://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study/" rel="nofollow" title="" class="ext-link">グランド・セフト・オートV</a>』でも見られます。</p><p>なお、このシーンに広がっている赤色は、全体に色補正が施されています。</p><p>最後に、UIがゲームフレームの上にブレンドされ、同時にかすかな<a href="https://ja.wikipedia.org/wiki/%E7%B2%92%E7%8A%B6%E6%80%A7" rel="nofollow" title="" class="ext-link">粒状性</a>が適用されます。</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/51_grain_pre.jpg"><br>
UI　粒状性：適用前</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/51_grain_post.jpg"><br>
UI　粒状性：適用後</p><p>やりました！　フレームが完成したので、モニタに送って表示できるようになりました。かなりの計算量でしたが、その全体が16ミリ秒以内に行われました。<br>
DOOMが高画質の映像を高いパフォーマンスで提供できるのは、以前のフレームで計算された古いデータをうまく再利用するからです。合計では、1,331回のドローコールが実行され、132種類のテクスチャと50個のレンダターゲットが使われました。</p><p>ガラスのレンダリングは見事な出来栄えですが、これは前に説明した比較的単純なステップで実現されています。</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/70_glass_before.jpg"><br>
ガラス：レンダリング前</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/70_glass_after.jpg"><br>
ガラス：レンダリング後</p><p>ここまでフレームを細かく研究してきましたが、<a href="https://ja.wikipedia.org/wiki/%E8%A2%AB%E5%86%99%E7%95%8C%E6%B7%B1%E5%BA%A6" rel="nofollow" title="" class="ext-link">被写界深度（DoF）</a>についてはよく分かりませんでしたので、以下のシーンについてDoFの適用前後を検討してみましょう。</p><p><img style="-webkit-user-select: none; cursor: zoom-out;" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/70_glass_before.jpg" width="950" height="534"><br>
DoF：適用前</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/70_glass_after.jpg"><br>
DoF：適用後</p><p>全てのゲームがDoFを正確に適用しているわけではありません。単純なアプローチではガウシアンぼかしを使い、ピクセルの深度に応じて全てのぼかしを1つのパスで実行することがよくあります。このアプローチは簡単でコストが低いのですが、以下のような問題があります。</p><p>DOOMはDoFを正確に適用しており、私の経験から言えば、DOOMで取られているアプローチは最高レベルの結果を出しています。</p><p>遠視野画像と近視野画像が生成されるのですが、ピクセルの選択は、その深度とDoFパラメータによって行われます。</p><p>ボケぼかしを作り出すために、DOOMは半解像度で動作し、円形ぼかしを64のテクスチャタップで実行します。各サンプルは同じ重みを持つので、ガウシアンぼかしとは違って明るさが全体的に広がります。<br>
円の直径は、ピクセルの<a href="https://en.wikipedia.org/wiki/Circle_of_confusion" rel="nofollow" title="" class="ext-link">錯乱円（CoC）</a>の値に応じてピクセルごとに変化します。</p><p>遠視野<br>
<img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/80_dof_pre.jpg"><br>
遠視野　ぼかし#1</p><p><img style="-webkit-user-select: none" src="http://www.adriancourreges.com/img/blog/2016/doom2016/shot/80_dof_post.jpg"><br>
遠視野　ぼかし#1および#2</p><p>DOOMはその後、16タップでぼかしをさらに広げますが、今回は加重平均を計算せず、サンプル値を単純に蓄積していき隣接するタップのうち最も高い値を保持するので、最初のぼかしを広げるだけでなく、最初のパスの小さなアーティファクト（サンプル間の隔たり）を修正することも行います。この最後の部分は、<a href="http://ivizlab.sfu.ca/papers/cgf2012.pdf" rel="nofollow" title="" class="ext-link">McIntoshの論文</a>から着想が得られています。<br>
複数のパスにわたって行われるそのような繰り返しの手法のおかげで、パフォーマンス面の効率は落ちることなく、大きなぼかしが非常にうまく作り出されます。1ピクセルごとに実行される実際のテクスチャタップの数は、最終的に得られる円形ぼかしの半径の大きさを考えると、やはりかなり少なく抑えられています。</p><p>遠視野画像と近視野画像は最後に、アルファブレンディングで元のシーンの上に合成され、最終的な被写界深度エフェクトを生み出します。このパスは、モーションブラー適用の直前に実行されます。</p><p>idTech 6の技術についてさらに詳しく知りたい方は、幸い数多くの講演や資料が公開されていますので、以下をご参照ください。</p>
