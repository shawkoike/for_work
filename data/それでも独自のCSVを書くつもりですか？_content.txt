So You Want To Write Your Own CSV code?（2014-05-25）by Thomas Burette一部誤訳の指摘があったため、修正しました！ご迷惑おかけして申し訳ございません！あなたは自分でCSVを書いてみたいですか？　フィールドはコンマで区切り、行は改行で分けます。簡単ですよね。数行書けば勝手が分かるというものです。でも、ちょっと待ってください。ダブルクォート（”）で、該当のフィールドを囲みましょう。簡単ですね。では、ダブルクォートで囲めるフィールドに例外はあるのでしょうか？フィールド内の各ダブルクォートに対して、ダブルクォートを二重化して適用しましょう。そうすれば元のダブルクォートをエスケープすることができます。なお、二重化したダブルクォートと空フィールドを囲んでいるダブルクォート（...,"",...）を勘違いしないように気を付けてください。その場合も、ダブルクォートで該当のフィールドを囲む必要があります。CRLF、CR、それともLF？　複数の改行がある時は？例えば、フィールド内の改行は、行の最後尾の改行とは違うものです。ここまでは大丈夫ですか？最後尾に空フィールドがありますか？　それともただの不必要なコンマでしょうか？それはEOFですか？　それとも1つの空フィールド？　またはフィールドが全くない状態でしょうか？フィールド内の先頭/末尾に空白がある場合は、どうしますか？入手したCSVで、コンマの後に全てスペースが入っていて、それがデータの一部でない場合は、どうしますか？冗談を言っているわけではありませんよ。小数点の記号として、コロンではなくコンマを使う国もあります。そういった国では、Excelはセミコロンを区切り文字としてCSVファイルを出力します。この問題を回避するためにコンマの代わりにタブを使うファイルもあります。他にも非表示のASCII文字を使うファイルさえあります。任意のCSVファイルを読み込む時は、その点を考慮しなければなりません。ファイルの中でどの記号が区切り文字として使用されているか示すものはありませんからね。Excelのように、ファイルをディスクやWebから読み込む際に、様々な区切り文字に対応するアプリケーションもあります。適切な区切り文字が設定されているか確認してください。UTF-8を使えばいいだけじゃないでしょうか？　でも、待ってください。ファイルがどのエンコードを使っているのかプログラムが自動的に判別できるわけではありません。ファイルによっては、コンピュータのロケールに依存したエンコードを使っているものもあります。つまり、CSVを保存したコンピュータと違うコンピュータでファイルを開くと、気付かないうちにデータが破損する恐れがあるということです。BOM（バイトオーダーマーク）が、使用されているUnicodeエンコーディングを判別してくれるものですよね。そういう役割でしょう（実際はエンディアンを判別する役割ですが、今回そこまでは触れません）。でもBOMを挿入すると、ExcelがCSVをテキストファイルと見なし、CSVとしては扱ってくれません。つまり指定した改行は処理されないということです。CSVというのはあまりよく定義されたファイルフォーマットとは言えません。RFC4180は実情とはかけ離れています。全てのプログラムが少しずつ違うやり方でCSVを処理しているように思えます。更にこれ以上のバリエーションは不要です。どうぞ既存のライブラリを使ってください。CSVのプロバイダやサプライヤ、そこから発信されるデータを完全に掌握できるというのなら、信頼できる自動化システムを構築できるでしょうけれどね。手にしたCSVが任意のものなら、データが正しいことを保証する方法はただ一つ、ユーザが調査するということです。そして区切り文字や、クォートの規則などを最終的に特定しなくてはなりません。そうしなければエラーになってしまうか、気付かないうちにデータが破損するという事態になりかねません。今、世の中に出回っているファイルをうまく処理できるようにCSVコードを書くのは至難の業です。泥沼にはまることになるかもしれません。RubyのCSVライブラリは2321行あるんですよ。ご意見はHacker NewsとRedditまでどうぞ。
