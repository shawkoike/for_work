<p><a href="https://www.triplet.fi/blog/i-was-wrong-about-typescript-here-is-why/" rel="nofollow" title="" class="ext-link">I Was Wrong About TypeScript, Here is Why</a> (2016-06-05) by <a href="https://twitter.com/_Tx3" rel="nofollow" title="" class="ext-link">Tatu Tamminen</a></p><p><small>(訳注：2016/9/28、頂きましたフィードバックを元に記事を修正いたしました。)</small></p><p><strong>何か新しいものが登場したと聞くと、人はそれに対する賛否を選ぶ傾向があります。TypeScriptが登場したときの私は、キーコンセプトのうち自分に合わないものをほんの幾つか取り上げて「否」の側を選んでしまいました。この記事では、私が当時どのように考えていたか、そして私がどのようにして「TypeScriptの背景には、大きな犠牲なしに利点を得る方法を知る人々による偉大な考えがあった」ことに気付いたかを説明しようと思います。</strong></p><p>Anders Hejlsbergが何かに取り組んでいるときは、つい私はそちらに注意を完全に傾けてしまいます。彼はコンパイラの構築やプログラミング言語の設計を30年近く経験してきています。彼の様々なプログラミング言語に関する貢献については<a href="https://en.wikipedia.org/wiki/Anders_Hejlsberg" rel="nofollow" title="" class="ext-link">彼のWikipediaのページ</a>でもっと読むことができます。</p><p>「彼がJavaScriptにトランスパイル(つまり、ソースコードからソースコードへのコンパイル)される言語に取り組んでいる」と聞いた時、私の第一印象は失望でした。MicrosoftはDart/CoffeeScriptの道をたどり、ECMAScriptの標準の道を拒んだのだと。私は何かを短く書くためだけに、新しい言語を学んでこれまで学んだことを忘れてしまうようなことはしません。もっとメリットがないと、そうする理由がありません。</p><p>また、Microsoftの「ASP.NET Webフォームを導入することでWindowsの開発者をWeb開発に取り込もうとした」というやり方について、私には悪い思い出もありました。Webフォームは、Webの中核となる技術を、混在した結果とともに抽象化してしまいました。「TypeScriptは、JavaScriptを”学べない”C#開発者を対象にしたものなのではないか？」「新しい言語は、C#の開発者が使い慣れた機能を持つものになるのではないか？」</p><p>Hejlsbergがチームにいてさえも、私はTypeScriptに単純に歓喜することはできず、それ以上深く探ることはしませんでした。その言語とコンパイラに関するいくつかのキーポイントを完全に見落としていたのです。</p><p>最近のクライアントのプロジェクトで、TypeScriptが<a href="https://facebook.github.io/react/" rel="nofollow" title="" class="ext-link">React</a>と<a href="https://github.com/reactjs/redux" rel="nofollow" title="" class="ext-link">Redux</a>と共に使われていました。ReactとReduxは共に私にはなじみがあるもので、モダンなJavaScript (ECMAScript 2016, ES6) も6か月ほど書いていました。</p><p>TypeScriptを始める方法の一つは、お気に入りのエディタを一つ選び(例えば<a href="https://code.visualstudio.com/" rel="nofollow" title="" class="ext-link">Visual Studio Code</a>、<a href="https://www.sublimetext.com/" rel="nofollow" title="" class="ext-link">Sublime Text</a>、あるいは<a href="https://atom.io/" rel="nofollow" title="" class="ext-link">Atom</a>)、そこからTypeScriptのコンパイラを実行することです。私は<a href="https://github.com/Microsoft/TypeScript-Sublime-Plugin" rel="nofollow" title="" class="ext-link">TypeScript Sublime Plugin</a>をインストールし、ネイティブHTML要素での幾つかの自動補完サジェストを試しました。</p><p><img src="https://triplet-assets.s3.amazonaws.com/typescript/sublime_typescript_autocomplete.gif" alt=""></p><p>技術的な注記：テキストエディタのプラグインは、TypeScriptコンパイラのAPIの一部であるLanguage Serviceを利用します。これは、開発者にとって低レイテンシでのフィードバックが重要である場合のテキスト編集のために設計されています。上記のアニメーションの例の<em>getCompletionsAtPosition</em>など、美しいAPIを提供しています。</p><p>ここまでまだTypeScriptをまったく書いておらず、.ts拡張子を持つES5のソースコードファイルを書いただけです。サードパーティライブラリのAPI記述を入手することで、コンパイラからもっと多くの利点を得られます。API記述をTypeScriptではType Definition(型定義)と呼びます。</p><p>有名なViewライブラリであるReactと、その型定義をダウンロードしてみましょう。型定義ファイルは、react.d.tsのように、ファイル名の”d”から判別できます。</p><p>型定義を管理するツールは<a href="https://github.com/typings/typings" rel="nofollow" title="" class="ext-link">Typings</a>といいます。</p><p>Typingsをインストールするには、<code>npm install typings -g</code>を実行します。</p><p>TypingのコマンドラインAPIが馴染みのあるものであることに気付くのではないでしょうか。npmで用いられるものによく似ているのです。</p><p>Typingsをインストールした後は、<em>init</em>コマンドを用いて設定ファイルを生成します。 : <code>typings init</code></p><p><em>search</em>コマンドを–nameフラグと共に使い、型定義を名前で検索しましょう。</p><p>“dt”は型定義のソースの場所を表します。これは例えば、npmであったり、Definitely Typed(dt)という有名なサイトだったりします。ソースのリストは<a href="https://github.com/typings/typings#sources" rel="nofollow" title="" class="ext-link">ここ</a>で見られます。</p><p>型定義は<em>install</em>コマンドでインストールできます。</p><p><em>–save</em>フラグはnpmの<em>–save</em>フラグと似た挙動を持ちます。つまり、型定義の参照を、<code>typings init</code>で生成されたtyping.jsonに保存します。</p><p>まだReactそのものをインストールしていませんでしたが、npmでインストールできます。</p><p>サードパーティのライブラリとその型定義ファイルがある状態での開発とは、一体どのようなものになるのでしょう？私は例として、2つのプロパティを持つReactコンポーネントを作り、それを使ったり編集したりする際に自動補完がどのように動作するかを観察しました。</p><p><img src="https://triplet-assets.s3.amazonaws.com/typescript/sublime_typescript_react.gif" alt="alt-text"></p><p>この例では、TypeScriptの最初のスニペットとしてインターフェース宣言を追加しています。私はあらゆる場面で型を追加することに厳格ではありませんが、外部に露出するエントリーポイント(コンポーネントのプロパティなど)を説明することは有益です。</p><p>これで、APIの定義を覚えたり覗いたりする必要がなくなり、APIを利用するのが簡単になりました。リファクタリングももっと簡単になります。</p><p>ここで、他のたくさんのコンポーネント内で使われていて、異なるプロパティが必要な<strong>DemoComponent</strong>があると仮定しましょう。例えば、<em>name</em>プロパティがあり、より特化した他のプロパティ(username, surname, fullNameなど)に変更されうるとします。大きなプロジェクト内で’.name’というキーワードで検索・置換を行うと、端的に言って、あなたは参ってしまうでしょう。正しいコンテキストかどうかについて、検索でヒットしたものをすべてチェックしなければなりません。型が適切な箇所で用いられていれば、<em>name</em>プロパティはより語義に忠実な意味になり、さらに、ツール側にもリファクタリングで影響される名前がどれであるかわかるようになります。</p><p><img src="https://triplet-assets.s3.amazonaws.com/typescript/sublime_typescript_refactoring.gif" alt="alt-text"></p><p>上記のアニメーションで示した例はシンプルですが、大きなコードベースでも同じような操作ができることは容易に想像できるでしょう。</p><p>“強い型付け”と聞くと、「古い（型インターフェースなど以前の）C#やJavaのコードのように、あらゆる箇所で型が必要になる」と考えられがちです。</p><p>これでは、利点がないのに多くのノイズがあります。</p><p>TypeScriptには型推論という機能があり、以下のように入力するとエラーを吐くように動作します</p><p>nameが<strong>String</strong>であることが推論されているため、明示的に示す必要がないのです。</p><p>また、TypeScriptにはContextual Type(文脈的型付け)という機能があります。以下は<a href="http://www.typescriptlang.org/docs/handbook/type-inference.html" rel="nofollow" title="" class="ext-link">ドキュメント</a>からの例です。</p><p><em>mouseEvent</em>には定義された型はありませんが、それでもTypeScriptは<em>mouseEvent</em>が<em>button</em>というプロパティを持たない場合にエラーを投げることができます。どうしてこれが可能なのでしょう？</p><p>それは、TypeScpritが「<em>onmousedown</em>に対するコールバックは<strong>MouseEvent</strong>型の引数をとる関数である」と知っているからです。<strong>MouseEvent</strong>型は<em>button</em>プロパティを持ちません。こういったチェックにより、開発者の時間を節約することができます。</p><p>JavaScriptの開発で使ってきた他のツールについて考えたとき、思い至ったのは以下のものでした：リンティングツール、Browserify/Webpack、テストフレームワーク、そしてBabelJSです。これらのツールは、TypeScriptによって時代遅れになるでしょうか？</p><p>エラーの捕捉においてTypeScriptがとても強力であれば、果たしてESLintやJSHintなどのツールは必要でしょうか？答えは「Yes」です。例えば、エラーのチェックに加え、ESLintはベストプラクティスや文体といった面でのコードフォーマットのチェックを行えます。残念ながらESLintとの互換性は<a href="https://github.com/eslint/typescript-eslint-parser" rel="nofollow" title="" class="ext-link">TypeScript ESLint Parser</a>プロジェクトに依存しており、このプロジェクトはまだ実験段階です。</p><p>良いニュースとしては、TypeScriptのために作られた<a href="https://palantir.github.io/tslint/" rel="nofollow" title="" class="ext-link">TSLint</a>というツールが存在します。</p><p>TypeScriptはバンドルツールではないため、例えば「自分自身のコードはTypeScriptで書いているが、ブラウザではサードパーティ製ライブラリであるlodashを使っている」というケースで、TypeScriptではlodashをフェッチして1つのファイルにバンドルすることができません。バンドルするのはBrowserify/Webpackの役割になります。</p><p>私はTypeScriptでテストを書き、JavaScriptにコンパイルし、テストの実行などのためにMochaを使う、ということをやりました。これに関しての皆さんの意見を聞きたいです。</p><p>TypeScriptがES2016の機能のサポートしているということは、BabelJSはもう不要でしょうか？答えは「状況による」です。賢い人に、BabelJSのもたらす利点について尋ねてみました。</p><p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br>
<em>著者：「ES2015のコードをトランスパイルするのに、#TypeScript コンパイラではなく#babeljs を使わなければいけない理由を、誰か教えてくれませんか？」<br>
Tero Parviainen：「TypeScriptは今のところasync/awaitをES5にコンパイルできません。もしこれらが必要であればBabel等を使う必要があります」</em></p><p>言い換えれば、TypeScriptはasync/awaitをサポートしているが、それを全ブラウザで理解可能なECMAScriptにコンパイルすることはできません。</p><p>この機能を使わないのであれば、ビルドプロセスからBabelJSを消してしまっても構わないのです。</p><p><strong>追記:読者のBirk Skyumが指摘してくれたのですが、この機能のES3へのサポートは<a href="https://github.com/Microsoft/TypeScript/wiki/Roadmap#20" rel="nofollow" title="" class="ext-link">TypeScriptのロードマップ</a>に存在しており、バージョン2.0でリリースされる予定とのことです。</strong></p><p>TypeScriptに関するブログ投稿のほとんどは、「TypeScriptは大きなプロジェクトでの使用を企図している」と言及しています。Anders Hejlsbergの<a href="https://devchat.tv/js-jabber/209-jsj-typescript-with-anders-hejlsberg" rel="nofollow" title="" class="ext-link">JavaScript Jabberでのインタビュー(30:50)</a>によると、</p><p><small>* 「スラム・ダンク」がわからず、Google検索しなければなりませんでした。どうやら、外すほうが難しいような簡単なシュートを指すバスケット用語のようです。</small></p><p>願わくば、少なくとも私のTypeScriptへの熱狂が皆さんに伝わり、それで皆さんがTypeScriptにもう一度チャンスを与えるようになれば幸いです。実際のプロジェクトでTypeScriptを使って成功したか、あるいは惨めな経験をしたか、是非お聞きしたいです。それではまた今度！</p><p><a href="https://news.ycombinator.com/item?id=11841502" rel="nofollow" title="" class="ext-link">Discuss on Hacker News</a></p>
