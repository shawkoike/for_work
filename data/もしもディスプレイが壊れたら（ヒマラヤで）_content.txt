When Your Screen Breaks (In The Himalayas) by Tom Buckley-Houstonもしラップトップのディスプレイが壊れたら、文句を言いつつもお金を出して修理してもらうのが普通でしょう。修理用のパーツが届くまでの間は、外付けディスプレイでしのぐのでしょう。面倒ではあるけれど、それで作業が止まってしまうわけではありません。でも、いちばん近い町までバスで2日かかるうえに、貴重品を安心して送れるサービスも整っていない場所にいるとしたらどうでしょう？私の置かれた状況がまさにそれでした。インド北部のラダック、ヒマラヤに囲まれたところでそんな目にあったのです。私がここに来たのは、日々の仕事から離れて執筆に専念するためでした。執筆にはコンピュータが欠かせません。でも、日々の生活はそれほどコンピュータに依存していなかったので、ハッカーらしい解決策をゆっくり考えてみました。私のハックのポイントは、スマホを「モニター」として使ったことです。VNCやXのポートフォワーディングで映像出力を直接流すという意味ではありません。もちろん、時にはそれらの手法を使うこともありましたけどね。スマホをVNCなどのインターフェイスとして使うというよりは、ラップトップのキーボードでスマホ側のアプリ操作することのほうが多かったと思います。Termuxを使ってラップトップにSSHで入ったり、ChromeやGmailやWhatsappを使ったりしたのです。すべてを完全に掌握するまでには数日かかりました。でも、執筆を無事再開できたうえにGithubにPull Requestを送ることもできました。あなたが現時点で何も不自由していなかったとしても、私のハックから何かを得られるのではないでしょうか。また、きわめて貧弱なインターネット環境での私の執筆スタイルについても説明します。これはディスプレイが壊れた件とはまったく無関係ですが、これらのハックを私が日々どんなふうに使っているかを紹介できるでしょう。私はLinuxとAndroidを使っているので、ここで紹介する内容の中にはWindowsやMacやiOSでは使えないものもあるかもしれません。しかし、全体的な考え方はどこでもあてはまるものです。私の環境について説明しておきましょう。スマートフォンはSonyのZ3 Compact、そしてラップトップはDellのXPS 13（2015年モデル）です。Z3 Compactはroot化していますがROMは書き換えていません。XPS 13にはArch Linuxを入れています。映画『オデッセイ』のマット・デイモンもそうでしたが、最初は右も左もわからない状態です。はじめの一歩を踏み出すにはとても時間がかかり、痛みを伴う可能性があります。スマホ側からラップトップにSSHで接続できれば理想的なのですが、あらかじめそんな設定をしている人はまずいないでしょう。幸い、自動化されているところもあります。たとえば、スマホのテザリング機能をオンにしたら、ラップトップが自動的に接続するようになっているかもしれません。仮にそうしていなかったとしても、USB経由でのテザリングを使えば、ラップトップ側のOSのDHCPクライアントが自動接続してくれるはずです。それでも、大きな障害が二つ残ります。ラップトップにSSHデーモンをインストールすることと、ラップトップのIPアドレスを取得することです。ここでは、OSのブートプロセスについての記憶だけが頼りになります。皆さんもきっと、デスクトップが真っ黒になってしまったことが一度はありますよね？Grubのブートメニューで上矢印キーを押し、ちょっと待ってからユーザー名とパスワードを入力すれば、デスクトップにたどり着けるということを私は知っていました。さらに幸運なことに、画面上部の2行ぶんくらいだけはディスプレイが生き残っていたのです。生き残っているとはいっても、表示が自動的に更新されるわけではありません。物理的に力を加えてディスプレイをひねってやらないと、表示は更新されませんでした。私は次に、Alt+スペースを押しました。ターミナルを立ち上げるショートカットです。マウスカーソルやコマンドプロンプトは見えませんでしたが、Enterキーを何度か押してプロンプトを表示させ、何が起こっているのかを隙間から確認できるようにしました。USB経由のテザリングの自動接続でインターネットにはつながっていたので、次にsudo pacman -S openssh（もちろん、最初のsudoのときにはパスワードを入力しないといけません）とタイプしてからsudo systemctl enable sshd &amp;&amp; sudo systemctl start sshdとしました。成功です。他に何も問題は出ませんでした。これらのコマンドは、システムによって異なるかもしれません。ちょっとしたヒント：Linuxの場合なら、画面が真っ暗になったときには（Ctrl+Alt+F1などの）VTを使うほうがいいでしょう。これなら、ログインしたらすぐにプロンプトが現れます。つまり、デスクトップが読み込まれるのを待たずに、すぐopensshなどのインストールを始められるということです（Hacker Newsでkbakerからいただいた案です）。あるいは、OSに用意されているであろうコマンド実行用ショートカットも使えます。たいていのLinuxはAlt+F2でテキスト入力欄が現れて、たとえばxtermなどとタイプすればそれを起動できます。OS XならAlt+スペースです。ターミナルアプリを起動した直後には、コマンドプロンプト上にフォーカスがあるものと推測できます。私の知る限り、OS XにはSSHデーモンが標準でインストールされています。sudo systemsetup -setremotelogin onとタイプするだけで起動できるでしょう（@notpeterから教わりました）。こういうこともあるので、新しいラップトップを手に入れたらまずはSSHデーモンを入れて、強力なパスワードを設定しておくことを強くお勧めします。Webサーバーにはまず間違いなくSSHデーモンがはいっているでしょう。ラップトップよりもよっぽどインターネット上にさらされているWebサーバーでもそうなのですから、ラップトップにSSHデーモンを入れてもセキュリティ上のリスクはそんなに大きくなりません。ただし、強力な認証方式を使うのが前提です。鍵交換方式の認証がベストでしょう。さあ、次はラップトップのIPアドレスを調べる番です。ifconfigとタイプしてEnterキーを押し続けることで、inet 192.168.42.177 netmask 255.255.255.0 broadcast 192.168.42.255という行を読み取ることができました（最初のアドレスがこのラップトップのIPアドレスで、私の場合は192.168.42.177でした）。後から気づいたのですが、root化したAndroid機があるのだから、こんなことをしなくても単に/data/misc/dhcp/dnsmasq.leasesを見るだけでよかったのです。Androidをroot化するのは簡単で、よっぽどのことがない限りはKing Rootというアプリでroot化できます。さらに別の方法もあります（Hacker Newsでsujay_mからいただいた案です）。この方法はクロスプラットフォームであるというメリットがあります。IPアドレスは使わずに、Avahiでローカルネットワークドメインを作るのです。これをラップトップにインストールすれば、HOSTNAME.localでアクセスできるようになります（HOSTNAMEの部分は、ラップトップのhostnameで置き換えます）。ここまでが重要です。SSHサーバーを実行してIPアドレスを取得することができなければ、おそらくディスプレイを修理する以外に手はないでしょう。あとは、SSHクライアントに接続情報を教えてやるだけです。デフォルトのポートは22なので、私の場合はssh://192.168.42.177:22でした。SSHははじめの一歩に欠かせないものですが、現時点で私が最も多用するアプリでもあります。後でお話しますが、私の作業時間の大半はneovimを使った執筆だし、リモートサーバー上でのWebブラウズにはelinksを使っています。Androidで動くSSHクライアントならどれでも、ラップトップ上でのsudo作業くらいなら問題なくこなせるでしょう。でも、長い目で見て日常作業に使うことを考えると、その使い勝手はアプリによって大きく異なります。少なくとも二種類のSSHクライアントを入れておくことをお勧めします。後でお話しますが、ラップトップのキーボードをスマホの入力に使おうと試行錯誤していたときに、標準入力がフリーズしてしまうことが何度かありました。そんなときにプロセスを殺すには、別のSSHクライアントでラップトップにログインするしかありません。AndroidのSSHクライアントをいろいろ試してみましたが、完璧なものは見つかりませんでした。いま私が常用しているのはTermuxで、ときどきConnectbotを使うこともあります。それ以外も含めて注目すべきSSHクライアントをまとめました。私の使用経験が少ないものから順に並べています。ディスプレイが壊れた当時に私が知っていたアプリがこれでした。リモートのクラウドサーバーにアクセスするために使っていたのです。使い勝手がよくて特に不満はなかったのですが、常用するとなると大きな弱点がありました。環境変数XTERMを設定できないのです。つまり、ターミナルの色数が制限されてしまうということです。XTERM=xterm-256colorやXTERM=screen-256colorよりも劣る環境なんて我慢できません。後述しますが、今の私のお気に入りであるTermuxと同じく、Juice SSHもmoshに対応しています。これはSSHを改良したプロトコルで、ネットワーク接続が不安定な場合に使えるものです。モダンな見た目でUIも洗練されており、使いやすくなっています。すばらしいアプリです。ただ、重大な問題がひとつあります。Altキーと他のキーの組み合わせに対応していないのです。これは、neovimやtmux（ひとつのターミナル内で複数のターミナルを扱うソフトウェア）などを使う場合に致命的です。さらに、UTF-8文字の文字幅を正しく伝えてくれないのです（不思議なことに、ここで挙げたSSHクライアントの大半が同じ問題を抱えています）。まあこれはそんなに問題にはならないでしょう。powerlineやvim-airlineなどを使えばいいのです。ターミナル上で長い時間をすごす人にとって、ステータスラインはとても便利です。現在時刻やバッテリーの残量だけでなく、tmuxなら実行中のプロセスやターミナルも表示できます。でも、たとえば「⚡」などの特殊文字を使ってしまうと、ステータスラインの末尾が新しい行に押し出されてしまいます。時刻が変わったりなどの理由でステータスラインが再描画されるたびに、ステータスラインがどんどん上にあがってしまい、最後にはターミナルの内容が何も見えなくなってしまうのです。これを何とかするのは簡単で、要するにそういった文字を使わないようにに設定すればいいのです。私の場合はpowerlineを使うようにしましたが、それ以外のステータスラインもあります。面白いことに、私がneovim上で使っているvim-airlineにはこの問題がないようです。なので、こちらは何もいじっていません。おそらく、iutf8フラグを設定していないSSHクライアント（sttyとタイプすると、設定されているフラグを確認できます）とtmuxのpowerline統合機能を組み合わせたときに発生する問題だとは思うのですが、なぜかConnectbot（後述します）はpowerlineを完璧に描画します。このアプリの注目すべき点は、Termux（後述します）と同様に実際のシェルを提供してくれ、マウスのエスケープシーケンスにも対応しているところです。ここでいうシェルとはAndroidの実際のシェルであり、デフォルトのAndroidに付属するコマンドなら何でも（たとえばsshなども）使えます。busyboxをインストールすれば、catやfind、grep、ping、sedなどといったおなじみのコマンドたちも使えるようになります。マウスのエスケープシーケンスはとても興味深いものです。タッチジェスチャーがマウスのイベントに変換されるのです。つまり、スワイプすれば画面をスクロールできるし、タップした場所にカーソルが移動するということです。これは、コマンドラインだけではなく他のアプリ上でもとても便利です。たとえば、テキストベースのWebブラウザであるelinksでも使えます。詳しくは後述しますが、貧弱なインターネット環境で過ごすすべての旅行者にとって、タッチベースのelinksは注目に値するものです。このクライアントにもちょっとした問題があって、日常的な使用には難があります。screen-256colorはサポートしているようなのですが、実際には16色しか使っていないように見えるのです。また、Alt+HomeやAlt+Endといった組み合わせに対応していません。私が日々の作業で多用しているクライアントのひとつす。これとTermuxを切り替えて使っています。大きな利点は、画面描画を更新する際のFPSが最大であることと、フォントを完璧にレンダリングすることです。高いFPSを実感できるのは、私がTTYへのグラフィックレンダラ（hiptextやtexttop）に関する作業をしているときだけです。フォントのレンダリングは純粋に美的感覚の問題です。大半の時間をテキストベースで過ごす以上は、UTF-8文字などのあらゆるグラフィックが気になるのです。また、powerlineではフォントへのパッチを管理しており、トライアングルセパレーター（シェブロン記号&lt;&gt;を塗りつぶしたような文字）のような文字を追加できるようになっています。これらの文字を完璧にレンダリングしてくれるクライアントはConnectbotだけなのです。いったいなぜでしょうね。しかし、他の多くのクライアントと同様に、Connectbotも外部のカスタムフォントには対応していません。そこで、ちょっとしたハックが必要になります。スマホのrootを取っているのなら話は簡単で、/system/fonts/DejavuSansMono.ttfをお気に入りのフォントで上書きしてから再起動するだけのことです。私はそれ以外にもちょっとしたハックをしています。Auto Hide Soft Keysのインストールです。というのもConnectbotは、Back、Home、Menuなどの「ソフトキー」を隠してくれないのです。スマホをラップトップの画面代わりに使うなら、できる限り画面全体を活用したいですよね！ConnectbotはAndroid用のSSHクライアントとしては最も古くからあるもので、機能的にも成熟しています。さらにGithubリポジトリの動きも活発です。私がこれをメインアプリとして使わない理由は、CtrlキーやAltキーとの組み合わせがうまく動かないことが多すぎるからです。この件についてはGithubにPull Requestが登録されています。私が最終的にたどりついたのが、このクライアントです。いろいろ優れたところがありますが、私がこれを常用する最大の理由は、あらゆるキーコンビネーションに完全に対応しているからです。neovimにAltキーとの組み合わせを認識させるところでちょっとした問題はありますが、それはまた別の話。気になる点があるとすれば、powerline上の特殊文字をきちんと配置してくれないというUTF-8の文字幅問題を抱えていることと、画面描画を更新する際のFPSが低いことあたりですね。あとは、Termuxでのパッチ済みpowerlineのフォントの配置がおかしく見えるところくらいでしょう。ちょっと脱線しますが、予期せず見つけた重要な発見についてここで説明しておきましょう。Termuxには、moshとマウスのエスケープシーケンスの組み合わせによるすばらしい機能があります。どういうことかというと、リモートのサーバーにmoshを入れると、リモートのelinksを指で操作できるようになるのです。リンクをクリックしたり画面をスクロールさせたりといった操作で、いちいちソフトキーボードを操作する必要はありません。最初に発見したときには別になんとも思わなかったのですが、不安定な2G接続や検閲されたインターネット接続などの状況下でのことを考えてみましょう。moshには、sshに比べて大きく優れている点が二つあります。接続が途切れたときにも対応できるという点と、画面上で更新された箇所だけしか送信しないのでネットワーク帯域にやさしいという点です。接続が途切れると、moshは画面の上部に青いバーを表示して、接続の再開を待ち続けます。sshのようにフリーズしてしまうことはありません。サーバー上でtmuxを使っているなら、クッキーやタブを使ったブラウザのセッションも、インターネットパイプを用いて信頼性の高い状態で維持できます。中国の片田舎でバスに乗って移動しているときのことを考えてみましょう。GmailをチェックしたりGoogle検索したりするために必要なネットワーク帯域は、毎分ほんの数キロバイト程度で済むのです。そのためだけにでもTermuxを使う価値があると思います。Termuxには、他のクライアントと比べて優れた点がたくさんあります。指になじんだラップトップのキーボードを活用しない手はないでしょう。そのためのAndroidアプリもいくつかありますが、どれもこれも、wifiやtelnetによる拙いハックを使うものばかりです。その動きは、スマホとラップトップを同じネットワークにおいてからスマホ側のアプリを立ち上げて、ラップトップのブラウザやシェルから特定のIPアドレスとポートに接続するといった感じです。複雑極まりないし、すべてのキーやキーコンビネーションを送信できるわけでもありません。そのときふと思いついたのです。このラップトップをBluetoothキーボードとして使えるんじゃないかって。それは実現できました。ただ、必要なソフトウェアが（少なくともLinux版は）アクティブにメンテナンスされていないというところは気になります。私が見つけたソフトウェアを、使い勝手の悪い順に紹介します。pythonでBluetoothキーボードを作ろうという試みがいくつかあるようです。中には成功した人もいるようですが、私はどれひとつとして使いこなせませんでした。よく使われているのはpyTooth.pyとhid2btのふたつです。このソフトウェアの利点は、iPhoneとMacやWindowsでも動くと謳っているところです。Bluetoothキーボードと物理キーボードを切り替えるためのショートカットを提供するツールも用意されています。このツールがなければ、押したキーの情報がラップトップとスマホの両方に送られてしまいます。残念ながら、両方のバイナリを取得してコンパイルしてみたところ、キーが押されたという情報はログに残っているものの、その情報をスマホ側に送ることはできませんでした。数年前の代物ですが、なんと今でも動きます。しかし、Bluetooth環境の設定には苦労しました。今まではそんなことをする必要がなかったものです。ラップトップ用のドライバは適切なものが用意されていたので、ドライバはインストールせずに済みました。systemdの設定でrfkillをいくつか無効にする必要がありました。また、bluetoothctlでBluetoothをpower onしなければいけませんでした。しかし、一番時間を費やした問題は、/etc/bluetooth/main.confにDisablePlugin=inputを追加せよというアドバイスがBluez4にしか当てはまらないということでした。確かに、hidclientなどが広く使われていた四年以上前なら、これは適切なアドバイスだったのでしょう。でも今や、ほとんどの人はBluez5を使っています。Bluez5の場合は、/etc/systemd/system/dbus-org.bluez.serviceの中でbluetoothhdの引数として--noplugin=inputを追加する必要があったのです。キーを押したときにデスクトップが乱れることを避けてうまくスマホ側にタイプできるようにするお手軽な方法は、Ctrl+Alt+F2などで別のVTに切り替えることです。私はよくこれを忘れてしまって大変なことになります。デスクトップに戻ってみると、開いていたアプリケーションにわけのわからない文字が書き込まれているのです。でも、ディスプレイが壊れてしまったというのにどうやってデスクトップを見ればいいのでしょう？ごくまれにではありますが、私はスマホからVNCで入ることがあります。ラップトップ側にはx11vncをインストールしました。これはとてもシンプルで、セットアップも不要です。インストールして実行すればIPアドレスとポートを知らせてくれるので、それをVNCクライアントに設定すればいいのです。bVNCは、私が二番目に試したVNCクライアントです。最初が何だったかは忘れてしまいましたが、最初に試したクライアントではマウスカーソルが表示できませんでした。理屈のうえでは、やりたいことは何でもVNC経由でできるはずです。しかし私にとっては、画面の描画を更新するときのFPSが遅すぎるし、いちいちピンチしてズームしないと何もできないという残念な環境でした。デスクトップの解像度をスマホにあわせればいいのかもしれませんね。まあ、私はsshとtmuxがあれば十分幸せです。しかし、Gimpで画像編集をするときだけはVNCに戻ってきます。さて、これで準備は整いました。rootもとったしグラフィカルにアクセスできるようにもなったし、物理キーボードも手に入れました。できないことなど何もないでしょう。しかし、もう少し使い勝手をあげる手がまだあります。書籍の執筆経験がないかたもいらっしゃるでしょうが、私のやりかたを簡単に説明しておきます。neovimとmarkdownとpandocがあれば、いとも簡単に実現できる方法です。章ごとに1.mdや2.mdといったファイルを用意します。そして、以下のようなスクリプトでそれらをひとまとめにしたPDFを作ります。#!/bin/bash
echo "building..."
mkdir -p build
rm -f build/book.md
cp -rf .md build
for chapter in $(ls build/.md); do
  echo &gt;&gt; $chapter
  echo '\pagebreak' &gt;&gt; $chapter
  echo &gt;&gt; $chapter
done
cat build/*.md &gt; build/book.md
pandoc -f markdown -o book.pdf build/book.md
echo "built"

私のブログでは、静的サイトジェネレータであるJekyllを使っています。こちらも同じくmarkdownを使っているので、ここでもneovimが使えます。ブログはGithubに置いているので、git pushするだけで記事を公開できます。記事の執筆時にはjekyll serveを使ってhost: 0.0.0.0を設定しているので、スマホのブラウザから192.168.42.177（ラップトップのIPアドレス）にアクセスすれば、公開前の投稿を確認できます。この地でのインターネット環境は、ダイアルアップ時代よりもひどいものです。一日の半分はまったくつながらない状態だし、残りの半分だって10kbpsにも満たない断続的な接続しかありません。pingの結果はだいたいこんな感じです。そこで私が活用しているのが、ビジュアルなpingを実行し続けることです。そうすれば、ネットワークの現状をすぐに把握できます。たとえば図のようになります。赤が多ければ、今はGoogle検索は控えておこうと判断できます。しかし、もしほんの少しでも色がついていれば、少なくともelinks上で「r」（デフォルトのCtrl+Rから変更しています）を押して再読み込みをかけることはできます。まあ数分後には、新着メールが届いているかどうかを確認できるでしょう。ちょっとしたスクリプトを書いて、ネットワークの現状を音で把握できるようにしました。部屋で他の作業をしながら、インターネット接続が使えるようになるまで待つことができるのです。接続が切れているときは何も音が鳴りません。ビープ音のピッチが高くなればなるほど、pingの応答時間が短くなっていることを意味します。ひとつはっきりさせておきたいのは、elinksはリモートサーバー上で動かすべきだということです。リモートサーバー上のほうが、ネットワーク帯域も広いし接続の信頼性も高いでしょう。テキストベースのブラウザであるとはいえ、ページ全体をダウンロードする必要があることは変わりません。elinksの利点は、ネットワーク上に流す必要があるのがテキストのページだけだということです。moshの差分アルゴリズムを使えば、ほんの数バイト程度になります。elinksを使う際のヒントを三つ紹介します。elinksには大きな弱点がふたつあります。ひとつは、SNI SSLページに対応していない点です。つまり、最近のHTTPSサイトの大半を読み込めないということです。SNIを有効にするパッチもありますが、今まで試そうと思ったことはありません。もうひとつは、JSの対応が不完全だという点です。最近話題のSPAが出てきたらお手上げです。elinksがSNIやJSをサポートしていないことがきっかけで私が開発したのがtexttopです。これは、Firefoxブラウザをターミナルにテキストベースで表示させて、インタラクティブに操作できる仕組みです。hiptextを使って、GUIをテキストとしてレンダリングしています。ASCIIアートと似ていますが、もう少し優れたものです。また、マウスのエスケープシーケンスにも対応していて、スクロールやクリックやズームができます。実際にこれを使わざるを得なくなったのはたった一度だけで、Digital OceanのアカウントからAPIキーを取得するときのことでした。でも、必要とあらば、ダイヤルアップ環境上でどんなサイトにもアクセスできるということを知っておくだけでも安心できます。
