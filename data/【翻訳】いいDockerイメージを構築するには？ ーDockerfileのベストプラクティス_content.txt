Building good docker images （2014-10-3） by Jonathan BergknoffDockerレジストリは、今やあふれんばかりの状況です。これを書いている時点で、”node”と検索すれば、1000件弱の結果がヒットします。どうやって選べばいいのでしょうか？いい悪いは主観ではありますが、私がいいと考えるDockerイメージには、いくつかの基準があります。残念ながらDockerレジストリでは、”いい”イメージを見分けるのは容易ではありませんし、特定のイメージを判別するのにも手間がかかる状況です。docker pull &lt;...&gt;の問題であることが多いですが、なぜ10メガバイトのnodeのバイナリに10ファイルのシステムレイヤが必要で、最終的には700メガバイトの仮想環境になるのか理由が分からなくなってきます。何が”いい”Dockerイメージかという普遍的な尺度はなく、Dockerレジストリに新たなイメージを追加する障壁も非常に低いため、状況はxkcd #927と全く同じです。つまり、それぞれが好き勝手にやっています。そこで、言語に特化した”オフィシャル”のDocker開発環境の導入は、いいスタートになると思います。この中に、私が愛用している手法（下記参照）のいくつかが含まれているのはうれしいですね。しかし、”数千ものnodeのイメージ”という状況は、Dockerレジストリの検索と評価メカニズムが強化されるまでは、恐らく改善しないでしょう。そういう訳で、ここでは私が考えるDockerfileのベストプラクティスをまとめてみることにします。私もエキスパートという訳ではないので（Dockerがまだ出てきたばかりのサービスであることを考えると、現時点ではまだ誰もエキスパートではないとは思いますが）、どんなご意見やフィードバックも大歓迎です。このブログを書いている時点では、Ubuntu（バージョン14.04）は195MB、debian:Wheezyだと85MBになります。このUbuntuでの100メガバイトちょっとの超過分には実際なんの意味もありません（私が見る限り）。極端なケースだと、busyboxを使えば更に2MBほど削減することができます。これは、静的にリンクされたバイナリと一緒に使う時のみ現実的な手法でしょうか。progrium/logspoutリンクはこちらは14MBにまで小さくまとめられています。busyboxを使ったDockerイメージの良い例です。ビルドツールは大きなスペースを必要としますし、ソースコードを使うのでたいてい時間がかかります。既に普及しているソフトウェアを利用するだけの場合、普通はソースからビルドする必要はないでしょう。むしろお勧めしません。従って例えば、最新のnode.jsをアップしてDebianホストで動かすためだけに、PythonやGCCまでインストールする必要もありません。Node.jsソースコードのバイナリtarballなら、Node.jsのダウンロードサイトから手に入ります。同様にRedisについてもパッケージマネージャを使ってインストールすることができます。ビルドツールを使った方がいいのは、少なくとも次のような理由がある時だけです。このうち2番目のケースにあたる場合には、本当に実行するべきかしっかり検討してください。3番目の理由によってビルドツールをインストールする場合には、最小のnode.jsイメージを素材にした別の”npm installer”イメージとしてインストールすることをお勧めします。このDokerfileは、109MBものイメージサイズになっています。一方、同じように見えるこのDokerfileを確認すると、イメージサイズは99MBです。要するに、Dokerfile上の各ステップでディスクにファイルを残したままにした場合、その分のスペースは後でファイルを消しても戻ってこないのです。コマンドのアウトプットをパイプで繋ぐだけで、テンポラリファイルを全く作らずにコマンド実行することも可能です。例えば、を実行した場合、ファイルシステム上にファイルを保存することなく、直接tarballを抽出することができます。コンテナのセットアップ時にapt-get updateを実行すると、イメージが完成した時点で不要になるデータが/var/lib/apt/lists/に移動します。このディレクトリを安全に空にして、数メガバイト節約することができます。次のDockerfileは99MBのイメージを生成します。一方、こちらは90MBのイメージを生成します。Dockerイメージは不変ですが（その点は非常に優れていますが）、Dockerfileが実行時に毎回同じ出力結果が得られる保証はありません。問題はもちろん外部の状況なので、私たちにはほとんどどうすることもできません。ベストなのは、Dockerfileに関する外部の状況の影響を可能な限り最小限に抑えることです。そのためのシンプルな方法は、パッケージマネージャを通じてアップデートするときに、パッケージのバージョンをピンすることです。以下にその方法の例を示します。パッケージのリポジトリが来年の今頃もこのバージョンを提供していればいいのですが、そういう保証はありません。いずれにせよ、あなたのイメージが依存しているソフトウェアのバージョンを明確に示すことは間違いなく有用です。もし関連性のあるコマンドが続く場合は、1つのRUNコマンドで連結するのがベストです。これはより重要なビルドキャッシュに効果的で（論理的にグループ化されたステップが1つのキャッシュステップにまとめられます）、ファイルシステムのレイヤ数を抑えます（一般的に望ましいことだと考えられますが、客観的に優れているかどうかは分かりません）。以下のバックスラッシュ（\）は、読みやすいように使用しています。これは”オフィシャル”のnode.js DockerイメージのDockerfile（リンクはこちら）を読んでいて気付いたコツです。余談ですが、このDockerfileは優れています。1つだけ難点を言うと、巨大なbuildpack-deps（リンクはこちら）イメージの上に私には不要なありとあらゆるものと一緒にあることです。ENV NODE_VERSION 0.10.32RUN curl -SLO “http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz” \
    &amp;&amp; tar -xzf “node-v$NODE_VERSION-linux-x64.tar.gz” -C /usr/local –strip-components=1 \
    &amp;&amp; rm “node-v$NODE_VERSION-linux-x64.tar.gz”
“`この記事については、こちらのHacker Newsの投稿でさらに検討しています。
