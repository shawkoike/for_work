How to find Node.js Performance Optimization Killers （2017-01-18） by Vladimir de Turckheim
サイバーセキュリティエキスパートでSqreen.ioのNode.jsリードエンジニア。主にHapi.jsプロジェクトにおけるJavaScriptのオープンソースプロジェクトに数多く従事。皆さんは“Node.jsではコードが動的に最適化される”という記事を幾つか読んだことがあるかもしれません。本稿では、この文言が意味するところとコードが最適化される箇所の見つけ方について見ていきます。Node.jsのパフォーマンス最適化を阻むものについて述べた本稿をご覧いただいたあとには、以下のことができるようになります。このアジェンダは大げさですが、記事は至ってシンプルです。目指しているのは、上記の方法論を多くのNode.js開発者に役立てることです。Node.jsをどの仮想マシン上でも使用可能にするという計画はあるものの、2017年1月現在ではNode.jsのインスタンスのベース部分はV8 JavaScriptエンジンです。本稿のスコープではその部分にフォーカスします。JavaScriptのコードのスタティックな分析は非常に複雑なものです。その結果、他の言語とは違ってJavaScriptのコードをコンパイル時に最適化するのは難しくなります。V8ではコードは動的に最適化される。つまり、コードはランタイムの振る舞いに従って最適化される。クリックしてツイート最適化のプロセスは実行中に発生します。V8はコードの挙動を分析し、経験則（ヒューリスティック）を発展させ、観測に基づいた最適化を遂行します。例えば、V8は型アサーションを遂行できるかどうかを見極めるために、関数の入力と出力を監視しています。関数の引数が常に同じ型であれは、そのアサーションを使って関数を最適化しても問題ないでしょう。V8には別のやり方で遂行する最適化もありますが、引数の型に基づいた最適化は恐らく最も説明しやすいものです。以下の小さなスニペットをご覧ください。このファイルを実行する場合、通常、皆さんが使用するのは$ node index.jsコマンドだと思います。最適化をトレースするため、コマンドラインに引数を追加します。では、実行しましょう。| grep myFuncの部分が末尾にあるのは、単に観察する関数に関連したログを付けるためです。結果は標準出力上で表示されます。関数は再コンパイル用にマークが付けられています。これが関数の最適化の第一歩です。その後、関数は再コンパイルされ、最適化されます。前述のコードとほとんど同じですが、ここでは数値だけで関数を呼び出した後に文字列で呼び出します。+演算子が数値の加算や文字列の連結に使用できるため、これも完全に有効なコードです。以下を使って、このコードを実行してみましょう。ログの最初の部分は、先ほどのものに非常によく似ています。しかし、続く部分では関数が最適化前の状態に戻されており、V8は、（”myFuncの入力が数値”）より前になされた型の推定が偽であると検出しています。ここまでの簡単な例で、関数の最適化と最適化戻し（De-optimization）をトレースする方法を見てきました。また、V8による経験則（ヒューリスティック）がいかに脆弱であるかも確認しました。これらから、以下のように言うことができると思います。JavaScriptの型付けの強さに関係なく、V8には最適化のルールがある。従って、引数として一貫した型付けを持ち、関数の値を返すことが望ましい。前述の例では、最適化される前、再コンパイル用に関数にマークが付けられました。ただし、場合によっては、V8は関数を最適化不可としてマークすることもあります。次のコードを実行してみましょう。このmyFuncでは、最適化用にマークが付けられる代わりに、”最適化不可”としてマークされています。その理由は、ログ内の”TryCatchStatement”を見れば明らかです。基本的にtry-catchのステートメントを含む関数は、最適化できないものと見なされます。そのロジックは至って簡単です。JavaScriptには、実行時の振る舞いが大きく異なるパターンがあります。V8はそれらの関数に対して、最適化戻しのアリ地獄にはまらないよう、あらかじめ最適化しないことを決定しているのです。関数が実行時に最適化と最適化戻しを何度も繰り返すことで、V8は最適化戻しのアリ地獄にはまります。最適化と最適化戻しが数サイクル行われると、V8はメソッドを最適化できないものとしてフラグを立てます。しかし、このサイクルで失われる時間は相当なもので、プロセスのパフォーマンスとメモリ消費に大きな影響を与えます。V8による最適化を止めるパターンは、他にも数多くあります。詳しくはGithubのリポジトリにリストされているのでご覧ください。次に、さほどエレガントとは言えませんが、try-catchステートメントの例を使った非最適化のパターンを扱うメソッドを見ていきたいと思います。では、始めましょう。このログからは以下のことが分かります。以上のことから、V8の最適化については、もう1つ言うことができるでしょう。非最適化パターンを、最適化されない個別の関数に分離する。この記事では、Node.jsの最適化、最適化戻し、そして非最適化をトレースする方法を見てきました。Node.jsのコード最適化に臨むに当たり、いい出発点となるでしょう。最適化と最適化戻しを高度に追求したい場合、IRHydraというツールがあります。Eugene Obrezkovのブログに、Node.jsでの簡単な使い方が紹介されているので見てみてください。この記事が興味深いと思われた方はぜひ共有してください。また、Sqreenや私の記事に関して疑問点や話したいことなどがあれば、Twitterやeメール（vladimir@sqreen.io）で私宛に遠慮なくご連絡いただければと思います。
