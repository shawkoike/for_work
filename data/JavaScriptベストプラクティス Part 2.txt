<p><a href="http://www.thinkful.com/learn/javascript-best-practices-2/" rel="nofollow" title="" class="ext-link">Javascript BEST PRACTICES PART 2</a> （2015-2-16） by <a href="http://www.thinkful.com/" rel="nofollow" title="" class="ext-link">Thinkful</a></p><p>「ベストプラクティス」パート2でも、引き続きMozillaのWebエバンジェリストである<a href="http://www.slideshare.net/cheilmann/javascript-best-practices-1041724" rel="nofollow" title="" class="ext-link">Christian Heilmannが提供するスライドショー</a>から内容を抜粋します。<a href="http://postd.cc/javascript-best-practices-part-1/">パート1</a>同様、ご紹介するのはメンテナンス性が高く効率の良いコードを書く手助けとなるJavaScriptのベストプラクティス例です。JavaScriptがソフトウェア開発で大きな割合を占めているような場合、不要なものがなく読みやすいコーディングがより重要になってきます。</p><p>もしWeb開発についてもっと学びたいと思うのであれば、私たちが提供している<a href="http://wow.thinkful.com/courses/learn-web-development-online/?utm_source=tf_js_best_practices_guide_2&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides" rel="nofollow" title="" class="ext-link">フロントエンドWeb開発コース</a>、もしくは<a href="http://wow.thinkful.com/courses/learn-angularjs-online/?utm_source=tf_js_best_practices_guide_2&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides" rel="nofollow" title="" class="ext-link">AngularJSコース</a>を覗いてみてください。</p><p>早速始めましょう</p><p>入れ子があるレベルを超えると、コードを読むのが困難になります。</p><p>お勧めできないのがループ文にループ文を入れ子することです。こうなると複数のイテレータ変数が扱われることになってしまいます（i、j、k、l、m…）。</p><p>過度な入れ子やループ文同士の入れ子は、専門ツールのメソッドで避けることが可能です。</p><p>ひどいエディタと狭い画面を考えてみるといいでしょう。</p><p>JavaScriptで、ループの実行速度が極端に遅くなることがあります。</p><p>ほとんどの場合、ループに何らかの不具合があることがその原因です。</p><p>forループが繰り返されるごとに配列の長さがチェックされるようなコーディングはいただけません。長さの値は別の変数に格納するようにしましょう。</p><p>計算などの負荷がかかるコードはループの外に置くことをお勧めします。これは、正規表現はもちろんのこと、何よりもDOM操作において重要です。</p><p>ループ内でDOMノードを作成することはできますが、ドキュメントに追加することは避けましょう。</p><p>可能ならDOMへのアクセスは避けてください。</p><p><strong>理由：</strong> 動作が遅くなる。またDOMへの常時アクセスや変更に関連したブラウザの問題が多数起こる。</p><p><strong>回避策：</strong> データセットをHTMLに一括変換するヘルパーメソッドを使う。</p><p>メソッドを呼び出して1回ですべてがレンダリングできるように、できるだけデータセットをシードしておきましょう。</p><p>当てにならないブラウザの挙動に頼って、うまく動作するよう期待する代わりに…</p><p>コードをいじり回すのではなく、問題を詳細に分析しましょう。</p><p>インターフェイスのプランニングがまずかった場合などは、必要のない関数が見つかることが多々あります。</p><p>良いコードは、取り込まれるどんなデータも信用しません。</p><p>Firebugなどがあれば、誰でも文書に手を加えることができます。</p><p>typeofでテストした後、必要な処理を行います。</p><p>DOMの要素に変更を加える前に、想定した内容であるかどうかをテストして確認します。</p><p>JavaScriptのクラッキングはコーディングと同じくらい簡単です。</p><p>あなたがJavaScriptで大量のHTMLを作成しているなら、それは正しいやり方ではないかもしれません。</p><p>DOMを使った作成は不便だし、<strong>innerHTML</strong>（IEの処理中断エラー）を使うにも試行錯誤が必要です。また、作成したHTMLの品質を管理するのも大変です。</p><p>JavaScriptが有効な時にだけ使えるようにする大きなインターフェイスがある場合は、インターフェイスをAjaxで静的なHTML文書としてロードしましょう。</p><p>これでHTMLを継続してメンテナンスし、カスタマイズもできるようになります。</p><p>JavaScriptは楽しいですが、ブラウザのためにJavaScriptを書くのはそれほど楽しくありません。最初は優れたライブラリを活用しましょう。</p><p>JavaScriptのライブラリはブラウザを動かし、ブラウザの欠点を補ってコードを予測しやすくするために構築されています。</p><p>優れたライブラリを使えば、メンテナンスコストをかけずに将来的にも安定した動作を期待できるコードを書くことができます。</p><p>本番のコードは機械のために書かれ、開発コードは人間のために書かれています。</p><p>Web開発についてもっと学びたいようであれば、<a href="http://wow.thinkful.com/courses/learn-web-development-online/?utm_source=tf_js_best_practices_guide_1&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides" rel="nofollow" title="" class="ext-link">フロントエンドWeb開発コース</a>や<a href="http://wow.thinkful.com/courses/learn-angularjs-online/?utm_source=tf_js_best_practices_guide_1&amp;utm_medium=tf_course_intro&amp;utm_campaign=tf_guides" rel="nofollow" title="" class="ext-link">AngularJSコース</a>のオンラインコースを受講されることをお勧めします。</p><p><a href="http://postd.cc/javascript-best-practices-part-1/">パート1はこちらから</a></p>
