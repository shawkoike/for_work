<p><a href="https://hacks.mozilla.org/2016/05/css-coding-techniques/" rel="nofollow" title="" class="ext-link">CSS coding techniques</a> （2016-05-18） by <a href="https://twitter.com/ladybenko" rel="nofollow" title="" class="ext-link">Belén Albeza</a></p><p><small>(2016/7/15、記事を修正いたしました。)</small></p><p>最近、ビギナーからベテランのデベロッパに至るまで、CSSに手を焼く人を多く見かけます。そうした人たちの中には、CSSの機能を好まず、別の言語を使った方がいいのではないかと考えている人もいます。もともと、CSSのプロセッサもこうした考え方から生まれました。書くべきコードを少なくできることを期待して（<a href="https://hacks.mozilla.org/2016/04/you-might-not-need-a-css-framework/" rel="nofollow" title="" class="ext-link">以前の記事で</a>ご紹介しているとおり、普通はそうではありません）CSSのフレームワークを使う人もいれば、CSSを完全に見限り、スタイルの指定にJavaScriptを使うという人もいます。</p><p>しかし、あなたが取り組んでいるパイプラインにCSSプロセッサをいつも取り入れる必要があるとは限りません。どんなプロジェクトであれ、開始の時点から、膨れ上がったフレームワークをデフォルトに取り込む必要はありません。また、CSSを使うところで、代わりにJavaScriptを使おうとすると、散々な目に遭うことになります。</p><p>本記事では、<strong>維持しやすいCSSコード</strong>、言い換えれば、ルールをできるだけ減らした短いスタイルシートをうまく書くためのヒントとオススメをご紹介したいと思います。CSSが厄介者ではなく、便利なツールと感じられるようになると思います。</p><p>CSSは宣言型の言語です。DOMで要素のスタイルを決めるルールを特定します。この言語では、ルールが適用される順序の中で、他のルールより<strong>優先されるルールがあります</strong>。例えばインラインスタイルといったもので、前に適用されたルールをオーバーライドします。</p><p>例として、以下のHTMLとCSSコードの場合を挙げてみます。</p><p>この場合、最初に<code>.button-warning</code>のルールが定義されていますが、その後に定義される<code>button, input[type=submit]</code>が、最後の<code>background</code>プロパティをオーバーライドしてしまいます。なぜでしょうか？　一方のスタイルがもう一方のスタイルをオーバーライドする場合、適用される方を決める基準は何なのでしょうか？</p><p>それは、<strong>詳細度</strong>です。</p><p>セレクタには、他よりも詳細な内容であると見なされるものがあります。例えば、<code>#id</code>セレクタは<code>.class</code>セレクタをオーバーライドします。</p><p>では、本当に必要としているものよりも詳細であると見なされるセレクタを使ったらどういうことが起こるでしょうか？　後になってそのスタイルをオーバーライドしたい場合には、もっと詳細なセレクタが必要になります。さらにその後で、この詳細なセレクタをオーバーライドしたい場合には、もっと、もっと…。と、そうです、これではスタイルシートは雪だるま式に大きくなり、最終的には維持することが非常に難しくなるのです。</p><p>ですから、セレクタを書くときは常に、「<strong>これは、ここで必要な役目を果たすセレクタとして最も低い詳細度なのか？</strong>」と自問してみることが大切です。</p><p>詳細度というルールの全てについては、正式に<a href="https://www.w3.org/TR/selectors/#specificity" rel="nofollow" title="" class="ext-link">W3C CSSセレクタ仕様に定義されています</a>。<em>これ</em>は、全てのCSSセレクタについて、1つ1つの詳細度を調べる手段です。より理解しやすいものについては、<a href="https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/" rel="nofollow" title="" class="ext-link">CSS詳細度に関するこちらの記事</a>を読んでください。</p><p>こんな典型的なシチュエーションを想像してみましょう。あなたのCSSにバグがあったため、どのDOM要素が間違ったスタイルを持っているのかを探しています。すると、どういうわけか、間違ったプロパティが継承されていることに気付くのです。</p><p><em>そこで、単にCSSを書き足さないでください</em>。そうすると、あなたのコードベースは少し大きくなり、その先起こり得るバグを見つけるのが少々難しくなります。</p><p>代わりに、いったん立ち止まり、距離を置いてみましょう。そして、要素を詳しく調べるためにブラウザでデベロッパツールを使い、カスケード全体を見てみます。あなたが意図していないスタイルを指定しているのはどのルールなのか、正確に識別します。そして、そうした間違った結果にならないように、その既存のルールを変更するのです。</p><p>Firefoxでは、ページ内の要素を選んで右クリックし、<code>Inspect element</code>(<em>訳注：日本語版では「要素を調査」</em>)を選択すると、CSSファイルをデバッグすることができます。</p><p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/05/image00.png" alt="image00"></p><p>称賛に値するこのカスケードを見てください。ここでは、各要素に適用されるルールの全てを、適用される順序のとおりに確認することができます。トップに入力された要素はより高い詳細度を有するものであり、それより前のスタイルをオーバーライドすることができます。中には、いくつかのプロパティを持つルールに削除線が引かれていることも分かります。つまり、より詳細とされるルールがそのプロパティをオーバーライドしているのです。</p><p>また、あなたはルールを見るだけでなく、実際にオンとオフを切り替えたり、その場で臨機応変に変更したりすることにより、結果を観察することができます。これは、バグの修正をする際には大変便利です。</p><p>必要な修正はルールの変更かもしれませんし、カスケードの中の異なるポイントでのルール変更かもしれません。修正には新しいルールが必要になる場合もあります。ただ、少なくとも、それが正しい判断だったということと、あなたのコードベースが何を必要としているかということは分かるでしょう。</p><p>これは、<strong>リファクタリングの機会</strong>を探すのにいいタイミングでもあります。CSSはプログラミング言語ではありませんが、<em>ソースコードです</em>。JavaScriptやPythonに対して配慮するのと同じように、CSSにも気を配る必要があります。つまり、きれいに、読めるように、そして必要なときにリファクタリングができるようにしておくべきなのです。</p><p>このことは以前の勧告からも暗に伝えられてはいますが、重要ですから再度強調しておきます。<strong>コードの中で、<code>!important</code>を使ってはいけません。</strong></p><p><code>!important</code>とは、カスケードを無視することができるCSSの機能です。CSSとは、「Cascading Style Sheets（<em>訳注：カスケードとは日本語で”階段状に連続した滝”を意味します</em>）」の略で、これがヒントです。</p><p><code>!important</code>は、急いでバグを修正しようとしているときに、カスケードを修正する時間や意志がない場合に使われがちです。また、<a href="https://hacks.mozilla.org/2016/04/you-might-not-need-a-css-framework/" rel="nofollow" title="" class="ext-link">非常に詳細なルールを持ったCSSフレームワーク</a>を含むために、単純に大変すぎてオーバーライドできないという場合にも多く使われる傾向があります。</p><p><code>!important</code>をプロパティに追加すると、ブラウザはその他の高い詳細度のルールを無視します。<code>!important</code>のルールを使って、同じく<code>!important</code>とマークされた別のルールをオーバーライドしようとした場合には、本当に困った状況に陥るということはお分かりいただけるはずです。</p><p>ただし1つだけ、<code>!important</code>にも合理的な使い方があります。デバッグのためにデベロッパツールを使って作業をする少しの時間だけ使うのです。あるバグを修正するにはどのプロパティ値を変えなければいけないのかを探すことがあります。そんなとき、デベロッパツールに<code>!important</code>を使い、CSSルールをその場で変更することで、カスケードを無視して値を見つけることができます。</p><p>CSSのどの部分がバグを起こしているのかが分かったらコードに戻り、カスケードのどのポイントにそうしたCSSを入れ込みたいのかを見ることができます。</p><p><code>px</code>（ピクセル）および<code>%</code>（パーセント）単位での作業は非常に直感的なものなので、ここではあまり知られていない、あるいはあまり直感的でない単位に注目してみましょう。</p><p>最もよく知られている相対的な単位はemです。1emは、その要素のフォントサイズに相当します。</p><p>次のような小さなHTMLがあるとします。</p><p>加えて、これだけのルールからなるスタイルシートがあるとします。</p><p>ほとんどのブラウザは、デフォルトではルート要素（ところで、これはユーザによってオーバーライドできます。素晴らしいアクセシビリティ機能です）に16ピクセルのベースフォントサイズを適用しています。というわけで、このarticle要素のテキストはおそらく20ピクセル（<code>16 * 1.25</code>）の<code>font-size</code>でレンダリングされます。</p><p><code>h1</code>はどうでしょうか？　どうなるかをもっとよく理解するために、スタイルシートに、この他のCSSルールを追加してみましょう。</p><p>これもまた<code>1.25em</code>であり、先の<code>article</code>の場合と同じではありますが、しかし、こちらは<code>em</code>単位が組み合わされていることを考慮する必要があります。というのは、例えば<code>h1</code>がbody要素の直接の子要素だった場合、その<code>font-size</code>は20ピクセル（16 * 1.25）になります。しかし、ここでの<code>h1</code>はルートとは異なる<code>font-size</code>を持つ要素（<code>article</code>）の内部にあるのです。この場合、<code>1.25</code>はカスケードにより与えられる<code>font-size</code>を表します。そのため、<code>h1</code>は25ピクセル（16 * 1.25 * 1.25）の<code>font-size</code>でレンダリングされるのです。</p><p>ところで、頭の中でこうした掛け算の全てを行う代わりに、<code>Inspector</code>(<em>訳注：インスペクタ</em>)タブの<code>Computed</code>(<em>訳注：計算済み</em>)を使うことができます。これは、実際の最終的な値をピクセルで表示してくれます。</p><p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/05/image01.png" alt="image01"></p><p><code>em</code>単位は非常に汎用性があります。例えば、動的なものであっても、ページの全てのサイズ（<code>font-size</code>だけでなく、<code>line-height</code>といった他のプロパティや、<code>width</code>まで）を実に簡単に変更してくれます。</p><p><code>em</code>は「ベースに対する相対サイズである」という点は好ましいけれども、組み合わせの部分が気に入らないという場合は、<strong><code>rem</code>単位</strong>を使うことができます。<code>rem</code>単位は、<strong>組み合わせを無視</strong>して、単にルート要素のサイズを使う<code>em</code>のようなものです。</p><p>そのため、先のCSSを用いて<code>h1</code>の<code>em</code>単位を<code>rem</code>単位に変更する場合は以下のとおりになります。</p><p>全てのh1要素は20ピクセル（<code>16px</code>のベースサイズを想定）と算出された<code>font-size</code>となり、articleの中に含まれているかどうかは関係ないということになります。</p><p><b><code>vw</code>と<code>vh</code>は、ビューポート単位</b>です。<code>1vh</code>は、ビューポートの高さの1％であり、<code>1vw</code>は、ビューポートの幅の1％です。</p><p>常に実際のbodyの大きさに関係せず、画面全体を占有する必要がある（モーダルの典型的な半透明の背景など）UI要素が必要な場合、これらは非常に便利です。</p><p>それほど一般的ではなく、あるいは汎用性もないと思われる単位が他にもありますが、そのようなものでは必ずつまずくでしょう。<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length" rel="nofollow" title="" class="ext-link">MDNで</a>詳細を学ぶことができますよ。</p><p>このことについては既に、<a href="https://hacks.mozilla.org/2016/04/you-might-not-need-a-css-framework/" rel="nofollow" title="" class="ext-link">以前ご紹介しているCSSフレームワークに関する記事</a>の中で触れています。flexboxモジュールは、レイアウトの作成や調整といった作業を単純化してくれるものです。flexboxを使ったことがないならば、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" rel="nofollow" title="" class="ext-link">こちらの入門ガイド</a>をチェックしてみてください。</p><p>そして、<em>そうです、今日では</em>flexboxが使えるのです。ただし、古いブラウザをビジネス上の理由でサポートしなければならないという場合は除きます。現在、<a href="http://caniuse.com/#search=flexbox" rel="nofollow" title="" class="ext-link">ブラウザのflexboxに対するサポートは94％を超えています</a>。そのため、デバッグや維持が困難なフローティングの<em>div</em>全てを書かなくてもよいのです。</p><p>なお、実装のレイアウトをスムーズに進ませる今後の<a href="https://hacks.mozilla.org/2015/09/the-future-of-layout-with-css-grid-layouts/" rel="nofollow" title="" class="ext-link">グリッドモジュール</a>については注意を怠らないようにしてください。</p><p>SassやLessなどのCSSコンパイラは、フロントエンド開発の世界で非常に人気があります。これらは強力なツールであり、うまく使えばCSSでより効率的に作業することができます。</p><p>これらのプロセッサ、または「コンパイラ」の共通の特徴は、セレクタのネストです。例えば、以下のLessのコードがあるとします。</p><p>これは以下のCSSルールに変換されます。</p><p>この機能のおかげで、書くコードを減らし、通常DOMツリーの中で一緒になっている要素に影響するルールをグループ化することができます。これはデバッグに便利です。</p><p>しかしながら、この機能が誤用され、CSSセレクタにDOM全体を複製してしまうこともよくあります。つまり、</p><p>上のようなHTMLに対し、以下のようなCSSスタイルシートになってしまうような場合です。</p><p>主な欠点と言えば、これらのCSSルールは<strong>非常に詳細なセレクタ</strong>を有することです。これが避けるべきことであるということは、ここまでにお話ししてきました。過剰なネストには他の欠点もあり、それは<a href="http://belenalbeza.com/the-dangers-of-nesting-abuse-in-css-compilers/" rel="nofollow" title="" class="ext-link">別の記事で</a>お話ししています。</p><p>まとめますと、<strong>ネストに自身で書かないであろうCSSルールを作らせないことです</strong>。</p><p>CSSプロセッサの役立つ機能には、<strong>mixin</strong>というものもあります。これは、CSSの再利用可能なチャンクです。例えば、ボタンのスタイルを設定したいとしましょう。それらのほとんどは、いくつかの基本的なCSSプロパティを持っています。Lessではこの例のようなmixinを作成することができます。</p><p>そして、このようなルールを作成します。</p><p>これは、以下のCSSを生成します。</p><p>ご覧のとおり、共通のコードをリファクタリングするのに非常に便利です。</p><p>Mixinを「includeする」こと以外に、これを「extendする」、あるいは「継承する」（正確な用語はツールごとに異なります）というオプションもあります。この機能は、同じルールに複数のセレクタを組み合わせることができます。</p><p>それでは、先の<code>.button-base</code>のmixinを使用した例を見てみましょう。</p><p>これが以下のように変換されます。</p><p>インターネット上の記事の中には、「include」のみを使うように書かれているものもあれば、「extend」のみを使うように書かれているものもあります。実際のところ、それらは<em>異なる</em>CSSを生成するものであり、<strong>いずれも本質的に間違ってはいません</strong>。実際のシナリオに応じて、どちらか一方を使用するといいでしょう。</p><p>では、その選択方法は？　ここでも、「これを手作業で書くかどうか？」と考える経験則に基づくことになります。</p><p>本記事の内容があなたのCSSコードに反映され、より良いルールを記述できる助けになればと願っています。最初にお話ししたことを思い出してください。CSSもコード<em>であり</em>、それ自体が、あなたのコードベースの他の部分と同様に、注目され、気を配られる価値があります。そこもよくかまってあげると、報われますよ。</p>
