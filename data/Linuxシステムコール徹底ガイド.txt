<p><a href="http://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/" rel="nofollow" title="" class="ext-link">The Definitive Guide to Linux System Calls</a> （2016-04-05） by <a href="https://packagecloud.io/" rel="nofollow" title="" class="ext-link">PackageCloud</a></p><p>この記事では、LinuxカーネルにてLinuxプログラムがどのように関数を呼び出すのかについて紹介していきます。</p><p>システムコールを行う様々な方法、システムコールを行うための独自のアセンブリの作成方法（例あり）、システムコールへのカーネルエントリポイント、システムコールからのカーネルイグジットポイント、glibcのラッパ関数、バグなど多くの点について説明します。</p><p><code>open</code>や<code>fork</code>、<code>read</code>、<code>write</code>（その他多く）を呼び出すプログラムを実行する場合、あなたはシステムコールを行っていることになります。</p><p>システムコールとは、プログラムがカーネルにアクセスしてタスクを実行する方法のことです。プログラムはシステムコールを使ってプロセスを作成したり、ネットワークの操作やファイルの入出力を行ったりと、様々なオペレーションを実行します。</p><p><a href="http://man7.org/linux/man-pages/man2/syscalls.2.html" rel="nofollow" title="" class="ext-link">syscalls(2)のマニュアルページ</a>にシステムコール一覧が掲載されています。</p><p>ユーザプログラムでシステムコールを行う方法はいくつかあり、それを行うための低水準命令はCPUアーキテクチャによって異なります。</p><p>アプリケーション開発者は通常、どれだけ正確にシステムコールが行われているかということについて、深く考える必要はありません。通常の関数と同様に、単にヘッダファイルを適切にインクルードし、呼び出せばいいのです。</p><p><code>glibc</code>は、根本的なコードを抽象化するラッパコードを提供します。この根本的なコードは、あなたが渡した引数を配置しカーネルに入り込みます。</p><p>どのようにシステムコールが行われるかを詳しく説明する前に、いくつかの条件を明確にし、後に出てくる核となる概念を検証していきましょう。</p><p>この記事では、以下の条件を前提としています。</p><p>この記事でのx86-64とは、x86アーキテクチャに基づいた、64ビットのIntelやAMD CPUを指します。</p><p>ユーザプログラム（例えば、エディタやターミナル、sshデーモンなど）は、Linuxカーネルと対話する必要があります。独自で実行することができないユーザプログラムに代わって、カーネルが一連の操作を行うためです。</p><p>例えば、ユーザプログラムが<code>open</code>や<code>read</code>、<code>write</code>といったシステムコールで入出力を行ったり、<code>mmap``  `や</code>sbrk“`などでアドレス空間を修正したりする必要がある場合、カーネルが起動され、ユーザプログラムに代わってそれらのアクションを完了させます。</p><p>では、ユーザプログラム自身がそれらのアクションを行えないのは、何によるものでしょう？</p><p>実は、x86-64CPUには、<a href="https://en.wikipedia.org/wiki/Privilege_level" rel="nofollow" title="" class="ext-link">特権レベル</a>と呼ばれる概念があります。特権レベルはそれだけで記事が書けるほど、複雑なトピックです。この記事では、この特権レベルの概念を以下のように（大幅に）簡素化しています。</p><p>特権的な操作をユーザプログラムが行うには、”Ring 3″から”Ring 0″に特権レベルの変更を行い、カーネルが実行できるようにしなければなりません。</p><p>特権レベルを変更し、カーネルがアクションを行えるようにするには、いくつかの方法があります。</p><p>それでは、その一般的な方法の1つである、割り込みから見ていきましょう。</p><p>割り込みは、ハードウェアやソフトウェアによって生成された（または”発生した”）イベントと捉えることができます。</p><p>ハードウェア割り込みは、ハードウェアデバイスによって発生し、特定のイベントが起こったということをカーネルに通知します。この種の割り込みの一般的な例として、NICがパケットを受け取った時に生成される割り込みが挙げられます。</p><p>ソフトウェア割り込みは、コードを実行することによって発生します。X86-64のシステムでは、ソフトウェア割り込みは、<code>int</code>命令を実行することによって発生させることができます。</p><p>割り込みは通常、それぞれの割り込みに対して番号が付与されますが、これらの割り込み番号の中には、特別な意味を持つものがあります。</p><p>CPUのメモリ内に存在する配列を想像してみてください。配列への各エントリが割り込み番号にマップされます。各エントリには、いくつかのオプションとともに割り込みが受信された際にCPUが実行する関数のアドレスが含まれています。このオプションは、どの特権レベルで割り込みハンドラの関数が実行されるべきかといった内容のものです。</p><p>以下は、Intel CPUマニュアルに掲載されている画像で、この配列でのエントリのレイアウトを示しています。</p><p><img src="http://blog.packagecloud.io/images/idt.png" alt="Screenshot of Interrupt Descriptor Table entry diagram for x86_64 CPUs"><br>
<em>注釈：割り込み/トラップゲート<br>
予約済み<br>
オフセット 63..32<br>
オフセット 31..16<br>
セグメントセレクタ<br>
オフセット 15..0<br>
DPL：ディスクリプタ特権レベル<br>
オフセット：エントリポイントの手続きへのオフセット<br>
P：セグメントPresentフラグ<br>
セレクタ：行き先のコードセグメントのセグメントセレクタ<br>
IST：割り込みスタックテーブル<br>
図5-7. 64ビットIDTゲートディスクリプタ</em></p><p>図をよく見てみると、DPL(Descriptor Privilege Level)とラベル付けされている2ビットのフィールドがあることが分かります。このフィールドの値は、ハンドラ関数が実行された時にCPUが得る最低限の特権レベルを決めます。</p><p>このようにして、特定のタイプのイベントが受信された時にどのアドレスをCPUが実行すべきか、そのイベントに対するハンドラがどの特権レベルで実行されるべきかをCPUが判断します。</p><p>実際、x84-64システムには、多くの異なる割り込み方法があります。詳細は、<a href="http://wiki.osdev.org/8259_PIC" rel="nofollow" title="" class="ext-link">8259 Programmable Interrupt Controller（割り込みコントローラ）</a>、<a href="http://wiki.osdev.org/APIC" rel="nofollow" title="" class="ext-link">Advanced Interrupt Controllers（高度な割り込みコントローラ）</a>、<a href="http://wiki.osdev.org/IOAPIC" rel="nofollow" title="" class="ext-link">IO Advanced Interrupt Controllers（高度なIO割り込みコントローラ）</a>をご覧ください。</p><p>この他にも、ハードウェア・ソフトウェア両方の割り込みを扱う際には、割り込み番号の衝突や再マッピングといったような、複雑な問題が含まれることになります。</p><p>システムコールについて説明をする上で、これらの詳細を気にする必要はありません。</p><p>MSRとして知られるモデル固有レジスタは、CPUの特定機能を制御する、特別な目的を持った制御レジスタです。CPUドキュメントは、MSRそれぞれのアドレスをリストしています。</p><p>MSRを読み込んだり書き込んだりするには、個々に対して、CPU命令の<code>rdmsr</code>、<code>wrmsf</code>を使用することができます。</p><p>また、MSRを読み込んだり書き込んだりすることができるコマンドラインツールがありますが、注意して行わなければなりません。値の変更（特にシステムが起動している最中）はとても危険なことなので、このツールを使用することは<em>お勧めしません。</em></p><p>システムを不安定にさせたり、元に戻せないほどデータを破壊したりすることを恐れないのであれば、<code>msr-tools</code>をインストールし、<code>msr</code>カーネルモジュールをロードすることで、MSRを読み込みこんだり、書き込んだりすることが可能です。</p><p>この後に紹介するいくつかのシステムコールの方法でMSRを活用します。</p><p>独自のアセンブリコードを書いてシステムコールを呼び出すことはいいアイデアとは言えません。</p><p>その大きな理由の1つは、いくつかのシステムコールには、システムコールの実行前後にglibcで実行される追加のコードがあるからです。</p><p>以下の例では、<code>exit</code>システムコールを使用します。<a href="http://man7.org/linux/man-pages/man3/atexit.3.html" rel="nofollow" title="" class="ext-link"><code>atexit</code></a>を使ったプログラムで<code>exit</code>が呼び出される時、実行するための関数を登録できることが分かっています。</p><p>これらの関数はカーネルではなく、glibcから呼び出されます。ですから、以下のように<code>exit</code>を呼び出すために独自のアセンブリを書くと、glibcを介していないため、登録されているハンドラ関数は実行されません。</p><p>そうは言っても、アセンブリを用いて手動でシステムコールを行うことは、とてもいい勉強になります。</p><p>前述の必要条件に関する情報から以下の2点が分かっています。</p><p>この2つの概念を組み合わせることで、Linux上のレガシーシステムコールインターフェースへ導かれます。</p><p>Linuxカーネルは、ユーザ空間のプログラムがカーネル内でシステムコールを実行するために使用できる特定のソフトウェア割り込み番号を確保します。</p><p>Linuxカーネルは割り込み番号128 (0x80)に対する<code>ia32_syscall</code>という割り込みハンドラを登録します。実際にこれを行っているコードを見てみましょう。</p><p>以下は、<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/traps.c#L770" rel="nofollow" title="" class="ext-link"><code>arch/x86/kernel/traps.c</code></a>にあるカーネル3.13.0のソース内の<code>trap_init</code>関数です。</p><p><code>IA32_SYSCALL_VECTOR</code>は、<code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/traps.c#L770" rel="nofollow" title="" class="ext-link">arch/x86/include/asm/irq_vectors.h</a></code>内で<code>0x80</code>として定義されています。</p><p>しかし、カーネルが単一のソフトウェア割り込みを確保し、ユーザ空間のプログラムがカーネルを動作させることができる場合、どのようにしてカーネルは多くのシステムコールのうち実行すべきシステムコールを知るのでしょうか。</p><p>ユーザ空間のプログラムは、システムコール番号を<code>eax</code>レジスタに格納することになっています。システムコール自体の引数は、残りの汎用レジスタに格納されるはずです。</p><p>これは、<code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/ia32/ia32entry.S#L378-L397" rel="nofollow" title="" class="ext-link">arch/x86/ia32/ia32entry.S</a></code>のコメント内に記載されています。</p><p>これで、システムコールを行う方法と引数の格納場所が分かりました。インラインアセンブリをいくつか書いてシステムコールを1つ行ってみましょう。</p><p>ほんのわずかなインラインアセンブリを書くだけで、レガシーシステムコールを行うことができます。学習の観点からは興味深いことですが、読者の皆さんには独自のアセンブリを作ってシステムコールを行うことはお勧めしません。</p><p>この例では、<code>exit</code>システムコールを呼び出してみます。これは単一の引数として終了ステータスを受け取ります。</p><p>まず、<code>exit</code>に対するシステムコール番号を探す必要があります。Linuxカーネルにはテーブル内に各システムコールのリストを格納したファイルが含まれています。このファイルはビルド時に様々なスクリプトによって処理され、ユーザプログラムが使用可能なヘッダファイルを生成します。</p><p><code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_32.tbl" rel="nofollow" title="" class="ext-link">arch/x86/syscalls/syscall_32.tbl</a></code>で見つけたテーブルを見てみましょう。</p><p><code>1 i386 exit sys_exit</code></p><p><code>exit</code>システムコールは、番号<code>1</code>です。前述のインターフェースに従って、システムコール番号を<code>eax</code>レジスタへ移し、第1引数（終了ステータス）を<code>ebx</code>へ渡すだけです。</p><p>以下は、これを行うインラインアセンブリをいくつか用いたCコードの一部です。終了ステータスを”42″に設定してみましょう。</p><p>（この例は簡易化できますが、少し必要以上に冗長にしても面白いと思いました。そうすれば、前にGCCインラインアセンブリを見たことがない人もこれを手本やリファレンスとして使用することができると考えたのです）</p><p>次に、コンパイルして実行し、終了ステータスを確認してください。</p><p>成功です。ソフトウェア割り込みを発生させることで、レガシーシステムコールメソッドを使用して<code>exit</code>システムコールを呼び出しました。</p><p>ここまでユーザ空間のプログラムからシステムコールを動作させる方法を見てきました。それでは、カーネルがシステムコール番号を使ってシステムコールコードを実行する方法を見ていきましょう。</p><p>前のセクションでカーネルが<code>ia32_syscall</code>と呼ばれるシステムコールハンドラ関数を登録したのを思い出してください。</p><p>この関数は<code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/ia32/ia32entry.S#L426" rel="nofollow" title="" class="ext-link">arch/x86/ia32/ia32entry.S</a></code>内のアセンブリに実装されており、この関数内で起こっていることをいくつか見ることができます。その中で最も重要なのは実際のシステムコール自体への呼び出しです。</p><p><code>IA32_ARG_FIXUP</code>は、レガシー引数が現在のシステムコール層によって適切に判断されるように再配置するマクロです。</p><p><code>ia32_sys_call_table</code>識別子は、<code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/ia32/syscall_ia32.c#L18-L25" rel="nofollow" title="" class="ext-link">arch/x86/ia32/syscall_ia32.c</a></code>で定義されているテーブルを参照します。コードの最後の方にある<code>#include</code>行に注意してください。</p><p>以前、<code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_32.tbl" rel="nofollow" title="" class="ext-link">arch/x86/syscalls/syscall_32.tbl</a></code>で定義されたシステムコールテーブルを見たことを思い出してください。</p><p>このテーブルを取得し、それから<code>syscalls_32.h</code>ファイルを生成するコンパイル時に実行するスクリプトがいくつかあります。生成されたヘッダファイルは有効なCコードで構成されています。上記の<code>#include</code>を使ってこれを挿入しさえすれば、システムコール番号によるインデックス付き関数アドレスで<code>ia32_sys_call_table</code>を埋めることができます。</p><p>これがレガシーシステムコールを介してカーネルを入れる方法です。</p><p>ここまで、ソフトウェア割り込みを使ってカーネルに入る方法を見てきました。では、実行後、カーネルはどのようにしてユーザプログラムに戻り、その特権レベルが変更されるのでしょうか？</p><p><a href="ftp://download.intel.com/design/processor/manuals/253668.pdf" rel="nofollow" title="" class="ext-link">Intelソフトウェア開発者向けマニュアル</a>には、特権レベルが変更される際、プログラムスタックがどのように配置されるのかを示した分かりやすい図が載っています（大容量のPDFファイルですので、ご注意ください）。</p><p>では、見てみましょう。</p><p><img src="http://blog.packagecloud.io/images/isr_stack.png" alt="Screenshot of the Stack Usage on Transfers to Interrupt and Exception-Handling Routines"><br>
<em>注釈<br>
タイトル：特権レベルが変更される際のスタックの仕方<br>
Interrupted Procedure’s Stack：割り込まれたプロシージャのスタック<br>
Handler’s Stack：ハンドラのスタック<br>
ESP Before Transfer to Handler：ハンドラへの移行前のESP<br>
ESP After Transfer to Handler：ハンドラへの移行後のESP</em></p><p>ユーザプログラムからのソフトウェア割り込み実行を介して、実行がカーネル関数<code>ia32_syscall</code>に移行すると、特権レベルに変化が起こります。つまり、<code>ia32_syscall</code>が入力された際のスタックが上の図のようになるということです。</p><p>これは、<code>ia32_syscall</code>が実行される前に、特権レベル（と、その他）をコード化するCPUフラグと復帰アドレス、そしてその他のものが全て、プログラムスタックに保存されているということを意味します。</p><p>そのため、実行を再開するには、カーネルはこれらの値をプログラムスタックから元のレジスタにコピーし直す必要があります。それでユーザ空間で実行が再開されるのです。</p><p>それは分かりました。では、どうやって行うのでしょうか？</p><p>方法はいくつかありますが、特に簡単なのは、<code>iret</code>命令を使う方法です。</p><p>Intel命令セットマニュアルでは、「<code>iret</code>命令は、復帰アドレスと保存されたレジスタ値を、用意した順にスタックからポップする」と説明されています。</p><p>Linuxカーネルでこのコードを見つけるのは、複数のマクロに隠れているため、やや難しいと言えます。また、signalやptraceなどのシステムコールのexitを追跡するというような場合には広範囲に注意する必要があります。</p><p>結局は、カーネルのアセンブリスタブにあるマクロ全てに、システムコールからユーザプログラムに戻る<code>iret</code>が隠れています。</p><p><code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/entry_64.S#L1042-L1043" rel="nofollow" title="" class="ext-link">arch/x86/kernel/entry_64.S</a></code>の<code>irq_return</code>は、以下のとおりです。</p><p>ここで、<code>INTERRUPT_RETURN</code>は<code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/include/asm/irqflags.h#L132" rel="nofollow" title="" class="ext-link">arch/x86/include/asm/irqflags.h</a></code>では<code>iretq</code>として定義されています。</p><p>これで、レガシーなシステムコールの動きがどのようなものか、お分かりいただけたと思います。</p><p>レガシーな方法はかなり合理的なものに思えますが、システムコールを行うには、ソフトウェア割り込みを使うよりも<a href="https://lkml.org/lkml/2002/12/9/13" rel="nofollow" title="" class="ext-link">はるかに高速な</a>、新しい方法があります。</p><p>2通りのより高速な方法はそれぞれ、2つの命令で構成されています。1つはカーネルに入るもの、もう1つはカーネルから離れるためのものです。いずれも、Intel CPU資料には「Fast System Call（高速システムコール）」として記載されています。</p><p>残念ながら、IntelとAMDの実装では、CPUが32ビットモードあるいは64ビットモードの場合に有効な方法は何かという点において、いくつか相違があります。</p><p>IntelとAMD、両方のCPUでの互換性を最大に確保するため、以下のとおりとします。</p><p>システムコールを行うために<code>sysenter</code>を使うことは、レガシーな割り込みを使う方法よりも複雑であり、ユーザプログラム（<code>glibc</code>を介して）とカーネルの間の調整もより多く必要となります。</p><p>では、1つずつ詳細を整理してみましょう。まずは、Intel命令セットリファレンス（大容量の<a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-2b-manual.pdf" rel="nofollow" title="" class="ext-link">PDF</a>ファイルですのでご注意ください）では、<code>sysenter</code>について、そしてその使い方について、どのように説明されているのか見ていきましょう。</p><p>それでは、以下をご覧ください。</p><p>つまり、<code>sysenter</code>でカーネルに入ってくるシステムコールを受け取るために、カーネルは3つのモデル固有レジスタ（MSR）を設定しなければならないのです。今回扱っている環境で最も興味深いと言えるMSRは、<code>IA32_SYSENTER_EIP</code>（これはアドレス0x176を持っています）です。このMSRは、<code>sysenter</code>命令がユーザプログラムで実行される際、実行される関数のアドレスが指定される場所です。</p><p><code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/vdso/vdso32-setup.c#L240" rel="nofollow" title="" class="ext-link">arch/x86/vdso/vdso32-setup.c</a></code>では、MSRに書き込むLinuxカーネルのコードを見ることができます。</p><p>ここでの<code>MSR_IA32_SYSENTER_EIP</code>は、<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/include/uapi/asm/msr-index.h#L54" rel="nofollow" title="" class="ext-link"><code>arch/x86/include/uapi/asm/msr-index.h</code></a>内で<code>0x00000176</code>と定義されています。</p><p>多くのレガシーなソフトウェア割り込みsyscallのように、<code>sysenter</code>でシステムコールを行うために定義された規約があります。</p><p>これが文書化されている場所は、 <a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/ia32/ia32entry.S#L99-L117" rel="nofollow" title="" class="ext-link"><code>arch/x86/ia32/ia32entry.S</code></a>でのコメントで、以下のとおりです。</p><p>レガシーなシステムコールの方法には、割り込まれたユーザ空間プログラムに戻るためのメカニズムがあったことを思い出してください。それが<code>iret</code>命令です。</p><p><code>sysenter</code>を正常に動かすために必要となるロジックを捉えるのは難しいことです。なぜなら、ソフトウェア割り込みとは違って、<code>sysenter</code>では復帰アドレスが格納されていないのです。</p><p><code>sysenter</code>命令を実行する前に、カーネルがこうした情報の記録を行う方法は、厳密には、時が経つにつれて変わり得るものです（以下のバグのセクションで分かるとおり、それは変わっています）。</p><p>この先の変更に振り回されないよう、ユーザプログラムは<code>__kernel_vsyscall</code>という関数を使うようになっています。この関数はカーネルに実装されていますが、プロセスの開始時に各ユーザプロセスにマップされます。</p><p>これは少し奇妙です。カーネルに付随しているコードなのに、ユーザ空間で動作しているのです。</p><p>結局、<code>__kernel_vsyscall</code>は、プログラムがユーザ空間でカーネルのコードを実行できるようにするために存在している仮想動的共有オブジェクト（vDSO）と呼ばれるものの一部なのです。</p><p>vDSOとは何か、何をするものか、そしてどのように機能するのか、後ほど徹底的に見ていくことにします。</p><p>では、<code>__kernel_vsyscall</code>の内部を見ていきましょう。</p><p><code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/vdso/vdso32/sysenter.S#L31-L40" rel="nofollow" title="" class="ext-link">arch/x86/vdso/vdso32/sysenter.S</a></code>では、<code>sysenter</code>の呼び出し規約をカプセル化する<code>__kernel_vsyscall</code>関数を見ることができます。</p><p><code>__kernel_vsyscall</code>は、動的共有オブジェクト（共有ライブラリとしても知られています）の一部なのですが、ユーザプログラムは実行時にその関数のアドレスの位置をどうやって特定するのでしょうか？</p><p><code>__kernel_vsyscall</code>関数のアドレスは、ユーザプログラムやライブラリ（一般的には<code>glibc</code>）が見つけて、使うことができる<a href="https://www.gnu.org/software/libc/manual/html_node/Auxiliary-Vector.html" rel="nofollow" title="" class="ext-link">ELF補助ベクタ</a>に書かれています。</p><p>ELF補助ベクタを検索するためには、いくつか方法があります。</p><p>1つ目の選択肢は非常にシンプルですが、2.16以前の<code>glibc</code>に存在しません。ですから、以下に示すコードの例は2つ目の選択肢です。</p><p>先に示したコードからお分かりいただけるとおり、<code>__kernel_vsyscall</code>は<code>sysenter</code>を実行する前に、いくつか情報の記録を行います。</p><p>従って、<code>sysenter</code>を使って手動でカーネルに入るために必要となるのは、以下の作業だけです。</p><p>絶対に、独自の<code>sysenter</code>のラッパ関数を書いてはいけません。カーネルが<code>sysenter</code>を使ってシステムコールに入ったり抜けたりするために使う規約は変わることがあり、そうした場合にコードが動かなくなるからです。</p><p><em>必ず</em><code>__kernel_vsyscall</code>を通して呼び出すことにより、<code>sysenter</code>システムコールから始めるようにするべきです。</p><p>では、やってみましょう。</p><p>これまでのレガシーなシステムコールの例を踏まえ、<code>42</code>の終了ステータスで<code>exit</code>を呼ぶことにします。</p><p><code>exit</code>のシステムコール番号は<code>1</code>です。前述のインターフェースによると、ただシステムコール番号を<code>eax</code>レジスタに、最初の引数（終了ステータス）を<code>ebx</code>に移動させる必要があります。</p><p>（この例は簡易化できますが、少し必要以上に冗長にしても面白いと思いました。そうすれば、前にGCCインラインアセンブリを見たことがない人もこれを手本やリファレンスとして使用することができると考えたのです）</p><p>次は、コンパイルして、実行し、終了ステータスをチェックします。</p><p>成功しました。ソフトウェア割り込みを伴わずに、レガシーなsysenterを使った方法で<code>exit</code>システムコールを呼び出すことができました。</p><p>ここまで、<code>__kernel_vsyscall</code>を介し、<code>sysenter</code>でユーザ空間プログラムからシステムコールを呼び出す方法を見てきました。では、今度はカーネルがシステムコールのコードを実行するために、システムコール番号をどのように使っているのかを見てみましょう。</p><p>前のセクションを思い出してください。カーネルは<code>ia32_sysenter_target</code>と呼ばれるsyscallハンドラ関数をレジスタに入れました。</p><p><code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/ia32/ia32entry.S#L162-L163" rel="nofollow" title="" class="ext-link">arch/x86/ia32/ia32entry.S</a></code>で、この関数がアセンブリに実装されています。eaxレジスタの値がシステムコールを実行するために使われている場所を見てみましょう。</p><p>これは、レガシーなシステムコールのモードで見たものと、同一のコードです。つまり、システムコール番号と共にインデックス付けされている<code>ia32_sys_call_table</code>と名付けられたテーブルです。</p><p>必要な情報の記録が全て行われた後、レガシーなシステムコールモデルと<code>sysenter</code>システムコールモデルの両方が、システムコールをディスパッチするために、同じメカニズムとシステムコールテーブルを使っています。</p><p><code>ia32_sys_call_table</code>が定義されている場所、そしてそれがどのように構築されているか学びたい方は、<a href="http://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/#kernel-side-int-0x80-entry-point" rel="nofollow" title="" class="ext-link"><code>int $0x80</code>のエントリポイントのセクション</a>を参照してください。</p><p>以上が<code>sysenter</code>システムコールを介してカーネルに入る方法です。</p><p>カーネルはユーザプログラムに戻って実行を再開するために、<code>sysexit</code>命令を使うことができます。</p><p>この命令を使うやり方は、<code>iret</code>を使うやり方ほど分かりやすいものではありません。呼び出し側は、<code>rdx</code>レジスタに復帰アドレスを入れること、さらに<code>rcx</code>レジスタで使うためのプログラムスタックにポインタを置くことが求められます。</p><p>これは、あなたのソフトウェアは実行が再開されるべきアドレスを計算し、その値を保持し、<code>sysexit</code>を呼び出す前にそれを復元しなければならないことを意味します。</p><p><code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/ia32/ia32entry.S#L169-L185" rel="nofollow" title="" class="ext-link">arch/x86/ia32/ia32entry.S</a></code>では、この処理を行うコードを見ることができます。</p><p><code>ENABLE_INTERRUPTS_SYSEXIT32</code>は、<code>sysexit</code>命令を含む <a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/include/asm/irqflags.h#L139-L143" rel="nofollow" title="" class="ext-link"><code>arch/x86/include/asm/irqflags.h</code></a>で定義されているマクロです。</p><p>さあ、これで32ビットの高速システムコールがどのように機能するか、お分かりいただけたと思います。</p><p>次は、64ビットの高速システムコールを見ていきます。これらのシステムコールは、システムコールを起動するため、およびシステムコールから復帰するために、それぞれ<code>syscall</code>と<code>sysret</code>命令を使います。</p><p>Intel命令セットリファレンス（大容量の<a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-2b-manual.pdf" rel="nofollow" title="" class="ext-link">PDF</a>ファイルですのでご注意ください）では、<code>syscall</code>命令がどのように機能するかについて、以下のように説明されています。</p><p>つまり、カーネルに入ってくるシステムコールを受け取るために、カーネルは<code>IA32_LSTAR</code> MSRへアドレスを書き込むことによって、システムコールが出された時に実行されるコードのアドレスをレジスタに入れる必要があるのです。</p><p><code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/cpu/common.c#L1128" rel="nofollow" title="" class="ext-link">arch/x86/kernel/cpu/common.c</a> </code>では、そのカーネルのコードを見ることができます。</p><p><code>MSR_LSTAR</code>は、<code><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/include/uapi/asm/msr-index.h#L9" rel="nofollow" title="" class="ext-link">arch/x86/include/uapi/asm/msr-index.h</a> </code>で<code>0xc0000082</code>として定義されています。</p><p>レガシーなソフトウェア割り込みsyscallのように、システムコールを<code>syscall</code>で呼び出すために定義された規約があります。</p><p>ユーザ空間プログラムは、システムコール番号を<code>rax</code>レジスタに入れることが求められます。syscallの引数は、汎用レジスタのサブセット内に配置されることが求められます。</p><p>以下は、セクションA.2.1の<a href="http://www.x86-64.org/documentation/abi.pdf" rel="nofollow" title="" class="ext-link">x86-64 ABI</a>に記載されています。</p><p>これは、 <a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/entry_64.S#L569-L591" rel="nofollow" title="" class="ext-link"><code>arch/x86/kernel/entry_64.S</code></a>のコメントにも記載されています。</p><p>さあ、これでシステムコールの行い方、引数を置くべき場所が分かりました。それでは、インラインアセンブリをいくつか書いて試してみましょう。</p><p>前述の例に沿って、インラインアセンブリを含んだ小さなCプログラムを書きましょう。アセンブリは、42という終了ステータスを渡すexitシステムコールを実行するものとします。</p><p>まず、<code>exit</code>に対するシステムコール番号を見つけなくてはなりません。このケースでは、<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_64.tbl#L69" rel="nofollow" title="" class="ext-link"><code>arch/x86/syscalls/syscall_64.tbl</code></a>にあるテーブルを読む必要があります。</p><p><code> 60 common exit sys_exit</code></p><p><code>exit</code>のシステムコール番号は<code>60</code>です。前述のインターフェースによれば、やるべき作業は、<code>60</code>を<code>rax</code>レジスタに、最初の引数（終了ステータス）を<code>rdi</code>にそれぞれ移すことだけです。</p><p>以下は、この作業を行うインラインアセンブリを含んだCコードです。前の例と同様、この例は、分かりやすくするため必要以上に冗長に記述しています。</p><p>次に、コンパイルし、実行して、終了ステータスをチェックします。</p><p>成功です。<code>syscall</code>システムコールを使った方法で、<code>exit</code>システムコールを呼び出すことができました。ソフトウェア割り込みの発生を避けられましたし、（マイクロベンチマークを測定していれば）実行速度もずっと速いことが分かります。</p><p>ユーザ空間プログラムからシステムコールを行う方法を見てきましたので、今度はカーネルがどのようにシステムコール番号を使ってシステムコールのコードを実行するか見てみましょう。</p><p>前のセクションで<code>system_call</code>という名前の関数のアドレスが<code>LSTAR</code> MSRに書き出されていたことを思い出してください。</p><p>この関数に対するコードがどのように<code>rax</code>を使って実際にシステムコールに実行を渡すのか、<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/entry_64.S#L629" rel="nofollow" title="" class="ext-link"><code>arch/x86/kernel/entry_64.S</code></a>から見てみましょう。</p><p>レガシーなシステムコールの方法とよく似ているのですが、<code>sys_call_table</code>はCファイルで定義されているテーブルであり、<code>#include</code>を使って、スクリプトで生成されるCコードを読み込みます。</p><p>以下は<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/syscall_64.c#L25-L32" rel="nofollow" title="" class="ext-link"><code>arch/x86/kernel/syscall_64.c</code></a>の抜粋ですが、最後にある<code>#include</code>に注目してください。</p><p>先ほど、<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_64.tbl" rel="nofollow" title="" class="ext-link"><code>arch/x86/syscalls/syscall_64.tbl</code></a>で定義されたシステムコールテーブルを確認しました。レガシーな割り込みモードと全く同様に、スクリプトはカーネルコンパイル時に動作し、<code>syscall_64.tbl</code>のテーブルから<code>syscalls_64.h</code>ファイルを生成します。</p><p>上記のコードは、生成されたCコードを単純にインクルードしています。そのCコードは、システムコール番号でインデックス付けされた関数ポインタの配列を作成するものです。</p><p>このようにして、<code>syscall</code>システムコールを通じてカーネルに入ることができます。</p><p>カーネルは<code>sysret</code>命令によって、ユーザプログラムが<code>syscall</code>で実行を中断した場所に実行を戻すことができます。</p><p>実行が再開されるべき場所のアドレスは、<code>syscall</code>が使われた時に<code>rcx</code>レジスタにコピーされているため、<code>sysret</code>は<code>sysexit</code>よりもシンプルです。</p><p>その値をどこかに保持しておき、<code>sysret</code>を呼び出す前に<code>rcx</code>にリストアする限り、実行は<code>syscall</code>が呼び出される前に中断した場所で再開されます。</p><p><code>sysenter</code>では、さらなるレジスタを上書きすることに加えてこのアドレスを自分で計算する必要がありますから、これは便利です。</p><p>実行するコードは<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/kernel/entry_64.S#L650-L655" rel="nofollow" title="" class="ext-link"><code>arch/x86/kernel/entry_64.S</code></a>に含まれています。</p><p><code>USERGS_SYSRET64</code>は、<code>sysret</code>命令を含む<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/include/asm/irqflags.h#L133-L135" rel="nofollow" title="" class="ext-link"><code>arch/x86/include/asm/irqflags.h</code></a>で定義されているマクロです。</p><p>これで64ビットの高速システムコールの仕組みが分かりました。</p><p>ここまで、システムコールの数種類の方法について、アセンブリを書いて手動でシステムコールを呼び出すやり方を見てきました。</p><p>通常は、独自のアセンブリを書く必要はありません。様々なアセンブリコードを扱ってくれるラッパ関数がglibcから提供されているためです。</p><p>しかし、glibcのラッパが存在しないシステムコールもあります。一例としては、高速ユーザ空間ロックのシステムコール<code>futex</code>が挙げられます。</p><p>ですが、なぜ<a href="http://man7.org/linux/man-pages/man7/futex.7.html#NOTES" rel="nofollow" title="" class="ext-link"><code>futex</code>に対するシステムコールのラッパが存在しない</a>のでしょうか？</p><p><code>futex</code>は、アプリケーションコードではなくライブラリだけに呼び出されることが想定されています。このため、<code>futex</code>を呼び出すためには、以下の作業が必要となるのです。</p><p>ラッパが存在しないシステムコールを呼び出すことが必要になった場合は、断然、2番目の「glibcから提供される関数<code>syscall</code>を使用」を選ぶべきです。</p><p>ではglibcの<code>syscall</code>を使って、終了ステータス<code>42</code>で<code>exit</code>を呼び出してみましょう。</p><p>次に、コンパイルし、実行して、終了ステータスを確認します。</p><p>成功しました。glibcの<code>syscall</code>ラッパを使って、<code>exit</code>システムコールを呼び出すことができました。</p><p>上記の例で使った<code>syscall</code>ラッパ関数が、glibcでどのような動作をするのか見てみましょう。</p><p>以下は<a href="https://github.molgen.mpg.de/git-mirror/glibc/blob/glibc-2.15/sysdeps/unix/sysv/linux/x86_64/syscall.S#L24-L42" rel="nofollow" title="" class="ext-link"><code>sysdeps/unix/sysv/linux/x86_64/syscall.S</code></a>からの抜粋です。</p><p>前の方で、x86_64 ABIのドキュメントから、ユーザ空間とカーネルの両方の呼び出し規約を引用してご紹介しました。</p><p>このアセンブリスタブは、<em>両方の</em>呼び出し規約が示されている点で優れています。この関数に渡される引数はユーザ空間の呼び出し規約に準じますが、それから、<code>syscall</code>でカーネルに入る前に、カーネルの呼び出し規約に従うよう異なるレジスタに移されます。</p><p>このようにして、glibcのsyscallラッパを使って、デフォルトのラッパが存在しないシステムコールを呼び出すことができます。</p><p>ここまで、カーネルに入ってシステムコールを行う様々な方法を取り上げ、システムをユーザ空間からカーネルに遷移させるためそれらの呼び出しを手動（または半手動）で行うやり方をご紹介しました。</p><p>では、カーネルに全く入ることなく、プログラムが特定のシステムコールを呼び出せるとしたら、どうなるでしょうか？</p><p>Linuxに仮想動的共有オブジェクト（vDSO）が存在する理由は、まさにそこにあります。LinuxのvDSOは、カーネルの一部を構成するコードですが、ユーザ空間で実行されるユーザプログラムのアドレス空間にマップされています。</p><p>vDSOの目的は、一部のシステムコールをカーネルに入らずに使えるようにすることです。そのような呼び出しの例として、<code>gettimeofday</code>が挙げられます。</p><p><code>gettimeofday</code>システムコールを呼び出すプログラムは、実際にはカーネルに入りません。その代わりに、カーネルによって<em>提供</em>されるもののユーザ空間で実行されるというコードに対し、単純な関数呼び出しを行います。</p><p>ソフトウェア割り込みは発生せず、<code>sysenter</code>や<code>syscall</code>の情報を管理するという複雑な作業も必要ありません。<code>gettimeofday</code>は単なる普通の関数呼び出しなのです。</p><p><code>ldd</code>を使うと、vDSOが最初のエントリとして表示されます。</p><p>vDSOがカーネルでどのようにセットアップされるか見てみましょう。</p><p>vDSOのソースは<a href="https://github.com/torvalds/linux/tree/v3.13/arch/x86/vdso" rel="nofollow" title="" class="ext-link"><code>arch/x86/vdso/</code></a>にあります。アセンブリやCソースファイル、リンカスクリプトで構成されています。</p><p>この<a href="https://sourceware.org/binutils/docs/ld/Scripts.html" rel="nofollow" title="" class="ext-link">リンカスクリプト</a>は、一見の価値があります。</p><p>以下は、<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/vdso/vdso.lds.S" rel="nofollow" title="" class="ext-link"><code>arch/x86/vdso/vdso.lds.S</code></a>からの抜粋です。</p><p>リンカスクリプトはかなり便利ですが、特によく知られているわけではありません。このリンカスクリプトは、vDSOでエクスポートされるシンボルを配置するものです。</p><p>上記のvDSOは4つの異なる関数をエクスポートしており、それぞれに2つの名前があることが分かります。これらの関数のソースは、上記ディレクトリのCファイルにあります。</p><p>例えば、<code>gettimeofday</code>のソースは<a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/vdso/vclock_gettime.c#L281-L282" rel="nofollow" title="" class="ext-link"><code>arch/x86/vdso/vclock_gettime.c</code></a>にあります。</p><p>上記は、<code>__vdso_gettimeofday</code>への<a href="https://gcc.gnu.org/onlinedocs/gcc-4.3.5/gcc/Function-Attributes.html" rel="nofollow" title="" class="ext-link">weak alias</a>として<code>gettimeofday</code>を定義しています。</p><p><a href="https://github.com/torvalds/linux/blob/v3.13/arch/x86/vdso/vclock_gettime.c#L260-L280" rel="nofollow" title="" class="ext-link">同じファイルにある</a><code>__vdso_gettimeofday</code>関数は、ユーザプログラムが<code>gettimeofday</code>システムコールを呼び出した時に<em>ユーザ空間で</em>実行される、実際のソースを含んでいます。</p><p><a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E7%A9%BA%E9%96%93%E9%85%8D%E7%BD%AE%E3%81%AE%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E5%8C%96" rel="nofollow" title="" class="ext-link">アドレス空間配置のランダム化</a>のため、vDSOはプログラム開始時にランダムなアドレスにロードされます。</p><p>ランダムなアドレスにロードされるのであれば、ユーザプログラムはどうやってvDSOを見つけるのでしょうか？</p><p>前に<code>sysenter</code>システムコールの方法を見た時は、<code>sysenter</code>アセンブリコードを自分で書く代わりに、ユーザプログラムが<code>__kernel_vsyscall</code>を呼び出す必要がありましたね。</p><p>この関数もまた、vDSOの一部です。</p><p>前掲のサンプルコードは、<code>__kernel_vsyscall</code>のアドレスを含んだタイプ<code>AT_SYSINFO</code>を持つヘッダを見つけるため、<a href="https://www.gnu.org/software/libc/manual/html_node/Auxiliary-Vector.html" rel="nofollow" title="" class="ext-link">ELF補助ヘッダ</a>を調べて<code>__kernel_vsyscall</code>の位置を特定しました。</p><p>同様に、vDSOの位置を特定するため、ユーザプログラムはタイプ<code>AT_SYSINFO_EHDR</code>のELF補助ヘッダを調べることができます。このタイプは、リンカスクリプトから生成されたvDSOのELFヘッダの開始アドレスを含みます。</p><p>どちらのケースも、プログラムがロードされる際、カーネルがそのアドレスをELFヘッダに書き出します。こうして、正しいアドレスが<code>AT_SYSINFO_EHDR</code>と<code>AT_SYSINFO</code>に必ず格納されるのです。</p><p>そのヘッダの位置が特定されれば、ユーザプログラムはELFオブジェクトをパースして（おそらく<a href="http://www.mr511.de/software/english.html" rel="nofollow" title="" class="ext-link">libelf</a>を使用）、必要に応じてELFオブジェクト内の関数を呼び出すことができます。</p><p>vDSOは<a href="https://www.akkadia.org/drepper/symbol-versioning" rel="nofollow" title="" class="ext-link">シンボルバージョニング</a>のようなELFの有用な機能を活用できるということですので、これは便利です。</p><p>vDSO内の関数をパースして呼び出す例は、<a href="https://github.com/torvalds/linux/tree/v3.13/Documentation/vDSO" rel="nofollow" title="" class="ext-link"><code>Documentation/vDSO/</code></a>のカーネルドキュメントに掲載されています。</p><p>多くの場合、私たちは知らない間にvDSOにアクセスしています。前述したように、<code>glibc</code>で使われるインターフェースによって、そのことが見えなくなっているからです。</p><p>プログラムがロードされる際、<a href="http://man7.org/linux/man-pages/man8/ld.so.8.html" rel="nofollow" title="" class="ext-link">動的リンカ/ローダ</a>は、そのプログラムが依存するDSOをロードします。これにはvDSOも含まれます。</p><p><code>glibc</code>は、ロードされているプログラムのELFヘッダをパースする際、vDSOの位置に関するデータを格納します。また、実際のシステムコールを行う前に、vDSOを調べてシンボル名を探す、単純なスタブ関数をインクルードします。</p><p>例えば下記は、<a href="https://github.molgen.mpg.de/git-mirror/glibc/blob/glibc-2.15/sysdeps/unix/sysv/linux/x86_64/gettimeofday.c#L26-L37" rel="nofollow" title="" class="ext-link">sysdeps/unix/sysv/linux/x86_64/gettimeofday.c</a>から抜粋した<code>glibc</code>の<code>gettimeofday</code>関数です。</p><p><code>glibc</code>内のこのコードは、vDSOを調べて<code>gettimeofday</code>を探し、そのアドレスを返します。最後に<a href="http://willnewton.name/uncategorized/using-gnu-indirect-functions/" rel="nofollow" title="" class="ext-link">indirect function</a>がうまく使われます。</p><p>このようにして、<code>gettimeofday</code>を呼び出すプログラムは、カーネルモードに切り替えたり、特権レベル変更を招いたり、ソフトウェア割り込みを発生させたりすることなく、<code>glibc</code>を通じてvDSOを使えるのです。</p><p>以上で、32ビットか64ビットのIntelかAMDのCPU向けLinuxで利用できるシステムコールの方法を全てご紹介したことになります。</p><p>この記事ではシステムコールについて説明していますので、<code>glibc</code>がシステムコールをどのように扱うかにも簡単に触れておきたいと思います。</p><p>多くのシステムコールについて、<code>glibc</code>が必要とするのは、引数を適切なレジスタへ移してから<code>syscall</code>または<code>int $0x80</code>命令を実行するか<code>__kernel_vsyscall</code>を呼び出すというラッパ関数だけです。</p><p>この際には、テキストファイルで定義された一連のテーブルが使われますが、そのテキストファイルはスクリプトで処理され、Cコードが出力されます。</p><p>例えば下記は、<a href="https://github.molgen.mpg.de/git-mirror/glibc/blob/glibc-2.15/sysdeps/unix/syscalls.list" rel="nofollow" title="" class="ext-link"><code>sysdeps/unix/syscalls.list</code></a>ファイルに記述された一般的なシステムコールです。</p><p>各列についての詳しい情報は、このファイルを処理するスクリプト<a href="https://github.molgen.mpg.de/git-mirror/glibc/blob/glibc-2.15/sysdeps/unix/make-syscalls.sh" rel="nofollow" title="" class="ext-link"><code>sysdeps/unix/make-syscalls.sh</code></a>のコメントを参照してください。</p><p>ハンドラを呼び出す<code>exit</code>のように、より複雑なシステムコールは、Cやアセンブリコードによる実際の実装があり、上記のようなテンプレート化されたテキストファイルには含まれていません。</p><p>今後のブログ記事では、興味深いシステムコールに対する<code>glibc</code>やLinuxカーネルでの実装について探ってみたいと思います。</p><p>この機会に、Linuxのシステムコールに関する2つの重大なバグに言及しないわけにはいきません。</p><p>以下で見ていきましょう。</p><p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=2010-3301" rel="nofollow" title="" class="ext-link">このセキュリティエクスプロイト</a>では、ローカルユーザがroot権限を取得することが可能となります。</p><p>原因となっているのは、ユーザプログラムがx86-64システム上でレガシーなシステムコールを行えるようにするアセンブリコードの、小さなバグです。</p><p>このエクスプロイトコードはかなり巧妙です。<code>mmap</code>で特定のアドレスにメモリ領域を確保し、整数オーバーフローを用いて、下記のコードが任意のアドレスに実行を渡すようにします。</p><p>（レガシーな割り込みのセクションで登場したこのコードを覚えていますか？）</p><p>これがカーネルコードとして動作し、実行プロセスをルート権限に昇格させることができるのです。</p><p>前の方で、<code>sysenter</code> ABIをアプリケーションコードにハードコーディングしないようにとお伝えしたことを覚えていますか？</p><p>残念ながら、android-x86の開発者はそのミスを犯しました。カーネルABIが変わって突然、android-x86が機能しなくなったのです。</p><p>カーネルの開発者は、出回っているAndroidデバイスが、古くなったハードコードの<code>sysenter</code>シーケンスによって動かなくなることを避けるため、以前の<code>sysenter</code> ABIをリストアする羽目になりました。</p><p>Linuxカーネルに施された<a href="http://git.kernel.org/cgit/linux/kernel/git/tip/tip.git/commit/?id=30bfa7b3488bfb1bb75c9f50a5fcac1832970c60" rel="nofollow" title="" class="ext-link">修正はこちら</a>です。コミットメッセージには、androidソースで元凶となったコミットへのリンクがあります。</p><p>注意：決して独自の<code>sysenter</code>アセンブリコードを書いてはいけません。何らかの理由でそのようなコードを直接実装しなければならない場合は、前述の例のようなコードを使い、せめて<code>__kernel_vsyscall</code>は呼び出すようにしてください。</p><p>Linuxカーネルにおけるシステムコールのインフラは、非常に複雑です。各システムコールについて様々なやり方があり、利点や欠点もそれぞれ異なります。</p><p>独自のアセンブリを書いてシステムコールを呼び出すことは、背後のABIが動かなくなる可能性があるので、通常はいい方法とは言えません。カーネルとlibc実装こそが、そのシステム上でシステムコールを行うのに最も速い方法を（おそらく）選んでくれるでしょう。</p><p><code>glibc</code>から提供されるラッパが使えない（または存在しない）場合は、せめて<code>syscall</code>ラッパ関数を使うか、vDSOから提供される<code>__kernel_vsyscall</code>を呼び出すようにすべきです。</p><p>今後のブログ記事では、個々のシステムコールとその実装について詳しく取り上げる予定ですので、ご期待ください。</p><p>この記事を読んでみて面白いと感じた方には、低水準技術に関する以下の記事も参考になるかもしれません。</p>
