<p><a href="https://cloudonaut.io/your-single-aws-account-is-a-serious-risk/" rel="nofollow" title="" class="ext-link">Your single AWS account is a serious risk</a> （2015-08-07） by <a href="https://twitter.com/hellomichibye" rel="nofollow" title="" class="ext-link">Michael Wittig</a></p><p>Amazon Webサービス（AWS）のアカウントは、AWSでビジネスを展開している人にとって非常に大事なものです。ですが、AWSアカウントをたった一つしかもっていない場合、重大なセキュリティの危険に直面することになるでしょう。何が問題なのか、そしてどうすれば解決できるのかを、この記事でご紹介したいと思います。</p><p>単一のAWSアカウントには、EC2仮想サーバ、S3バケット、RDSデータベースなどビジネスに必要な様々なリソースとともに、IAMユーザが含まれています。アカウントへのログイン方法は基本的に2通りあります。ユーザ名とパスワードを入力するAWS Management Console、またはCLIやSDKで用いられるAWSアクセス認証情報を使うのです。以下の図は、その仕組みを示したものです。</p><p><img src="https://cloudonaut.io/content/images/2015/08/Singe-AWS-Account.png" alt="Single AWS account" class="full-img"><br>
<em>訳注<br>
account「このアカウントにはIAMユーザと、仮想サーバ、ストレージ、データベースなどのリソースが含まれています」<br>
IAM user「私は管理者権限があります」<br>
terminal「あなたはAWSアクセス認証情報によってIAMユーザにアクセスできます」</em></p><p>例えば、端末で次のように入力します。</p><p>すると、AWSアクセス認証情報（通常は~/.aws/に格納）がリクエストの認証に使われます。IAMユーザとしての認証です。このIAMユーザは多くの場合<code>AdministratorAccess</code>をもっていて、何でもできます。なぜでしょう？　それは、すべてのサービスを管理できるようにするためです。しかし、AWSアクセス認証情報が漏れてしまった場合は大変なことになります。</p><p>この状況を改善するには、2つの対策があります。</p><p><a href="https://ja.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E6%A8%A9%E9%99%90%E3%81%AE%E5%8E%9F%E5%89%87" rel="nofollow" title="" class="ext-link">最小権限の原則</a>に従えば、<code>AdministratorAccess</code>はほとんどの場合必要ありません。IAMサービスを使えない<code>PowerUserAccess</code>の方が適切でしょう。もっと望ましいのは、<code>ReadOnlyAccess</code>に設定しておき、必要なときにだけ書き込み権限をもたせる方法です。ただし、IAMユーザを使って実装するのは大変です。各”最小権限”についてユーザを作成し、各ユーザについてアクセス認証情報を作成する必要があるからです。AWSアカウント内に自分以外のユーザが存在する場合は、たちまち管理不能になってしまいます。これは<strong>セキュリティの負債</strong>とでも呼ぶべきものでしょう。</p><p>AWSは多要素認証（MFA）のサポートが優れており、ハードウェアデバイスまたはソフトウェアデバイスを使ってトークンを生成できます。パスワードまたはアクセス認証情報にこのMFAトークンを組み合わせて認証するようにすれば、あなたのアカウントへのアクセスはずっと難しくなります。</p><p>では、これらの対策を実装する方法について説明しましょう。</p><p>単一のAWSアカウントをもつのではなく、もう一つ別のアカウントを作成します。これを要塞アカウント（bastion account）と呼ぶことにしましょう。要塞アカウントはIAMユーザだけをもつようにします。以下はその概念図です。</p><p><img src="https://cloudonaut.io/content/images/2015/08/Bastion-Account-2.png" alt="Bastion AWS account" class="full-img"><br>
<em>訳注<br>
bastion account「このアカウントにはIAMユーザだけが含まれています。他には何もありません！」<br>
IAM user「私にできるのは、一時的な認証情報を得てロールを引き受けることだけです」account「このアカウントには仮想サーバ、ストレージ、データベースなどのリソースが含まれています」<br>
IAM role「私は管理者権限があります」<br>
</em></p><p>要塞アカウント内のIAMユーザは強い制限をうけます。彼らは一時的な認証情報を得てロールを引き受けるだけです。これを実装するには、次のように、要塞アカウント内にインラインポリシー付きのグループを作ります。</p><p>このグループを要塞アカウント内のすべてのIAMユーザに割り当てます。<strong>彼らに他のポリシーが一切適用されないように注意してください！</strong></p><p>最初の<code>Statement</code>は、ユーザにロールを引き受けさせます（ただし、MFAを使用してリクエストが認証された場合のみ）。2番目の<code>Statement</code>は、MFAトークンを提供することによってユーザに一時セッションを取得させます。これがどのように働くか見てみましょう。</p><p>そろそろ解決策をまとめましょう。その働きは？　次の図は、MFA認証とロール委任の流れです。</p><p><img src="https://cloudonaut.io/content/images/2015/08/MFA-with-Role-Delegation-Flow-1.png" alt="MFA with role delegation" class="full-img"><br>
1.あなたは自分のマシン上（通常、~/.aws/内または環境変数内）に、要塞アカウント内のIAMユーザのためのAWSアクセス認証情報をもっています。あなたはAWS APIを呼び出し、MFAトークンを提供することによって一時的な認証情報を取得します。そのMFAトークンが有効な場合は、要塞アカウント内のIAMユーザのために一時的なセッションを作成したことになります。</p><p>2.あなたは一時的な認証情報を受信し、IMAユーザとして認証されます。</p><p>3.一時的な認証情報を使って、あなたは別のアカウントのロールを引き受けることができます（以前はこれができませんでした。なぜなら、このユーザがMFA認証されている場合にだけロールを引き受けることが許可されるからです）。<strong>別のアカウントのロールを引き受けるには、そのロールはあなたのアカウントで使用されることが明示的に許可されている必要があります！</strong>　ロールがもつべき最大の権限は、<code>PowerUserAccess</code>です。そのロールにIAMとのやりとりを許可してはなりません。</p><p>4.あなたは一時的な認証情報を受信して、自分のAWSアカウントで作業を始めることができます。</p><p>この処理を自動化するには、私たちの<a href="https://github.com/widdix/aws-mfacli" rel="nofollow" title="" class="ext-link">mfacli</a>スクリプトを使用できます。</p><p><img src="http://manning.com/wittig/wittig_cover150.jpg" alt="Amazon Web Services in Action"><br>
Amazon Webサービスの詳細に興味がありますか？　Andreasと私が書いている<a href="http://manning.com/wittig?a_aid=mwittig&amp;a_bid=cc17df85" rel="nofollow" title="" class="ext-link">Amazon Web Services in Action</a>という本がManningから出版されます。この本は、従来デプロイされていた分散アプリケーションをAWSプラットフォームに移行している開発者とDevOps（デブオプス）技術者を対象としています。AWSの経験は必要ありません。</p>
