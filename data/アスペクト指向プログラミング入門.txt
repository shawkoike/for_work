<p><a href="https://abstractowl.github.io/2014/07/09/intro-to-aop.html" rel="nofollow" title="" class="ext-link">Intro to Aspect-Oriented Programming</a> （2014-07-09）by <a href="http://www.luminously.net/" rel="nofollow" title="" class="ext-link">Andrew Lo</a></p><p>複雑なアプリケーションではロギング、<a href="https://en.wikipedia.org/wiki/Tracing_(software)" rel="nofollow" title="" class="ext-link">トレーシング</a>、メトリクスといったサポートの機能により、関数にすぐ負荷がかかってしまいます。これらのコードブロックはあらゆるコードベース上でそれぞれ少し変形して繰り返し使用されるのですが、これを<strong>横断的関心事(cross-cutting concerns)</strong>と言います。<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%B9%E3%83%9A%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0" rel="nofollow" title="" class="ext-link">アスペクト指向プログラミング</a>（AOP）は、アスペクトと呼ばれるモジュール内にコードブロックを引き入れて、<a href="https://ja.wikipedia.org/wiki/%E9%96%A2%E5%BF%83%E3%81%AE%E5%88%86%E9%9B%A2" rel="nofollow" title="" class="ext-link">関心の分離</a>(separation of concerns)を手助けします。</p><p>不自然な例だというのは承知の上で、<code>dial</code>メソッド1つを使って簡単なPhoneクラスを構築してみました。</p><p><code>dial</code>関数は以下のような働きをします。</p><p>AOPにはビジネスロジックと関心事を分離させる目的があることを思い出してください。ではPhoneクラスを見返してみましょう。実際に、ビジネスロジックはどれほどでしょうか。</p><p>なんと関数のコードの半分近くが、関心事のために機能しているのです。<br>
AOPライブラリの<a href="https://github.com/cujojs/meld" rel="nofollow" title="" class="ext-link">meld</a>を使って、このような関心事をアスペクトに分離させる方法を見ていきましょう。</p><p>最初に、トレーシングのステートメントを1つの<b>アドバイス</b>に引き出します。アドバイスは、別の関数上で作用する関数を参照します。ここに<code>before</code>アドバイスを作成しました。このアドバイスは他の関数が実行する前に動作します。</p><p><code>meld.before</code>メソッドを使って、<code>Phone.dial</code>が動作する前にlogアドバイスを適用します。AOPの専門用語では、<code>phone.dial</code><strong>ポイントカット</strong>の<code>before</code><strong>ジョインポイント</strong>でlogアドバイスを適用する、と言います。ジョインポイントとは、アドバイスが適用されて実行するポイントのことで、ポイントカットはアドバイスが適用される関数を定義します。</p><p>ジョインポイントは関連したポイントカットの情報を提供することに注目してください。このアスペクトではメソッドの名前と引数にアクセスするために、<code>meld.joinpoint().method</code>と<code>meld.joinpoint().args[0].name</code>にアクセスするのです。次に説明しますがジョインポイントは、また別の便利なメタ機能も提供してくれます。</p><p>トレーシングは極めて一般的なAOPの活用例です。開発者はクラスのコードを変更することなく、アプリケーションを通した値の変化を簡単に観察することができます。</p><p>次は呼び出すタイミングを決める関数です。</p><p>名前から分かるように、<code>around</code>アドバイスは関数が呼び出されている周囲で実行されます。これは関数の呼び出し前後に処理を入れるということです。この特殊なジョインポイントは<code>.proceed</code>関数をもっており、この関数はこのアスペクトが関連付けられた関数の実行命令をmeldに伝えます。<code>joinPoint.proceed</code>関数が実行されない限り、<code>dial</code>関数は決して実行されません。</p><p><code>around</code>アドバイスでは関数の返り値の変更が可能です。<code>joinPoint.proceed</code>の返り値が関数呼び出しの返り値となります。呼び出し元へ値を返す前に自由に修正したり、全く違う値を返すことも可能です。<code>around</code>アドバイスは本質的に呼び出し元と呼び出し先との間にある<a href="https://ja.wikipedia.org/wiki/Proxy_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3" rel="nofollow" title="" class="ext-link">プロキシ</a>の役割を担っています。</p><p>呼び出される関数を制御するため、AOPにおいて<code>around</code>アドバイスは最も強力で堅牢なジョインポイトと言えます。</p><p>最後に、ロギングの例外処理について見てみましょう。<code>afterThrowing</code>アドバイスは例外が投げられた後に動作します。</p><p>ここでジョインポイントから<code>afterThrowing</code>アドバイスに例外を渡しています。<code>afterThrowing</code>は、アプリケーションのエラーの発生場所と発生理由についてのメトリクスを集めるときに特に有効です。多くの人がインターネット上で目にする“404 Not Found”エラーが表示されるＵＲＬデータを集めるウェブサーバのようなものだと考えられます。</p><p>さらに複雑なアプリケーションでは、ジョインポイントはトランジェントエラーが発生し得るコードをリトライするロジックの実行にも利用することができます。</p><p><code>afterThrowing</code>アドバイスによってロギングや例外処理が扱いやすくなります。</p><p>完成したコードが<a href="http://jsfiddle.net/G2e22/" rel="nofollow" title="" class="ext-link">JSFiddle</a>と<a href="https://gist.github.com/abstractOwl/dbcc8ee5f9ac61323d33" rel="nofollow" title="" class="ext-link">GitHub</a>にあります。見てみると分かりますが、AOPを利用することでコードがたった5行のビジネスロジックと3つの再利用可能なアスペクトにまで短くなっています。</p><p>今回は全てのコードを1つのファイルで使用しましたが、さらに大きなコードベースを扱う開発者ならアスペクトを別々のファイルに分けて使用するでしょう。</p><p>アスペクト指向プログラミングはアプリケーションのリファクタリングに有効です。既に紹介したアドバイスに加えて、AOPライブラリには以下のアドバイスも存在します。</p><p>チュートリアルを書くにあたって、広く使われていて便利であるということから今回はJavascriptを使用しましたが、他の多くの言語でAOPは使用可能です。例えば、Javaでは<a href="http://spring.io/" rel="nofollow" title="" class="ext-link">Spring AOP</a>や<a href="http://eclipse.org/aspectj" rel="nofollow" title="" class="ext-link">AspectJ</a>といったものがあります。このライブラリは両方ともmeld.jsの機能に適応するのに加えて、ポイントカットの柔軟性や再利用をサポートしています。GitHub上の私の<a href="https://github.com/abstractOwl/snippets/tree/master/java/HelloAspects" rel="nofollow" title="" class="ext-link">コードスニペット</a>をまとめたリポジトリにSpring AOPのコードスニペットがありますので興味があれば見てみてください。</p><p>アスペクト指向プログラミングはビジネスロジックから関心事を分離す強力な技術を提供し、結果としてコードを分かりやすくまとめることができます。</p>
