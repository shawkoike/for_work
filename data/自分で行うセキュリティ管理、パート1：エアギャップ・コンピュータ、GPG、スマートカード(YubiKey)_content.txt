Secure yourself, Part 1: Air-gapped computer, GPG and smartcards （2015-05-15） by Víctor Cuadrado Juan私はVíctor Cuadrado Juanといいます。Linuxをこよなく愛する開発者であり、FOSSマニアでもあります。現在、スペインのマドリード在住です。皆さんに貴重な時間を遠慮なく使っていただき、サイトをご覧になったり、ご意見をme@ viccuad.me宛にメールで送ったりしてもらえたら幸いです。]()この記事は以下のシリーズの一環ですもちろん、このガイドで100％のセキュリティが確保できるわけではありませんし、全てを網羅するものでもありません。また、安全保障に関わる政府の諸機関から、目をつけられずに済むという保証もありません。どうか、気軽に学べる趣味という程度に考えてください。結局、この記事は全てセキュリティ侵害についてであり、私は誰もがするように、適当な場所に線を引くことにします。この記事について、不備な点や提案などがありましたら、いつでもご連絡ください。このパートでは、以下の内容を取り上げます内容に入る前に、いくつかコンセプトを学んでおきましょう。認証に使われる情報には、3つの異なるタイプがあります。セキュリティ的に最上級である”自分独自のもの”は、少しあいまいです。これは、それ以下の等級である”自分だけが持っているもの”になり得るからです。例えば指紋は本人が使い残した物（プラスチックボトルやカップ）から簡単に入手して、日用品を使って簡単にコピーすることができます。そして、セキュリティが侵害されたとしても変更できません。あるいは、誰かがあなたの手から指を取り去ることができますし、ほとんどのスキャナはそんなことは感知しないでしょう。生体認証が”ユーザ名”としてしか使用されないのはこのためです。これに対して、強固で個人的なパスワードは、使用する際にしか漏れる恐れはありませんし、どこへ行こうと、置き忘れることもありません。最も包括的な解決方法は、3つの情報を全て使用することでしょう。ご存知のように、2段階認証スキームと呼ばれているものです。自分独自のものと、自分だけが知っているもの（ログインとパスワード）、そして自分だけがその瞬間に持っているトークン（一度だけ使用するコード、またはクレジットカードや電話を必要とするデバイスによって生成されるコード）です。攻撃者がセキュリティ侵害を成し遂げるには、対象者のパスワードを推測し、デバイスを盗み出さなければならないでしょう。自分だけが持っているトークンはYubiKey NEOというものになるでしょう。これは小型で耐久性に優れたUSBキーで、静電容量式タッチボタンが1つついています。これを自分のキーホルダーに取り付けたり、より安全にするために常時身につけているブレスレットに取り付けたりします。10年以内に、この種のデバイスが一般的になる可能性はかなり高いでしょう。例えばNFC内蔵リングです。これに、自分のパスワードを記憶させることで、考えうるあらゆるものに、自動的にログインできるのです。YubiKey NEOには、以下のような機能があります。私たちのセキュリティスキームとYubiKeyをセットアップするには、ある基盤が必要です。それがエアギャップ・コンピュータです。エアギャップ・コンピュータは、それ自体がインターネット接続しておらず、更に、インターネットにつながる他のいかなるシステムにも接続されていないコンピュータです。こうした目的で使用する場合は、Raspberry PiやBeagleBone Blackなどのボードコンピュータが、大変役立ちます。これらは全てFOSSハードウェアであり、低価格で（高くても約5,400円程度）、携帯可能で（クレジットカードのサイズ）、無線LANチップを内蔵していないので、ネットワークに接続していなければ、（スマートフォンや内蔵のブロードバンドチップとは違って）確実にネットワークから遮断できます。また、コンピュータに組み込まれているmicroSDカードを交換するだけで、異なるエアギャップ・コンピュータとして使用することもできます。保管も楽ですし、エポキシ樹脂による改ざん防止加工もできます。私は、今持っているOlimex A20 Olinuxino Limeを使おうと考えています。マスターGPGキーとサブキーを作成する際に、マスターキーへの署名や、バイナリの構築と署名などをするために、このコンピュータを使うことになります。オフライン・コンピュータへのファイルの書き込み、書き出しには、USBを利用します。こうした操作はあまり行わないので、それほど大きな障害とはならないはずです。そのためには、バイナリ・ブロブを排したDebian Jessie（非バイナリ・ブロブのソフトウェア）をインストールします。更にA20 Olinuxino Lime上のシンプルなフレームバッファサポートをインストールします。そうすることにより、HDMIアウトプット上でコンソールを使えます。そのためには、U-Bootブートローダのバージョン2015.01以上と、Linux kernelの3.19以上が必要です。その際、選択肢は2つあります。週次／日次のDebian ARM ISO イメージを利用するか、自分でインストールを行うかです。自分でインストールを行う場合は、Linux-sunxi wikiのSDカードイメージの作成手順に従ってください。（余談ですが、私はこのLinux-sunxi wikiのページにコントリビュートしました）。U-Bootを構築するには、A20-OLinuXino-Lime_configと、Olimex A20-OLinuXino-LIMEをflash-kernelのデバイス名として使用してください。システムの実行後、次のパッケージを更新してインストールします（もし将来、新しいパッケージをインストールしたい場合は.debの拡張子のファイルをダウンロードし、USBを使ってインストールする必要があることを覚えておいてください。将来的には、gnupg2 v2.1以上をインストールすることになります。そうすればいろいろなことがもっと簡単になります。現時点では、Debian Jessieを使うと、次のようになります。このopenPGP ベストプラクティス・ガイドで勧めているように、堅牢になったJacob Appelbaumのgpg.confを取り込み、読んで内容を理解しましょう。これでコンピュータはLANから切り離され、オフラインになりました。もちろん、これ以降は、UARTやsshなどでOlinuxinoと接続してはいけません。コンピュータをHDMIスクリーンと、キーボードに接続します。将来、このコンピュータを再び使う必要がある場合は、次のように、時計を再設定しなくてはなりません。もっと良い方法としては、バッテリーとともに、リアルタイムクロックモジュールに接続することです。リアルタイムクロックには、こちらのリンクでご紹介しているものや、こちらでご覧頂けるものもあります。I2CはKernel3.13以降で使えるので、きちんと動くはずです。他にも多くのモジュールがあり、とても安価です。私たちのコンピュータのSoCボードにはリアルタイムクロックが内蔵されています。ですから、Olinuxinoにバッテリーを接続すれば、時刻情報は維持されています（コントローラはMainline Kernel内にはすでにありませので、少々待つ必要があります）。コンソールの設定が必要な場合や、現在設定されているものと異なるロケールのキーボードとの接続が必要な場合には、次のように実行します。さあ、これでやっと一息入れて、エアギャップ・コンピュータのセキュリティと実行についてじっくり検討できますね。マスターGPGキーのペアと、サブキーのペアを生成します。もしパブリックキーの暗号化の方法がどんなものか知りたければ、この映像はとても参考になります。サブキーについて詳細を知りたい場合は、サブキーに関するDebianのサイトと、StackOverflow postを読むことをお勧めします。さあ、いよいよこの再編集版OpenPGPのベストプラクティスの山場です。マスターキーのペアは他の人のキーに署名する際、そして新しいサブキーを発行する際に使用されます。サブキーはマスターキーにリンクしていて、YubiKey NEOの中に格納されます。これは、暗号化や復号化の際に使用されます。必要ならば更にサブキーのペアをつくることができます。なぜなら、もし紛失したり、セキュリティ侵害を受けたりしても、再度署名を必要としないマスターペアにリンクしているからです。サブキーのペアを生成する際には、YubiKey NEOは2048ビットまでのキーしか格納および処理ができないことを覚えておいてください。YubiKeyでは4096ビットのマスターキーのペアを作成できない上に、バックアップできるキーペアは3つのサブキーまでなので、エアギャップ・コンピュータ内にキーを生成します。有効期限は1年で、毎年手動で延長できます（その理由はこちらをご覧ください）。マスターキーを生成します。失効証明書を作成します。マスターキーのバックアップを作成します。サブキーを生成します。サブキーのバックアップを作成します。キーサーバと自分のWebページに次のコードを入力します。YubiKeyをエアギャップ・コンピュータに接続します。OTPとCCIDの互換性のために、YubiKey内のイジェクトフラグが82に設定されていることを確認します。また、lsusb –vを使ってバージョン3.1.8以降の新しいファームウェアであることも確認してください。更に、CVE-2015-3298への脆弱性が改善された新しいYubiKey NEOを必ず使うようにします。CVE-2015-3298に脆弱な古いタイプを持っている場合は、無料で新しいYubiKey NEOへの交換と配送をしてくれるサービスを利用できます（パッチを当てるだけで済む場合でも同様のサービスを受けられます）。これらの設定が完了したら、次はスマートカードの設定を行います。サブキーをスマートカードに移動します（コピーではなく、完全に移動してください。同じサブキーを別のYubiKeyで利用したい場合は、以下の例のようにバックアップを取っておく必要があります）。スタブのバックアップを作ります。YubiKey NEOで指定したURLに~/backup-masterstubs/publickey.txtを加えてください。これでYubiKeyの設定が完了です！　お持ちのキーホルダーに加えたり、私のようにリストバンドに付けてみたりしてください。USBフラッシュドライブ内のエアギャップ・コンピュータの内部に、主要なキーペアと失効証明をバックアップしなければいけません。また、Paperkeyを利用すると、シークレットキーの”秘密の短いコード（secret bits）”が表示されるので、それを手で紙に書き写して保存しておくことも可能です（およそ149バイトのコードが表示されます）。プリンタで印刷する場合は、プリンタのメモリからシークレットキーが漏れてしまう可能性があるので注意してください。この場合もやはり、エアギャップ・コンピュータは安全な場所に保存するべきです。少なくともmicroSDは必ず安全な場所に保存してください。必要なパッケージをインストールします。GNOME 3（またはそれをベースにしたデスクトップ環境）を使用している場合は問題が生じます。gnome-keyringのgpg-agentプロトコルの導入が不完全なため、少なくともGPGのスマートカード機能とGPGSMの多くの機能を破損してしまいます。GNOME 3を使わずに、gnome-keyring-daemonを非アクティブ化し、代わりにgpg-agentを利用します。私が最善だと思う解決方法は、gnupgメールリストで見つけました。私の設定をご覧になりたい場合は、私のドットファイルを確認してください。こちらにはgpg-agentのワークアラウンドや共有可能な設定なども載せています。パブリックキーをフェッチし、スタブキーを作成します。すると、GPGのプライベートキーの中にスタブを確認できるはずです（sec#の#はスタブで装飾のないキーであることを意味します）。私の場合は以下のようになりました。このキーを究極に信頼できるキーとして指定します。オールドキーセットから、作成したばかりの新しいセットに移行する場合は、新しいキーでオールドキーに署名し、移行の宣言とオールドキーの失効を記述します。また、必要な時に古いファイルを復号できるよう、オールドキーペアもバックアップする方が賢明です。オールドキーに署名するために、オールドキーのエクスポート、エアギャップ・コンピュータへの移動、署名、共有を行います。移行の宣言について、こちらに良い例が掲載されています。新旧両方のキーを使ってクリアサインし、安定した場所に公開します。お持ちのリファレンスをGPGキーへとアップデートすることも忘れないでください（メールの署名、サイトのAboutページ、名刺などです）。サブキーへの不正アクセスや、窃盗、紛失などがあった場合は、サブキーを失効させなければいけません。マスターキーのペアがあるエアギャップ・コンピュータを起動し（もしマスターキーのペアがなければgpg –importを用いてインポートします）、サブキーを失効させます。この段階でキーをエクスポートし、キーサーバ上に公開する必要があります。更に詳しく知りたい場合やバックアップのために、本記事のマークダウンバージョンを読みたい場合はこちらからダウンロードできます。
