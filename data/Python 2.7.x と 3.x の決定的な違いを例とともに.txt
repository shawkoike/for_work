<p><a href="http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html" rel="nofollow" title="" class="ext-link">The key differences between Python 2.7.x and Python 3.x with examples</a> by <a href="https://twitter.com/rasbt" rel="nofollow" title="" class="ext-link">Sebastian Raschka</a></p><p>Pythonを始めたばかりのユーザーの多くが、どちらのバージョンを使えばいいのか迷っています。私の答えは、「気に入ったチュートリアルに書かれているバージョンにしましょう。そして、あとで違いを調べてください」という言葉につきます。 それでは、新しいプロジェクトを始めるときにはどちらを選べばいいのでしょうか？ 使おうとしているライブラリを全てサポートしているなら、2.7.x系と3.x系のどちらを使ってもよいでしょう。そうはいっても、この2つのメジャーバージョンについて大きな違いを見ておくのは良いでしょう。どちらかのみでコードを書いたり、プロジェクトに使おうとしている時によくある落とし穴を避けられるからです。</p><p>Python 3.x で導入されていて Python 2 で使えないキーワードについては、 <code>__furute__</code> モジュールをインポートすることで Python 2 で使えます。あなたのコード中で Python 3 をサポートするときは <code>__future__</code> モジュールのインポートが推奨されています。例えば Python 3.x の整数除算のの挙動を Python 2 に取り入れたいときは、以下のようにインポートします。</p><p>他にも以下の表にある機能がインポートできます</p><p>(ソース: https://docs.python.org/2/library/future.html)</p><p>些細な事かもしれませんが、print構文が変わったことは広く知られている変化ですが、取り上げる価値があります。Python 2のprint文は <code>print()</code> 関数で置き換えられます。printしたいオブジェクトを丸括弧で囲うことが必要になります。</p><p>Python 2 では括弧が追加されても問題ありませんが、Python 3 では対称的に Python 2 のやり方で括弧のないprint関数は <code>SyntaxError</code> になります。</p><p>Python2で “Hello, World” を上記のように印字するのは極めてふつうのことです。しかし丸括弧のなかに複数のオブジェクトがあった時は、<code>print</code>は文なので、タプルを作ることになります。</p><p>コードを移植しようとしたり、Python3のコードをPython2で実行しているなら、除算の変化はとりわけ危険になります。整数除算の挙動の変化は、しばしば気づかれないからです。（<code>SyntaxError</code>は発生しません）なのでPython3のスクリプトではPython2を使ってる人の面倒ごと省くために、 <code>3/2</code> と書かずに <code>float(3)/2</code> もしくは <code>3/2.0</code> と書くようにしています(逆もまたりかりで、Python2のスクリプトでは <code>from __future__ import division</code> を使うように推奨しています)。</p><p>Python 2 では ASCIIの <code>str()</code> 型を、 <code>unicode()</code> とは別に持っていますが、 <code>byte</code> 型はありません。Python 3 では、ついに Unicode (utf-8) の <code>str</code> 文字列と、 2バイトクラス: <code>byte</code> と <code>bytearray</code> が登場しました。</p><p><code>xrange()</code> は Python 2.x ではイテラブルなオブジェクトを作るのによく使われています。例えば、for-loop や list/setとディクショナリの内包表記などがあります。挙動はジェネレータ（例: 遅延評価）とよく似ています。しかしxrangeのイテラブルは枯渇することはありません。無限にイテレート可能なのです。</p><p>遅延評価のおかげで、<code>range()</code> の <code>xrange()</code> に対する利点は、一回で全てイテレートする場合に若干速いということにとどまります。(for-loopなど)しかし、一度のイテレーションとは対照的に、何度もイテレーションしてしまうときには推奨されません。なぜなら、いつも一からジェネレートが起こってしまうからです。</p><p>Python 3 では <code>range()</code> は <code>xrange()</code> 関数のように実装されています。おかげで専用の <code>xrange()</code> はもうありません。</p><p>他にも、Python 3.xでは <code>range</code> が 新たに<code>__contains__</code> メソッドを手に入れました。(<a href="https://github.com/yegle" rel="nofollow" title="" class="ext-link">Yuchen Ying</a>さん、ご指摘ありがとうございます)<code>__contains__</code> メソッドは Python 3.x の <code>range</code> における 整数とブール値型のルックアップを劇的に高速化します。</p><p><code>timeit</code> の結果をみれば、 浮動小数点数に比べて整数ルックアップの実行速度が60,000倍も速いことがわかります。しかし Python 2.x の <code>range</code> や <code>xrange</code> は <code>__contains__</code> メソッドを持っていないので、整数と浮動小数点数のルックアップはそこまで変わりません。</p><p>以下は Python 2.x では <code>__contain__</code> メソッドが実装されてないことの証明です。</p><p>Python 3 の <code>range()</code> と Python 2 の <code>xrange()</code> の速度の差について指摘する人もいます。同じように実装されているのだから同じ速さになるだろうからです。しかし、以下の違いは Python 3 は 一般に Python 2 より遅くなるという事実からきています。</p><p>Python 2 が新旧どちらの構文もうけつけるようなところでは、丸括弧で例外を閉じなければ、 Python 3 は(<code>SyntaxError</code>を出して)行き詰まってしまいます。</p><p>Python 3 では例外処理もすこし変わりました。Python 3 では <code>as</code> キーワードを使う必要があります。</p><p><code>next()</code> (<code>.next()</code>) はよく使われる関数ですが、以下は言及する価値のある構文の変化(そして実装の変化)です。Python 2.7.5 で関数とメソッドの構文を使えるところでは、Python 3 では <code>next()</code> 関数しか残っていません。(<code>.next()</code> メソッドを呼ぶと <code>AttributeError</code> になります)</p><p>朗報: Pthon 3.x の for-loop 変数はグローバル名前空間へ漏れることがなくなりました！</p><p><a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow" title="" class="ext-link">What’s New In Python 3.0</a> で取り上げた変化にさかのぼりますが、以下のようになります:</p><p>他にも Python 3 でのナイスな変化といえば、列挙不可能な型同士を比較しようとしたときに、<code>TypeError</code> が警告として送出されるようになったことがあります。</p><p>ついてることに、<code>input()</code> 関数は Python 3 でユーザー入力を常に<code>str</code> オブジェクトとして保持するように直されました。Python 2 においては、<code>strings</code> 型以外の型として読みこむような危険な振る舞いを避けるため、<code>raw_input()</code> を使わなければなりません。</p><p><a href="#xrange"><code>xrange</code></a> の節で見たように、Python 3 のある関数やメソッドでは Python 2 ではリストとして返していたものを、イテラブルなオブジェクトとして返します。</p><p>私達はよく一度にイテレートするので、この変化のおかげでかなりメモリーを省力できると考えていました。しかし、ジェネレータとは対照的に、必要であれば何度でも全体をイテレートすることができます。ただしそこまで効率的ではないのですが。</p><p>本当にリストオブジェクトが必要な場合、<code>list()</code> 関数を使って <code>list</code> に変換することができます。</p><p><strong>以下のよく使われている関数とメソッドは、Python3ではもうリストを返さなくなっています:</strong></p><p>フォローアップにおすすめな、Python 2 と 3 をつなぐ良質な記事のリストをあげておきます。</p><p>**// Python 3 への変換 **</p><p><strong>// Python 3 のメリット・デメリット</strong></p>
