<p><a href="https://paul.kinlan.me/serverless-sync-in-web-apps/" rel="nofollow" title="" class="ext-link">Serverless Data Sync in Web Apps with Bit Torrent</a> （2016-06-14） by <a href="https://twitter.com/paul_kinlan" rel="nofollow" title="" class="ext-link">Paul Kinlan</a></p><p>忙しい人向け：<a href="https://bt-voice-memos.appspot.com/share?seeds=magnet%3A%3Fxt%3Durn%3Abtih%3Abd1ba69e6051ee5ea8065a9a270a2703a9d8915a%26dn%3DHello%2BWorld.webm%26tr%3Dudp%253A%252F%252Fexodus.desync.com%253A6969%26tr%3Dudp%253A%252F%252Ftracker.coppersurfer.tk%253A6969%26tr%3Dudp%253A%252F%252Ftracker.internetwarriors.net%253A1337%26tr%3Dudp%253A%252F%252Ftracker.leechers-paradise.org%253A6969%26tr%3Dudp%253A%252F%252Ftracker.openbittorrent.com%253A80%26tr%3Dwss%253A%252F%252Ftracker.btorrent.xyz%26tr%3Dwss%253A%252F%252Ftracker.fastcast.nz%26tr%3Dwss%253A%252F%252Ftracker.openwebtorrent.com%26tr%3Dwss%253A%252F%252Ftracker.webtorrent.io" rel="nofollow" title="" class="ext-link">こちらにデモ用の</a><a href="https://github.com/paulkinlan/voice-memos" rel="nofollow" title="" class="ext-link">プログラム</a>があります。</p><p>ここのところ、私たちのチームはたくさんの革新的なウェブアプリを作り、アプリ作成のための考え方を示してきました。<a href="https://airhorner.com/" rel="nofollow" title="" class="ext-link">Airhorner</a>、<a href="https://voice-memos.appspot.com/" rel="nofollow" title="" class="ext-link">Voice Memos</a>、<a href="https://guitar-tuner.appspot.com/" rel="nofollow" title="" class="ext-link">Guitar Tuner</a>、<a href="https://jakearchibald.github.io/svgomg/" rel="nofollow" title="" class="ext-link">SVG-OMG</a>がすぐ思い浮かぶでしょう。これらのWebサイトに共通しているのは、データを保管したり同期したりするためのサーバコンポーネントを持っていないことです。私たちはこれらのサイトを、Web上のある種のエクスペリエンスの例および実装リファレンスのために作成しました。ビジネス向けに作られる完全な”アプリ”を目指したわけではありません。</p><p>最近、新たなWebアプリのアイディアが浮かびました。Ben Thompsonの<a href="https://stratechery.com/2016/the-future-of-podcasting/" rel="nofollow" title="" class="ext-link">ポッドキャストの未来</a>に載っているポッドキャストにインスパイアされたのです。サイトを訪れて録音ボタンを押すというシンプルなポッドキャスティングを作りたいと思いました（何年か前に、<a href="http://thenextweb.com/2009/07/20/wanted-micropodcast-friendfeed-friendboo/#gref" rel="nofollow" title="" class="ext-link">FrinedBoo</a>という名で似たようなものを作りましたが、公衆回線網でしか使えませんでした）。</p><p>技術的には、必要なウェブプラットフォームの全パーツがそろっています。オフライン作業をService Workerで、ローカルにおける相当な量のデータ保管にはBlobとIndexed DBで、入力とファイルへの記録はMicrophoneを使ってMedia Stream Recorderで行います。最後のパーツは、ブラウザとインターネット接続があればどこからでもWebアプリにアクセスできるURLです。</p><p>いったんウェブサイトに接続すると、通常はあるデバイスから記録されたデータがどこかのサーバに保管され、以後はそのサイトにアクセスするマシンが何であろうと、あとからそのデータを利用できます。従来は、データをどこかのサーバに保管するWebサービスを作ると、全てのユーザをサポートするために全てのインフラを運営していたのです。</p><p>しかし、私はあるサービスからデータを保管したり検索したりするサービスを作る気はありません（これには法務部門の確認をとらなければならず、それは悪夢です）。なので、サービスではWebアプリ内でローカルに全てが保存される必要があります。大きく問題になるのは、他のデバイス上のWebアプリの他のインスタンスへデータを渡す方法と共有する方法です。</p><p>Paul Lewisが作った<a href="https://voice-memos.appspot.com/" rel="nofollow" title="" class="ext-link">Voice Memos</a>はもう一つの例です。</p><p><img src="https://paul.kinlan.me/images/voice-memos.png" style="max-width: 100%"><br>
全データはアプリ内でローカルに保管</p><p>データが録音され、ローカルに保管されます。つまり、データを自分の他のデバイスと同期したり、友人と共有したくても、不可能なのです。</p><p>これには解決策があります。例えば、base64でオーディオファイルを動的にエンコードして、カスタムURLを生成することができるかもしれません。だたし、拡張性はありません。</p><p>それはちょっとした難しい問題で、解決したいと思っていました。私が作りたいものに必要な簡単な要件を挙げておきます。</p><p>さて。話は６カ月前にさかのぼります。私は<a href="https://2015.coldfrontconf.com/" rel="nofollow" title="" class="ext-link">2015年</a>の<a href="https://2016.coldfrontconf.com/" rel="nofollow" title="" class="ext-link">ColdFrontカンファレンス</a>に参加して、<a href="https://github.com/feross" rel="nofollow" title="" class="ext-link">Feross Aboukhadijeh</a>の講演を聴きました。その内容はWeb RTCデータチャネルとBitTorrent、それに彼がどのようにして<a href="https://webtorrent.io/" rel="nofollow" title="" class="ext-link">WebTorrent</a>と呼ばれるプロジェクトを始めたかについてでした。とても素晴らしい話だったのですが、彼が話していたことの潜在能力について、最近まで頭の中で抱えている課題と結び付いていませんでした。</p><p>今では、WebTorrent.io.を利用することにより、解決の糸口をつかんでいると思います。</p><p><img src="https://paul.kinlan.me/images/webtorrent.png" style="max-width: 100%"><br>
  Web Torrent</p><p>Web Torrentについては、「BitTorrentスタイルの分散データ配信とWebRTCとを組み合わせたもの」ということ以外は説明しませんが、かなり素晴らしい話です。是非ともその内容を確認することをみなさんにお勧めしたいのですけどね。</p><p>私が考えていた理論は次のようなものです。もしユーザクライアントがTorrentネットワークのピアとして振る舞うことができるならば、Webサイト固有のデータの一部をシードすることができます。そしてユーザは自分のもう一つのデバイスや他のユーザとも共有できるようなトレントリンクを生成することができ、Webアプリの”リモート”インスタンスは”クライアント”インスタンスからデータをフェッチします。</p><p><img src="https://paul.kinlan.me/images/torrent-process.png" style="max-width: 100%"><br>
データの大まかな流れ</p><p>１対１の接続に対しては、これは少し過剰かもしれません。単にWebRTCのシグナリングサービスを生成し、1台のクライアントから別のクライアントに対しデータを得るために別のインスタンスにメッセージを届けるということもできます。</p><p>このアプローチが興味深い点は、2人以上とデータを共有する時に、うまく拡散できるということです。</p><p>前に簡単に<a href="https://voice-memos.appspot.com/" rel="nofollow" title="" class="ext-link">Voice Memos</a>について触れました。それは稼働するアプリに私の理論を組み込んでみた素晴らしいリファレンスアプリケーションでした。これは、ポッドキャスティングアプリの考えに近く、録音用にサーバベースの補助記憶装置を持っていないので、クライアント間でデータを同期させる方法が必要です。</p><p><img src="https://paul.kinlan.me/images/web-torrent-header.png" style="max-width: 100%"><br>
Voice Memos</p><p>“共有”ボタンを追加する以外、あまり変更しませんでした。<a href="https://bt-voice-memos.appspot.com/" rel="nofollow" title="" class="ext-link">BitTorrent Voice Memos</a>のデモで確認できます。簡単なオーディオファイルを録音して、それを保存し、共有してください。”共有”ボタンは、別のデバイスや他の人に送信できるURLを生成します。</p><p>出来栄えにはかなり満足しています。このデモの準備にかかった時間は、全部でわずか2、3時間です。</p><p>ここで、私が行った主な必須処理を幾つかざっと説明します。</p><p>全ての魔法を動かすために使われる<code>webtorrent.min.js</code>スクリプトを追加します。</p><p>他の全てのクラスで使用できる<code>WebTorrent</code>のAPIのシングルトンインスタンスを作成します。（Paul Lewisにインスパイアされています）</p><p>全てのメモをシードします。これは一般には少しやり過ぎですが、デモではそうしました。<code>this.memos</code>は、IndexedDBに格納されていたVoiceMemosのArrayインスタンスです。</p><p>ユーザが共有ボタンをクリックすると、カスタムURLが作成されます。そのURLには、トレントへアクセスし、別のクライアントにデータをストリーミングするために必要な情報が全て含まれます。</p><p>トレント情報が含まれているURLをユーザが入力したことを検出した場合は、そのトレントをフェッチするために幾つかのカスタムロジックを実行する必要があります。Voice Memosアプリには、”/share”で始まるURLを探すカスタムルータがあります。</p><p>次にトレント情報をパースする必要があります。その後、WebTorrent APIを使って、BitTorrentのネットワークからファイルをフェッチします。</p><p>いったんファイルをフェッチしたら、その後、お決まりのXMLHttpRequestを使ってBlobからファイルデータを取得する必要があります。</p><p>これはかなり大雑把に作成したものなので、プライベートなデータに使用すべきではないということをお話しして、この記事を終わりにしたいと思います。なぜなら、今もし、データがネットワーク上に公開されて、人々がトレントへのURLを持っていたら、データはアクセス可能になるからです。</p><p>この概念は重要だと思います。データを同期することができ、しかも仲介者もWebアプリ内にサーバロジックも要らないということは重要な概念であり、そのようなエクスペリエンスを構築する方法を積極的に検討する必要があります。</p><p>では、このプログラミングを続けるので、これで失礼します。</p><p><strong>追記</strong></p>
