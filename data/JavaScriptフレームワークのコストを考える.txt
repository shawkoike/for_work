<p><a href="https://aerotwist.com/blog/the-cost-of-frameworks/" rel="nofollow" title="" class="ext-link">The Cost of Frameworks</a> (2015-11-16) by <a href="https://twitter.com/aerotwist" rel="nofollow" title="" class="ext-link">Paul Lewis</a></p><p><strong>こんにちは。</strong>Paulです。Chrome開発リレーションチームでの提唱者の1人として、<a href="https://www.google.com/" rel="nofollow" title="" class="ext-link">Google</a>で仕事をしています。開発者が自身のサイトやアプリの性能を高めるサポートをしています。</p><p>先日、私はBrightonで開かれたJavaScriptのカンファレンスFFConfで「(ここにライブラリやフレームワークの名前を入れる)を使おう。これこそ最強中の最強中の最強だ！」と題して話をしました。</p><p>ここに、そのプレゼンテーションの内容を書き起こします。もっと注目されるべき、最近のモバイルデバイスのフレームワークにかかるコストに関して、議論を広げる一助となればと思います。</p><p><strong>2015年11月16日更新 – テーブルに1行、プロダクション環境下のReactについての行を追加しました。良いニュースをお伝えしますと、これはvanillaよりも3倍遅いですが、TodoMVCに関して言えば速いと言えます！PolymerのTodoMVCサンプルも最新バージョン1.2.2にアップデートされ、同様により速くなりました。</strong></p><p>読むよりも見たい方へ、講演のビデオはこちらです。（必要なら、<a href="https://speakerdeck.com/paullewis/framework-here-its-the-bestestest" rel="nofollow" title="" class="ext-link">スライドも入手できます</a>）</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/_yCz1TA0EL4" frameborder="0" allowfullscreen></iframe></p><p>読むほうが都合がよい方は、このまま進んでください。</p><p>この年の初め、扱うツリーのサイズが大きくなっていく<a href="https://aerotwist.com/blog/react-plus-performance-equals-what/" rel="nofollow" title="" class="ext-link">Reactの性能の特徴</a>について書きました（要は、大きいツリーほど、多くの計算をする）。その投稿に対する反応は、有益で建設的なものから、全く逆のものまで実に様々でした。おかげで私はまた新たな気づきを得たのですが、それは程度の差こそあれ全てのフレームワークにあてはまることです。ここにまとめてみます。</p><p>時にははっきりと、たいていは暗に何度も言われたのは、労働効率こそが、多くの開発者にとって<em>最も重要な要因</em>である、ということでした。言い換えるなら、その心は、「もっと簡単にできるなら、ユーザにとってもっと使いやすいものを開発できる」です。言っていることは魅力的ですが、その考えには欠けているポイントがたくさんあります。</p><p>ユーザにもニーズがあるのです。すぐに思いつくことを挙げます。<br>
・<strong>サイトとアプリのローディングは速いのがいい。</strong><br>
・<strong>スムーズに反応してほしい。</strong><br>
・<strong>私の電話を遅くしないでほしい。</strong><br>
・<strong>クラッシュしないでほしい。</strong><br>
・<strong>私の欲しい機能が付いているべき。</strong></p><p>そこですぐに、トレードオフの可能性を考えることになります。一方で開発者の利便性と労働効率、他方でユーザのニーズ。私たちは、いやでもその2つの取引をしなければなりません。なぜならフレームワークはタダではないからです。</p><p>ここで、いったんライブラリの話をして、今回の議論からは外します。理由は、ライブラリは良くないと分かれば取り除き、別のものに差し替え可能だと思うからです。ライブラリの日付書式が気に入らない？　問題なし、他の何かと取り替えましょう。他方、フレームワークは差し替えがずっと困難で、結局そのアプリを再構築する羽目に陥ることも多いのです。またその性質上、フレームワークはより大きく、影響範囲が広いのです。</p><p>コストのかからないコードはありませんが、特にフレームワーク固有の下記のようなコストがあると考えています。</p><p><img src="https://aerotwist.com/static/blog/the-cost-of-frameworks/deprecated.jpg" alt="A deprecation warning."><br>
<em>フレームワークの何らかが非推奨であることを伝える魔法のような瞬間。明らかにJavaに取って代わられています。謎です。</em></p><p>開発者のコストとは別に、ユーザにもコストがかかります。</p><p>以上のことに気をつけながら、これらのコストを測ることについてお話します。どのようなトレードオフを選んでいくのか、開発者が一緒になって、より詳しいイメージを描いていければと思います。</p><p>フレームワークのモバイルにおける起動時間を見てみましょう。理論上、一定の条件のアプリを使えば、各フレームワークの起動時間を比較できるはずです。ここでは<strong>TodoMVC</strong>をテストに使います。なぜなら、開発者から見て優れたWebアプリですし、ユーザとして見たときにはそれぞれの機能は同一であるためです。</p><p><img src="https://aerotwist.com/static/blog/the-cost-of-frameworks/todomvc.jpg" alt="TodoMVC."><br>
<em>TodoMVC: 起動テストのソース</em></p><p>先にリストアップしたコストのうち、Nexus 5とiPhone 5S上でいくつかのフレームワークを起動する際の<strong>時間、帯域幅、そしてCPU使用率</strong>をチェックしました。</p><p><img src="https://aerotwist.com/static/blog/the-cost-of-frameworks/time-to-interactive.jpg" alt="Measuring time to interactive."><br>
<em>注釈：起動 / インタラクティブになるまでの時間<br>
（ラベル上段左から）JSリクエスト – JS取得 – モデルデータリクエスト – モデルデータ取得 – ページがインタラクティブに<br>
（ラベル下段左から）ロード – 評価、ロード＆実行</em><br>
<em>反応時間：アプリが反応可能な状態に至るまでにかかる時間を測ります。</em></p><p><strong>各フレームワークのJavaScriptの最初のペイロードの評価と実行</strong>、それからモデルに最初のデータセットをプロセスし設定するのにかかる時間を測ります。スタイル、レイアウト、描画などにかかるコストは、様々なTodoMVCにおいてほぼ違いはないので、ここでは除外します。また、転送時間もテストしません。</p><p>ページをNexus 5にロードするために<a href="https://webpagetest.org/" rel="nofollow" title="" class="ext-link">WebPagetest</a>を使い、それぞれの実行に対してタイムラインファイルを要求し、それを<a href="https://aerotwist.com/blog/bigrig/" rel="nofollow" title="" class="ext-link">Big Rig</a>に渡してプロセスするようにしました。iPhoneに関しては自身で行い、手動で計算する必要がありました。なぜなら、あいにくSafariのJavaScriptプロファイリングからはタイムライン、トラッキングファイルのエクスポートができなかったからです。</p><p><img src="https://aerotwist.com/static/blog/the-cost-of-frameworks/bigrig.jpg" alt="Using Big Rig to measure TodoMVC bootup time."><br>
<em>Big Rigを使い、フレームワークごとのTodoMVC起動時間を短時間で査定</em></p><p>このようなテストを自身で行う場合は、少なくともChromeを走らせるデバイスを使うとして、次の作業が必要です。</p><p>WebPagetestからタイムラインファイルを取得する過程のビデオです。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/LFOCkLqPklg" frameborder="0" allowfullscreen></iframe></p><p>様々なフレームワークのテスト結果です。</p><p>結果は非常に明白でした。<strong>モバイルでフレームワークを使うと、特にVanilla JavaScriptで書いた場合と比較して、非常に負荷が大きいようです。</strong>Polymer 1.2.2が最速で、これは素晴らしいのですが、Vanillaと比べると3倍もの時間がかかっています。ReactはPolymerによく似ていますが、<a href="https://aerotwist.com/blog/react-plus-performance-equals-what/" rel="nofollow" title="" class="ext-link">そのスケール不変性に懸念が残ります</a>。</p><p>以下は、より状況を明確にするためのメモです。<br>
* <strong>TodoMVCはReactのJSX変換を行わないので、自分で行った。</strong>  Reactに関して3つのエントリがあるのは、TodoMVCのサンプルはJSXを変換せず、代わりにJSX変換ライブラリを含むためです。状況を良くするため（なぜならJSX変換には時間がかかるからです）、よりベースに近いバージョンのサンプルを作り、再度テストを行いました。欠点は、それはReactの小バージョンではないので、結局は別のデータであるということです。そこでReactをプロダクションバージョンに切り替えました。それがテーブル内Reactの3つ目のデータです。<br>
* <strong>これらの時間は転送時間を含まない。</strong>　ここで計測したのはJavaScriptで、フレームワークが起動し最初のビューを取得するまでの時間です。実際<em>TodoMVCのいくつかのフレームワークは小さくなっていません。</em>フレームワークの転送サイズについての議論は、<a href="https://www.filamentgroup.com/lab/mv-initial-load-times.html" rel="nofollow" title="" class="ext-link">昨年のFilament Groupの記事をチェックしてみてください</a>。</p><p>このテストに対し、議論に値する反論が出てくると思われます。</p><p>よって、次の問いは避けられません。<em>「フレームワークを使うべき？」</em></p><p>私はこの問いに答えることはできません。全てはあなたの必要次第だからです。それを使わなくては、と考えるに至るには何百万もの理由があります。ただ、フレームワークについて私の考えを述べておきます。<br>
<!--  --><br>
* <strong>フレームワークはアイデアとコンセプトに寄与する。</strong>　フレームワークは、どのアプローチが役に立ち、あるいは役に立たないかを理解する際の要です。それは究極にはプラットフォームレベルでの改良を達成し得ます。この点から言うと、フレームワークは将来のプラットフォーム変更を支える重要な試験の場であり、Webに永久に埋め込まれてしまう前に動きを理解する助けになります。<br>
* <strong>フレームワークはコントロールの否定。</strong>　先ほどライブラリを除外したのは、取り替えが効くからです。一方、フレームワークは、コントロールを否定します。<em>それらは</em>アプリのライフサイクルを制御し、コードが走るエントリポイントを<em>決定します。</em>あなたはコードの最終形に責任がありますが、コントロールはできません。<br>
* <strong>フレームワークはモバイルでは高コスト。</strong>　少なくとも、Vanillaと比較した場合です。私は高過ぎると思いますが、人それぞれ許容値は違います。</p><p>フレームワークには、労働効率上の利点があると思います（これは重要、もちろん賛成です）。しかし、多くの開発者にとって、<strong>Webプラットフォームそのものの知識への投資は、長期で賭けるに値するものです。</strong>フレームワークは盛衰が激しく、Web上の潮の満ち引きのようなものです。そして上でも述べたように、アイデアとパターンに<em>寄与します。</em>しかし、現在使っているものがもう役立たないと気づいたり、修正不可のバグを見つけたりした場合、その土台となるプラットフォームを理解できることは大きな助けになります。</p><p>今年の初め、Reactに関する記事で、次のように書きました。</p><p>今もこの考えは変わりません。より気楽な生活を望むのと同じくらい、うまく動かないものを送り出したくないと思いますし、ユーザにコストを払わせたくないのです。今日は、モバイルでフレームワークを起動するコストに懸念を持ちました。</p><p>これは最初の一歩でしかありません。起動以外にも、メモリ使用率、長期間のCPU利用量、フレームレートへの影響など、まだ検討していない基準があります。全体では、ユーザに送り出したコードの影響、ユーザに渡したコストを適切に評価するには、他にもしなければならないことがあると考えます。</p><p>速い起動、低いメモリ使用率、スムーズな実行、さらに労働効率の良いフレームワークに到達できれば、成功です。その時まで、少なくともモバイルに関しては、Vanilla Webプラットフォームを使い続けたいと思います。</p>
