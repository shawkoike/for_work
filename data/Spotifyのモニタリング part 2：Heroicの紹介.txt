<p><a href="https://labs.spotify.com/2015/11/17/monitoring-at-spotify-introducing-heroic/" rel="nofollow" title="" class="ext-link">Monitoring at Spotify: Introducing Heroic</a> （2015-11-17） by <a href="https://twitter.com/udoprog" rel="nofollow" title="" class="ext-link">John-John Tedro</a></p><p><img width="730" height="219" src="https://spotifylabscom.files.wordpress.com/2015/11/monitoring-heroic-banner2.png" class="attachment-full size-full wp-post-image" alt="monitoring-heroic-banner" scale="0"><br>
この記事はSpotifyのモニタリングについての第2弾です。<a href="http://postd.cc/monitoring-at-spotify-the-story-so-far">前回の投稿</a>では運用のモニタリングの経緯について書きました。今回はHeroicについて解説します。これは当社のスケーラブルな時系列データベースで、現在はフリーソフトウェアになっています。</p><p>当社ではHeroicを社内用の時系列データベースとして使っています。Heroicを構築した背景には、私たちが直面していた、ほぼリアルタイムなデータ収集と大規模プレゼンテーションといった問題への取り組みがあります。これには主に、CassandraとElasticsearchの2つのテクノロジを使用しています。メインのストレージとしてCassandraを、Elasticsearchはその全データをインデックスするのに用います。現在、いくつかのクラスタに分けて200以上のCassandraのノードを運用していて、世界中で5000万の異なる時系列を処理しています。</p><p><a href="https://aphyr.com/posts/323-call-me-maybe-elasticsearch-1-5-0" rel="nofollow" title="" class="ext-link">Elasticsearchはデータの安全性に関して評判が悪い</a>ことは承知していたので、データパイプラインまたはCassandraからインデックスを迅速かつ完全に再構築できる機能を搭載し、全面的な障害に対して保護しています。</p><p>Heroicの主要な機能はグローバルなフェデレーションです。複数のクラスタが個別に運用でき、グローバルインターフェースを形成するためにクエリを互いにデリゲートすることができます。1つのゾーンが障害を起こしても、使用不可になるのは同一ゾーンでホストされているデータだけです。クラスタは複数ゾーンにまたがってより高い稼働性を提供しています。</p><p><img class="wp-image-1120 size-full aligncenter" src="https://spotifylabscom.files.wordpress.com/2015/11/monitoring-heroic-federation.png?w=730" alt="monitoring-heroic-federation" originalw="730" width="370" height="395" scale="1.5"><br>
当社のインフラにある全てのホストでは、メトリクスの受信と転送を行うエージェント、<a href="https://github.com/spotify/ffwd-jav" rel="nofollow" title="" class="ext-link">ffwd</a>が稼働しています。そしてメトリクスをエクスポートするプロセスが、エージェントにメトリクスを送信しています。これによって当社のエンジニアは、いずれのホストで実行されているどんなものでも簡単に利用することができています。ライブラリ側では「ホスト上でエージェントが利用可能であり、しかもほとんど設定を必要としない」と想定することが可能です。エージェントが近接しているとレイテンシが最小になるので、不適切に書かれたクライアントの悪影響を低減してくれます。集められたメトリクスは、ffwdによって各ゾーンの<a href="http://kafka.apache.org/" rel="nofollow" title="" class="ext-link">Kafka</a>クラスタに送り込まれます。</p><p>この設定によって、迅速にサービス・トポロジを試すことができます。Kafkaは、CassandraやElasticsearchがうまく機能しない場合にゆとりとなるバッファを提供してくれ、全てのコンポーネントは要求に応じてスケールアップやスケールダウンすることができます。</p><p>バックエンドでは、エージェントに提供されたのと同じように全てが保存されます。何かしらのダウンサンプリングが必要であれば、<a href="http://metrics.dropwizard.io/3.1.0/" rel="nofollow" title="" class="ext-link">Dropwizardメトリクス</a>のようなライブラリを使うことによって、エージェントの<em>前に</em>実行されます。エンジニアは、Heroic APIを通して保存されたデータに対し、追加のアグリーゲーションを行うことができますが、私たちはエージェントからの適当なサンプリング密度に依存しています。30秒毎（もしくはそれ以上）に各時系列に対して1つのサンプルが一般的で、このアプローチで遅延や複雑性を回避しています。これは通常、過密したパイプラインのプロセスに関係しています。</p><p>Heroicを使うことで、カスタム・ダッシュボードや同じインターフェースを活用するアラートシステムを構築することができています。これによって、同じUI内にグラフに基づいたアラートを定義できるようになり、エンジニアにとっても、設定が簡単になります。しかし、Riemannが近いうちになくなってしまうわけではありません。当社のインフラの特定部分を監視することができる二次的な方法を持つことに価値を見出しました。さらに可視的なアラートシステムに移行していくことを、長期的な目的としています。</p><p>Heroicの全てのパーツはフリーソフトウェアですので、<a href="https://github.com/spotify/heroic" rel="nofollow" title="" class="ext-link">Github</a>からコードを自由に入手することができます。プロジェクトに関する資料や情報は<a href="https://spotify.github.io/heroic/" rel="nofollow" title="" class="ext-link">オフィシャルプロジェクトサイト</a>をご覧ください。</p>
