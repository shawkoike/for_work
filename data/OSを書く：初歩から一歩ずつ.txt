<p><a href="http://tutorialsbynick.com/writing-an-os-baby-steps/" rel="nofollow" title="" class="ext-link">Writing an OS: Baby Steps</a> （2016-6-8） by <a href="https://twitter.com/nicholasbday" rel="nofollow" title="" class="ext-link">Nicholas Day</a></p><p><img src="http://tutorialsbynick.com/images/babysteps/book.jpg" alt="Baby Steps"><br>
<em>（傑作映画<a href="http://www.imdb.com/title/tt0103241/" rel="nofollow" title="" class="ext-link">『おつむて･ん･て･ん･クリニック』</a>に登場する著書です）</em></p><p>このチュートリアルは、アセンブリで<em>とても</em>簡単なオペレーシング･システムを皆さんが自分自身で書けるようになるために書きました。元々は、<a href="http://wiki.osdev.org/Babystep1" rel="nofollow" title="" class="ext-link">OSDev wiki</a>でこのチュートリアルのベースとなるものを見つけたのがきっかけです。しかし、そこには何がどのように、どうして行われているのかという説明が一切ありませんでしたので、このチュートリアルを書くことを決めました。ということで、起動プロセスの基礎と、実行するのに必要なツールについて紹介していきます。</p><p>OSXやLinux、Windowsなどのよく使われているオペレーシング･システムはドライバを持っており、ハードウェアとの間のインタフェースを提供し、一定レベルの安全性とセキュリティを保証します。さらに、プロセス同士がお互い争わないように調整し、コンピュータを使うためのプログラムに基本的なライブラリを提供しています。しかし、これから私たちが取り組むものはそんなに複雑なことはありません。チュートリアルが終わる頃には、オペレーティング･システムができあがり、スクリーンにメッセージをプリントすることもできていることでしょう。</p><p>可能な限りシンプルに説明をしていこうと思いますが、間違いがあったり、記事を修正したほうがいいと思う所があれば遠慮せず、Githubで<a href="https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2FTutorialsByNick%2Ftutorialsbynick%2Fissues%2Fnew" rel="nofollow" title="" class="ext-link">issueを作成</a>するか、私までメールしてください。</p><p>ソースコードはこちらの<a href="https://github.com/TutorialsByNick/blog-operating-system" rel="nofollow" title="" class="ext-link">Githubリポジトリ</a>でも確認できます。</p><p>このチュートリアルはDebianベースのLinuxがインストールされていることを前提として書きます。しかし、インストール方法は別として、大部分では他のLinuxディストリビューションとそれほど変わりはありません。もし、お持ちでない場合は、<a href="http://tutorialsbynick.com/how-to-install-ubuntu-in-a-virtual-machine-on-windows/" rel="nofollow" title="" class="ext-link">仮想マシンでUbuntuをインストールする</a>か<a href="http://tutorialsbynick.com/writing-an-os-baby-steps/#comment-2728097897" rel="nofollow" title="" class="ext-link">Michali Sarris氏のコメント</a>を使って、Docker Toolboxを使用することで、話についてくることができるはずです。</p><p>必要なのは、<code>nasm</code>と<code>build-essential</code>と<code>qemu</code>です。</p><p>
</p>
<p>コンピュータは電源を初めに入れた時、リアルモードと呼ばれるプロセッサモードで起動をします。このモードは16ビットのコンピュータを使っていた時代の名残で、このモードの状態の時にはプロセッサは16ビットを使うようになっています。1バイトは8ビットで、各ビットの数字は1か0で表現され、2進数でエンコードされます。例えば10010101は1つのバイトです。コンピュータはビットとバイトを使い、命令やデータを処理します。なぜなら、バイナリ形式はオン/オフの切り換えに似ているからです。コンピュータは基本的に非常に高密度の電子回路なので、2進数をプログラムに使用すると、ハードウェアにほぼ直接対応させることができるのです。このモードはあまり多くのRAMにアクセスできません。ビット数が少ないほど、RAMをアクセスするために使えるアドレスの数が少なくなることを意味するからです。現在のほとんどのコンピュータは32ビットか64ビットですが、少なくとも4GBのRAMメモリにアクセスできます。一方で、16ビットのコンピュータは1MB相当のRAMしかアクセスできません。今回は、リアルモードで問題ありません。BIOSの機能を使えるのはこのモードしかありませんし、比較的シンプルなコードを使っていくからです。</p><p>コンピュータの電源を入れたら、マザーボード上の専用の不揮発性フラッシュメモリ･チップからBIOS（ベーシック･インプット/アウトプット･システム）をリアルモードでロードします。BIOSは、コンピュータのハードウェアにアクセスや変更をすることが可能である基礎的なライブラリとして機能します。また、BIOSはPOST（パワーオンセルフテスト）を行い、全てのシステムが問題なく実行されているか確認をします。そして、MBR（マスターブートレコード、ブートセクタとも言われる）を検索します。MBRは長さが512バイトで、ハードドライブやフロッピー、DVD、USBドライブなどの起動可能な媒体の先頭位置にあります。これを見つけ出すと、BIOSがリアルモードのMBRでそのコードを実行します。</p><p>MBRは内部に多くの機能を備えています。ハードドライブに内の異なるパーティションの位置と情報を保持することができ、また、コンピュータが実行するコードを保持することもできます。MBRは512バイトしかなく、大半のオペレーティング･システムはこの容量に収まらないため（LinuxとWindowsは数百万行のコードを格納しています）、多くのオペレーティング･システムはブートローダを使用し、さまざまなファイルシステムからOSカーネルコードをロードし、実行します。これで、コンピュータのセットアップが終わりました。</p><p>しかし、今回作る小さなOSカーネルは512バイトの中に収まるので、ブートローダを使用して、ディスクからさらにコードをロードする必要はありません。</p><p>ではこれから、いくつかコードをお見せしていくので、1つずつ丁寧に見ていきましょう。すべてを理解することができなくても心配ありません。今回の記事は、コンピュータがどのように機能しているのかおおざっぱな知識を理解してもらうのが目的です。また、コマンドと情報も示していきますので、ご自身のコンピュータで一緒に試してみてください。</p><p>
</p>
<p>好きなテキストエディタで以下の短いコードを<code>boot.asm</code>として入力してみてください。</p><p>ご覧のとおり、アセンブリコードは、命令が他のコードにジャンプをする位置以外では、たいていは連続して実行されます。</p><p>以下をコマンドラインに入力し、このファイルをアセンブルしバイナリファイルを作り、コンピュータが実際に実行できるようにしてみます。</p><p>では、このファイルでqemuをスタートさせましょう。</p><p>正常に起動したら、以下のような画面がプリントされ、qemuが起動します。</p><p><img src="http://tutorialsbynick.com/images/babysteps/qemu-step-one.png" alt="Qemu Step One"><br>
つまり、このプラグラムは、コンピュータを無限ループさせ、ハングさせています。悪くないでしょ？</p><p>
</p>
<p>先ほど、オペレーティング･システムを実行させるためだけに、コマンドラインにたくさんのコマンドをタイプしました。この作業を短縮させましょう。</p><p>それには<code>make</code>を使います。これは、ほとんどあらゆる種類のコンパイルに対応するビルドツールチェーンをセットアップするためのプログラムです。</p><p>まず、<code>Makefile</code>というファイルを作成し、その中に以下のように入力します。</p><p>コロンの前の値は、のちに登場するコマンドのリストに使用する名前です。<code>make clean</code>と<code>make</code>をタイプすると、<code>rm *.bin</code>が実行され、すべてのアセンブルされたファイルを削除します。</p><p>コロンの後の値は、依存関係です。<code>make qemu</code>とタイプすれば、<code>make</code>は<code>boot.bin</code>のコマンド（<code>nasm -f bin boot.asm -o boot.bin</code>）を実行したあと、<code>qemu-system-x86_64 boot.bin</code>を実行します。</p><p>
</p>
<p><code>boot.asm</code>アセンブリファイルを、以下のように変更します。</p><p>では、<code>make clean</code>と<code>make qemu</code>を使って、オペレーティング･システムを削除・アセンブルし、実行します。</p><p>一見、難しそうですよね。でも大丈夫。丁寧に一行一行見ていきましょう。</p><p>コードを周囲の命令に対応している部分ごとに分けました。では、それぞれの部分と、使われた命令を見ていき、どのようにしてオペレーティング･システムが画面にプリントをしているのか探りましょう。</p><p>これらの命令をいくつか見てみると、それぞれである程度の情報を持っていることが分かります。これらをオペランドと呼びます。nasm構文では、右のオペランドはソースオペランドで、左のオペランドはディスティネーションオペランドです。文字のオペランドはCPUのレジスタを指します。CPUのレジスタは、コンピュータがそれに基づいて動作することのできる情報が格納される特別な場所です。</p><p><code>mov</code>は、データをあちこちに動かすことのできる命令です。バイトをレジスタから別のレジスタに、そして、コード内の位置をレジスタへと移動させることができます。</p><p>それでは、この知識を使って、コードの最初の部分を解説します。</p><p>最初の行では、<code>0x07c0</code>という値をレジスタ<code>ax</code>に移動させました。<code>0x07c0</code>は16進値という別の形式で、アセンブリプログラマにとって2進数の<code>1</code>と<code>0</code>を使うよりも便利なのです。</p><p>そして、レジスタ<code>ax</code>からレジスタ<code>ds</code>に値をコピーします。こう思う人もいるかもしれません。「なぜ<code>0x07c0</code>を直接レジスタ<code>ds</code>にコピーしないんだ？」と。それは、<code>ds</code>がとても特殊なレジスタだからです。<code>ds</code>はデータセグメントのことを表しており、一般的なレジスタから移動してきた値しか持たないのです。その理由はインテルの開発者しか知りません。</p><p>
</p>
<p>セグメンテーションは、Intelが同社の16ビットプロセッサを維持するために作った、リアルモードの特殊機能であり、これでユーザがより多くのメモリにアクセスできるようにしました。昔からコンピュータが16ビットの時は、アドレッシング行では16ビットしか使いませんでした。アドレッシング行は、データストレージデバイスをアドレス（2進数で）と一緒に呼び出し、ストレージデバイスの中のアドレスに格納されている特定の値を取得します。コンピュータは2進数を使うので、16ビットのアドレス指定方式が意味するところは、「バイトを格納するのに使えるスロットが2^16個しかない」ということです。つまり、これは64KBのRAMメモリに相当します。賢いIntel開発者はセグメンテーションを実装し、コンピュータが20ビット相当のアドレッシングスペースにアクセスできるようにしていたのです。つまり、2^20個のアドレス、もしくは1MBのメモリに相当します。</p><p>しかし、これにはセグメンテーション機能を使用するという手間がかかります。16ビットとの互換性を保つため、プロセッサは<em>セグメント</em>と<em>オフセット</em>を格納する2つのレジスタを使う必要があります。セグメントを保有しているレジスタは、16進値の最後にもう1つ0を追加することで<code>0x10</code>倍（10進法で16。普段私たちが数を数えるのに使うのは10進法）されます。<code>0x10</code>倍すると、2進値の数の最後に4つの0が追加されます。つまり、16ビットの数字が20ビットになります。そして、次にセグメントにオフセットが加算されて、実際の位置が得られます。ですから、セグメントにオフセットを加えると、アドレスの最後の4ビットのゼロを任意の値に変更することができるので、20ビットのアドレススペースのすべてのアドレスにアクセスできるようになるのです。</p><p>1MB、もしくは1024KBを16で割ると考えるとイメージしやすいかもしれません。答えは64KBです。プロセッサのすべてのアドレスにもセグメントを設定することができ、オフセットを使って64KBのブロックのRAMにアクセスできます。このオフセットで64KBのブロックの中のどんなアドレスにもアクセスが可能なのです。</p><p>セグメント化されたアドレスは全体として、<code>segment:offset</code>で参照されます。</p><p>
</p>
<p>さて、このコードの部分は、セグメントアドレス指定のために、<code>0x07c0</code>をレジスタ<code>ds</code>、つまりデータセグメントにロードします。でも、なぜそうする必要があるのでしょうか？　一部のBIOS機能では、後でアクセスするためにコードの位置を<code>ds</code>レジスタに格納しておく必要があります。コードは必ず<code>0x07c0:0x0000</code>の位置にあります。その理由は、BIOSは毎回ここにMBRをロードするからです。</p><p>コードの次の部分を見ましょう。</p><p>ここで、<code>int</code>という命令が登場します。これは割り込みを意味し、CPUに割り込みをかけて、割り込みハンドラと呼ばれる、ある種のコードを呼び出します。通常、この割り込みハンドラはレジスタ内のコードを使用して、レジスタ内の文字を取り出して画面にプリントするなどの動作を行います。私たちのコードでは、この割り込みは、BIOSが私たちに代わって初期にセットアップしてくれた機能にすでに割り当てられています。</p><p><code>int</code>命令は、ただ1つのオペランドをとり、これは割り込み番号を指します。<code>0x10</code>はビデオサービスを管理するBIOS割り込みで、ビデオサービスは、<code>ah</code>に格納されている値に応じて、画面に文字を書いたり、消したり、ビデオのモードとサイズを設定したりする機能です。BIOS機能の動作に影響する番号は普通、合理的な理由なく選ばれているだけなので、ぜひ、自分が使っているBIOS割り込みの情報をオンラインで検索してみてください。</p><p>次の2行で、文字プリントのループをセットアップします。</p><p>1行目で、プリントしたいメッセージのアドレスへのポインタを<code>si</code>レジスタに入れます。<code>si</code>を使用する理由は、<code>loadsb</code>命令が、セグメント化されたアドレス<code>ds:si</code>を使用して、その位置からバイトをロードするからです。</p><p><code>mov ah, 0x0E</code>は、もう一度<code>ah</code>レジスタを使用します。レジスタ<code>ah</code>内に<code>0x0E</code>を指定することにより、画面に文字をプリントするために<code>0x10</code>割り込みを使用することができます。これはテレタイプライターの機能を模倣するので、テレタイプ出力とも呼ばれ、タイプライターに似た動作を行いますが、コンピュータまたはプリンタにテキストを送ることができます。</p><p>最後に、実際に画面に文字をプリントする部分を見ましょう。</p><p><code>lodsb</code>命令は、セグメント化されたアドレス<code>ds:si</code>からレジスタ<code>al</code>に１バイトロードして、<code>si</code>レジスタを次のバイトに進めます。プリントしたいメッセージの文字列が格納されている位置は<code>msg：</code>なので、ここからバイトをロードしたいのです。便利なことに、ASCII標準（American Standard Code for Information Interchange)には、英語の文字と句読点に対応する番号が標準化されたリストがあります。</p><p><code>or al, al</code>は、<code>al</code>レジスタとそれ自体との<code>or</code>演算を行います。OR命令は、第1オペランドの各ビットを他方のオペランドの対応するビットと比較します。次に、どちらかのビットが１であれば、宛先オペランドのその位置のビットが1になります。</p><p>ここで、<code>101</code>と<code>010</code>を比較してみると、最初のビットは<code>1</code>と<code>0</code>です。</p><p>最終的な宛先オペランドは<code>111</code>になります。</p><p>文字列はNULL文字で終了し、この文字はASCII標準ではバイナリでゼロのバイトです。<code>0</code>と<code>0</code>を比較するとゼロになるので、<code>or</code>命令を使用して、文字列が終わりに来たかチェックします。</p><p><code>or</code>命令で<code>al</code>レジスタを「変更」した後も、そのレジスタを使用していることにお気づきになったと思います。これが使える理由は、ビット列が、それと<code>or</code>演算されるビット列と同じであれば、第1のオペランドに格納される結果のビット列もまた、同じだからです。したがって、<code>al</code>レジスタ内のバイトがゼロならば、<code>or al,al</code>はゼロフラグを設定するのと同じことになります。</p><p>では、なぜこの2つの命令を一緒に使うのでしょうか？</p><p>実は、プロセッサには洗練された動作があります。ある演算の戻り値が<code>0</code>なら、プロセッサはゼロフラグをセットします。そして、ゼロフラグがセットされていると、<code>jz</code>命令が実行されます。<code>jz</code>は、「jump if zero」という意味なのです。よって、文字列が終わると、プロセッサはオペランドの位置にジャンプします。これは、文字列内に存在しない文字をさらに探す代わりにプロセッサをハングさせるための<code>hang</code>の位置です。</p><p>では、次にループの最後の部分を見ましょう。</p><p>最初、レジスタ<code>ah</code>には<code>0x0E</code>が入っていたことを思い出してください。これは、<code>al</code>に格納されている文字列を<code>int 0x10</code>を使ってプリントできることを意味します。</p><p>まとめると、ループは次の動作を行います。</p><p>それでは、最後に残ったコード部分を見ましょう。</p><p><code>db</code>は、これらの値を<code>msg:</code>アドレスに格納するよう命じます。カンマは、これらの10進数もバイトとして格納することを意味します。</p><p><em>（@beernutsからコメントでご指摘いただき、訂正しました。感謝します。）</em></p><p><code>\n</code>と<code>\r</code>はどちらも、テレタイプライター時代からの遺産で、今でも使われています。</p><p>細かく分けて説明してきたので、このオペレーティングシステムは難しく<em>なかった</em>でしょう？　OSをプログラムするのは気軽なことではないことはお分かりだと思います（難しい部分にはまだ手を付けていませんから）。最終的にはCやRustなどの高水準言語を使えるようになるかもしれませんが、それは別のチュートリアルでやりましょう。もっと勉強したい人のために、練習問題と推奨文献をいくつか挙げておきます。</p><p><em>このオペレーティングシステムを拡張するために役立つ情報</em></p><p><em>他のオペレーティングシステム</em><br>
* <a href="http://os.phil-opp.com/multiboot-kernel.html" rel="nofollow" title="" class="ext-link">A minimal x86 kernel – Writing an OS in Rust</a>―優れたチュートリアルで、内容も非常に高質ですが、読者として、ある程度の知識量をもつ人が仮定されていると思います。<br>
* <a href="http://mikeos.sourceforge.net/" rel="nofollow" title="" class="ext-link">MikeOS – simple x86 assembly langauge operating system</a>―MikeOSは、アセンブリ言語で書かれた、x86PCのためのオペレーティングシステムです。16ビット、リアルモードの簡単なOSがどのように動作するかを、分かりやすいコメント付きのコードと詳細な文書で学ぶツールです。</p><p><em>詳細なOS理論</em><br>
* <a href="http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation/" rel="nofollow" title="" class="ext-link">Memory Translation and Segmentation – Gustavo Duarte</a>―メモリのセグメンテーションについて詳しく説明されています。<br>
* <a href="http://duartes.org/gustavo/blog/post/kernel-boot-process/" rel="nofollow" title="" class="ext-link">The Kernel Boot Process – Gustavo Duarte</a>―Linuxカーネルや、他のオペレーティングシステムのカーネルが実際はどのようにブートするのかに興味のある人は読んでみてください。<br>
* <a href="http://duartes.org/gustavo/blog/post/how-computers-boot-up/" rel="nofollow" title="" class="ext-link">How Computers Boot Up – Gustavo Duarte</a>―コンピュータがどのようにブートするのかに関する詳細な情報があります。<br>
* <a href="http://www.dewassoc.com/kbase/hard_drives/master_boot_record.htm" rel="nofollow" title="" class="ext-link">The Master Boot Record (MBR) and What it Does</a>―MBRについて、そして、コンピュータがMBRを使って何をするのかについて詳細を学べるチュートリアルです。<br>
* <a href="https://en.wikibooks.org/wiki/X86_Assembly/Bootloaders" rel="nofollow" title="" class="ext-link">X86 Assembly/Bootloaders</a>―ブートローダの働きについての優れた理論チュートリアルです。</p>
