<p><a href="https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care" rel="nofollow" title="" class="ext-link">CSS Variables: Why Should You Care?</a> （2016-02-01） by <a href="https://robdodson.me/" rel="nofollow" title="" class="ext-link">Rob Dodson</a></p><p><small>(編注：2016/7/29、頂いたフィードバックを元に記事を修正いたしました。)</small></p><p>CSS Variables、もっと正確に言うとCSSカスタムプロパティが、Chrome 49でサポートされました。CSS Variables は、CSSで値の繰り返しを減らすのに有効です。また、テーマの切り替えなどの実行中の強力なエフェクトや、将来のCSS機能をもしかすると拡張/ポリフィルすることにも役立ちます。</p><p>アプリケーションを設計するとき、アプリケーションの一貫した外観を維持するために再利用される独自のカラーセットを設定するのが一般的です。残念ながら、このようなカラー値をCSSに何度も何度も繰り返し設定することは面倒なだけでなく、エラーが発生しやすくなります。カラーを何カ所か変更する必要がある場合、思い切って、全部「検索して置換」することもできますが、大きなプロジェクトでは、危険な事態を招きかねません。</p><p>近年多くの開発者が、プリプロセッサ変数を用いて問題を解決する、SASSあるいはLESSなどのCSSプリプロセッサに頼ってきました。こういったツールは開発者の生産性を非常に高めてきましたが、この変数には重大な欠点があります。それは、変数が静的なので、実行時に変更できないことです。実行時に変数を変えられるようになると、アプリケーションのテーマを動的に変えるようなことが可能になるだけでなく、レスポンシブデザインや将来のCSS機能をポリフィルする可能性に大きな影響を与えます。 Chrome 49のリリースにより、CSSのカスタムプロパティという形で、このようなことが可能になったのです。</p><p>カスタムプロパティによって、私たちのCSSツールボックスに2つの新しい機能が追加されます。</p><p>以下に簡単な実例を示します。</p><p><code>--main-color</code>は作成者が定義したカスタムプロパティで、#06Cという値を持ちます。全てのカスタムプロパティは、2つのハイフンで始まることに注意してください。</p><p><code>var()</code>関数は、自分の値をカスタムプロパティの値に置き換えます。その結果、<code>color: #06c;</code>となります。カスタムプロパティがスタイルシートに定義されていれば、<code>var</code>関数を利用することができます。</p><p>最初は、構文がおかしいように感じるかもしれません。「変数名には<code>$foo</code>を使えばいいじゃないか」と言う開発者もたくさんいます。しかしこのアプローチは、柔軟性をできる限り高め将来的に<code>$foo</code>のマクロにも対応できるようにするために、明確に選択されたものなのです。この話の背景が知りたい方は、この仕様の立案者の1人であるTab Atkinsによる<a href="http://www.xanthir.com/blog/b4KT0" rel="nofollow" title="" class="ext-link">この記事</a>を読んでみてください。</p><p>カスタムプロパティの構文は簡潔です。</p><p>カスタムプロパティは大文字と小文字が区別されるため、<code>--header-color</code>と<code>--Header-Color</code>は異なるカスタムプロパティになるということに注意しましょう。外見上は簡素に見えるかもしれませんが、実際カスタムプロパティは非常に幅広い構文を許容します。例えば、下記のようなカスタムプロパティも有効です。</p><p>これは通常のどのプロパティの中でも無効なので変数としては役に立ちませんが、潜在的には可読であり、JavaScriptを使えば実行時に有効になります。これはつまり、カスタムプロパティには、現在のCSSプリプロセッサにはできない全ての興味深い技術への道をひらく力があるということです。ですから、「はあ、SASSがあるのに誰がカスタムプロパティなんて…」と思っている方がいたら、もう一度よく考えてみてください。これは使い慣れた変数ではないのです。</p><p>カスタムプロパティは標準的なカスケード規則にのっとっているため、様々な詳細度のレベルで同じプロパティを定義できます。</p><p>
</p>
<p>これは、メディアクエリ内でカスタムプロパティを使いレスポンシブデザインが作れるということを意味しています。ユースケースの1つとしては、画面サイズが大きくなる時に主要なsection 要素まわりのmarginを拡大するといったことでしょうか。</p><p>重要なこととして伝えておきたいのは、メディアクエリ内で変数を定義できない現在のCSSプリプロセッサでは、上記のコードスニペットは使えないということです。この能力があれば、多くの可能性への道が開けるのです。</p><p>また、他のカスタムプロパティから値を引き出すカスタムプロパティを持つこともできます。これはテーマを作るのに非常に役立ちます。</p><p>カスタムプロパティの値を取り出して使うには、<code>var()</code>関数を使用する必要があります。<code>var()</code>の構文は以下のようになります。</p><p>ここでは、<code>&lt;custom-property-name&gt;</code>は作成者が定義したカスタムプロパティの名前（<code>--foo</code>など）で、<code>&lt;declaration-value&gt;</code>は参照されたカスタムプロパティが無効だった場合に使われるフォールバック値です。フォールバック値はカンマ区切りのリストとして書けるので、それが結合されて単一の値として扱われるようになります。例えば<code>var(--font-stack, "Roboto", "Helvetica");</code>は<code>"Roboto", "Helvetica"</code>というフォールバックを定義します。marginやpaddingで使われるような簡略表記の値はカンマ区切りではありませんので、paddingの適切なフォールバックは以下のようになります。</p><p>このようなフォールバック値を使えば、コンポーネント作成者はさまざまな環境に対応できるよう、要素を記述することができます。</p><p>カスタムプロパティはShadow DOMの境界にアクセスできるので、Shadow DOM を使うWeb Componentのテーマを作成するとき、特に便利です。Web Componentの作成者は、フォールバック値を使って初期のデザインを作ることができ、”フック”のテーマをカスタムプロパティの形式で公開することができます。</p><p><code>var()</code>を使う場合は、いくつか注意しなければいけないことがあります。プロパティ名を変数にすることはできません。下の例を見てください。</p><p>これは、<code>margin-top: 20px;</code>という設定と同等ではありません。それどころか、2つ目の宣言は無効で、エラーとして返されてしまいます。</p><p>同じように、値の一部を（単純に）変数で構築することはできません。</p><p>この場合も同じで、<code>margin-top: 20px;</code>という設定と同等ではありません。値を構築するためには、<code>calc()</code>関数が必要です。</p><p>今までに<code>calc()</code>関数を使った経験がない人にとって、<code>calc()</code>関数は、CSSの値を決める計算を可能にする、使いやすい小さなツールです。全ての<a href="http://caniuse.com/#search=calc" rel="nofollow" title="" class="ext-link">最新ブラウザでサポートされていて</a>、カスタムプロパティと組み合わさって新しい値を構築できます。以下はその例です。</p><p>実行時のカスタムプロパティの値を得るために、計算済みCSSStyleDeclarationオブジェクトの<code>getPropertyValue()</code>メソッドを使います。</p><p>同じように、実行時のカスタムプロパティの値を設定するために、<code>CSSStyleDeclaration</code>オブジェクトの<code>setProperty()</code>を使います。</p><p><code>setProperty()</code>を呼び出すときに、<code>var()</code>関数を使うと、実行時に別のカスタムプロパティを参照してカスタムプロパティの値を設定することもできます。</p><p>カスタムプロパティはスタイルシートの中で別のカスタムプロパティを参照できるため、これがどのように、実行時の興味深い効果を導き出すのか想像できるのではないでしょうか。</p><p>現在は、Chrome 49、Firefox 42、Safari 9.1、iOS Safari 9.3がカスタムプロパティをサポートしています。</p><p><a href="https://googlechrome.github.io/samples/css-custom-properties/index.html" rel="nofollow" title="" class="ext-link">サンプル</a>を試してみてください。カスタムプロパティのおかげで利用できるようになった、面白い技術の全てを垣間見ることができます。</p><p>カスタムプロパティをさらに詳しく学びたい場合は、Google アナリティクス チームのPhilip Waltonが書いた初心者向けの記事『<a href="http://philipwalton.com/articles/why-im-excited-about-native-css-variables/" rel="nofollow" title="" class="ext-link">why I’m Excited About Native CSS Variables（なぜ、私はネイティブなCSS Variablesに熱狂するのか）</a>』をお読みください。また、その際に別のブラウザで<a href="https://www.chromestatus.com/features/6401356696911872" rel="nofollow" title="" class="ext-link">chromestatus.com</a>のタブを開いておけば、記事に合わせてその内容を確認することができます。</p>
