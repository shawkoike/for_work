A Super-Simple Makefile for Medium-Sized C/C++ Projects （2016-08-26） by Job Vranish私は多くの小規模プロジェクトでMakeを使ってきましたが、より大きな規模のプロジェクトになると、それは非常にうんざりするようなものでした。最近までは、自分のビルドシステムに行いたいことが4つあったのですが、Makeでの方法が分かりませんでした。以下にこれらの全てを行える、C、C++、およびアセンブリで動作するシンプルなMakefileを紹介します。MAKEFILE悪くないですね。なお、out-of-sourceビルドにこだわらないという場合は、もっとシンプルなMakefileが使えます。これなら、built-inの持つ暗黙ルールが使えるという強みもあります。MAKEFILEこれらのいずれかを使うには、Makefile（タブ文字がコピーされることを確認しましょう！　それに関してMakeはとてもうるさいです）、./src（このディレクトリは、SRC_DIRSを変更することにより変えることができます）のディレクトリあるいはサブディレクトリにあるソースやヘッダなどの全てを呼び出すファイルに、Makeコードを配します。そうしたら、あなたのプロジェクト用に必要となる値をCCとCFLAGSに設定するか、またはMakeのデフォルトを使うか、確認してください。makeと入力します。問題が発生した場合には、make -dを実行すると役に立つでしょう。では、その動き方の概要を見てみます。私は、最終的には全てのビルドアーティファクトを、ソースとは切り離されたいくつかのディレクトリ（通常、 “./build” と名前を付けています）に生成したいと思っています。このようにMakeをすると、Makeを介して生成された他のビルドアーティファクトがそのディレクトリにそれぞれ並んだとしても、clean（単に、rm -rf ./build）がしやすいのです。また、ソースでgrepを行う場合など、他にも多くのことがずっとやりやすくなります。Makeでこのようにするには通常、あなたの出力先のディレクトリを自分のパターンルールの先頭に追加する必要があります。例えば、.cファイルから同じディレクトリ内に.oファイルを作成することになる、%.o: %.cといったパターンの代わりとしては、$(BUILD_DIR)%.o: %.cを使うことになります。ヘッダの依存関係の処理は、おそらく、古典的なMakeテクニックを使うものの中でも、最も退屈なものだと言えると思います。特に、その後で、あなたが何かしくじれば、明示的なエラーが全く出ず、再コンパイルもされるべき時にされないということになります。これは、タイプやプロトタイプがどういったものなのかについて、様々な考え方を持つ.oファイルが生成されることになってしまいます。そこで、ここにドキュメントがあります。ただし、このドキュメントでは、依存関係のあるファイルはコンパイルステップとは別のステップで生成されていることが前提とされているようです。コンパイルステップの一部として依存関係のあるファイルを生成するなら、もっとずっとシンプルになります。依存関係のあるファイルを生成するためにしなければならないことは、コンパイルコマンド（ClangとGCCの両方でサポートされています）にいくつかフラグを追加するだけです。まず、定められたソースディレクトリで全てのソースファイルを検索します。私が見つけた、この検索を最もシンプルに素早く行う方法は、単にシェル関数でfindを使うことです。インクルードディレクトリフラグを生成するためにも、似たようなテクニックを使っていました。定められたソースディレクトリの下にあるディレクトリ全てを検索します。以上のテクニックがお役に立てば幸いです。
