2 years with Angular by Alexey Migutsky判決： まあまあ（でもないか）私は2年間、Angularにのめり込んでいました。それぞれの考えを持つさまざまなチームによる、10以上のAngularベースのプロジェクトを見守り、関わってきました。1年目はフレームワークの採用、APIの変更、ドキュメントの改良、コミュニティの形成を注視して過ごし、徹底的に習得しました。2年目は実務に全面的に携わり、チームメンバーの意見を聞きました。私の意見は、Angular.jsは大多数のプロジェクトには“まあまあ”だが、本格的なWeb アプリ開発には不十分であるということです。“本格的なWebアプリ”というのは、長期の保守が可能で、最新の一般的なブラウザで実行できる、スムーズなUXを備えた、モバイルフレンドリーなアプリのことです。専門家が開発したWebアプリは単なるアプリではなく、いくつかの問題を解決します。これは便利な製品で、快適に使用できます。このようなアプリは、コードベース内部（良い設計、シンプルなコンセプト、理解しやすいコンポーネント）だけでなく、デプロイプロセス（CDN、縮小、SEO、クリティカルパスの最適化など）や、ユーザビリティ領域（読み取りスピード、コンテンツファースト、グレイスフルデグラデーション、インフォメーションアーキテクチャなど）にも適用されるベストプラクティスを用いて、かなり短期間で開発する必要があります。もちろん、これらの内容はすべてのフレームワークやプロジェクトに当てはまります。しかし、Angularではすぐに問題が起こり、あなたに大打撃を与えると同時に他のMVCフレームワークにも影響を与えることになるでしょう。それでも今後プロジェクトを拡大、保守していく必要がある場合は、以下の手順を踏みます。それでもまだAngularを使うなら、私がこれまでに投稿したいくつかの重大な問題に没頭することをお勧めします。リストは以下のとおりです。こんな厄介なものに夢中になっている私を訝しむ人たちに、私はこう言い続けてきました。これまで挙げたような問題はどれも回避できるのですから。しかし、問題について詳しく知るには、このフレームワークと長い時間格闘する必要があります。“危険信号”があれば、開発プロセスの中で分かるようにしなければなりません。問題の“回避策”を見つけるための時間もかかります。そしてようやく、フレームワークで発生した問題が解決します。高性能で本格的なアプリを実装しようとするときに、こんなことはやりたくないですよね。“回避策”のアップデートに費やす時間も、もったいないはずです。実際には、フレームワークのサポートがないと、何度も何度も同じ説明をしなければなりません。Angularの代わりになるものをまだ挙げていませんでしたね。詳しくは、こちらをご覧ください。そのような方がいらっしゃれば、ぜひ日頃Augularをどのように使い、問題を解決しているか、そしてコンポーネントやプロジェクトの構造をGitHubで教えてください。でも、心からそう言えないという方は…無理に好きにならなくてもいいかもしれません。Alexey Migutsky – フルスタックエンジニア。ITにまつわる“魔法”の使い手。
