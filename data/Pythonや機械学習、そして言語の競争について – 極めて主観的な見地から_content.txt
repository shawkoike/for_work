Python, Machine Learning, and Language Wars. A Highly Subjective Point of View(2015-08-24) by Sebastian Raschka(訳注：2016/1/5、いただいた翻訳フィードバックを元に記事を修正いたしました。)よくある主観的で痛烈な意見を題名に付けたクリックベイト（クリック誘導）記事だろうと思われた方、そのとおりです。以前指導してくれた教授から教わったある洞察/処世術は、些細でありながら私の人生を変えるマントラとなったのですが、私がこの記事を書いたのはそれによるものです。「同じタスクを3回以上繰り返す必要があるなら、スクリプトを書いて自動化せよ」そろそろ、このブログはなんだろうと思い始めているのではないでしょうか。半年振りに記事を書いたのですから。ツイッターで書いたMusings on social network platforms（ソーシャル・ネットワークプラットフォームについてじっくり考える）はさておき、この半年の間書き物をしていないというのはうそです。正確には、400ページの本を書きました。これは、私にとって素晴らしい旅となりました。そして、「なぜ機械学習にPythonを選ぶのか」という質問を最近よく目にします。とうとう、私のスクリプトを書く時が来たのだと思いました。この記事では、Pythonを使用するべきだと言うつもりはありません。「どの○○がベストか？」（○○に”プログラミング言語やテキストエディタ、統合開発環境、OS、パソコンメーカー”などを挿入してください）と聞く質問が、正直、大嫌いです。質問としても議論内容としても無意味だと私は思います。時には楽しく面白い議論になることもあると思いますが、このような質問は仕事仲間や友人との飲み会やお茶をする時の話題として取っておくことをお勧めします。•   難しい問題の簡潔な答え
•   お気に入りのPythonツール
•   MATLABに対する個人的見解
•   見た目は最高なJulia
•   本当は問題がない R
•   Perlはどうなったのか
•   他の言語
•   Pythonは危機言語なのか
•   結論
•   フィードバックや意見簡潔な答えから始めましょう。この段落で私はこの記事の核心を書いているので、この段落以降を読むのをやめてもかまいません。私は科学者なので、始めたことは終わらせるのが好きです。プロトタイプを迅速に作り上げ、モデルやアイデアなどをメモできる環境を好みます。また、私が解決するのは、とても特殊な問題ばかりです。データセットを分析し結論を出します。私にとって重要なのは、どうすれば生産性の高い仕事ができるかなのです。”生産性”とは何か。私の場合、分析は1回しか行いません（異なるアイデアのテストやデバッギングは別です）。ある特定のコードを24時間実行することもありません。私はエンドユーザのためのソフトウェアアプリを開発していません。私は”生産性”を定量化する際、(1)アイデアをコードで書き出す時にかかった時間、(2)デバッギングにかかった時間、(3)実行にかかった時間の合計時間を想定します。私にとって”高い生産性”は”結果を出すまでにかかった時間”を意味します。長年の経験から、自分にはPythonが合っていることが分かりました。全てではありませんが、多くの場面で使います。他の全てのことにも当てはまるように、Pythonは”特効薬”ではありません。全ての問題に適用できる”万能な”解決策ではありません。しかしながら、プログラミング言語を共通の問題やそうでない問題の範囲で比較してみると、もしかしたらベストな解決策になりうるのではないかと思えます。おそらく、Pythonはプログラミング言語の中でもあらゆる場面で、最も柔軟性と適応性が高いのではないでしょうか。
 （引用元: https://xkcd.com/974/）
訳：
「塩を取って」「だからさ……」
「分かってる。どんな調味料でも渡せるシステムを開発してるんだ。」
「20分も待ってるんだけど。」
「長い目で見たら役に立つから。」
Donald Knuthが言うように、”早まった最適化は悪の根源”であることを忘れないでください。もしあなたがソフトウェアエンジニアチームの一員で、機械学習とデータサイエンス部の革新的な高頻度取引モデルを最適化する場合、Pythonは適していないでしょう（しかし、データサイエンス部で使用されている言語かもしれないので、知っておくとプログラムを読む際に役に立つと思います）。言語を選ぶ際には、まず自分にとって常に問題となるタスクやニーズを見極めることをお勧めします。”金づちしかないと、あらゆる物が釘に見えてしまう”、このような状況に陥らないことです。ただし、バランスを保つことも念頭に置いてください。時と場合によっては、スクリュードライバーの方が”より良い”解決策であっても、金づちがベストな選択になり得るのです。繰り返しになりますが、最終的には生産性の問題です。私の経験を例として話しましょう。ある仮説に特化した問題を特定するために、150万もの小さい化合物を”スクリーニング”できる新型アルゴリズムを開発する必要がありました。私はコンピュータに精通していますが、共同開発していた生物学者はコンピュータとは縁のない実験を行っていました（”ウェットラボ”の実験といいます）。目標としていたのは、膨大な数の化合物を、実験可能な100種類に絞り込むプログラムでした。実験を行う時間が限られているため、実験結果を迅速に出せることが要求されました。とにかく、時間の”制限”がありました。助成金申請が受理されて研究資金の交付を受けてから、研究結果を収集するまで数週間しかありませんでした（共同開発の内容は春にだけ放卵する魚の稚魚の実験でした）。そのため、”最短で実験結果を出せる方法”を考えました。まず、私はC++とFORTRANを知っていたので、Pythonにアルゴリズムを実装して”スクリーニング”を実行するよりも速く実行できるのではないかと考えました。これは、あくまでも経験に基づく推測なので、実際に実行速度に差が出てくるのかは分かりません。しかし、Pythonを使用してプログラム開発を進めれば、数日で完成できるということは確信していました。しかし、C++では1週間かかるだろうと思いました。効率の良い実装は後で考えることにしました。”早まった最適化は悪の根源”というように、この時は、最適化よりも結果を届ける事が重要でした。一連の考えはデータ保存ソリューションにも適用できることをここで書き添えておきます。データベースにはSQLiteを使用しました。特定の分子にアノテーションを付けて回収する動作を繰り返し実行しなければならなかったため、CSVを使用する意味はありませんでした。メモリ容量の問題は別として、分子の特定や入力操作のたびに、毎回最初から最後までスキャンしたり書き直したりするのは避けたかったのでCSVを使用しませんでした。MySQLを使用した方が良かったのかもしれませんが、厳しい期限があったので迅速にプログラムを完成するには、SQLサーバを追加設定する時間はありませんでした。この場合、SQLiteで十分でした。
（引用元: https://xkcd.com/1319/）訳注：
「このタスクに時間がかかり過ぎる。自動化するプログラムを書かないと！」
上：理論
(自動化のコードを書くことで一時的に仕事が増えるが、それが完了して使えるようになると本来の仕事の量が減り、最後には自由時間が生まれる。)
下：現実
(自動化のコードを書くことで仕事が増え、自動化部分のデバッグや再考を経てもなお開発は続く。本来の仕事をする時間がなくなる。)
自分のニーズに合った言語を選ぶことが正しい判断なのです。ただし、少し注意が必要です。プログラマ初心者には、それぞれの言語を学ばなければ、言語の長短やどの言語が役に立つのかを知ることができません。問題に直面した時、私は自分の直面している問題に関係する特定のアプリケーションやソリューションをGoogleやGitHubで検索します。コードを読める必要も理解する必要もありません。成果物を見ればいいのです。他の人にもどんどん聞いてください。ただし、具体性、目標、プログラミングを学ぶ理由を説明せず、一般的に”一番良い”プログラミング言語は何かと、単純に質問するのはやめましょう。MacOS X用のアプリを開発したいのであれば、Objective CやSwiftについて知りたいでしょうし、Android用であればJavaを学びたいはずです。私が気に入っていて、頻繁に使うPython”ツール”をご紹介しますので、もし興味があればご覧ください。私は、このほとんどを日常的に利用しています。
（引用元：http://stanford.edu/~mwaskom/software/seaborn/examples/structured_heatmap.html）近頃は、IPythonプロジェクトがProject Jupyterへと進歩していることを覚えておいてください。今ではPythonだけでなく、RやJuliaなどを始め、多くの場合でJupyter notebookの環境を利用することができます。数年前、私はMATLAB（もしくはOctave）を非常に広範囲で利用していました。ほとんどのコンピュータ科学のデータサイエンスの授業がMATLABを使って教えられていたのです。私は、なんだかんだ言っても、プロトタイプのための環境としては悪くないと本気で思っていました。線形代数で構築することを念頭に置いているので（MATrix LABoratoryのためのMATLABとして）、機械学習アルゴリズムを実装するにはMATLAB を使う方が、PythonやNumPyを使うよりも、少しだけ”自然”だと思っていたのです。公平に言うとインデックスが1から始まるプログラミング言語はプログラマにとって少し奇妙に見えました。しかし、MATLABは高額であることを忘れてはいけません。また、少しずつMATLABは業界からも教育の現場からも姿を消していっているように思えます。私は結局のところオープンソースが大好きなんです。加えて、下のベンチマークを見ると、MATLABのパフォーマンスは他の生産性の高い”言語”と比べてそんなに強力というわけでもありません。（C言語と比較した場合のベンチマークタイム。小さい方が良い。C言語のパフォーマンスを1.0とする。引用元：http://julialang.org/benchmarks/）しかし、Pythonには簡潔なTheanoライブラリもあることを忘れてはいけません。2010年、CPU上でコードを実行した際、NumPyの1.8倍のパフォーマンスを実現したとTheanoの開発者が報告しました。また、対象をGPUとした場合はNumPyの11倍も速くなるとも報告されました(J. Bergstra, O. Breuleux, F. Bastien, P. Lamblin, R. Pascanu, G. Desjardins, J. Turian, D. Warde-Farley, and Y. Bengio. Theano: A CPU and GPU math compiler in Python. In Proc. 9th Python in Science Conf, pages 1–7, 2010)。また、このTheanoのベンチマークは2010年のものであることを注意してください。それからの数年間でTheanoは飛躍的に進歩し、モダンなグラフィックスカードの能力も同様に進歩してきました。追記：NumPyのdotメソッドを好きになれない場合は、次のPython 3.5の登場を楽しみにしてください。行列乗算のための組み込みの演算子が使えます！“手動”の行列-行列乗算（NumPy、BLAS、LAPACKなどの力を借りなければ時間ばかりかかって、とても非効率的です）。線形代数と最適化されたライブラリがあるなら、入れ子になったforループを使った表現を実装したい人なんていません。このdotを使ったプログラムがあまり魅力的じゃない場合は、Python 3.5ではどのようになるか、以下を見てみてください。正直、行列の演算子として”@”マークを使うことについては、あまり好きだとは言えません。しかし、長い間、これに代わる記号を真剣に考えてきましたが、”未使用”でこの役割を果たせる、より良い記号を見つけることはできませんでした。もし、良いアイディアをお持ちの方がいたら、是非教えてください！Juliaは素晴らしい言語だと私は思います。そして、これからプログラミングや機械学習をやろうとしている人にお勧めしたい言語です。でも本当にそうなのか確信はありません。なぜなら、プログラミング言語に力を注ぐ時に、悲しくてどこか矛盾する事実があるからです。この先数年のうちにJuliaに”人気が出る”かどうかは分からないのです。待ってください。素晴らしく、使い勝手のいいプログラミング言語を定義する時に、”人気”は関係あるのでしょうか？　これだけは言わせてください。これはジレンマですが、最も使い勝手のいい言語はよくデザインされたものではなく、人気があることが条件になります。では、それはなぜでしょう。個人的には、Julia自体はとても気に入っています。私の興味のある分野に完璧にフィットしているからです。しかし、私はPythonを使います。一番の理由は、Pythonを扱いやすくしてくれる素晴らしいものが世間にあふれているからです。Pythonのコミュニティは素晴らしく、この先（少なくとも）5～10年でより身近になり、繁栄していくと私は信じています。Juliaに関しては、確信は持てません。Juliaのデザインはとても好きですし、素晴らしいものだと思います。しかしながら、人気がなければ、”未来を保証された”とは言えません。この先2年ほどで発展が止まってしまったらどうでしょう。私は、いつかは”死ぬ”であろうものに投資してきたことになります。ただし、全ての人がこう考えてしまったら、新しい言語が発展できなくなってしまいますね。さて、私がかつてRの使用者であったことは別にたいした秘密ではないでしょう。Rに関しての本さえも執筆したことがあります（正確に言うと｢Heat maps in R｣という本です。これは数年前に、ggplot2が使い物になる前に書いたものだということは言っておきましょう。この本を読んでほしいという説得力のある理由は言えません。しかし、もしどうしても読みたければ、5分間で読める無料の短いバージョンの記事がありますのでどうぞ）。話が主題からそれました。では、話を元に戻しましょう。Rに問題はあるか。私は何も問題がないと思います。言い換えれば、Rは”データ科学”ではやはり、とてもパワフルで有能な”人気のある”言語であると言えます。MicrosoftがRにかなりの関心を示したのもそう昔の話ではありません。Microsoftは、統計的計算や予測分析向けの、オープンソースであるR プログラミング言語に関するサービスを提供している商業ベンダーのRevolution Analytics社を買収しました。さて、Rに関する私の意見をどのようにまとめましょうか。以下の引用文がどこから来たものか正確には知りませんが（ちょっと前に、どこかの誰かから聞いたものです）、RとPythonの違いをよく説明しているのでご紹介します。”Rは統計学者が統計学のために発展させたプログラミング言語で、Python はコンピュータ科学者が発展させた、統計学の技術をプログラマが扱えるようにした言語である。”ここで言いたいことはRとPythonは両方とも”データ科学”のタスクに似たような形で活用できますが、Pythonの構文のほうが、私にはより自然に感じられます。個人的な好みの問題ですが。Python に有益な、TheanoとGPUにおけるコンピューティングについて話したいと思いましたが、Rもとても有能であると言うことをParallel Programming with GPUs and R（GPUとRで並列コンピューティング）という記事を読んで気付きました。ここで皆さんはきっとこう言いたいはずです。”では、私が開発中のモデルをいい感じに輝いたWebアプリケーションにするにはどうしたらいいんですか？　Rではそんなことできませんよね！”と。自信を打ち砕くようで申し訳ないですが、それは間違っています。Shiny by RStudio A web application framework for R.（RStudioによるshiny　RのWebアプリケーションのフレームワーク）をご覧ください。これを読めば、私の言いたいことが分かるはずです。どっちが正解とも言えません。おそらく、その先も正解は見つからないでしょう。私の大好きなPythonに関する言葉を元の文章から一部引用します。”みんな大人なんだからさ。”つまり、言語戦争で時間を無駄にするのはやめようということです。自分にピンとくるツールを選んで使ってください。また、求人という視点からも、言語には良いも悪いはないと言えます。例えば、あなたを”データ科学者”として雇った会社が、あなたが使っているお気に入りのツールボックスにケチを付けることはないでしょう。プログラミング言語は、結局はただの”道具”にすぎません。最も重要な能力は”データ科学者”のように考え、正確な質問をし、問題を解決する力です。難しいのは数学と機械学習のセオリーで、新しいプログラミング言語を学ぶことは比較的簡単です。考えてみてください。釘を金づちで打つやり方を学んだとします。では、他のメーカの金づちで同じことをやるのに難しいことはあるでしょうか？　これでもまだ興味のある方は、例に以下のTIOBE Programming Community Indexを見てください。プログラミング言語の人気の尺度の1つです。
（引用元：http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html）しかし、Spectrum IEEE が発表しているThe 2015 Top Ten Programming Languages （2015年のプログラミング言語のトップ10）を見ると、R言語は急激に順位を上げています（左の列が2015年で、右の列が2014年のランキングです）。
（引用元：http://spectrum.ieee.org/computing/software/the-2015-top-ten-programming-languages）これでお分かりいただけたでしょうか？　PythonとRでは、今やそんなに違いはないのです。さらに言えば、あなたが1つの言語を選んで使っていたとしても、仕事の採用には影響ありませんので心配しないでください。Perlは私がこの仕事をし始めて最初に使った言語です（高校生で、Basic、Pascal、Delphiを使っていたのは別として）。私がドイツで大学院生だった頃にPerlのプログラミングの授業を取っていました。当時はPerlをとても気に入っていました。その時には他と比較するような知識を持ち合わせていなかったんです。日々のプログラミングにPerlを積極的に使っている人は、私の知る限りほんの一握りの人だけです。生物情報学の分野ではまだPerlがよく使われていると私は聞きました。Perlが安らかに眠れるように、ここの項目はこのくらいにしておきましょう。以下の記事を参考にしてください。“Perl は死んだ。Perl万歳！”機械学習に使える言語は他にもたくさんあります。例えば、Ruby（(Thoughtful Machine Learning: A Test-Driven Approach（思いやりのある機械学習：テスト主導のプローチ））、Java（Java-ML）、Scala（Breeze）、Lua（Torch）などです。しかし、数年前に講座を受けたJavaや、Scalaで書かれたSpark向けのPythonのAPIであるPySparkを除いて、私には他の言語はあまり知識がないので、何とも言えません。これは冗談抜きの疑問です。Quoraでも最近取り上げられていました。この疑問に関しての素晴らしい意見を聞きたければ、こちらのスレッドを見てください。ただし、私の意見を聞きたい人は、私の答えはこれです。「いいえ、そうではありません。」Pythonは”比較的に”古い言語です。最初に登場したのは1990年代初期です（仮に1991年としましょう）。そして、他のプログラミング言語と同様に、Pythonも正しい選択をすることと、妥協することが必要でした。どんなプログラミング言語にもそれぞれのクセがあります。より最近の言語は過去の失敗から学んでいる傾向にあります。これはいい傾向です（ちなみに、RのリリースはPythonが登場してからそれほど経過していない1995年でした）。当時のPythonは、他の言語もそうであるように、”完璧”には程遠く、欠点だらけでした。Pythonのコアユーザの私から言わせてみれば、GIL（Global Interpreter Lock)にはイライラさせられました。でも、GILはマルチプロセッシングや、マルチスレッドのモジュールを持ち、特に制限もありません。しかし、ある一部の内容によっては、少しだけ”不便”であるというだけです。プログラミング言語が”どれだけ素晴らしいか”を測る基準は存在しません。その基準はあなたが何をしたいかによることが大きいのです。作業をする時には自分にこう尋ねてみてください。”私は何を達成したいのか。それを達成するのに一番いいツールはなんだろうか”と。つまり、”金づちしか持っていなければ、すべては釘に見えるでしょう”。金づちと釘の話に戻りましたが、Pythonはとても用途が広い言語です。私は日々の大量のリサーチには、Pythonの機械学習ライブラリである優秀なscikit-learnや、データ変更のためのpandas、可視化のためのmatplotlibとseaborn、これらのものをトラッキングするためのiPython notebookを使用しています。さて、とてもシンプルな質問だったわりにはとても長い答えとなってしました。この手の話なら私は何時間でも何日でも語り続けられますよ。でも、これ以上話を複雑にするのはやめて、結論にいきましょう。
訳：
「空を飛んでいるじゃないか！　どうやったんだ？」
「Pythonだよ！」「昨日の夜にやり方を覚えたんだ。簡単なんだ。
Hello, world、はただ、print"Hello, world!"と書くだけでいいんだ。」「分からないよ。動的型付けは？オフサイドルールは？」
「こっちに来なよ。プログラミングが面白いって改めて分かるよ！　ここでは新しい世界が広がっているんだ！」
「でもどうやって飛べばいい？」「僕はただimport antigravityって打っただけだ。」
「それだけ？」
「比べるために薬箱の中を全部試してみたんだよ。
でも、これがたぶんPython流だと思う。」
（引用元：https://xkcd.com/353/）
この記事に関して、とても貴重なフィードバックがありました。皆さんにも役に立つ情報だと思います。さまざまな意見を聞くというのは、どんな時でもいいことです。特に”データサイエンス”や機械学習、プログラミングの分野の初心者の方には特におすすめです。覚えておいてください。”一部のアドバイス”は偏った意見の場合があります。お気付きかもしれませんが、私の偏りはPythonを好んでいるということです。ごめんなさい。でもこれが私なんです！　さて、それはさておき、以下の貴重なコメントをぜひ読んでください。そして、遠慮せずに質問を投げかけたり、ディスカッションに参加したりしてください。
#content .block-text blockquote p{font-weight:normal;}
Adam_Oさんよりhackernewsにて
