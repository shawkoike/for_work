<p><a href="http://science.raphael.poss.name/rust-for-functional-programmers.html" rel="nofollow" title="" class="ext-link">Rust for functional programmers</a>（2014-07）by <a href="https://twitter.com/kena42" rel="nofollow" title="" class="ext-link">Raphael ‘kena’ Poss</a></p><p>この投稿はEdward Z. Yangが2010年に書いた<a href="http://blog.ezyang.com/2010/10/ocaml-for-haskellers/" rel="nofollow" title="" class="ext-link">OCaml for Haskellers</a>、私自身が今年頭に書いた<a href="http://science.raphael.poss.name/haskell-for-ocaml-programmers.html" rel="nofollow" title="" class="ext-link">Haskell for OCaml programmers</a>の流れに沿っています。</p><p>C言語プログラマのためのRustと、関数型プログラマのためのRustは異なります。</p><p>他のプログラミング言語を使用した経験のあるC言語系統のプログラマなら、Rustはとても多くの新しい特徴と変わった構造を持っていると感じるでしょう。どちらかというと難解と感じるかもしれません。C++、JavaやC#プログラマでさえ、Rustは別物のように感じます。Rustはオブジェクトを持ちますがクラスを持ちません。“structed enums”を持ち、C言語系統では同等のものがない変わったマッチステートメントを使います。同じ変数を2度割り当てること避け、C系統言語では聞いたことのない変則的なルールを適用しています。</p><p>それはなぜでしょう？</p><p>現在のRustマニュアルではあえて明言していないものの、<b>Rustは関数型言語であり</b>、ここ数年主流となっているプログラミング言語デザインの影響を受けています。</p><p>Rust支持者が直面している問題があります。それは言語としても規律としても、関数型プログラミングが30年にわたり汚名を着せられてきたことです。例えば、関数型プログラムは判別が難しい、C言語に比べ処理が遅い、実行時には高くつく機構が必要になる（少なくともガベージコレクタ、しばしばシステムI/Oの関数型ラッパなど）、また学ぶのが難しく、変則的なシンタックスを使用するなどです。</p><p>C言語プログラマへ関数型言語としてのRustを説明する場合、受け入れてもらうにはとても骨が折れるでしょう。というのも公式のRustマニュアルとチュートリアルは明確に、下位タスクの実行に、どのようにRustを使用するか説明していますし、多くのCプログラミングパターンに相当するRustを現行のプログラミング言語に言及することなく、少しずつ説明していくとしています。</p><p><em>これがすべてであると言えるのですが、もしあなたがすでに関数型プログラミングについて知っていたらどうでしょうか？</em></p><p>Haskell、OCamlなどを使用したことのある経験者にとって、関数型プログラミングの基礎を事細かく説明したマニュアルを読むことはとても退屈なことでしょう。対象者のレベルに合わせ、以下では関数的側面から<strong>急ぎ足でRustの紹介</strong>をしていきます。</p><p>良くも悪くも、この先も大抵のハードウェアプロセッサはプログラムカウンタ、レジスタ、そしてアドレス指定のできるメモリに基づいていくだろうとされています。これは私たちが1970年代にいた場所とまったく変わっていません。当時はC言語が設計された時代であり、C言語が現在も普及している理由になっています。特にC言語の抽象機械モデルはほとんどのハードウェアのプラットフォーム上で適しているとされ、割り込みハンドラやガベージコレクタ、仮想メモリマネージャのような低レベルのシステムを構築するのにちょうどいいレベルの抽象化になっています。</p><p>しかしながらC言語の“ユーザインターフェース”、特にプリプロセッサと型システムは、とても時代遅れになっています。新しいものを学んだプログラマにとっては、率直に言ってダメな言語です。</p><p>こうしたことを背景にRustはつくられてきました。<strong>RustはC言語の抽象機械モデルを保ちますが、言語のインターフェースが刷新されています。</strong>Rustは書き方のバリエーションが豊富で、型システムはシステムコードをより安全にします。その強力なメタプログラミングファシリティはコードの自動作成の新しい方法を可能にします。</p><p>しかし、この記事を書いている時点ではRustは、いまだ安定していないことに注意してください。ほとんど予告なく、まだ変更されることがあり、公式の資料は実装と完全には同期されていません。</p><p>Haskellと同じように、Rustの数値リテラルでサフィックスがないものについでは、あらかじめ定義された型はありません。実際の型はコンテキストから推論されます。Rustの文字リテラルはどんなUnicodeのスカラ値も表すことができ、Latin-1エンコードのみのOCamlの文字とは対照的です。Rustの他のリテラルフォームは同記事内で後述するリテラルのセクションで示します。</p><p>プリミティブ型</p><p>Rustでは<code>str</code>型は特別です。<em>プリミティブ</em>なので、コンパイラは特定の文字列演算を最適化することができます。しかし、<em>第一級</em>ではないために、<code>str</code>型の型変数を定めたり、関数に直接<code>str</code>型の値を渡すことができません。プログラムでRustの文字列を使用するには、後で述べるように文字列参照を使用しなければいけません。</p><p>演算子の等価性：</p><p>Rustはブーリアン演算と、整数型上での単一ビットごとのNOT演算子の両方に<code>!</code>を使います。単一の<code>~</code>はRustでは、以下で説明するように、C言語とは違った意味を持ちます。</p><p>複合式：</p><p>ブロック式の値は、ブロック内の最後の式の値になることに注意してください。ブロックがセミコロンで終わる場合は、その値は<code>()</code>になります。</p><p>関数の型と定義：</p><p>パターンマッチとガード</p><p>副作用を伴う再帰</p><p>明らかに、OCamlと同様に、Rustは正格（先行）評価を行い、関数が副作用のある式を含むことが可能です。</p><p>Rustが用いるLLVMコードジェネレータは上記の関数に対して末尾呼び出しの除去ができますが、Rustは末尾呼び出しの除去を（現在のところ）保証していないことに注意してください。不確かな場合は、下記が同等です。</p><p>レコード型の式とフィールドアクセス</p><p>自由な型パラメータ（ジェネリックなデータと関数型）</p><p>代数的データ型</p><p>ラムダ式と高階関数</p><p>Rustの“トレイト”はHaskellの型クラスに似ています。</p><p>Haskellと主に違う点は、トレイトはドット表記法の式に対してのみ介在するということです。すなわち<code>a.foo(b)</code>のような形です。</p><p>しかしながら、C++、Java、C#、OCamlのプログラマは、トレイトを伝統的なオブジェクトクラスと混同してはいけません。トレイトはまさに型クラスです。つまり、トレイトを、プリミティブ型を含む任意のデータ型に追加することができます。</p><p>例</p><p>トレイトのメソッド宣言において、識別子<code>“self”</code>は、そのメソッドが適用される実際のオブジェクトを示します。</p><p>Haskellと同様に、Rustのトレイトは演算子のオーバーロードに使うことができます。例えば、Peano整数に対して新たな直和型を定義する場合は、</p><p>そして、<code>PartialEq</code>クラスを例示することで、比較演算子<code>==</code>をPeano整数の間にオーバーロードできます。</p><p>また、Haskellと同様に、トレイトはメソッドに対するデフォルト実装を提供できます。インスタンスが特殊化を省略する時に使用されます。</p><p>トレイト宣言内のメソッド宣言において、識別子<code>“self”</code>はそのトレイトが適用される実際の型を指します。</p><p>Rustにおいてオーバーロード可能な各演算子には、標準ライブラリの中に対応するトレイトがあります。</p><p>forループは次のように、特殊なトレイト<code>std::iter::Iterator</code>を使用します。</p><p>メソッド<code>next</code>は<code>Iterator</code>が実装します。<code>next</code>の戻り値の型は<code>Option</code>です。これは、“繰り返すものが残っていない”ことを意味する値<code>None</code>、あるいは次の繰り返し値が<code>x</code>であることを意味する値<code>Some(x)</code>を持つことができます。</p><p>トレイトが提供する仕組みに加えて、どの<code>struct</code>や<code>enum</code>も、“<code>impl</code>”を使って1つ以上のメソッドインターフェースを使ってデコレートすることができます。デコレートは定義から分離され，異なるモジュール内ででデコレートすることができます。</p><p>C言語と同様に、Rustの関数パラメータはデフォルトで、値によって渡されます。大きなデータ型では、データのコピーはコストが高くなるかもしれないため、代わりに<em>参照</em>を使うことも考えられます。</p><p>型<code>T</code>のどんなオブジェクト<code>v</code>でも、式“<code>&amp;v</code>”を使ってそのオブジェクトを指す<em>参照</em>を作ることができます。その参照自体はその時、型<code>&amp;T</code>を持つことになります。</p><p>この例で示しているように、Rustは<code>struct</code>参照のためのシンタックスシュガーを提供しています。つまり<code>p1</code>の型が<code>&amp;Pt</code>であり<code>Pt</code>が<code>x</code>という名前のフィールドを持つ場合は、<code>p1.x</code>と書くことも可能です。このシンタックスシュガーはメソッド呼び出し（<code>x.foo()</code>）にも利用できます。</p><p>しかし、他の多くのケースでは、参照される値が<code>*</code>単行演算子で“取得される”か、パターンが<code>&amp;</code>でマッチしなければなりません。</p><p>単純な参照では下部のオブジェクトの変更を許していません。このため、参照によって変更できることが望ましい場合は、次のように“<code>&amp;mut</code>”を使用します。</p><p>Rustの型システムは、参照を通した<em>可変な別名を許しません。</em>つまり、C言語とは違って、参照で別名を使って同じオブジェクトを変更することはできません。これは<strong>借用</strong>という概念を通して行われます。つまり、オブジェクトの所有権が参照によって借用されている間は、元の変数を使用できないということです。例を挙げます。</p><p>“すべての値はデフォルトでは不変”であることや所有権・借用のルールと共に、参照型はRustの型システムの核となる特徴です。この特徴によって、Rustの型システムはC言語よりも根本的に安全なものとなっています。</p><p>RustはC言語と同じ<em>抽象機械モデル</em>について定義されています。この抽象機械にはメモリのセグメントがあり、言語のランタイム機構はプログラムの実行中にメモリのセグメントの割り当てと解除を行うことができます。</p><p>抽象機械において、RustではC言語と同様に下記の2つの概念が定義されています。</p><p>C言語におけるメモリ関連の問題はすべて、Cプログラムでは<em>寿命外</em>（すなわち割り当て前または解除後）あるいは<em>記憶域外</em>（すなわちメモリの下位アドレスまたは上位アドレス）のオブジェクトを指す参照を操作できることから起こっています。</p><p>Rustは、<strong>オブジェクトが寿命外または記憶域外で使用できないことを確実にする</strong>ことで、そうした問題を徹底的に防ぐようにしています。</p><p>C言語やRustの抽象機械には、4種類の記憶域、つまりstatic（静的）、thread（スレッド）、automatic（自動）、allocated（割り当て）があります。</p><p>C言語では、オブジェクトの寿命はその記憶域だけで決まります。</p><p>Rustでは、staticとautomaticのオブジェクトの寿命はC言語と同じです。しかしながら、</p><p>Rustは、<em>さまざまな型付けルールに関連して</em>、ボックスに対する多くの管理戦略をサポートしています。</p><p>Rustの管理オブジェクトの扱い方は、比較的シンプルです。“puts objects into boxes”の式にある<code>box</code>キーワードによって、オブジェクトの寿命が動的に管理されます。ボックスの不可変性と所有権については、前述した参照と同様の考え方です。</p><p><code>box</code>キーワードは、実際には<code>box(HEAP)</code>の省略形です。“<code>box(A) E</code>”は、<code>A</code>によって割り当てられたメモリオブジェクトに<code>E</code>の値の結果を置くことを意味し、これがトレイトです。Rustのバージョン0.11において、これ以外に標準ライブラリ内にあるアロケータは、ガベージコレクションされたオブジェクトである<code>GC</code>だけです。</p><p>管理オブジェクトは、適切な再帰的代数的データ型を実装するための”失われた環”になっています．</p><p>ボックスが提供する利便性を補完するものとして、Rustの標準ライブラリには、<strong>参照がカウントされる不変オブジェクトへのラッパー</strong>が2つ実装されています。これにより複数のオーナーからの参照が可能になります。</p><p>参照カウントを使えば、最後の参照が終了したその時に、オブジェクトの割り当てが解除されたことが保証されます。ボックスの使用のトレードオフは、新しい参照が作られたり参照が終わったりするたびに、参照カウントを更新しなければならない、ということです。</p><p><code>std::rc::Rc</code>と<code>std::arc::Arc</code>という2つの実装が提供されています。どちらも同じインターフェースを提供します。なぜ同じようなものがあるかというと、プログラマにパフォーマンス上のトレードオフを与えるためです。Rcはメモリを使いません。だから軽量で、つまり速いのです。しかしスレッド間で共有できません。Arcはメモリを使います。Rcと比べるとやや効率が悪いですが、スレッド間でデータを共有できます。</p><p>マクロを定義する基本的なシンタックスは次のようになります。</p><p>例えば、次に示すマクロは、<code>for</code>ループをPascalのように定義したものです。</p><p>このマクロが、ローカルネームを付けるに当たってどのようにマッチステートメントを使っているかに注目してください。これによって1度しか値を返さないようになっています。</p><p>Scheme同様、マクロも再帰可能です。例えば次に示すマクロでは、<code>step</code>があってもなくても<code>pfor</code>を実装するために再帰を使っています。</p><p>マクロは可変個引数であり、シンタックス内の任意の繰り返しは、マクロの1つの引数で記録できます。例えば、次に示すマクロでは、各引数において<code>println!</code>を呼び出し、それは任意の型になり得ます。</p><p>シンタックスは次のようになります。マクロ式の左側（pattern）では、<code>$( PAT )DELIM*</code>が、<code>DELIM</code>によって区切られている<code>PAT</code>のゼロまたはそれ以上の出現に一致し、右側（expansion）では、<code>$( TEXT )DELIM*</code>が、<code>DELIM</code>によって区切られた<code>TEXT</code>の1回またはそれ以上の繰り返しを展開します。展開される繰り返しの回数は、含まれるマクロの引数がマッチする回数によって決まります。示した例の中では、それぞれの引数（カンマによって区切られる）は、セミコロンによって区切られる<code>println!</code>という呼び出しで代用されています。</p><p>Rustにはさまざまな数値リテラルの語彙があります。</p><p>文字、バイト、文字列によるエスケープのリテラル</p><p>C言語ファミリでよく使われるエスケープ（\a、\fなど）や、8進法表記のエスケープ（例、\0123）は、Rustでは使えないことに注意してください。</p><p>最後に、RustはPython同様に、raw文字列、複数の文字列のデリミタをサポートしており、これにより文字列内のデリミタのオカレンスを引用することを避けています。</p><p>RedditやHacker Newsでクオリティの高いコメントを寄せてくれた多くの人たちに感謝します。この記事の初版に磨きをかけるに当たって、いただいたコメントが大変参考になりました。</p><p>Copyright © 2014, Raphael ‘kena’ Poss. Permission is granted to distribute, reuse and modify this document according to the terms of the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="nofollow" title="" class="ext-link">http://creativecommons.org/licenses/by-sa/4.0/</a>.</p>
