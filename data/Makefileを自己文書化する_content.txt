Self-Documented Makefile （2016-02-29） by François Zaninotto私たちのプロジェクトではいつも、非常に長いMakefileを使用して、インストールやビルド、テスト、デプロイメントの処理を自動化しています。ターゲット名はほとんど標準化されていますが（make install、make deploy）、中には説明が必要なものもあります（make run-dev、make restart-api）。そして、詳細なmakeターゲットを追加するほど、それらの処理内容をテキスト形式で大量に記載しなければなりません。私たちのプロジェクトでは通常、このような文書をREADMEファイルに書いています。
しかしCLI（コマンドラインインタフェース）を用いる場合は、主に自己文書化ツールを使っています。makeと打つだけで、利用可能なコマンドとその説明が一覧表示されたら便利だと思いませんか？
それを実現するのは、実はとても簡単です。まずは各ターゲットを文書化するために、以下のようにターゲット名の後ろに##を付けて、コメントを記載します。内部ターゲット（この例ではwebpack.PIDなど）の説明は不要なので、自己文書化の対象外になります。次にシェルスクリプトのおまじないをいくつか実行して、makefileにhelpターゲットを追加します。ポイント：このコードスニペットをmakefileにコピーする場合は、必ずテキストエディタがインデントをタブに変換しているかどうか確認する。スペースに変換してはいけない。ポイント：printfパターン内の値30を大きい数字または小さい数字に変更することで、第1カラムの幅を調整する。ポイント：| sortを削除すると、ターゲットがアルファベット順ではなく、makefileに出現する順番に並べ替えられる。ご紹介したすばらしいコードは、我々の協働者Briceがインターネット上で見つけた様々なスニペットに影響を受けて書いたものです。これはアウトプットの色付けにANSIコードを使っています。また、LinuxとOS Xの両方で利用できます。仕上げ：helpターゲットをデフォルトのターゲットにする。これで、もう大丈夫です。makeは最も古いCLIタスクランチャの1つです。数多くのドキュメンテーションがあり、非常に強力で、どこにでもインストールできます。そのため、インラインヘルプを提供してくれるもののインストールが必要な言語固有のタスクランチャ（npmやphp bin/consoleなど）の代わりに使うことが可能です。とにかく、makeを使うコツに興味がある場合は、私たちが書いた別の記事もご覧ください。そこではmakeとdockerを組み合わせ、コンテナ内でコマンドを実行するmake-docker-commandというプロジェクトについて説明しています。アップデート：本記事は「The Hacker News」のホームページで特集されました。関連の最新情報やご意見についてはhttps://news.ycombinator.com/item?id=11195539をご覧ください。
