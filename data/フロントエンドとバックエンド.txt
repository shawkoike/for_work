<p><a href="http://www.quirksmode.org/blog/archives/2015/01/front_end_and_b.html" rel="nofollow" title="" class="ext-link">Front end and back end</a> （2015-01-19） by <a href="attackwithnumbers.com">Peter-Paul Koch</a></p><p><strong>バックエンドエンジニアとフロントエンドエンジニアの違いは、前者は1つの環境で仕事をするのに対し、後者は予期せぬことが起こる可能性のある数多くの環境で仕事をするということにあります。</strong></p><p>「複雑なJavaScriptで動くWebサイトやWebアプリが動作する環境は、単一的で一枚岩のものである」――この無意識な思い込みこそが、バックエンド中心に開発されたWebベースプロジェクトにおいてフロントエンドエンジニアが目にする問題の根本的な要因であると私は考えています。</p><p>さらに悪いことに、バックエンドエンジニアは、フロントエンドエンジニアよりも複雑なアプリケーションを構築するのに長けていると考えています。実際そうなのかもしれないのですが、好ましくないのは、彼らの中にはフロントエンドについて学ぼうという意識に欠けている人がいることです。</p><p>アプリケーションの構築において、数多くの困難な環境に対応するフロントエンドの技術を平然と否定し、自分が正しいと主張することは、「典型的なバックエンドエンジニアは傲慢である」という印象を与えることになります。もし、あなたが教える立場になりたいのであれば、まずは学ぶことです。</p><p><a href="http://www.quirksmode.org/blog/archives/2015/01/the_problem_wit.html" rel="nofollow" title="" class="ext-link">Angularの記事</a>で、私はフロントエンドエンジニアとバックエンドエンジニアをはっきりと定義しませんでした。そのことについて、私は批判を受けたのですが、それはもっともな意見です。</p><p>ですから、ここでフロントエンドエンジニアとバックエンドエンジニアについてちゃんと定義したいと思います。この重要な点について<a href="https://twitter.com/robsonsobral/status/556131635016769537" rel="nofollow" title="" class="ext-link">ツイート</a>してくれたRobson Sobralに感謝します。</p><p>前置きになりますが、これから記述することは、典型的なフロントエンドエンジニアからやんわりと叱られることのある典型的なバックエンドエンジニアに焦点を当てていきます。どちらのタイプの開発にも長けている人や、ここで述べている落とし穴に対処することができる人にとっては公平ではないかもしれませんが、こうすることで私が何を言おうとしているのかをお分かりいただけると思います。</p><p>最初に書いた記事には、この項目は含まれていませんでしたが、フロントエンド環境がいかに不利であるということが、何人かのバックエンドエンジニアには理解してもらえていないようでしたので、新たに追加することにしました。</p><p>サーバが不思議な動作をすることについて、<a href="https://twitter.com/DoerteDev/status/557200100699942912" rel="nofollow" title="" class="ext-link">いくつか</a>の<a href="https://twitter.com/hdv/status/557223964955934720" rel="nofollow" title="" class="ext-link">コメント</a>をもらいました。OSやPHP、MySQLの不具合、おかしなクラウドソフトウエア、ルート証明書の問題、カーネルパニックなどです。これらは簡単なことではありません。しかし私が言いたいのはそういうことではありません。</p><p>例を挙げて比べてみましょう。以下のように設計されたサーバサイドのビジネスアプリケーションを想像してみてください。</p><p>フロントエンドの世界と比較してみると、バックエンドは非常に静かで安全な環境と言えます。このことを良く覚えておいてください。</p><p>（例外として、オープンソースソフトウエアでは、いくつかのサーバ環境で対処する<a href="https://twitter.com/bramus/status/557228836170240000" rel="nofollow" title="" class="ext-link">必要があるかも</a>しれません。確かにそうなのですが、この記事では主にエンタープライズJavaについて話をしています。）</p><p>私は、フロントエンドのアプローチだけがWebに適していると考えています。ちなみにここで言うWebとは、ほぼ静的なHTMLページから装飾豊かで多数のビューを持つシングルページwebアプリまで、ブラウザ上で動作するあらゆるwebアプリケーションを指します。もし、ブラウザでコードを起動させたいのであれば、Douglas Crockfordが言う、世界で最も悪意のある開発プラットフォームを知っておくべきです。</p><p>そういう訳で、私は<a href="http://blog.salsitasoft.com/the-shifting-definition-of-front-end-developer/" rel="nofollow" title="" class="ext-link">他の方の記事</a>に書かれていた以下のフロントエンドの再定義に同意することができません。それは</p><p>というものです。</p><p>私は、ユーザインターフェイスとJavaScriptを意図的に分けて考えることには賛成できません。HTMLやCSS、JavaScriptで書かれた全てのものは、それが動作する多くの環境への理解が必要です。</p><p>例えば「何故offsetWidthを参照することは危険になりうるのか」「様々なブラウザにおいて、いつイベントが発火するか(又は発火しないのか)」「あなたのコードがDOM操作を行う際のパフォーマンス」などについて知らなければなりません。</p><p>これらの懸念点の対処をフレームワークに任せる場合でも、あなたの好む環境だけではなく、幅広い環境でどのようにフレームワークが機能するのかを知っておかなければなりません。将来的にこの問題はフロントエンドやバックエンドの感度に応じた新世代のフレームワークによって解決されるかもしれませんが、今現在そのようなフレームワークはあまり存在していません(もしくは世に知られていません)。</p><p>典型的なバックエンドエンジニアは、ブラウザを「モダンなコンピュータ上で動作する、一枚岩のアプリケーションプラットフォーム」と捉えがちです。しかし、これが正しかったのは3～４年前のことであり、今ではこの認識がが正しいと言えるのはイントラネット上ぐらいのものです。モバイルブラウザの出現は、私たちに制限された環境を検討せざるを得ない状況に追い込みました。例えば複雑なスクリプトを起動させることが難しかったり、ブラウザは良いものなのにネットワークが良くなかったりといった環境です。</p><p>同じ動作を行う2～3の異なるやり方を提供するフロントエンドを例にして考えます。このようなフロントエンドが実装される理由は、アプリケーションを正しく構築できていないからではなく、数多くの環境でコードを起動させる必要があり、またいくつかのタイプの環境では異なるアプローチが必要だからです。</p><p>その良い例として、アプリケーションのJavaScript無しのバージョンが挙げられます。通常、バックエンド駆動で開発されたシングルページアプリケーションではJavaScript無しのバージョンを提供しません。これが道理に適うケースは、1つの環境のみでコードが起動することを無意識に想定している場合です。私たちの開発環境はXであり、X以外の開発環境を持たず、X上でアプリケーションが動作して、それで済むケース。その状況でJavaScriptを無効にする人は誰もいません。</p><p>これらの議論に抜け落ちているのは、JavaScript無しのバージョンという観点です。実際にJavaScriptを無効にするユーザがほとんどいなかったとしても、JavaScript無しのバージョンは「JavaScriptをサポートしているが、実行速度が遅すぎるという理由だけでコードの実行に失敗する」というようなブラウザにも対応しています。この場合、監視スクリプトが「フルバージョンのWebアプリケーションでは動作が遅い」と判断し、ユーザをJavaScriptがないバージョンに切り替えてしまいます。つまり、JavaScriptがないバージョンは、フルバージョンよりも異なる環境に対応しているのです。</p><p>「これらのひどいモバイルブラウザは、私たちのサポートブラウザリストにはありません」。こんなことを言われることがあります。その場合、私はこう答えます。「サポートブラウザリストを作成したのは誰ですか？　もしあなたが、アプリケーションがXという環境でのみ起動すべきと想定しているのであれば、X以外の環境をサポートリストから外すことはとても魅力的でしょう。そのせいで、X上だけでしか使えないばかりに代替性のないシングルページアプリに、いとも容易くなってしまうでしょうけどね。」</p><p>典型的なバックエンドエンジニアは、すべてのWebアプリケーションやそれが動作する環境について、それぞれについて異なる対応が必要な多様な環境からなるものと見なしておらず、全て一枚岩のものだと思っている。これが私の結論です。</p><p>同時に、彼らはアプリケーション構築において、フロントエンドエンジニアよりも長けていると考えています。私の知る限り、それは確かですし、多くのことを彼らから学びました。</p><p>ただし問題は、バランスに欠けているということです。バックエンドエンジニアは、私たちの言っていることを理解しようともせずに自分たちの言い分を理解してもらおうとしています。相手の考えを否定しておきながら、自分の考えに同意しない人を非難することは、傲慢な人という印象を与えてしまいます。</p><p>明らかに横柄な態度は、技術的な問題がどうという以前に不愉快な気分にさせられます。私自身、過去15年間このような問題に直面しています。もし誰かに何かを教えるのであれば、まずは自分が学ぶことを覚えましょう。</p>
