How to boost your Vim productivity （2014-03-21） by Adam StankiewiczLeaderは素晴らしい概念です。キーの組み合わせではなく並びによって、操作を行えるようにするものです。私はこれを使っているので、操作のために”Ctrl-何らかのキー”の組み合わせを押す必要はめったにありません。私は長い間、,をLeaderキーとして使っていました。ですがある時、キーボードの中で一番目立つキーにマップすることを思い付いたのです。Space（スペース）キーです。これで私のVim生活は激変しました。今や、私はLeaderをどちらの親指でも押すことができ、他の指は常にホームポジションにあります。Leaderがとても使いやすくなったので、私が様々なキーバインドで用いるようになったことは周知の話です。私は、自分がVimで作業を行っている中で、その時間の大半を費やしている操作を特定して、それらをLeaderキーでマップすることにしました。例えば以下のような操作です。自分が特によく行う操作を特定して、それをマップすると良いでしょう。私は、以下のマッピングにterryma/vim-expand-regionを使っています。これで以下の操作ができるようになります。vvvはvpより時間が掛かるように思えますが、実際には、選択すべき範囲や使うべきキーの組み合わせを事前に考えずに済んでいます。この方法でvが、viw、vaw、vi"、va"、vi(、va(、vi[、va[、vi{、va{、vip、vap、vit、vatなどの代わりとなっていることにはお気づきですね。私はVimの検索と置換を決して十分に活用してはいなかったのですが、そんな時にVim wikiで以下のスニペットを見つけました。これで、検索と置換を以下の流れで実行できるようになりました。補足：代わりに、Vim 7.4から導入されたcgnを使う方法もあります。私は、以下のショートカットを毎日のように使っています。これで何カ月分もの時間を節約できているはずです。pppppと押すだけで、複数行の貼り付けを繰り返し実行できます。テキストを選択してその上に貼り付ける時に、削除しようとしているテキストでペーストバッファが上書きされてしまう心配がありません（以下のコードを~/vimrcの末尾付近に置きます）。vim-roomを使い、テストに合うようにtmuxを設定しました。vim-roomでは、&lt;Leader&gt;rを押すとテストスイートが実行されるようになっています。私は&lt;Space&gt;をLeaderに使っているので、&lt;Space&gt;rを押すとテストが実行されます。tmuxで画面を分割してテストを行うため、次の項目の開発に移りつつ、常にコードを確認しながらテストを実行することができます。私は度々、シェルでランダムなコマンドを実行する必要があります。そういった場合、Ctrl-zを押してVimを一時停止しておきます。そしてコマンドを打ち込んだら、fg&lt;Enter&gt;を押してVimにスイッチバックします。しかし、個人的には、fgを使うのは嫌でした。もう一度、Ctrl-zを押してVimにスイッチバックしたかったのです。ソリューションが見つからなかったので自分で開発したところ、ZSH上でうまく動作しています。これを自分の~/.zshrcに貼り付けると、シェルとVimを非常に素早く切り替えることができるようになります。ぜひ試してみてください。tmuxとOS XとVimは、かなり難しい組み合わせです。理由は以下の通りです。かなりの時間を費やして調整したところ、以下のような結果に至りました。マッピングに&lt;C-a&gt;を使う人がいますが、私は行の先頭に移動するショートカットキーとして使っていますので対象外です。その上、&lt;C-Space&gt;の方がはるかに便利です。その理由は、後で説明します。考えてみてください。&lt;C-Space&gt;&lt;Space&gt;を押すだけで、tmuxのコピーモードに切り替えられるようになるのです。システムのクリップボードにコピーするには、brew install reattach-to-user-namespaceを事前に実行します。、&lt;C-j&gt;、&lt;C-k&gt;、&lt;C-l&gt;を使って、Vimとtmuxウィンドウのいずれの組み合わせでも、シームレスに切り替えることができます。また、tmuxのウィンドウを分割するには、以下のキーバインドを使うことをお勧めします。&lt;C-Space&gt;lと&lt;C-Space&gt;jは&lt;C-Space&gt;%と&lt;C-Space&gt;|に比べると、明らかに速く押すことができます。詳しい情報についてはtmux.confをご覧ください。以下のコードを.vimrcに挿入します（そうすることで、CtrIPがオートコンプリートにgitまたはThe Silver Searcherを使うように設定されます）。vim-scripts/gitignoreを使うことをお勧めします。neobundle.vimは、以下の点でVimプラグインの管理に非常に役立ちます。私は、生産性を高めるために以下の一般的なプラグインを利用しています。私はRuby開発者なので、以下のRubyプラグインも使っています。私は、サーバを構成するために頻繁にVimを使う必要があります。残念がなら、Vimには私にとって都合の良いデフォルト設定がないのでそのまま使うことはできません。vim-sensibleが役に立つこともあるかもしれませんが、私の場合、それでは不十分でした。そこで、（特にRuby開発者にとって）非常に便利なデフォルト設定をもつvimrcプラグインを開発し、~/.vimrcがVim構成のシングルソースになるようにしました。このプラグインには、デフォルトスキーマ、パッケージマネージャ、多言語構文サポートも含まれています。つまり、サーバサイドでVimを構成するために~/.vimディレクトリを台無しにしなくても済むということです。以下のようにして簡単にVim環境をサーバにインストールすることができます。また、独自のdotfilesも開発したので、開発環境をあっという間にセットアップできるようになりました。Vimのセットアップを有効なものにするための秘訣は、開発時に遭遇する問題を常に認識し、それらに対処することです。対処の手段は、.vimrcによるクイックマッピング、Google検索、IRCでのチャットなど、どのようなものでも構いません。どのようにしてVimの生産性を高めることができるか考えてみてください。Vimコンサルタントとしてご相談に乗ります。ご連絡はEメールでお願いします。
