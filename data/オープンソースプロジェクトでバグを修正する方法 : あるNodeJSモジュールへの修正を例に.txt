<p><a href="http://nolanlawson.com/2015/12/28/how-to-fix-a-bug-in-an-open-source-project/" rel="nofollow" title="" class="ext-link">How to fix a bug in an open-source project</a> （2015-12-28） by <a href="https://twitter.com/nolanlawson" rel="nofollow" title="" class="ext-link">Nolan Lawson</a></p><p>(訳注:2016/3/3、頂いたフィードバックをもとに記事を修正いたしました。)</p><p>オープンソースプロジェクトでバグを見つけたとします。まずは、慌てずに落ち着きましょう。これは実によくあることです。ソフトウェアは人間の手で書かれるし、人間はミスを犯すものです。</p><p>または、こんなふうに考えるかもしれません。「やったね、バグの修正は大好きだ」。さっと現れて、何百万人とまではいかなくても、何千人もが使っているプロジェクトのバグを修正してしまうようなヒーローになりたくない人なんていますか？　オープンソースコミュニティに恩返しできたという温かな喜びを感じられる上に、一連の<a href="http://code.dblock.org/2011/07/14/github-is-your-new-resume.html" rel="nofollow" title="" class="ext-link">Github 履歴</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>に追加得点を上げられるわけです。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-16-41-57.png?w=855&amp;h=284" alt='Bug in the "buffer" module' width="570" height="189" class="size-large wp-image-4466" originalw="570" originalh="189" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-16-41-57.png?w=570&amp;h=189" scale="1.5"><br>
<em>訳：<br>
人気のあるプロジェクト<br>
典型的なバグ<br>
</em></p><p>しかしコーディングの初心者にとっては、オープンソースプロジェクトにコントリビュートするなんて恐れ多いことに思えます。私の友人に、最近JavaScriptをWeb上のチュートリアルで学び始めた人がいるのですが、Githubのユーザインターフェースを見ると”途方に暮れる”と言っていました。</p><p>また、社会的な側面もあります。それは、”プロジェクト管理者は、私のプルリクエストを受け付けてくれるだろうか？　”とか、”批判されたり、却下されたりしたらどうしよう？　”といった不安です。これは<a href="http://zedshaw.com/2015/06/16/early-vs-beginning-coders/" rel="nofollow" title="" class="ext-link">コーディング初心者</a>なら誰もが感じることです。自分と他の熟練者たちと比べて、知識の差を感じているのでしょう。</p><p>しかし、臆することはありません。オープンソースに関わる人たちにとって、新規メンバーからのプルリクエストは大歓迎なのです。<a href="http://www.firsttimersonly.com/" rel="nofollow" title="" class="ext-link">First Timers Only</a>や<a href="https://twitter.com/yourfirstpr" rel="nofollow" title="" class="ext-link">Your First PR</a>といった最近の試みからも分かりますが、手助けさえしてもらえば、誰でもオープンソースプロジェクトにコントリビュートできるのです。</p><p>ただ、本稿の目的はちょっと違います。特定のプロジェクトの特定のバグについて詳細な解説をするのではなく、<em>不特定の</em>プロジェクトの<em>あらゆる</em>バグをどのように修正するかを説明したいと思います。問題解決のプロセスを図解する際の例として、<a href="https://github.com/feross/buffer/issues/79" rel="nofollow" title="" class="ext-link">“buffer”モジュールの最近のバグ</a>を使うことにします。私はこのプロジェクトではほとんど何の経験もないのですが、このバグを1時間で解決しました。</p><p>私でさえ経験の無いプロジェクトでバグを修正できるのですから、あなたにもできますよ。</p><p><a href="https://github.com/feross/buffer" rel="nofollow" title="" class="ext-link">“buffer”</a>とは、ブラウザ用Node.jsの<a href="https://nodejs.org/api/buffer.html" rel="nofollow" title="" class="ext-link">Buffer API</a>の、JavaScriptのインプリメンテーションです。これを使うことで、APIが存在しないブラウザでも、<code>Buffer</code>オブジェクトに依存するNode.jsモジュールを使えるようになります。（そのかわりにブラウザには、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" rel="nofollow" title="" class="ext-link">Unit8Array</a>や<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" rel="nofollow" title="" class="ext-link">ArrayBuffer</a>のような、バイナリデータを扱う他のAPIがあります）。</p><p>まるで神秘的で難解なライブラリのように思えるかもしれませんが、実際のところ”buffer”は<a href="https://www.npmjs.com/package/buffer" rel="nofollow" title="" class="ext-link">1カ月に200万回</a>近くダウンロードされています。というのも、<a href="http://browserify.org/" rel="nofollow" title="" class="ext-link">Browserify</a>と<a href="http://webpack.github.io/" rel="nofollow" title="" class="ext-link">Webpack</a>どちらに対しても必須の依存パッケージだからです。しかし、そんなに知名度の高いプロジェクトであるのにもかかわらず、3カ月以上も解決されずに長引いている<a href="https://github.com/feross/buffer/issues/79" rel="nofollow" title="" class="ext-link">問題</a>があることに気が付きました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-00-01.png?w=855&amp;h=528" alt='Open bug in the "buffer" project' width="570" height="352" class="size-large wp-image-4562" originalw="570" originalh="352" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-00-01.png?w=570&amp;h=352" scale="1.5"><br>
<em>訳：<br>
[object Object]のプロパティの長さを設定できない　#79</em></p><p>9月16日<br>
Chrome<code>( 45.0.2454.85 (Official Build) (64-bit) )</code>でBuffer3.5.0が壊れます。<br>
次のような状況です。</p><p>これは、bufferが<code>.prototype.length</code>を<code>undefined</code>にセットしようとした時に起きます。ここです。<a href="https://github.com/feross/buffer/blob/master/index.js#L372" rel="nofollow" title="" class="ext-link">https://github.com/feross/buffer/blob/master/index.js#L372</a></p><p>私たちのアプリの新しいバージョンを公開しようとした際に発見しました。後で、ちょっとしたデモをしたいと思います。</p><p>（私はbrowserify 11.11.0で<code>buffer@3.5.0</code>を使用しています)<br>
</p><p>このバグは9月に公開されましたが、3カ月たった今でもそのままになっています。</p><p>これはささやかな障害というわけではありませんし、”buffer”がある特定のブラウザ（特にChrome 43+）やある特定のビルドステップ（特に<a href="http://babeljs.io/" rel="nofollow" title="" class="ext-link">Babel</a>でエラーになってしまう現象を引き起こす致命的なバグです。多くの人が、この問題を確認しにスレッドを閲覧しました（”+1″するか、”同じ状況が起きています”と報告するなど）。プロジェクトに特化したWebpackのコンフィギュレーションを使って作業するという回避策を提案する人も何人かいました。しかし、修正する人は誰もいませんでした。</p><p>そこで私は、このバグに挑戦してみようと決心しました。ちょっと見たところ、皆が言うほどには難しくないように思えたからです。また、なじみのないコードベースでバグを修正するのはいい経験になるだろうし、どうやって解決したかを記録しようと思ったからです。</p><p><em>注：公平のために言いますと、私は以前、”buffer”に<a href="https://github.com/feross/buffer/pull/70" rel="nofollow" title="" class="ext-link">コントリビュート</a> <a href="https://github.com/feross/buffer/pull/72" rel="nofollow" title="" class="ext-link">したこと</a>があります。ただし、とてもささやかなプルリクエストでしたし、私はこのプロジェクトの経験は無いに等しいと思っています。このバグを取り上げるにあたり、プロジェクトに関していろいろ思い出すために、基本的にゼロから始めなければなりませんでした。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup></em></p><p>バグに取り掛かる前に、コードを構築してテストを実行できるかどうか確認する必要がありました。これは重要なステップです。というのも、先に述べましたが、プロジェクトのテストが自分のマシンの現在のセットアップで実行できることを確認しなければならないからです。</p><p>例を挙げてみましょう。このプロジェクトにおける、正しいバージョンのNodeを使っているか？　<a href="http://npmjs.com/" rel="nofollow" title="" class="ext-link">npm</a>のバージョンは正しいか？インストールが必要なグローバルな依存パッケージ（LinterまたはTest Runnerのような）はあるか？　稼動環境はMacか、Linuxか、Windowsか？　もしこうしたことを確認せずに、現状のマシンのままでバグを修正しようとすれば、始める前から落とし穴に落ちて終わってしまいます。</p><p><em>注：以下のステップは、JavaScriptに特化していますが、他の言語にも適用できます。典型的なパッケージマネージャやLinterやTest Runnerなど、使っている言語の慣習を知っておくと役に立ちます。</em></p><p>最初にコードをcloneしました。通常、プロジェクトのトップにGitのURLが記載されていて、コミット権が無くてもHTTPSを使えるようになっています。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-10-331.png?w=855&amp;h=527" alt="Where to find the Git URL in the Github UI" width="570" height="351" class="aligncenter size-large wp-image-4410" originalw="570" originalh="351" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-10-331.png?w=570&amp;h=351" scale="1.5"></p><p><em>訳:このURLをコピー＆ペーストします。プロジェクトの管理者でない場合は、このHTTPSを使います。</em></p><p>URLが分かったら、自分の端末に（私の場合は<a href="http://iterm2.com/" rel="nofollow" title="" class="ext-link">iTerm</a>です）、次のように入力します。</p><p>これで自分のマシンに、リモートGitリポジトリの<code>master</code>ブランチを表すコードが複製されました。</p><p>コードを入手できたら、テスト方法を確認する必要があります。<br>
通常この情報は<code>README.md</code>で提供されていますが、<a href="https://github.com/feross/buffer/blob/96f9561e55019fd530e48886366eda74449bf002/README.md" rel="nofollow" title="" class="ext-link">今回の場合は</a>“test”という単語で検索したところ、何も見つけられませんでした。<code>CONTRIBUTING.md</code>もチェックしましたが（コントリビュータに詳細を知らせるドキュメントです）、このプロジェクトには無いようでした。</p><p>今回は、言語とエコシステムの知識が役に立つケースです。たまたま、多くのJavaScriptのプロジェクトが<a href="http://npmjs.com/" rel="nofollow" title="" class="ext-link">npm</a>で配布されていて、以下のように入力すればインストールしてテストできると分かりました。</p><p>残念ながら、このケースでは、上記のステップはエラーとなりました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-40-20.png?w=855&amp;h=593" alt="Test output showing Saucelabs failure" width="570" height="395" class="aligncenter size-large wp-image-4435" originalw="570" originalh="395" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-40-20.png?w=570&amp;h=395" scale="1.5"><br>
しかしここで、メッセージの最も重要な箇所に気が付きました。以下の部分です。</p><p>これを読むと、このプロジェクトはブラウザの自動テストを実行する際<a href="https://github.com/defunctzombie/zuul" rel="nofollow" title="" class="ext-link">Zuul</a>と<a href="http://saucelabs.com/" rel="nofollow" title="" class="ext-link">Saucelabs</a>を使っていることが分かりました。Saucelabsはブラウザのリモートテストサービスですが、私は、環境変数で定義されたSaucelabsのユーザ名やパスワードは持っていませんでした。そのため、テストが実行できなかったのです。</p><p>さらに言いますと、私は今回のケースでSaucelabsを使いたくありませんでした。ただ単に、自分のマシンの自分のブラウザでテストを実行したいだけなのです。そこで、どうしたら実現できるのか考えました。</p><p>幸運なことに、多くのJavaScriptのプロジェクトでは、<code>package.json</code>のファイルを調べて、<code>"scripts"</code>セクションには他にどんなコマンドがあるのか見ることができます。今回は、<code>package.json</code>の中で、以下のものを見つけました。</p><p>なるほど、　<code>test-browser-local</code>ですか。これならうまくいきそうです。<br>
そこで、以下のように実行しました。</p><p>そして今度は以下のようなアウトプットになりました。</p><p>ChromeでこのURLを開くと、テスト全てがうまくいったと思われるUIがありました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-44-53.png?w=855&amp;h=767" alt="tests passing in Chrome" width="570" height="511" class="aligncenter size-large wp-image-4451" originalw="570" originalh="511" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-44-53.png?w=570&amp;h=511" scale="1.5"><br>
やった！　成功です！　この時点でようやく、自分のマシンでビルドしてコードをテストできたと確信しました。</p><p><em>注：もし、”単にプロジェクトをテストするために、こんなにいろいろ調べる必要はないのに”と思っているとしたら、それは正しいと言えます。私はまた、テストの過程をドキュメント化する<a href="https://github.com/feross/buffer/pull/89" rel="nofollow" title="" class="ext-link">プルリクエストをオープン</a>するのにも時間をかけました。これは、新規コントリビュータがプロジェクトに対して行える、最も価値のある貢献の1つです。というのも、ベテランのコントリビュータはワークフローにすっかり慣れているので、新しい参加者向けの基本的な説明を記載するのを忘れてしまうことがあるからです。</em></p><p>次に、問題が再現できたことを確かめるため、エラーになるテストを見つけます（この工程は<a href="https://ja.wikipedia.org/wiki/%E3%83%86%E3%82%B9%E3%83%88%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA" rel="nofollow" title="" class="ext-link">テスト駆動開発</a>の肝であり、多くのオープンソースプロジェクトの心臓部です）。</p><p>今回のケースでは、<a href="https://github.com/feross/buffer/issues/79" rel="nofollow" title="" class="ext-link">Githubのスレッド</a>を読み、問題の原因を理解しようと試みました。そこでの議論によると、あるツールのコンビネーション（特にBabelとWebpack）によってJavaScriptモジュールが<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="nofollow" title="" class="ext-link">Strictモード</a>での実行を強制されているのが、その原因のようでした。”buffer”は明らかにStrictモードでは記述されていないのですが、Chrome 43+では、ブラウザのStrictモードの解釈のためにエラーが起こるのです。</p><p>この情報を元に、単純に<code>'use strict'</code>を<code>index.js</code>ファイルの先頭に追加すれば問題を再現できると考えました（<code>package.json</code>の<code>"main"</code>フィールドをチェックすることで、<code>index.js</code>がソースファイルだと分かりました。このプロジェクトにおいて唯一最上位にあるJavaSrciptファイルなので、ほぼ明らかでしたが）。</p><p>そこで<code>'use strict'</code>を<code>index.js</code>の先頭に追加しました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-58-11.png?w=855&amp;h=756" alt='adding "use strict" to index.js' width="570" height="504" class="aligncenter size-large wp-image-4452" originalw="570" originalh="504" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-58-11.png?w=570&amp;h=504" scale="1.5"><br>
驚くことに、Zuulテストページを再度読み込むと、皆が話題にしていたバグが即座に現れました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-59-35.png?w=855&amp;h=585" alt="test failure" width="570" height="390" class="aligncenter size-large wp-image-4453" originalw="570" originalh="390" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-13-59-35.png?w=570&amp;h=390" scale="1.5"><br>
<em>注釈:Githubに報告されていたのと全く同じエラー</em></p><p>（こうなるとテストが実行さえされないことに注意しましょう。ページは緑色でなく黄色で、”失敗 0、通過 0″と表示します。）</p><p>この時点で、プロジェクト用のテストスイートを利用してバグの再現はできました。これは次の理由から<em>重要なステップ</em>と言えます。</p><p>幸運なことにここでは、問題を見つけ出すのに十分な既存のテストがありました。しかし時には、問題を再現するためにテストを自分で直すことも必要でしょう。その場合、私のワークフローはたいてい下記の通りです。</p><p>しかし、今回の特定のバグについてはエラーになるテストが既に分かっていますので、次に進みましょう。</p><p>残念ながら、スタックトレースからはあまりヒントとなる情報は得られません。Zuulがコード変換の際にコードを切り刻んでしまうのか、行番号すらめちゃくちゃです。これは使いものになりません。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-14-02-33.png?w=855&amp;h=585" alt="unhelpful stacktrace" width="570" height="390" class="aligncenter size-large wp-image-4454" originalw="570" originalh="390" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-14-02-33.png?w=570&amp;h=390" scale="1.5"><br>
ここで、私は少し迷いましたが、次のように、筋道立てて考えるよう努めました。：オブジェクトの<code>length</code>というプロパティは、setterでなくgetterのみをサポートしているが、それに対する代入によりエラーが起きている。<code>foo.length = bar</code>のような動きをする場所があるだろうか？　コードの中の<code>.length =</code>という例を探してみよう。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/out.png?w=570" alt='searching the code for instances of "length"' class="aligncenter size-full wp-image-4455" originalw="570" width="552" height="405" scale="1.5"><br>
<code>.length</code>の設定されている場所が3カ所見つかりました。最も面白いのは最初のものです。なぜなら、<code>Buffer.TYPED_ARRAY_SUPPORT</code>上の条件<code>if/else</code>にラップされているからです。<code>TYPED_ARRAY_SUPPORT</code>が意味するところは分かりませんが、<code>.length</code>への代入はある1つのケースでは制限されているが、他の2つでは制限されていない、という勘がすぐに働きました。</p><p><code>TYPED_ARRAY_SUPPORT</code>が何であるかを見極めようとしたところ、次のコードに行き当たりました。</p><p>なるほど、つまり<code>TYPED_ARRAY_SUPPORT</code>（これが何であれ）によって、<code>Buffer</code>オブジェクト（<code>index.js</code>が出力するもの）のプロトタイプを、ビルトインの<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" rel="nofollow" title="" class="ext-link">Uint8Array</a>のプロトタイプと同様に設定するようです。ならば、場合によっては、同じ<code>prototype.length</code>を自分で設定しているはずです。ChromeがStrictモードの内蔵オブジェクトのプロトタイプを修正させないようにしているのでしょうか。バグの仮説が具体化し始めました。</p><p>そこで非常に簡単な修正をしてみました。<code>length</code>が代入されている2つのケースを取り、両方に<code>if (!Buffer.TYPED_ARRAY_SUPPORT)</code>の条件を付けました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/out1.png?w=570" alt="wrapping the offending code in an if () check" class="aligncenter size-full wp-image-4456" originalw="570" width="384" height="182" scale="1.5"><br>
（また、それが何を行っているのかは定かではありませんでしたが<code>.parent</code>への代入も条件分岐にラップしました。<code>.length</code>への代入に関係しているように見えたからです）</p><p>それからブラウザテストを再度読み込むと、突然全84テストが通ったのです。明らかに、上記の調整が機能しています。</p><p>ここまで来ると、自分をほめ、勝利を宣言したい誘惑にかられるでしょう。しかし、多くのブラウザライブラリにおいては、修正が完了したと言えるのは、広範囲の様々なブラウザのテストを通過してからです。今回のケースでは、<code>Buffer.TYPED_ARRAY_SUPPORT</code>の修正がChromeではうまくいったようですが、他のブラウザではどうでしょうか？</p><p>ラップトップにインストールされた全てのブラウザ（私はMacを使っているので、IEやAndroid以外）で自ら1つずつテストするよりシンプルな方法は、プロジェクトでプルリクエストをオープンすることです。活発に運営されているオープンソースの多くはプルリクエストを含む全てのコミットに自動的にテストを実行します。これはプルリクエストのプロセスで重要な点です。コントリビュータは、パッチがテストを壊すことはないと知れば安心できるからです。</p><p>プロジェクトのREADMEの中でSaucelabsバッジを見たことで、実際に”buffer”は数多くのブラウザの自動テストを使ったのだと推察できました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-18-03-26.png?w=855&amp;h=312" alt='The Saucelabs badge in the "buffer" README.' width="570" height="208" class="size-large wp-image-4533" originalw="570" originalh="208" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-18-03-26.png?w=570&amp;h=208" scale="1.5"></p><p>Saucelabsバッジが、様々なブラウザでのテストの現状を示しています。</p><p>しかし、プルリクエストをオープンする前に、自分のコードが<a href="https://github.com/feross/buffer/blob/96f9561e55019fd530e48886366eda74449bf002/README.md#javascript-standard-style" rel="nofollow" title="" class="ext-link">プロジェクトスタイル</a>、今回は、どこか大胆な名称のスタイル、<a href="https://github.com/feross/standard" rel="nofollow" title="" class="ext-link">Standard</a>に沿っているかをチェックしなければなりません。個人的にはStandardは好きではありませんが（だから…と言えればいいのですが）、これは私のプロジェクトではありませんから、古くからの助言<a href="https://en.wikipedia.org/wiki/When_in_Rome" rel="nofollow" title="" class="ext-link">「郷に入っては郷に従え」</a>に従います。</p><p>コードがStandardのスタイルに準拠しているかをチェックするには、ただ次のコードを走らせます。</p><p>これに通れば、プロジェクトのスタイルガイドに沿っていることが分かります。</p><p>次に、修正をコミットするため、Gitブランチを別に作成します。それをIssue Numberの<code>79</code>と呼ぶことにします。ブランチには問題にちなむ名前を付けるのが私の習慣です。</p><p>それから、プロジェクトを分離し、<a href="https://hub.github.com/" rel="nofollow" title="" class="ext-link">hub</a>を使ってプルリクエストを送信します。これはGithub仕様のツールと連携した便利な<code>git</code>ラッパーです。</p><p>ここで、<code>hub</code>はプルリクエストを作成し、ブラウザで閲覧できるようURLを表示します。少し待つとテストが完了し、緑色のチェックマークが現れました。全てのブラウザのテストに通りました！</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-12-02.png?w=855&amp;h=576" alt="Github UI showing the test results" width="570" height="384" class="aligncenter size-large wp-image-4457" originalw="570" originalh="384" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-12-02.png?w=570&amp;h=384" scale="1.5"><br>
<em>注釈：テスト通過！</em></p><p>テストに失敗し、その原因が分からない場合は、”Show all checks”リンク、”Details”の順にクリックすれば、失敗したテストを確認できます。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-12-11.png?w=855&amp;h=324" alt="Github UI showing all checks" width="570" height="216" class="aligncenter size-large wp-image-4458" originalw="570" originalh="216" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-12-11.png?w=570&amp;h=216" scale="1.5"><br>
<em>注釈：テストの詳細を表示</em></p><p>この場合、それが<a href="https://travis-ci.org/" rel="nofollow" title="" class="ext-link">Travis CI</a>によって行われたテストであることが分かり、テストの全ログのアウトプットも閲覧できました。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-12-301.png?w=855&amp;h=566" alt="Travis CI UI" width="570" height="377" class="aligncenter size-large wp-image-4460" originalw="570" originalh="377" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-12-301.png?w=570&amp;h=377" scale="1.5"><br>
安心なことに、複数のブラウザでテストが行われたことも明白です。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-13-01.png?w=855&amp;h=572" alt="Travis CI output" width="570" height="381" class="aligncenter size-large wp-image-4461" originalw="570" originalh="381" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-11-13-01.png?w=570&amp;h=381" scale="1.5"><br>
（テストが通らなかった場合、そのブランチにコミットをプッシュし続けると、Travisは各コミットに対して再度テストを走らせます。）</p><p>この時点で、私のプルリクエストはマージに足る候補になったと確信できます。それがコードにふるまいの変更をもたらすとしても（非Strictモードではなく、Strictモードを使用して）、反論が来ることはないと予想しました。なぜならほとんどのJavaScriptプロジェクトはひとまずStrictモードを好むからです。また、Strictのコードは非Strict環境でも走りますが、その逆は不可だからです。そのためコードを非Strictにする実際的な理由はありません。</p><p>ここで、このように思うかもしれません。「とりあえず修正コードがあるのだから、今<code>'use strict'</code>を削除してもいいのでは？」。確かに、それはあり得ます。しかし、誰かが非Strictで行うようなやり方でコードを変更すると自動テストはそれを感知できず、将来プロジェクトが後退する可能性が常にあるのです。将来の後退を防ぐことは重要です。<a href="https://twitter.com/daleharvey/" rel="nofollow" title="" class="ext-link">Dale Harvey</a>が次のようなことを言っていました。</p><p>少々誇大妄想的だと思うかもしれませんが、私は、オープンソースコントリビュータとしてのキャリアを通して、それが真であると納得させられる場面を何度も何度も見てきました。テストしなければ、結局は誰かがコードをコミットし（恐らく、見た目にはコードベースには関係なさそうな部分で）、テストされていないコードはひっそりと障害を起こし始めるでしょう。</p><p>いずれにしても、レビュー・マージ担当者は私の選択に合意したようでした。彼はそのコードをマージし、数日のうちに新バージョンを公開したからです。そしてこの修正によって”buffer”プロジェクトは、公開中のプルリクエスト　0、公開中の問題　0になったのです！</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-25-10-39-09.png?w=855&amp;h=269" alt="PR was merged!" width="570" height="179" class="size-large wp-image-4553" originalw="570" originalh="179" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-25-10-39-09.png?w=570&amp;h=179" scale="1.5"><br>
やったー、プルリクエストがマージされました！</p><p>このブログ記事で、オープンソースプロジェクトにおけるバグ修正が不可能でも特別難しいわけでもないことが分かってもらえたなら嬉しいです。オープンソースプロジェクトは他のコードとは異なるルールで動いている傾向があります（より慎重にテストが行われ、バグもオープンにされている、等）。しかし、個人やクローズドソースのプロジェクトにコードをコミットしたことがあるなら、同じスキルをオープンソースの世界に適用しない合理的な理由はありません。</p><p>“buffer”の件は、数多あるオープンソースのバグを残念なほど象徴していると思いました。モジュールそのものが大きな依存の対象であり、バグは非常に目立ちますが、多くの人がそれに注力しているにも関わらず数か月間、未解決のままでした。大勢の仲間が一時しのぎの回避策を提案しましたが、問題を根本から修正しようと試みる人はいなかったのです。</p><p>恐らく、コントリビュータである<a href="https://github.com/feross/" rel="nofollow" title="" class="ext-link">Feross Aboukhadijeh</a>が自ら問題を解決するだろうという期待があったのだろうと思います。しかし彼のGithubページを見れば、彼が<em>多くの</em>プロジェクトをメンテナンスしていることが分かります。私自身は、ほんの短時間だけ寄与しているオープンソースオーサーですが、1日に100件のGithub通知を受け取るのは普通です。Ferossがそれよりもはるかに多くを受信していることは間違いありません。</p><p>ですからもし、Ferossが全てを捨て、ある特定のバグに取り組んでくれると思っているなら、彼の作業リストにはより優先順位の高いタスクが山ほどあることを知ったほうがよいでしょう。彼はWebpackやBabelさえ使っていないのではないかと想像します（Browserifyを好んでいるようなので）。つまり、彼はこのバグ修正に大した価値があるとは考えていないのです。また、誤って非StrictコードをStrict環境で実行しようとしているのを見ると、これが実際にWebpackやBabelのバグであることも疑わしいのです。</p><p>私の結論、バグがあなたに個人的に影響を与えるなら、そしてあなたがそれに遭遇したなら、<em>あなた</em>はそれを修正する最適なポジションにいるということです。作業時間が限られ、あなたの問題にさして関心のないプロジェクトのメンテナンス担当者に、あなたの説明を元にバグを再現し、修正するように依頼するのは、問題解決からほど遠い方法です。</p><p>ですから次にオープンソースプロジェクトでバグを見つけ、新しい議題をオープン（あるいは、”+1″、”同じ状況が起きています”と報告）したいと思った時は、代わりに自分で修正することを考えてください。問題を再現できるだけでも、常に新しい問題を選別し、長たらしいバグレポートの解読に努めているプロジェクトのコントリビュータたちには大きな助けになります。</p><p>オープンソースソフトウェアは天から与えられるマナではありません。何もしなくても、コードベースに魔法のように現れる自動的更新のリソースでもありません。断じて違います。<strong>オープンソースソフトウェアは人間の勤労と知恵に支えられた不断のプロダクト</strong>なのであり、その存続にはコミュニティの力が必要です。</p><p>貢献の非対称なプロジェクト（例えば、コントリビュータよりも利益を得ている人のほうが多いプロジェクト）は、結局は終末に向かい、コントリビュータの燃え尽きによって死に絶えてしまいます。あなたはこの状況を防ぐことができるのです。同時に、ただプルリクエストをオープンすることで、コーダー仲間を助けることができ、個人的な満足感も得られるでしょう。</p><p><img src="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-16-35-06.png?w=855&amp;h=326" alt="a job well done" width="570" height="217" class="size-large wp-image-4463" originalw="570" originalh="217" src-orig="https://nolanwlawson.files.wordpress.com/2015/12/screenshot-2015-12-24-16-35-06.png?w=570&amp;h=217" scale="1.5"><br>
このようなコメントをもらうだけで良い1日になります。</p><p>利益を得ているオープンソースプロジェクトがあるなら、プルリクエストというギフトをコントリビュータに贈ることを考えてください。彼らのGithubページをチェックして、未解決の問題のリストを開き、興味を引くものがないか探してみてください。バグ修正を完了できなくても、説明を改良したり、テストプロセスを容易にしたりすることができるかもしれません。</p><p>オープンソースソフトウェアに貢献する方法は、大小問わず、たくさんあります。しかしまず試してみないことには、それがいかに簡単かは分からないのです。</p>
