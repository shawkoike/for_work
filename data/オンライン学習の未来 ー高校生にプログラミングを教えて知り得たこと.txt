<p><a href="http://christinacacioppo.com/blog/learning-online" rel="nofollow" title="" class="ext-link">Learning Online</a> by <a href="https://twitter.com/christinacaci" rel="nofollow" title="" class="ext-link">Christina Cacioppo</a></p><p>本投稿で紹介されているツールに興味のある方 <a href="mailto:c@christinacacioppo.com">Email me!</a> までご連絡下さい。</p><p>学校で習うような物事をインターネット上で学ぶことは、将来的には不可避なことのように思えますが、現状において、多くの人々はオンラインで効率的に学習をしているとは言い難いようです。Sebastian Thrunも、数カ月前のFast Companyのインタビューでこのことを<a href="http://www.fastcompany.com/3021473/udacity-sebastian-thrun-uphill-climb" rel="nofollow" title="" class="ext-link">認めています</a>。私はこの夏、高校生に教える傍らソフトウェアを作り、コンピュータがどの程度、人々の学習の役に立つかを検証してみました。</p><p>この投稿ではその夏について、つまり生徒がどのように学び、私が作ったソフトウェアがどの程度、彼らの学習の役に立ったか、何がうまくいき、何がうまくいかなかったか、そして次に目指すべきところはどこなのか、について書いていきたいと思います。</p><p>今回の検証の実践の場として、<a href="http://apcentral.collegeboard.com/apc/public/courses/teachers_corner/4483.html" rel="nofollow" title="" class="ext-link">AP（アドバンスト・プレースメント：成績上位の高校生が受講可能な大学の科目）コンピュータサイエンス</a>の講義を選びました。プログラミングは今なお教えるのが非常に難しい科目ですし、プログラミングであれば、例えば地理などに比べると、コンピュータ支援による教育も自然に受け入れられるはずだからです。それにプログラミングは初心者にとって、不必要に不親切でややこしいですからね。</p><p>APコンピュータサイエンスは8カ月にわたる講義で、個人講義やGoogleのHangout<br>
を通した対面講義の場合だと約20時間が必要となります。私は天才ではないですし、決定版と言えるような教育法を持ち合わせているわけでもありません。どうしたって学習には時間がかかります。講義において、私が作ったソフトウェアに一定の効果はあったものの（ソフトウェアが改善するにつれて、生徒に対して説明やデバッグ、それに軌道修正の助言をする機会は減っていきました）、それでも生徒たちは都度現れる新しい問題に苦戦しながら学習を続けていました。</p><p>College Boardは、APコンピュータサイエンスの講義と学力試験のための標準カリキュラムを提供しています。試験が高得点の場合、公立大学での単位が認定されるため、その分だけ大学在学中の必要単位が少なくて済み、学費を減らせる仕組みです。私立の大学では単位にはならないものの、成績優秀者として認めてもらえます。</p><p>APコンピュータサイエンスのカリキュラムは標準化されていますが、大規模なものではありません。Javaのオブジェクト指向プログラミングの導入部で、その範囲はArrayList<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>までです。平凡で、似たようなカリキュラムや教材、実習はオンライン上に散見されます。私は、それらの中から個人的にいいと思った教材をまとめて、フリーのオープンソースレポジトリとしてまとめました。<a href="http://teachapcs.com/" rel="nofollow" title="" class="ext-link">Teach APCS</a>で公開しているので、ぜひご覧ください。</p><p>Javaは初心者にとっては面倒な言語です。その構文は間が抜けていて、見た目は外国語のようであり、必要以上にグラフィックを単調にし、処理が重くなるJava仮想マシンを使わなければなりません。それでもAP試験で出題される言語であることから、多くの学校で教えられています。初心者にとっては、何も学ばないよりはマシといったところでしょうか。</p><p>プログラミング言語を取り巻く状況において、生徒たちにとって最も難しいのはJava自体ではなく英語のパズルを解くということでしょう。多くの場合、生徒たちはロジックを適当に扱い、この段階をスキップします。しかし、それではうまくいきません。いったんJavaのことは忘れて、2つの質問”やろうとしていることを英語で表現するとどうなるか”、”それを5歳の子供に向かって説明するには何と言えばいいか”を投げかけてみることが大切です。彼らがその質問を説明できたら（その間は、ワードスクランブルのように全ての<a href="http://teachapcs.com/exercise/scramble-words" rel="nofollow" title="" class="ext-link">文字</a>を精査し、前後の文字を入れ替えてみたりするのも手です）、Javaは容易に出来上がります<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>。</p><p>APコンピュータサイエンスの試験は、高校生にとってはご褒美のようなものですが、美味しいものではないでしょう。講義を受ける生徒は、おおむね2パターンに分けられます。一方はJava以外の言語である程度のプログラミング経験がある生徒、もう一方はコンピュータの理解は乏しいものの、APの修了資格が欲しい生徒です。</p><p>私は講義を始める前に、”何でも可能なら何を作りたいか”ということを生徒たちに聞いてみました。</p><p>この中の一部のアイデアは、他のものに比べるといくらかはソフトウェア向きと言えるでしょう。ただ、何より驚いたのは、ほとんどの回答が畑違いな点です。”Xが出来るアプリケーションを作るのが夢”だとか”Yのホームページをずっと作りたいと思っていた”というような回答は見当たりません。今日の言語学習ツールは、具体的なアプリケーションやサイトを作ることによって言語を習得するものが多いのですが、講義に参加した高校生たちは、プログラミングで自分たちに何が出来るのかといったことも分かっていないようでした。プログラミングって楽しいかもしれない、という程度の感覚なのかもしれません。</p><p>“プログラミングしなさい。さもないとされてしまう”というゾッとするようなレトリックが、一部の言語学習の取り組みにおいて存在しますが、それはあまりにも馬鹿らしいことです。やりたいことがなければ、プログラミングなんて学ぶ必要はありません。コンピュータは、言わば100年前の電気<sup id="fnref:3"><a href="#fn:3" class="footnote-ref">3</a></sup>のようなもので、決して人を襲うものではないのです。より現実的な観点から考えると、何であれ新しいことを学ぶのには困難が伴うもので、罪悪感（あの時、勉強していれば…）のような動機だけでは不十分でしょう。</p><p>ただし、私は学習意欲をそごうとしているわけではありません。ソフトウェアをプログラミングすることは、すばらしい体験となり得ます。そして私が特に強調したいのは、その気もなりさえすれば、誰にだってそれは可能だということです。</p><p>総じて、生徒たちの学習速度には驚かされるものがありました。ただ、微分積分をまだ学習していない生徒の方が、習熟が速いように思えました。これは別段、不思議なことではありません。数学の関数や変数とコンピュータサイエンスは、関連しているものの全く同じものではないため、そういった違いをスルーできる生徒は、その点について考えなくて済むからです。</p><p>夏の終わり頃になり顕著になったことは、多くのミスをする生徒の伸びが目立ってきたことです。彼らはいろんなことにチャレンジし、間違ったコードをコンパイルし、多くのランタイムエラーを発生させ、REPLを激しく混乱させました。しかし、失敗を繰り返すことで頭の中でより優れたイメージを持てるようになります。そのためコードを実行したときにどのように動作するか予測することができるのです（<a href="https://www.youtube.com/watch?v=vogFSIxprUo" rel="nofollow" title="" class="ext-link">Xcode Playgrounds</a>や<a href="http://www.lighttable.com/" rel="nofollow" title="" class="ext-link">LightTable</a>といった環境で成功した場合に、全てのプログラムを頭の中でトレースするのは隠し芸的ですが、今日では必要な能力です）。生徒は論理的方法で実験を行うことで、コードを用いた問題解決において自信を持つようになります。</p><p>当てもなく書き換えを続けることは（つまりは”適当に打ち込んでいけば、いつかうまく動作するだろう”ということ）まったくためにならず、やる気をなくさせるような行為です。プログラミングのそれぞれのコードがどのように結びついているかといった知識を持たずして、コンピュータを理解することは出来ません。いくらやる気がある人でも、現代のプログラミングのツールを使って当てもなく自由に学ぼうとすれば、すぐにイライラしてしまうでしょう。</p><p>まずは2時間に及ぶ変数を用いないプリミティブ型のみを扱ったREPLの指導から始めました。プログラミングの土台となる考え方（”なぜ分割がおかしいのか？　いつ乱数ジェネレータを起動し、どれくらい待てば乱数を得られるのか？　実際substringメソッドがどのように動作するのか？”）を身につけるためです。</p><p>REPLはツールを調査するのに便利な環境です。理由の1つとしては、新しいことに挑戦するのが簡単で、失敗しても何も壊したりすることなくさほど時間もかからないからです。REPLのプロンプトは講義によって洗練され、新たなツールを導入し、入力すべきことを提示します。リターンキーを押すと実験が始まり、すぐにフィードバックが帰ってきます。生徒はあっという間にそれがコンピュータにどう作用するかといったことを学び始めるのです。これは、私が作った自動化されたプロンプトです。<br>
Standalone<br>
 
	<!-- Begin Video.js -->
	<video id="example_video_id_403616451" class="video-js vjs-default-skin" width="640" height="264" controls preload="none" data-setup="[]">
		<source src="http://christinacacioppo.com/videos/standalone.mp4" type="video/mp4"></source>
		
		
	</video>
	<!-- End Video.js -->
</p><p>REPLには限界がありました。誰もその中では全てのプログラムを再現できなかったのです。そのため我々はエディタ上での単純なスクリプトの記述に移行しました。使用したのは彼らがREPLで学んだツールで構築されたコードスニペットです。下記のようなものです。</p><p>これは理解できるようにgraphicsクラスや視覚的言語、またはステップスルーの評価といったものを用いずにJavaで書かれています。実行前は、このスニペットはmain メソッドやクラスにラップされており、これが唯一の新しい部分です。今回の場合は”while”がそうです。</p><p>新たなプログラマにこのコードが何をするか聞いてみると、おそらくこう答えるでしょう。「財布の中にある全てのお金を使い、もうお金は残っていないと伝える」と。また、何回25ドルを使うかと聞くと、4回と答えるでしょう。実際に、スニペットはこのように出力します。</p><p>ここでそのプログラマに、25ドルを使ったらすぐに財布の中身を出力するようコードを改造してもらいます。</p><p>コードを少しずつ変更していくにつれて、生徒は”while”ツールにどんどん慣れていきます。このように少しずつ教えていくことでツールの構築やそれらを使用する技術を学ぶことが出来るのです。</p><p>我々は知っているツールでパズルを解いていきました。生徒は<a href="http://teachapcs.com/exercise/magic-8-ball" rel="nofollow" title="" class="ext-link">Magic 8 Balls</a>や<a href="http://teachapcs.com/exercise/bitcoin" rel="nofollow" title="" class="ext-link">Bitcoin</a>、<a href="https://github.com/DuncanUszkay/Hangman/network" rel="nofollow" title="" class="ext-link">Hangman AIｓ</a>、<a href="http://teachapcs.com/exercise/chattering-chatterbot" rel="nofollow" title="" class="ext-link">Chatterbots</a><a href="http://teachapcs.com/exercises" rel="nofollow" title="" class="ext-link">など</a>を作成しました。これらは習得したツールを利用して彼ら自身の力で作り上げました。ちゃんと動作もし、大成功でした。これは生徒が<a href="http://teachapcs.com/exercise/fizzbuzz" rel="nofollow" title="" class="ext-link">FizzBuzz</a>を解く様子を撮った高速ビデオです。<br>
Fizzbuzz<br>
 
	<!-- Begin Video.js -->
	<video id="example_video_id_862677673" class="video-js vjs-default-skin" width="640" height="264" controls preload="none" data-setup="[]">
		<source src="http://christinacacioppo.com/videos/fizzbuzz.mp4" type="video/mp4"></source>
		
		
	</video>
	<!-- End Video.js -->
</p><p>初めの頃、コンピュータの概念はその能力を使って人間の知力を向上させるためのものでした。しかし、一部のコード学習の取り組みはあまり初心者向けではないようでした。問題解決よりも入力することに重きが置かれ、その”問題”というのは変数の名前や値のスワップを扱うものでした。例えば誰かに単一行のテキストボックス内におけるテキストの再入力や編集をお願いしてみてください。彼らは素早くこなすでしょうが、その作業自体は退屈なものです。しかし、ツールを利用してパズルを解くようにお願いすれば、学習は価値のあるものになるでしょう。それがFizzBuzzのような自明なものであっても例外ではありません。</p><p>自転車に乗ったことのない初心者は補助輪を欲しがりません。求めるのは乗ることができる自転車です。これと似たように、効果的な初心者用のエディタはないと思います。あるのはプログラマが使用し、初心者でも理解できるエディタです。</p><p>残念なことにほとんどのエディタはあまり良い性能ではなく使用法も簡単ではありません。それらの標準的なインターフェースはコマンドラインから借りてきたもので、使いやすくも寛大でもありません。そして何がコードとテキストを区別しているのか教えてもくれません。実際に必要とされるのは高性能で使いやすいエディタです。</p><p>誰でも使いやすく、学習者でも分かりやすいエディタをいくつか紹介します。これら全てのデモは私が作った環境で実行しますが、同じ原理をあらゆる所で適用することが出来るでしょう。</p><p>Snippets<br>
 
	<!-- Begin Video.js -->
	<video id="example_video_id_1175401138" class="video-js vjs-default-skin" width="640" height="264" controls preload="none" data-setup="[]">
		<source src="http://christinacacioppo.com/videos/snippets.mp4" type="video/mp4"></source>
		
		
	</video>
	<!-- End Video.js -->
</p><p>すぐに必要なツールを見つけ出せます。それらは種類別ではなく動作別にグループ分けされています。なぜならプログラムを組む上での考え方に近いからです。</p><p>見て分かるようにクリックするとサンプルテキストがエディタに挿入されます。（オートコンプリートで挿入されたスニペットも同じように動作します。）プレースホルダ内のテキストは開始場所を教えてくれます。それによりどのように使用するかを知ることが出来ます。</p><p>Repl<br>
 
	<!-- Begin Video.js -->
	<video id="example_video_id_1846327426" class="video-js vjs-default-skin" width="640" height="264" controls preload="none" data-setup="[]">
		<source src="http://christinacacioppo.com/videos/repl.mp4" type="video/mp4"></source>
		
		
	</video>
	<!-- End Video.js -->
</p><p>エディタに入力するか、コードスニペットを使用すると、そのコードはREPLに読み込まれます。REPLとエディタにおける相互作用によって、より洗練されたコードが入力できるようになります。これは非常に便利で、使えるまでに待つ必要もありません。そしてこの方法で入力したコードを検査することができます。これは他の方法では不可能なことです。</p><p>Hovers<br>
 
	<!-- Begin Video.js -->
	<video id="example_video_id_362200247" class="video-js vjs-default-skin" width="640" height="264" controls preload="none" data-setup="[]">
		<source src="http://christinacacioppo.com/videos/hovers.mp4" type="video/mp4"></source>
		
		
	</video>
	<!-- End Video.js -->
</p><p>エディタにある全ての単語はマウスカーソルを当てることで説明文が表示されます。これによりコードの理解をより深められます。そのため言語の用法ではなく実際のプログラミングの構想に集中することができます。無口だったエディタが役に立つガイドに変わります。そしてそれはあまりプログラミングに馴染みのない人々にとって特に有効です。しかし、これは正式な説明とはなりません。仮にstaticメソッドについて聞いたことがないのに、それを使用しなければならなくなった場合、この機能による説明ではおそらく不十分です。ですが、膨大な難しくて混乱を招く使用法の説明を読むよりもこの機能による説明のほうが学び始めるものとしてはより有効です。</p><p>Varexplorer<br>
 
	<!-- Begin Video.js -->
	<video id="example_video_id_951640409" class="video-js vjs-default-skin" width="640" height="264" controls preload="none" data-setup="[]">
		<source src="http://christinacacioppo.com/videos/varexplorer.mp4" type="video/mp4"></source>
		
		
	</video>
	<!-- End Video.js -->
</p><p>生徒たちにとって特に厄介だった2つの概念が”変数”と”変数スコープ”です。これまでの環境では<a href="http://cs-blog.khanacademy.org/2013/09/teaching-variables-analogies-and.html" rel="nofollow" title="" class="ext-link">変数ボックス</a>や<a href="http://stackoverflow.com/questions/11820952/eclipse-ide-scope-highlighting" rel="nofollow" title="" class="ext-link">背景に色を付けたメソッド</a>を使用していましたが、私の経験上、どちらも適切ではありませんでした。恐らく、エクスプローラに変数を直接表示する方法が最も分かりやすいのではないでしょうか。そうすることで、表示されているヘッダから環境が変数と値をトラッキングでき、計算処理はコンピュータに委ねられます。</p><p>Compilerish<br>
 
	<!-- Begin Video.js -->
	<video id="example_video_id_2063663890" class="video-js vjs-default-skin" width="640" height="264" controls preload="none" data-setup="[]">
		<source src="http://christinacacioppo.com/videos/compilerish.mp4" type="video/mp4"></source>
		
		
	</video>
	<!-- End Video.js -->
</p><p>バグとエラーはその内容が理解できれば、何かと役に立ちます。理解するためには、大抵の場合コンパイラ言語から英語にテキストを解析しなければなりません。講義では、これが生徒たちにとって大きなフラストレーションになりました。”プログラムに問題があるのは分かるけど、どこがまずいのかが理解できない”と愚痴られたものです。コンパイラがコンパイラ言語を使用するのには理由がありますが、我々人間には関係のないことです。これからコンパイラを学ぼうとする初心者なら、なおさらそう思うでしょう。</p><p>クラスは最初の頃、何のためにあるのか分からなく感じるものです。そこで、誰もが理解できる例えとしてスプレッドシートを使いました。クラスがシート、その属性が列、インスタンスの構築が行への入力に相当します。例えば、これが単純な例です。</p><p>
  <a href="http://christinacacioppo.com/images/java1.png" rel="nofollow" title="" class="ext-link"><img width="400" height="290" border="0" src="http://christinacacioppo.com/images/java1.png"></a><br>
  <a href="http://christinacacioppo.com/images/spreadsheet1.png" rel="nofollow" title="" class="ext-link"><img border="0" height="auto" width="340" src="http://christinacacioppo.com/images/spreadsheet1.png"></a>
</p><p>いくつかインスタンスを作成してみました。</p><p>
  <a href="http://christinacacioppo.com/images/java2.png" rel="nofollow" title="" class="ext-link"><img width="400" height="auto" border="0" src="http://christinacacioppo.com/images/java2.png"></a><br>
  <a href="http://christinacacioppo.com/images/spreadsheet2.png" rel="nofollow" title="" class="ext-link"><img border="0" height="auto" width="340" src="http://christinacacioppo.com/images/spreadsheet2.png"></a>
</p><p>講義が回を重ね、構築が進んでくると、発想はシンプルになりました。プログラムがどのように動くかを見せ、体系的に考えるように促すと、生徒は自分の力で学ぶようになります。そして学ぶためには論理的に考え、積極的に新しいことを試し、失敗しながらその試みから立ち直る必要があります。多くのプログラミングツールはその助けになっていないのですが、本来はそうあるべきです。飲み込みの早い学習者は自力でそれを行っています。</p><p>私はオンライン教育の将来には楽観的です。科目を超えて出来ることがまだたくさんあるでしょう。オンライン教育なら生徒を夢中にさせ、好奇心をくすぐることが出来ます。夏の講義でも、生徒にパズルを解かせたことが、良い結果を生みました。しかし、これは何も新しい考えではありません。数学者でもあり発達心理学者でもあるSeymour Papert氏が名著<a href="http://www.amazon.co.jp/%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A0%E2%80%95%E5%AD%90%E4%BE%9B%E3%80%81%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC%E3%80%81%E3%81%9D%E3%81%97%E3%81%A6%E5%BC%B7%E5%8A%9B%E3%81%AA%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2-%E3%82%B7%E3%83%BC%E3%83%A2%E3%82%A2-%E3%83%91%E3%83%91%E3%83%BC%E3%83%88/dp/4624400437/ref=sr_1_2?ie=UTF8&amp;qid=1414500376&amp;sr=8-2&amp;keywords=%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A0" rel="nofollow" title="" class="ext-link">『マインドストーム—子供、コンピューター、そして強力なアイデア』</a>を出版したのは、なんと1980年の話です。しかし、この理論はさらに突き詰める余地がある気がします。この夏の講義も、そのいい機会であることが分かりました。オンライン学習はまだ黎明期にありますが、どうすればうまくいくかはすでに見えてきています。そこで講師が何をすべきかは、生徒たちが教えてくれるでしょう。</p><p>私の講義は<a href="http://girlswhocode.com/" rel="nofollow" title="" class="ext-link">Girls Who Code</a>のサマーキャンプに出席し、引き続き受講を希望した者には無償で、Craigslistで私の広告を見て連絡をしてきた者には有償で提供しました。また、<a href="http://www.tealsk12.org/" rel="nofollow" title="" class="ext-link">TEALS</a>を通じてサンフランシスコの公立高校でAP コンピュータサイエンスの授業補助も行っています。講義の一部にはJava、Pythonに関する内容が含まれますが、全て<a href="http://teachapcs.com/" rel="nofollow" title="" class="ext-link">TeachAPCS</a>の教材に準拠しています。</p>
