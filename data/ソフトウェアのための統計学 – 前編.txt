<p><a href="https://www.paypal-engineering.com/2016/04/11/statistics-for-software/" rel="nofollow" title="" class="ext-link">Statistics for Software</a> （2016-04-11） by <a href="https://twitter.com/mhashemi" rel="nofollow" title="" class="ext-link">Mahmoud Hashemi</a></p><p>Illustrations by <a href="http://twitter.com/archgame" rel="nofollow" title="" class="ext-link">Matthew Conway</a>, CC BY SA</p><p><img class="alignright wp-image-1624" src="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_stopwatch-300x252.png" alt="Software is like a watch: you want a measurement you can read and rely on." width="218" height="183" srcset="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_stopwatch-300x252.png 300w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_stopwatch-768x644.png 768w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_stopwatch-1024x859.png 1024w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_stopwatch-624x523.png 624w" sizes="(max-width: 218px) 100vw, 218px"><br>
ソフトウェア開発の原点は可能性の追求であり、不可能を可能にすることです。ひとたび<em>ソフトウェア</em>が開発されると、エンジニアは次に<em>程度</em>という課題に向き合うことになります。企業向けのソフトウェアであれば、「速度はどれくらいか」と頻繁に問われ、「信頼性はどの程度か」という点が重視されます。</p><p>ソフトウェアのパフォーマンスに関する質問に答え、さらには正しい内容を語る上で欠かせないのが統計学です。</p><p>とはいえ、統計学について多くを語れる開発者はそうはいません。まさに数学と同じで、一般的なプロジェクトで統計学が話題に上ることなどないのです。では、新規にコーディングをしたり、古いコードのメンテナンスをしたりする合間に、手が空くのは誰でしょうか？</p><p>エンジニアの方は、ぜひ時間を作ってください。近頃は、15分でも貴重な時間と言えるでしょうから、<a href="https://pinboard.in/" rel="nofollow" title="" class="ext-link">こちらの記事をブックマークに追加</a>しておいてもいいでしょう。とにかくTLDR（長文を嫌う人のための要約）を読みたいという方は、計測のセクションや、まとめまで飛んでいただいても構いません。</p><p>では、数少ない熱心な方のために説明を始めましょう。ここから本題に入り、効果的な手法を学びながら、勘に頼らないソフトウェア開発を目指していきます。価値あるシステム分析を行うには、中核となる数個の処理が大きな役割を果たします。逆に、少しのつまらないミスが原因で、プロジェクトが振り出しに戻ることもあります。この記事では応用統計学によって得られる答えを通じてソフトウェアのメンテナンスを簡易化し、今後の開発を高速化することを目標にしています。</p><p>まずは、計測や改善を行うコンポーネントを決めましょう。PayPalの場合は大抵、何百とあるHTTPサーバアプリケーションの1つを対象にします。PayPalの内部フレームワークを見たことがある方なら、測定結果を次々と取得するためのコードパスが何百もあるのに気付いたでしょう。測定しているのは、関数の実行時間やサービス遅延、リクエストの長さ、応答コードなどです。</p><p>詳細は以下の計測のセクションで説明しますが、ひとまずこれらの計測ポイントは既に存在するものとして、実行時間などの数値計測に注目していきましょう。</p><p>出発点が適切であれば、偏りは最小限に抑えられます。ここでは極力、物事を決めてかからずに、計測結果をランダムな変数値として扱います。それでは、<a href="https://ja.wikipedia.org/wiki/%E8%A6%81%E7%B4%84%E7%B5%B1%E8%A8%88%E9%87%8F" rel="nofollow" title="" class="ext-link">要約統計量</a>という広大な世界への扉を開きましょう。要約統計量とは、ランダムな振る舞いを記述するための専門領域です。当たり前だと思うかもしれませんが、統計学の大半は未来の結果をモデル化するための<a href="https://ja.wikipedia.org/wiki/%E6%8E%A8%E8%A8%88%E7%B5%B1%E8%A8%88%E5%AD%A6" rel="nofollow" title="" class="ext-link">推計統計学</a>であることを忘れないでください。この2つは関連が深く、その違いと適切な名称を知っていると、今後の調査スピードが格段に上がります。<strong>レッスン1は、「正しい統計学用語を知っておいて損はなし」です。</strong></p><p>測定はバランスが全てです。データが少なすぎるのは、手抜きと言えるでしょう。さらには、情報不足で下した判断によってサービスがダウンしかねません。もちろん、データが多すぎてサービスがダウンすることもあるでしょう。メモリの消費量に注意していたとしても、超過データを管理できるだけのリソースは考慮するようにしましょう。「<a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%83%E3%82%B0%E3%83%87%E3%83%BC%E3%82%BF" rel="nofollow" title="" class="ext-link">ビッグデータ</a>」は重要ではありますが、大規模システムを理解する上で必須ではありません。重要なのは密度が高い、バランスの取れたデータです。</p><p>ではバランスのとれた測定をするために、エンジニアはどんなツールを使っているのでしょうか。メタデータにおいては常に十分な容量、ディメンション、手法があります。その中で迷わないように、ここでは最小限のオーバーヘッドで収集できる要約統計量に焦点を絞ります。では方向性が決まったので、おなじみの分野をいくつか見ていきましょう。</p><p>統計モーメントという言葉は耳慣れないかもしれませんが、その実態は誰もが使っているものです。10歳にもなれば大半の学生が平均、つまりは<a href="https://ja.wikipedia.org/wiki/%E7%AE%97%E8%A1%93%E5%B9%B3%E5%9D%87" rel="nofollow" title="" class="ext-link">算術平均</a>を計算できます。このような普通の平均は、統計学者の間では1次<a href="https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%BC%E3%83%A1%E3%83%B3%E3%83%88_(%E6%95%B0%E5%AD%A6)" rel="nofollow" title="" class="ext-link">モーメント</a>と呼ばれます。算術平均は計算が楽で、実に有意義なものです。ただ、この記事では訳あって、さらに踏み込んだ内容を扱います。</p><p>最も有名な算術平均を含め、一般的に使用されているモーメントは4つあります。これらのモーメントを用いて構成された数列を足し合わせると、標準的なデータ記述になります。</p><p><img class="wp-image-1642 size-full" src="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_all_small.png" alt="Four charts showing the mean, variance, skewness, and kurtosis." width="1196" height="300" srcset="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_all_small-300x75.png 300w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_all_small-768x193.png 768w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_all_small-1024x257.png 1024w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_all_small-624x157.png 624w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_all_small.png 1196w" sizes="(max-width: 1196px) 100vw, 1196px"><br>
<em>算術平均、分散、歪度、尖度。どれも水色、黄色、ピンクの順に値が大きくなる。</em></p><p>これら4つの<a href="https://en.wikipedia.org/wiki/Standardized_moment" rel="nofollow" title="" class="ext-link">標準化モーメント</a>は、<a href="https://en.wikipedia.org/wiki/Shape_of_the_distribution" rel="nofollow" title="" class="ext-link">分布図の説明</a>で、最も広く適用されている評価尺度です。測定回数が増えるほど値の有用性が下がるので、歪度と尖度は省かれることが多くなります。これらの尺度について初めて聞くという人が多いので、省略するのも悪くないでしょう。</p><p>パフォーマンス志向のエンジニアにとって、算術平均、分散、歪度、尖度が適切なツールとなることは、ほぼ<em>あり得ません。</em>モーメントに基づく尺度では、私たちが求める重要な技術的メタデータの尺度として、信頼性のある情報を得られないのです。</p><p>モーメントに基づく尺度は<strong><a href="https://en.wikipedia.org/wiki/Robust_statistics" rel="nofollow" title="" class="ext-link">ロバスト統計</a></strong>ではありません。また、ロバスト統計ではないというのと同時に以下のことが言えます。</p><p><a href="https://ja.wikipedia.org/wiki/%E5%A4%96%E3%82%8C%E5%80%A4" rel="nofollow" title="" class="ext-link">外れ値</a>とは、他の分布から離れているデータポイントのことです。「外れ値｣という言葉から、ごくわずかしかなく起こる確率の低い値だと想像するでしょう。しかし、実は至る所にあり、モーメントに基づく統計を役に立たない、どちらかというと危険な情報にしてしまうのです。外れ値はトラブルシューティングを扱うエンジニアにとって、最も重要なデータとなることもよくあります。</p><p>それでは、なぜ、ソフトウェアにモーメント（moments）を用いる人が、いまだに数多くいるのでしょうか。簡単な答えをシャレで言うと、勢い（momentum）です。算術平均と分散には2つの利点があります。簡単に導入できるという点と、用途が広いという点です。実際には、この良く知られた方法が、外れ値のような特殊な値を無視してしまい、有害な仮定を導きます。ソフトウェアのパフォーマンスにとって、算術平均と分散はロバスト統計のコンテキストとして<em>のみ</em>有用です。</p><p>さあ、十分準備ができました。<strong>レッスン2は、「算術平均や分散など、ロバスト統計以外の尺度だけに頼ってデータを分析するのはやめろ」です。</strong>では、どんなロバスト統計のテクニックに頼ったらいいのでしょうか？</p><p>国勢調査のデータや全国共通テストの結果を見たことがあれば、すでに<a href="https://ja.wikipedia.org/wiki/%E5%88%86%E4%BD%8D%E6%95%B0" rel="nofollow" title="" class="ext-link">分位数</a>について、よくご存知でしょう。最も一般的なのは、<a href="https://en.wikipedia.org/wiki/Quartile" rel="nofollow" title="" class="ext-link">四分位数</a>（4分割）と、<a href="https://en.wikipedia.org/wiki/Percentile" rel="nofollow" title="" class="ext-link">パーセンタイル値</a>（100分割）です。<a href="https://en.wikipedia.org/wiki/Central_tendency" rel="nofollow" title="" class="ext-link">代表値</a>は、最も使用される機会が増えてきている手法です。50パーセンタイルとなる<a href="https://ja.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%80%A4" rel="nofollow" title="" class="ext-link">中央値</a>も、同様によく使われるようになってきました。</p><p>経験豊富なエンジニアは、算術平均よりも中央値を好むようですが、極値を得る前のデータはあまり意味がりません。ソフトウェアのパフォーマンスと信頼性にとって、それは95パーセンタイルや、98パーセンタイル、99パーセンタイル、99.5パーセンタイルなどを意味します。私たちはこれを極値と呼びますが、高トラフィックのシステムでは、<a href="https://www.youtube.com/watch?v=lJ8ydIuPFeU" rel="nofollow" title="" class="ext-link">いつでも起こり得る</a>ことです。また、最小値と最大値の示す範囲についても見ていきます。この最小値と最大値は0番目と100番目のパーセンタイル値と呼ばれることもあります。</p><p>分位数と範囲に取り組むことが、効率的な計算につながります。例えば、中央値を求める王道は、<em>全て</em>のデータをソートし、真ん中の値か2つの中央値の平均を選ぶことです。全てのデータを一度に考えることが、正確な分位数を計算する唯一の方法なのです。</p><p>私たちの使用事例を考えると、全てのデータをメモリに保持すると恐ろしいほど大きな負荷になるでしょう。そうではなく、「必要を満たせればいい」という考え方を用いれば、エンジニアはずっと効率的に分位数を計算することができます。統計学は効率との妥協の上に成り立っているのです。</p><p>統計学とは、供給の行き届かない母集団の近似値を出すという物流の問題を扱うための学問分野として生まれました。現代でも、全員の世論調査を行ったり、全てのリンゴの味見をしたり、全ての自動車を運転することは不可能です。そのため、統計は今後も必要です。</p><p>ソフトウェアのパフォーマンスという領域では、データの収集は自動化でき、測定も<em>必要以上に</em>自動化されています。そして問題は、照合やインデックス化、保管などへと移ってきました。問題は困難さを増し、働き詰めの人々があふれるようになっています。</p><p>私たちは、物ごとを簡単にしようと試みています。難しい問題は避けたいものです。膨大なデータを避ける最も簡単な方法は、データを捨ててしまうことです。廃棄されたデータは保管する必要もないでしょう。ただし、慎重に行わなければデータは残ってしまい、偏りとして出没します。私たちに必要なのは、最初の状態の意味のあるデータです。母集団に限りなく近い、ずっと小さなデータが望ましいでしょう。そのために、統計学には<a href="https://ja.wikipedia.org/wiki/%E6%A8%99%E6%9C%AC%E8%AA%BF%E6%9F%BB" rel="nofollow" title="" class="ext-link">無作為（ランダム）抽出</a>があります。</p><p><img class="size-medium wp-image-1622" src="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_oveflow-178x300.png" alt="Reservoir sampling only holds on to a little bit of data, letting most of it pass through uncollected." width="178" height="300"><br>
<em>レザボアサンプリングは、ほんの少しのデータだけを保有し、そのほとんどが回収されません。</em></p><p>ひとひねりすると、1回につき1つのデータポイントだけを考慮して、未知の母集団からサンプルを求めたいということです。この使用事例は、コンピューターサイエンス特有の部分を必要とします。これは<a href="https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0" rel="nofollow" title="" class="ext-link">オンラインアルゴリズム</a>で、<a href="https://en.wikipedia.org/wiki/Streaming_algorithm" rel="nofollow" title="" class="ext-link">ストリームアルゴリズム</a>のサブクラスです。”オンライン”が意味するのは、個々の点だけが単一パスで考慮されるということです。また”ストリーム”が意味するのは、プログラムは一度にデータのサブセットを考慮するだけですが、バッチで動かすことも複数のパスで実行することもできる、ということです。幸いなことに、 <a href="https://ja.wikipedia.org/wiki/%E3%83%89%E3%83%8A%E3%83%AB%E3%83%89%E3%83%BB%E3%82%AF%E3%83%8C%E3%83%BC%E3%82%B9" rel="nofollow" title="" class="ext-link">Donald Knuth</a>のおかげで、ストリームから無作為抽出を可能にする明解なアプローチが普及しました。<a href="https://en.wikipedia.org/wiki/Reservoir_sampling" rel="nofollow" title="" class="ext-link">レザボアサンプリング（Reservoir Sampling）</a>です。さあ、足を踏み入れてみましょう。</p><p>まず、<code>counter</code>を指定して、出現するデータポイントごとにインクリメントします。<code>reservoir</code>は、通常、あらかじめ定義された<code>size</code>のリストまたは配列です。これでデータを追加する準備ができました。要素数が<code>size</code>個にに行き当たるまで、要素は直接<code>reservoir</code>に加えられます。<code>reservoir</code>がいっぱいになってしまえば、後から入って来るデータポイントには、既存のサンプルポイントと置き換える<code>size / counter</code>のチャンスがあります。データポイントの値は考えませんし、定義からはランダムな偶然が保証されます。こんなふうに<code>reservoir</code>は、常にデータセット全体の代表となります。また、最後のデータポイントからの値と同様に、最初のデータポイントの値も持っている可能性が高いです。このことは全て、所有メモリ量の範囲内で、計算量もわずかです。下の計測のセクションで、Pythonの実装例を紹介しているのでご覧ください。</p><p>より簡単に言えば、レザボアは、固定サイズのサムネイルのような、データを小規模にしたバージョンのものを連続的に生成します。 未知の大きさの母集団を扱うレザボアサンプリングの能力は、レスポンス遅延や長時間続いているサーバプロセスの他の測定基準の追跡にとても適しています。</p><p>レザボアによりサンプルを得た後、必然的に生じる次のステップは何でしょう。PayPalの標準的な手順は下のようになっています。</p><p><img class=" wp-image-1623" src="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_pixels-300x138.png" alt="Histograms are most of what you need to get a silhouette view of your data." width="378" height="174" srcset="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_pixels-300x138.png 300w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_pixels-768x352.png 768w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_pixels-1024x470.png 1024w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_pixels-624x286.png 624w" sizes="(max-width: 378px) 100vw, 378px"><br>
<em>レザボアは、パフォーマンスデータのヒストグラムの全体像を把握するのに理想的です。CDFのオーバレイとQQのプロットは、比較をするのに便利です。</em></p><p>本当にこれだけです。このほかに、通常はより多くのディメンションを加えています、例えば、超過時間やデータセンター間の比較などです。データの範囲、変位量、サンプルビューを用いると、余計な推測を確実に消すことができ、結局は時間の節約になります。タイムアウトをしっかりと管理し、リトライを実装し、テストして、配備します。もしかしたら<a href="https://en.wikipedia.org/wiki/Apdex" rel="nofollow" title="" class="ext-link">Apdex</a>のスコアのような、より高水準の受け入れ基準を付け加えるかもしれません。パフォーマンス問題に関わらず、私たちはいつそれを修正したのか分かっています。また裏付けとなる正しい数値とチャートもあります。</p><p><img class="wp-image-1625 " src="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_lowres-271x300.png" alt="Accuracy is a matter of having the right resolution." width="147" height="163" srcset="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_lowres-271x300.png 271w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_lowres-768x851.png 768w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_lowres-924x1024.png 924w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_lowres-624x691.png 624w" sizes="(max-width: 147px) 100vw, 147px"><br>
<em>正確さとはは「適切な解像度を持つ」ことの問題です。</em></p><p>レザボアサンプリングには欠点があります。特に、画像のサムネイルと同じように、設定された解像度の範囲の正確さにしかならないのです。境界付近のデータに少しムラが生じる場合があります。レザボアサンプリングをうまく実装すると最大値と最小値が追跡できます。しかし境界に興味のあるエンジニアに対しては、外れ値を抽出した追加セットを保持することを進めます。例えば、クリティカルパスについては、直近に観測された<code>n</code>番目に良いレスポンス時間を明示的に追跡することもあります。</p><p>実行環境により、リソースは重要なものとなるかもしれません。レザボアサンプリングに必要な処理能力はわずかなものです。ただし効率的な<a href="https://ja.wikipedia.org/wiki/%E6%93%AC%E4%BC%BC%E4%B9%B1%E6%95%B0" rel="nofollow" title="" class="ext-link">擬似乱数</a>を生成できればの話です。これはArduinoにさえ備わっています。しかしメモリの費用がかさみます。一般的に言って、正確さはサイズの平方根に比例します。倍の正確さには4倍のコストが掛かります。これは正に「収穫逓減の法則」です。</p><p>PayPalでは、代表的なレザボアに16384個の浮動小数点スロットが割り当てられており、トータルで64キロバイトになります。この分では、サーバの前に、人間がメモリを使い果たしてしまいます。500個の変数の追跡に必要なのは、8メガバイトだけです。開発者として、全ての変数が何であるかを覚えていることとは、別の話です。</p><p>大抵の場合、レザボアから自分たちの欲しいものを得て、非統計的な開発を続けることは可能です。しかし、時には、より状況に即したアプローチが求められる場合があります。</p><p>パフォーマンスデータを処理するために、PayPalでは様々な点で、<a href="http://www.inf.fu-berlin.de/lehre/WS11/Wireless/papers/AgrQdigest.pdf" rel="nofollow" title="" class="ext-link">q-digest</a>、偏りのある分位数推定、その他の高度なアルゴリズムに数多く取り組んできました。試行を重ねた結果、2つのアプローチが主力として残っています。どちらも人が推定するよりはるかに簡単な方法です。</p><p>最初のアプローチはヒストグラムカウンタで、特定のレザボアから収集された統計情報に基づいて、ビンまたはバケットと呼ばれる注目範囲を設定します。レザボアの集計は、データを収める場所を決定するために無作為に選んだ値だけを見るのでデータの内容には依存しません。一方、バケットの集計では値を見て、その値が含まれるバケットを見つけて、バケットに対応付けられたカウンタをインクリメントします。値自体は保存されません。コードはシンプルであり、メモリの消費もさらに少ないですが、重要な利点は実行速度です。バケットの集計はオーバーヘッドが非常に少ないので、他のアルゴリズムよりも、コードの奥深くまで統計情報を収集することができます。</p><p>2番目のアプローチは<a href="http://pierrechainais.ec-lille.fr/Centrale/Option_DAD/IMPACT_files/Dynamic%20quantiles%20calcultation%20-%20P2%20Algorythm.pdf" rel="nofollow" title="" class="ext-link">区分的放物型分位数推定</a>（略してP2）で、エンジニアリングの代表的なものです。1980年代のエレクトロニクス産業から生まれたP2は、もともと単純なデバイス向けに設計された実用的なオンラインアルゴリズムです。レザボアの分布を見て、ある分位数に対してもっと分解が必要かどうかを決定する際、P2によって、前もって分位数を指定し、1つ1つの観測ごとにその値を保持することができます。メモリの消費量は非常に少ないのですが、関連する計算のせいで、P2は、レザボアサンプリングやバケットの集計よりもCPUを多く使用します。さらに、P2推定を複数組み合わせるのを見たことはありませんが、それは簡単ではないと想定されます。一方、P2推定が優れている点は、私たちが目にするほとんどの分布で、レザボアサンプリングよりも桁違いに正確だということです。</p><p>この2つのアプローチは、どちらもレザボアサンプルから記録したものを取って少ない方にそれを割り当てます。ヒストグラムは事前に設定された値の範囲に関する解を、P2は事前に設定された注目する分位数ポイントでの解を与えてくれます。<strong>レッスン3は、あなたが解決しなければならない問題に合った統計学を選択することです。もしその問題が何かわからない場合は、レザボアサンプリングのような一般的なツールを使い続けてください。</strong></p>
