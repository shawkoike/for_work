<p><a href="http://www.alexeyshmalko.com/2014/7-things-you-should-know-about-make/" rel="nofollow" title="" class="ext-link">7 Things You Should Know About Make</a> （2014-10-26） by <a href="http://www.alexeyshmalko.com/about-me/" rel="nofollow" title="" class="ext-link">Alexey Shmaiko</a></p><p><a href="http://ja.wikipedia.org/wiki/Make" rel="nofollow" title="" class="ext-link">Make</a>は、様々なタイプのファイルのビルド作業を自動的に行ってくれるシンプルかつ強力なツールです。しかしながら、makefileを書く際に問題にぶち当たるプログラマもいれば、Makeの基本知識がないことで、既存のものを再発明してしまうプログラマもいます。</p><p>デフォルトでは、Makeは一番目のターゲットから開始します。このターゲットのことをデフォルトゴールと呼びます。</p><p>Makeはカレントディレクトリのmakefileを読み込み、一番初めのルールで処理を開始します。しかし、Makeが完全にこのルールを処理する前に、ルールが依存するファイルのためのルールを処理しなければなりません。各ファイルそれぞれは、自身のルールに従って処理されます。</p><p>実はこれは、各ターゲットの再帰的アルゴリズムになっています。</p><p>Makeでは、makefileを書くのを簡素化するために変数が使われ、<code>=</code>、<code>?=</code>、<code>:=</code>、<code>::=</code>、<code>+=</code>、<code>!=</code>から1つの演算子で代入されます。それぞれの演算子の違いは、以下の通りです。</p><p>同じルールを持つたくさんのファイルがある場合、ターゲットをマッチさせるためにパターンルールを定義することができます。パターンルールは、ターゲットに‘%’があることを除いては、通常のルールと同じです。これがあることによって、パターンルールのターゲットは、ファイル名に一致させるパターンと判断され、‘%’は空でない部分文字列に一致させることができます。</p><p>私のブログディレクトリには次のMakefileがあります。</p><p><code>$@</code>がターゲットを意味するのに対し、<code>$^</code>は依存関係を意味する自動変数です。つまり、単純にマークダウンファイルをコンバータに渡すというルールです。パターンルールの書き方や自動変数に関する詳細は、<a href="http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" rel="nofollow" title="" class="ext-link">マニュアルを参照</a>してください。</p><p>GNU Makeにはデフォルトのルールがあります。多くの場合明示的なルールを書く必要はありません。デフォルトの暗黙ルールのリストはC、C++、アセンブラプログラムとそれらをリンクすることを含みますが、その限りではありません。完全なリストは<a href="https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html" rel="nofollow" title="" class="ext-link">Makeのマニュアル</a>で参照できます。</p><p>Makefileに何もさせないことは可能です。たとえば、単にhello.cというファイルにプログラムのソースコードを保存して、単に<code>make hello</code>を実行できます。Makeはhello.c からhello.oを自動的にコンパイルしてhelloにリンクします。</p><p>レシピは<code>$(CC) $(CPPFLAGS) $(CFLAGS) –c</code>の形式で定義します。変数を変えることでルールを変えられます。ソースファイルをclangでコンパイルするためには、単に<code>CC := clang</code>という行を加えるだけです。私は小さなテストプログラムを保存するディレクトリにとても小さなMakefileを置いています。</p><p>カレントディレクトリのすべてのCとC++ソースファイルをコンパイルするには、依存関係のために<code>$(patsubst %.cpp,%.o,$(wildcard *.cpp)) $(patsubst %.c,%.o,$(wildcard *.c))</code>というコードを使います。</p><p><code>wildcard</code>はパターンにマッチするすべてのファイルを検索して、patsubstは妥当なファイル拡張子を<code>.o</code>で置き換えます。</p><p>Makeにはテキストを変換するためのたくさんの関数があり、<code>$(function arguments)</code>という形式で呼び出します。</p><p>関数の完全なリストは<a href="http://www.gnu.org/software/make/manual/make.html#Functions" rel="nofollow" title="" class="ext-link">マニュアル</a>を参照してください。</p><p>なおコンマのあとのスペースは引数の一部とみなされる点に注意してください。スペースがあるといくつかの関数で予期しない結果を引き起こすので、私はコンマのあとにスペースを全く置かないことをお勧めします。</p><p><a href="http://www.gnu.org/software/make/manual/make.html#Call-Function" rel="nofollow" title="" class="ext-link"><code>call</code>関数</a>で独自の関数や<a href="http://www.gnu.org/software/make/manual/make.html#Eval-Function" rel="nofollow" title="" class="ext-link"><code>eval</code>関数</a>でパラメータ化されたテンプレートのようなものを書くこともできます。</p><p>Makeには特別な変数<code>VPATH</code>があり、すべての必要条件のための<code>PATH</code>として使われます。またVPATH変数ではディレクトリ名をコロンや空白で区切ります。ディレクトリの並び順はMakeが検索する順序になります。このルールは、すべてのファイルがカレントディレクトリに存在するかのように、必要条件のリストでファイル名を指定できるようにします。</p><p>さらにきめ細かな<code>vpath</code>ディレクティブもあります。これはパターンにマッチするファイルごとに検索パスを指定できます。そのため<code>include</code>ディレクトリにすべてのヘッダを保存するなら、以下の行を使えます。</p><p>しかしながら、Makeはルールの必要条件の部分だけ変えてルール自身を変えないので、ルールでは明示的なファイル名に頼れません。代わりに<code>$^</code>のような”<em>自動変数</em>“を使用しなければなりません。</p><p>必要条件のためのディレクトリ検索の詳細は<a href="http://www.gnu.org/software/make/manual/make.html#Directory-Search" rel="nofollow" title="" class="ext-link">Makeのマニュアル</a>を参照してください。</p><p>makefileをデバッグするためのいくつかのテクニックがあります。</p><p>最初のものは単に昔ながらの出力です。以下のMake関数の1つを使って、その表現の値を出力できます。</p><p>この行を通過するとMakeはその表現の値を出力します。</p><p>出力の使い方はご存知だと思います。</p><p>Makefileをデバッグするために書かれた特別なプログラムもあります。Remakeは指定されたターゲットで止まって、起こったことを調べて、Makeの内部状態を変えることができます。詳細は<a href="https://www.usenix.org/legacy/event/lisa11/tech/full_papers/Bernstein.pdf" rel="nofollow" title="" class="ext-link">Remakeによるmakefileのデバッグについての記事</a>を読んでください。</p><p>また他の方法に関して<a href="http://www.drdobbs.com/tools/debugging-makefiles/197003338" rel="nofollow" title="" class="ext-link">makefileのデバッグについての素晴らしい記事</a>も読んでください。</p>
