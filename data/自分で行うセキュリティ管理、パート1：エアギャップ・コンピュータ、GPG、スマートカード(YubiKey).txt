<p><a href="http://viccuad.me/blog/secure-yourself-part-1-airgapped-computer-and-GPG-smartcards/" rel="nofollow" title="" class="ext-link">Secure yourself, Part 1: Air-gapped computer, GPG and smartcards</a> （2015-05-15） by <a href="http://viccuad.me/about/" rel="nofollow" title="" class="ext-link">Víctor Cuadrado Juan</a></p><p>私はVíctor Cuadrado Juanといいます。Linuxをこよなく愛する開発者であり、FOSSマニアでもあります。現在、スペインのマドリード在住です。皆さんに貴重な時間を遠慮なく使っていただき、<a href="http://viccuad.me/" rel="nofollow" title="" class="ext-link">サイト</a>をご覧になったり、ご意見をme@ viccuad.me宛にメールで送ったりしてもらえたら幸いです。]()</p><p>この記事は以下のシリーズの一環です</p><p>もちろん、このガイドで100％のセキュリティが確保できるわけではありませんし、全てを網羅するものでもありません。また、安全保障に関わる政府の諸機関から、目をつけられずに済むという保証もありません。どうか、気軽に学べる趣味という程度に考えてください。結局、この記事は全てセキュリティ侵害についてであり、私は誰もがするように、適当な場所に線を引くことにします。この記事について、不備な点や提案などがありましたら、いつでもご連絡ください。</p><p>このパートでは、以下の内容を取り上げます</p><p>内容に入る前に、いくつかコンセプトを学んでおきましょう。認証に使われる情報には、3つの異なるタイプがあります。</p><p>セキュリティ的に最上級である”自分独自のもの”は、少しあいまいです。これは、それ以下の等級である”自分だけが持っているもの”になり得るからです。例えば指紋は本人が使い残した物（プラスチックボトルやカップ）から簡単に入手して、日用品を使って簡単にコピーすることができます。そして、セキュリティが侵害されたとしても変更できません。あるいは、誰かがあなたの手から指を取り去ることができますし、ほとんどのスキャナはそんなことは感知しないでしょう。生体認証が”ユーザ名”としてしか使用されないのはこのためです。これに対して、強固で個人的なパスワードは、使用する際にしか漏れる恐れはありませんし、どこへ行こうと、置き忘れることもありません。</p><p>最も包括的な解決方法は、3つの情報を全て使用することでしょう。ご存知のように、2段階認証スキームと呼ばれているものです。自分<em>独自の</em>ものと、自分<em>だけが</em>知っているもの（ログインとパスワード）、そして自分<em>だけが</em>その瞬間に持っているトークン（一度だけ使用するコード、またはクレジットカードや電話を必要とするデバイスによって生成されるコード）です。攻撃者がセキュリティ侵害を成し遂げるには、対象者のパスワードを推測し、デバイスを盗み出さなければならないでしょう。</p><p>自分<em>だけが</em>持っているトークンは<a href="http://www.yubico.com/products/yubikey-hardware/yubikey-neo/" rel="nofollow" title="" class="ext-link">YubiKey NEO</a>というものになるでしょう。これは小型で耐久性に優れたUSBキーで、静電容量式タッチボタンが1つついています。これを自分のキーホルダーに取り付けたり、より安全にするために常時身につけているブレスレットに取り付けたりします。10年以内に、この種のデバイスが一般的になる可能性はかなり高いでしょう。例えばNFC内蔵リングです。これに、自分のパスワードを記憶させることで、考えうるあらゆるものに、自動的にログインできるのです。</p><p><img src="http://viccuad.me/images/yubikey.jpg" alt="image of Yubikey Neo"></p><p>YubiKey NEOには、以下のような機能があります。</p><p>私たちのセキュリティスキームとYubiKeyをセットアップするには、ある基盤が必要です。それがエアギャップ・コンピュータです。</p><p>エアギャップ・コンピュータは、それ自体がインターネット接続しておらず、更に、インターネットにつながる他のいかなるシステムにも接続されていないコンピュータです。こうした目的で使用する場合は、Raspberry PiやBeagleBone Blackなどのボードコンピュータが、大変役立ちます。これらは全てFOSSハードウェアであり、低価格で（高くても約5,400円程度）、携帯可能で（クレジットカードのサイズ）、無線LANチップを内蔵していないので、ネットワークに接続していなければ、（スマートフォンや内蔵のブロードバンドチップとは違って）確実にネットワークから遮断できます。また、コンピュータに組み込まれているmicroSDカードを交換するだけで、異なるエアギャップ・コンピュータとして使用することもできます。保管も楽ですし、エポキシ樹脂による改ざん防止加工もできます。</p><p>私は、今持っている<a href="https://www.olimex.com/wiki/A20-OLinuXino-LIME" rel="nofollow" title="" class="ext-link">Olimex A20 Olinuxino Lime</a>を使おうと考えています。</p><p><img src="http://viccuad.me/images/A20-OLinuXino-LIME-1.jpg" alt="A20 Olinuxino Lime"></p><p>マスターGPGキーとサブキーを作成する際に、マスターキーへの署名や、バイナリの構築と署名などをするために、このコンピュータを使うことになります。オフライン・コンピュータへのファイルの書き込み、書き出しには、USBを利用します。こうした操作はあまり行わないので、それほど大きな障害とはならないはずです。</p><p>そのためには、バイナリ・ブロブを排したDebian Jessie（非バイナリ・ブロブのソフトウェア）をインストールします。更にA20 Olinuxino Lime上のシンプルなフレームバッファサポートをインストールします。そうすることにより、HDMIアウトプット上でコンソールを使えます。そのためには、U-Bootブートローダのバージョン2015.01以上と、Linux kernelの3.19以上が必要です。その際、選択肢は2つあります。週次／日次の<a href="https://www.debian.org/devel/debian-installer/" rel="nofollow" title="" class="ext-link">Debian ARM ISO イメージ</a>を利用するか、自分でインストールを行うかです。</p><p>自分でインストールを行う場合は、<a href="http://linux-sunxi.org/Mainline_Debian_HowTo#Configuring_the_system" rel="nofollow" title="" class="ext-link">Linux-sunxi wiki</a>のSDカードイメージの作成手順に従ってください。（余談ですが、私はこのLinux-sunxi wikiのページにコントリビュートしました）。U-Bootを構築するには、<code>A20-OLinuXino-Lime_config</code>と、<code>Olimex A20-OLinuXino-LIME</code>をflash-kernelのデバイス名として使用してください。</p><p>システムの実行後、次のパッケージを更新してインストールします（もし将来、新しいパッケージをインストールしたい場合は.debの拡張子のファイルをダウンロードし、USBを使ってインストールする必要があることを覚えておいてください。</p><p>将来的には、gnupg2 v2.1以上をインストールすることになります。そうすればいろいろなことがもっと簡単になります。現時点では、Debian Jessieを使うと、次のようになります。</p><p>この<a href="https://help.riseup.net/en/security/message-security/openpgp/best-practices#putting-it-all-together" rel="nofollow" title="" class="ext-link">openPGP ベストプラクティス・ガイド</a>で勧めているように、堅牢になったJacob Appelbaumのgpg.confを取り込み、読んで内容を理解しましょう。</p><p>これでコンピュータはLANから切り離され、オフラインになりました。もちろん、これ以降は、UARTやsshなどでOlinuxinoと接続してはいけません。コンピュータをHDMIスクリーンと、キーボードに接続します。</p><p>将来、このコンピュータを再び使う必要がある場合は、次のように、時計を再設定しなくてはなりません。</p><p>もっと良い方法としては、バッテリーとともに、リアルタイムクロックモジュールに接続することです。リアルタイムクロックには、<a href="https://www.olimex.com/Products/Modules/Time/MOD-RTC/open-source-hardware" rel="nofollow" title="" class="ext-link">こちらのリンクでご紹介しているもの</a>や、<a href="https://www.sparkfun.com/products/12708" rel="nofollow" title="" class="ext-link">こちらでご覧頂けるもの</a>もあります。I2CはKernel3.13以降で使えるので、きちんと動くはずです。他にも多くのモジュールがあり、とても安価です。私たちのコンピュータのSoCボードにはリアルタイムクロックが内蔵されています。ですから、Olinuxinoにバッテリーを接続すれば、時刻情報は維持されています（コントローラはMainline Kernel内にはすでにありませので、少々待つ必要があります）。</p><p>コンソールの設定が必要な場合や、現在設定されているものと異なるロケールのキーボードとの接続が必要な場合には、次のように実行します。</p><p>さあ、これでやっと一息入れて、エアギャップ・コンピュータのセキュリティと実行についてじっくり検討できますね。</p><p><img src="http://viccuad.me/images/olimex_case.jpg" alt="image of Olinuxino A20 Lime in the case"></p><p>マスターGPGキーのペアと、サブキーのペアを生成します。もしパブリックキーの暗号化の方法がどんなものか知りたければ、<a href="https://youtu.be/wXB-V_Keiu8" rel="nofollow" title="" class="ext-link">この映像はとても参考になります</a>。サブキーについて詳細を知りたい場合は、<a href="https://wiki.debian.org/Subkeys" rel="nofollow" title="" class="ext-link">サブキーに関するDebianのサイト</a>と、<a href="https://security.stackexchange.com/questions/31594/what-is-a-good-general-purpose-gnupg-key-setup/31598#31598" rel="nofollow" title="" class="ext-link">StackOverflow post</a>を読むことをお勧めします。さあ、いよいよこの再編集版<a href="https://help.riseup.net/en/security/message-security/openpgp/best-practices" rel="nofollow" title="" class="ext-link">OpenPGPのベストプラクティス</a>の山場です。マスターキーのペアは他の人のキーに署名する際、そして新しいサブキーを発行する際に使用されます。サブキーはマスターキーにリンクしていて、YubiKey NEOの中に格納されます。これは、暗号化や復号化の際に使用されます。必要ならば更にサブキーのペアをつくることができます。なぜなら、もし紛失したり、セキュリティ侵害を受けたりしても、再度署名を必要としないマスターペアにリンクしているからです。サブキーのペアを生成する際には、YubiKey NEOは2048ビットまでのキーしか格納および処理ができないことを覚えておいてください。</p><p>YubiKeyでは4096ビットのマスターキーのペアを作成できない上に、バックアップできるキーペアは3つのサブキーまでなので、エアギャップ・コンピュータ内にキーを生成します。</p><p>有効期限は1年で、毎年手動で延長できます（<a href="http://blog.josefsson.org/2014/08/26/the-case-for-short-openpgp-key-validity-periods/" rel="nofollow" title="" class="ext-link">その理由はこちらをご覧ください</a>）。</p><p>マスターキーを生成します。</p><p>失効証明書を作成します。</p><p>マスターキーのバックアップを作成します。</p><p>サブキーを生成します。</p><p>サブキーのバックアップを作成します。</p><p>キーサーバと自分のWebページに次のコードを入力します。</p><p>YubiKeyをエアギャップ・コンピュータに接続します。OTPとCCIDの互換性のために、YubiKey内のイジェクトフラグが<a href="https://www.yubico.com/2012/12/yubikey-neo-composite-device/" rel="nofollow" title="" class="ext-link">82に設定</a>されていることを確認します。</p><p>また、lsusb –vを使ってバージョン3.1.8以降の新しいファームウェアであることも確認してください。更に、<a href="https://developers.yubico.com/ykneo-openpgp/SecurityAdvisory%202015-04-14.html" rel="nofollow" title="" class="ext-link">CVE-2015-3298</a>への脆弱性が改善された新しいYubiKey NEOを必ず使うようにします。CVE-2015-3298に脆弱な古いタイプを持っている場合は、無料で新しいYubiKey NEOへの交換と配送をしてくれるサービスを利用できます（パッチを当てるだけで済む場合でも同様のサービスを受けられます）。</p><p>これらの設定が完了したら、次はスマートカードの設定を行います。</p><p>サブキーをスマートカードに移動します（コピーではなく、完全に<em>移動</em>してください。同じサブキーを別のYubiKeyで利用したい場合は、以下の例のようにバックアップを取っておく必要があります）。</p><p>スタブのバックアップを作ります。</p><p>YubiKey NEOで指定したURLに~/backup-masterstubs/publickey.txtを加えてください。</p><p>これでYubiKeyの設定が完了です！　お持ちのキーホルダーに加えたり、私のようにリストバンドに付けてみたりしてください。</p><p><img src="http://viccuad.me/images/yubikey_wristband.jpg" alt="image of the yubikey in a wristband"></p><p>USBフラッシュドライブ内のエアギャップ・コンピュータの内部に、主要なキーペアと失効証明をバックアップしなければいけません。</p><p>また、<a href="http://www.jabberwocky.com/software/paperkey/" rel="nofollow" title="" class="ext-link">Paperkey</a>を利用すると、シークレットキーの”秘密の短いコード（secret bits）”が表示されるので、それを手で紙に書き写して保存しておくことも可能です（およそ149バイトのコードが表示されます）。プリンタで印刷する場合は、プリンタのメモリからシークレットキーが漏れてしまう可能性があるので注意してください。この場合もやはり、エアギャップ・コンピュータは安全な場所に保存するべきです。少なくともmicroSDは必ず安全な場所に保存してください。</p><p>必要なパッケージをインストールします。</p><p>GNOME 3（またはそれをベースにしたデスクトップ環境）を使用している場合は問題が生じます。gnome-keyringのgpg-agentプロトコルの導入が不完全なため、少なくともGPGのスマートカード機能とGPGSMの多くの機能を破損してしまいます。GNOME 3を使わずに、gnome-keyring-daemonを非アクティブ化し、代わりにgpg-agentを利用します。私が最善だと思う解決方法は、<a href="http://lists.gnupg.org/pipermail/gnupg-users/2014-September/050812.html" rel="nofollow" title="" class="ext-link">gnupgメール</a>リストで見つけました。</p><p>私の設定をご覧になりたい場合は、私の<a href="https://github.com/viccuad/dotfiles" rel="nofollow" title="" class="ext-link">ドットファイル</a>を確認してください。こちらにはgpg-agentのワークアラウンドや共有可能な設定なども載せています。</p><p>パブリックキーをフェッチし、スタブキーを作成します。</p><p>すると、GPGのプライベートキーの中にスタブを確認できるはずです（sec#の#はスタブで装飾のないキーであることを意味します）。私の場合は以下のようになりました。</p><p>このキーを究極に信頼できるキーとして指定します。</p><p>オールドキーセットから、作成したばかりの新しいセットに移行する場合は、新しいキーでオールドキーに署名し、移行の宣言とオールドキーの失効を記述します。また、必要な時に古いファイルを復号できるよう、オールドキーペアもバックアップする方が賢明です。</p><p>オールドキーに署名するために、オールドキーのエクスポート、エアギャップ・コンピュータへの移動、署名、共有を行います。</p><p>移行の宣言について、<a href="http://fifthhorseman.net/key-transition-2007-06-15.txt" rel="nofollow" title="" class="ext-link">こちらに良い例が掲載されています</a>。新旧両方のキーを使ってクリアサインし、安定した場所に公開します。お持ちのリファレンスをGPGキーへとアップデートすることも忘れないでください（メールの署名、サイトのAboutページ、名刺などです）。</p><p>サブキーへの不正アクセスや、窃盗、紛失などがあった場合は、サブキーを失効させなければいけません。マスターキーのペアがあるエアギャップ・コンピュータを起動し（もしマスターキーのペアがなければgpg –importを用いてインポートします）、サブキーを失効させます。</p><p>この段階でキーをエクスポートし、キーサーバ上に公開する必要があります。</p><p>更に詳しく知りたい場合やバックアップのために、本記事のマークダウンバージョンを読みたい場合は<a href="http://viccuad.me/assets/2015-5-15-secure-yourself-part-1-airgapped-computer-and-GPG-smartcards.md" rel="nofollow" title="" class="ext-link">こちら</a>からダウンロードできます。</p>
