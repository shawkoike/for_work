<p><a href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/" rel="nofollow" title="" class="ext-link">FlyWeb – Pure Web Cross-Device Interaction</a> （2016-9-6） by <a href="https://hacks.mozilla.org/author/kvijayanmozilla-com/" rel="nofollow" title="" class="ext-link">Kannan Vijayan</a>, <a href="https://github.com/justindarc" rel="nofollow" title="" class="ext-link">Justin D'Arcangelo</a></p><p><strong><a href="https://hacks.mozilla.org/author/kvijayanmozilla-com/" rel="nofollow" title="" class="ext-link">Kannan Vijayan</a></strong><br>
Kannanはシステム開発者で、RNA配列を分析するためのWebツールから、JavaScriptのエンジンのためのJITコンパイラ、組み込みOSのための赤外線のスタック、実験的な新しいWebのプラットフォーム技術まで、何でも構築します。数時間、話を聞かされる覚悟があるなら、上記のことは何でも質問するといいでしょう。<br>
<a href="https://twitter.com/kannan_vijayan" rel="nofollow" title="" class="ext-link">@kannan vijayan</a><br>
<a href="https://hacks.mozilla.org/author/kvijayanmozilla-com/" rel="nofollow" title="" class="ext-link">Kannan Vijayanによる、他の記事はこちら</a></p><p><strong><a href="https://github.com/justindarc" rel="nofollow" title="" class="ext-link">Justin D’Arcangelo</a></strong><br>
Mozillaのソフトウェアエンジニアで、最先端のモバイル用Webアプリを作っています。父親であると同時に、夫、ミュージシャン、レコード愛好家、何でも屋でもあります。<br>
<a href="https://github.com/justindarc" rel="nofollow" title="" class="ext-link">github</a> / <a href="http://twitter.com/justindarc" rel="nofollow" title="" class="ext-link">@justindarc</a><br>
<a href="https://hacks.mozilla.org/author/jdarcangelomozilla-com/" rel="nofollow" title="" class="ext-link">Justin D’Arcangeloによる、他の記事はこちら</a></p><p>FlyWebは、Mozillaプラットフォーム部門内で人知れずプロトタイプを作ってきた実験的なプロジェクトです。昨年末にサブプロジェクトとしてスタートし、以来、小人数の特別チームがそのコンセプトの”バージョン0″の完成を目指してきました。過去6か月にわたり実現に向けてあれこれと手を入れ、特にこの開発のアイディアに興味を持ちそうなWeb開発者やハードウェアハッカー向けには、気楽に話せるくらいのところまでにこぎ着けました。</p><p>根本的に、目指しているのは1つのゴールです。それは、物理的に近くにいる人間やデバイスがアプリケーションとコンテンツそれぞれをスムーズに動かしやすくすることです。そのためには、”ローカルエリアWebサーバ”を立てる人やそのローカルエリアWebサーバを見つけて接続するブラウザを持つ人にとって、完全にシンプルなものにしようと思っています。このアーキテクチャの上に築かれるものは、ユーザと他の開発者やハッカーに委ねられています。</p><p>FlyWebのサーバは、コンピュータやスマートフォンにロードされたWebページ上、あるいはユーザが使うネットワーク上の小さなハードウェアで有効です。FlyWebサーバは”インターネット”ではなく、ローカルネットワーク（つまり、前もって物理的に近いところ）の人々にのみにアクセスするようにデザインされています。</p><p><a href="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/09/flyweb-architecture-diagrams.jpg" rel="nofollow" title="" class="ext-link"><img class="alignnone wp-image-30188 size-large" src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/09/flyweb-architecture-diagrams-500x333.jpg" alt="FlyWeb Architecture Diagrams" width="500" height="333" srcset="https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams-500x333.jpg 500w, https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams-250x167.jpg 250w, https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams-768x512.jpg 768w, https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams.jpg 1440w" sizes="(max-width: 500px) 100vw, 500px"></a><br>
<em>注釈（下段の説明。左から）<br>
“クラウド”内にホストされたHTTPサーバから提供される従来のWebアプリケーション。<br>
恒久的なURLが存在し、ユーザはそのURLを使ってアクセスします。</em></p><p>Raspberry Pi上のNode.jsサーバから提供されるFlyWebのアプリケーション。<br>
Raspberry Piがローカルネットワークにアプリケーションをアドバタイズメントし、ユーザは自分のブラウザ上にあるFlyWebのメニューからアプリケーションを見つけます。</p><p>他のモバイルデバイス上の<b>Webページ</b>から提供されるFlyWebのアプリケーション。<br>
ユーザのモバイルデバイス上のWebページがpublishServer()を呼び出してアプリケーションをローカルネットワーク上にパブリッシュします。付近にいる別のユーザは自分のブラウザ上のFlyWebメニューからアプリケーションを見つけることができます。</p><p>FlyWebのデザインはシンプルです。FlyWebのサーバは<a href="https://en.wikipedia.org/wiki/Multicast_DNS" rel="nofollow" title="" class="ext-link">mDNS</a>を使ったローカルネットワーク上で自らアドバタイズメントを行うWebサーバです。<a href="https://nightly.mozilla.org/" rel="nofollow" title="" class="ext-link">Firefox Nightly</a>では、ローカルにアドバタイズメントされたFlyWebのサービスを列挙できる小さいUIエレメントを付けました（デフォルトではオフで、<code>dom.flyweb.enabled</code>の設定がtrueの時のみアクティブになります）。サービスを1つ選んで接続しようとすると、ブラウザがそのサービス用にユニークな”UUIDホストネーム”を作り、そのホストネームとともに全URLをサービスにルーティングします。さらに、新しい<code>navigator.publishServer()</code>関数でWeb APIを拡張し、Webページがローカルネットワーク上でFlyWebサービスをパブリッシュできるようにしています。ユーザはWebページのこの振る舞いを認めるように促されます。</p><p>このデザインがサポートするユースケースには2つの大きな分類があります。1つはブラウザ間のインタラクションに関するもの、もう1つは、ユーザにUIを提供したい”スマートハードウェア”とブラウザのインタラクションに関するものです。どちらも同じアーキテクチャが使われています。</p><p>例えば、スマートフォン向けにマルチプレーヤのゲームを作るとしましょう。MMORPGのことを言っているのではありませんが、グループが同じ部屋の中でプレイする気楽なゲーム、例えばデジタル化されたカタンやスクラブルやポーカーのようなゲームです。方法は2つあります。</p><p>この解決はうまく行くでしょう。しかし、アプリストアでアプリを公開する必要があり、ゲームをプレイする前に全員がアプリをダウンロードしなければなりません。誰かが別のゲームに変えようと思ったら、全員が別のゲームをダウンロードしなければならなくなります。スマートフォンが手動で互いを見つけて接続できるように特別なコミュニケーションプロトコルをアプリに使う必要があります。</p><p>これも妥当なソリューションですが、幾つかの問題があります。全員がゲームのサイトを訪れなければならず、恐らくはお互いが対等になるように、そのサイトでアカウントを作る（あるいはある種のトークンをもらう）必要があるでしょう。プレーヤ間のコミュニケーションはゲームをホストするサーバを必ず介さねばならず、それは「低レイテンシの入力を要求するゲームは難しいか不可能」だということを意味します。さらに、プレーヤ全員がインターネットに接続していなければなりません。</p><p>上の2つのアプローチはユーザにストレスを与えます。FlyWebでは、Webゲームとしてデザインできますが、マルチプレーヤの実現にクラウドを使うことはなく、その代わりにゲームそのものが、ローカルのマルチプレーヤのエクスペリエンスをホストすることができます。以下がその方法です。</p><p>誰もアプリをダウンロードする必要はないし、アカウントや相互参照のための固有のコードや面倒な何かを登録する必要もありません。ゲームをホスティングするブラウザだけが、ホスト”サーバ”ページをフェッチするため、インターネットに接続している必要があります（Service Workerのような新しいWebの機能があれば、インターネットへの接続も要求されません）。ゲームは純粋なウェブプロトコル上に構築することが可能で、すべてが低レイテンシであり、利用可能です。基本的には、ローカルネットワークの外側をサポートするインフラストラクチャが1つも無くても、FlyWebをサポートしているブラウザが無くても、マルチユーザーエクスペリエンスは作成されます。</p><p>例えば、Justinはマリオカートのゲームプレイでの4プレーヤの分割スクリーンにインスパイアされ、FlyWebをUnity WebGLベースのカーレースのデモと組み合わせました。Kannan は、Mozillaのトロントオフィスで、下の動画に示すような、短時間のゲームセッションを開催しました。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/FJ5DEGvqDb4" frameborder="0" allowfullscreen></iframe></p><p>この例では、ノートパソコンのブラウザは”コンソール”として動作します。またスマートフォンのFlyWebクライアントはゲームコントローラとして動作します。スマートフォンのブラウザは、ノートパソコンのWebページ上で提供されるゲームサーバを見つけて接続し、”controller UI”のWebページを受信します。スマートフォン上でのこのコントローラーのページは、ホストページへのWebSocketの接続を確立して、タッチとハンドル操作の入力を送り返すのに使用します。</p><p>もし、あなたがAndroidのスマートフォンとノートパソコンをお持ちでしたら、今すぐこのデモをプレイすることができます（もしお望みであれば、ソースコードをダウンロードして改変することもできます）。<a href="https://flyweb.github.io/" rel="nofollow" title="" class="ext-link">flyweb.github.ioand</a>にアクセスして、指示に従い、デモへのリンクのページにある”Showcase”に行ってみてください。ゲームは、GitHub Pagesを経由して提供されています。また、ソースコードは<a href="https://github.com/flyweb/examples" rel="nofollow" title="" class="ext-link">GitHubリポジトリ</a>の”flyweb-gp”フォルダから入手できます。</p><p>同じGitHubリポジトリでは、スマートフォン間のWebベースのファイル共有のもっと簡単なデモに適した”flyfile”や”photo-wall”といったサブフォルダを見ることもできます。</p><p>例えばハードウェアデバイスを作るとしましょう。もしかしたら、それはお洒落で斬新なサーモスタットかもしれませんし、あるいは、自家製のクアッドコプターかもしれません。すばらしいですね。さて、これを制御するためにはUIが必要です。自由に使える選択肢が、以下のように2つあります。</p><p>最初に思いつくのは、恐らくこれでしょう。でも、幾つか問題があります。スマートフォンのアプリを作るのは骨が折れます。開発環境をセットアップし、選択したプラットフォームに即したSDKや構築ツール、その他の雑多なものをダウンロードする必要があります。アプリを書き、コンパイルして1つにまとめ、自分のスマートフォンにロードしなければなりません。他の人たちに、アプリを手軽に使ってもらおうと思うなら、（受け入れてもらえることを願いつつ）アプリストアで公開して、それを維持する必要があります。かなり面倒なことです。</p><p>さらに、対象としたいプラットフォーム毎に、このアプリを構築する必要があります。スマートフォンの他に、WindowsノートパソコンやMacノートからアクセスしたいのですか？別のアプリを作ってください。必ずしも手頃な開発エクスペリエンスとはいきません。</p><p>このアプローチはずっと簡単です。ネイティブアプリを構築する必要はありません。UIは異なるプラットフォーム上で動作します。アプリストアでアプリを提供しなくてもいいのです。サイドローディング配布用のバンドルを構築する必要もありません。しかし、UIにアクセスするのは難しいです。ブラウザを開放し、どうにかしてデバイスのIPアドレスを見つけ出し、それを入力しなければなりません。</p><p>このアプローチも、良くない事態を招く傾向にあります。もしも後で、他のローカルネットワーク（例えば、192.168.1.1:80）を使って、同じプライベートIPの他のサービスにアクセスするなら、そのサービスは最初のサービスで保存されていたCookieを盗むことができてしまいます。サービスは、キャッシュを使う時は注意が必要です。というのも、最初のサービスのためにキャッシュされたページを、2つ目のサービスを訪れた時に取得できてしまうかもしれないからです。</p><p>FlyWebのアプローチは、基本的には第2番目の選択肢ですが、特別な力があります。第1の力は、mDNSをアドバタイズメントすることで、ブラウザのUIはIPアドレスを見つけ出して手動で入力する代わりに、名前でサービスを見つけることができます。2つ目の力は、独自のホストネーム生成です。現在は、サービスに接続するたびに、ブラウザはそのサービスのホストネームとして、使用するUUIDを生成します。サービス間でUUIDがシェアされることはありませんので、Cookieのリークやキャッシュの二次汚染といった問題を避けることができます。</p><p>すばらしい才能を持った<a href="https://www.linkedin.com/in/yglazko" rel="nofollow" title="" class="ext-link">Kate Glazko</a>の助けを借りて、私たちはクアッドコプターのParrot ARとRaspberry PI（ヘリコプターの制御とFlyWebのサーバの紹介）におけるこのアプローチのデモを作り、そして2016年6月にMozillaのAll-Handsミーティングで発表しました。そのデモの様子が、このビデオで見られます。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/W1c3Pqrbt3s" frameborder="0" allowfullscreen></iframe></p><p>このデモのためのソースコードも、<a href="https://github.com/flyweb/examples" rel="nofollow" title="" class="ext-link">examplesリポジトリ</a>（flyweb-quadcopterのフォルダの中）で入手することができます。私たちはESP8266(マイクロコントローラが埋め込まれた5ドルのWiFiチップ)というとてもシンプルなハードウェア上でデモを作りました。FlyWebのサーバは、非常に小さなハードウェア上で実行することができます。ごく小さな、パワーの弱いデバイスでもかなりリッチなUIを提供することができます。なぜなら、Webのプラットフォームによって、非常にパワフルなスマートフォンやコンピュータに、コントロールUIをダイナミックに流せるようになるからです。</p><p>現在、この機能はFirefox Nightly（AuroraやBetaでは対応していません）のみで実装、公開されており、デフォルトの設定ではオフになって隠れています。現在の実装は基本的には”バージョン0″の実装で、すばらしいデモを作ったり、FlyWebの可能性を味わったりするのには十分です。</p><p>チームの差し当たっての目標は、アーリーアダプタの開発者や愛好者に、この実装を使ってもらい、将来的な”真の”Webのスタンダードとしての実現性に関してのフィードバックをもらうことです。もしもあなたが、快適なマルチユーザの”ローカルエリア”エクスペリエンスの構築を目指しているのなら、あるいはハードウェアのハッカーであなたの創造物にUIを与える簡単な方法を探しているのなら、FlyWebを見て、考えを聞かせてくれることを願っています。</p><p>もしもこの機能の可能性にワクワクしているか、これを使って何かを構築したい、あるいは実装を手伝いたいなら（私たちのチームは2人で、大規模なプロジェクトではありません。これは実験的な”革新的研究開発部門”プロジェクトです）、<a href="https://flyweb.github.io/" rel="nofollow" title="" class="ext-link">flyweb.github.io</a>を訪れてみてください。Slackの<a href="https://mozflyweb.slack.com/" rel="nofollow" title="" class="ext-link">mozflyweb.slack.com</a>で、私たちとチャットすることもできます（<a href="https://mozflyweb-slack-invite.herokuapp.com/" rel="nofollow" title="" class="ext-link">こちら</a>から登録してください）。Twitterで<a href="https://twitter.com/MozFlyWeb" rel="nofollow" title="" class="ext-link">@MozFlyWeb</a>をフォローしてください。</p><p>これは、ごく初期段階の実装であることを心に留めておいてください。恐らくバグやセキュリティ上の問題はあるでしょう。もしもFlyWebをどうしても試してみたいなら、その目的のためだけの<a href="https://developer.mozilla.org/en-US/Firefox/Multiple_profiles" rel="nofollow" title="" class="ext-link">新しいFireFoxのプロファイルを作る</a>ように助言しますし、そのプロファイルを使って一般的なWebをブラウジングしないことを強くお勧めします。FlyWebのデモを実行するためだけのプロファイルを使うか、独自のコードを使いましょう。</p><p>Happy hacking! :)</p>
