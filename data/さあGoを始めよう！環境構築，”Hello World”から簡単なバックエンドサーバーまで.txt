<p><a href="http://howistart.org/posts/go/1" rel="nofollow" title="" class="ext-link">How I start Go</a> by <a href="https://twitter.com/peterbourgon" rel="nofollow" title="" class="ext-link">Peter Bourgon</a></p><p>Goは、<a href="http://en.wikipedia.org/wiki/Go_%28programming_language%29#History" rel="nofollow" title="" class="ext-link">信頼できる賢い人たち</a>によって作られた愛すべきささやかなプログラミング言語で、<a href="https://groups.google.com/forum/#!forum/golang-nuts" rel="nofollow" title="" class="ext-link">現在も成長中の大規模なオープンソースコミュニティ</a>によって、継続的に改善が続けられています。</p><p>Goの基本原則はシンプルであることですが、時折、約束事が分かりにくいこともありますね。以下では、私がどのようにしてGoのプロジェクトを始め、どのようにGoのイディオムを使っているかを紹介したいと思います。一緒に、Webアプリケーション用のバックエンドサービスを構築しましょう。</p><p>最初のステップは、もちろんGoをインストールすることです。オフィシャルサイトに用意されている、<a href="http://golang.org/doc/install" rel="nofollow" title="" class="ext-link">お使いのオペレーティングシステム用のバイナリディストリビューション</a>を使ってください。MacでHomebrewを使っている場合は、<code>brew install go</code>でうまくいくと思います。インストールが終わったら、次のように動作するはずです。</p><p>インストール完了後にGOPATHの設定をしてください。GOPATHは、Goのコードや中間生成物を収めるためのルートディレクトリです。この設定をすると、GOPATH内には3つのサブディレクトリ（bin、pkg、src）が生成されます。人によっては、これに<code>$HOME/go</code>のような設定をする方もいますが、私はシンプルに<code>$HOME</code>としています。お使いの環境で、これがきちんとエクスポートされるかどうかを確認してください。bashを使っている場合は、次のようにしてもいいと思います。</p><p>Goには様々なエディタやプラグインが使用できますが、個人的にはSublime Textと優秀な<a href="https://github.com/DisposaBoy/GoSublime" rel="nofollow" title="" class="ext-link">GoSublime</a>プラグインがお気に入りです。ただ、言語そのものが分かりやすいため、特に小規模のプロジェクトにおいては、シンプルなテキストエディタでも十分に事足りるかと思います。私と一緒に作業をしているフルタイムのGo開発者のプロは、いまだに通常のVimをシンタックスハイライトもせずに使っているほどです。だから、始めるのに大層なものは必要ありません。シンプル・イズ・ベストですよね。</p><p>機能的な環境が整ったら、プロジェクトのために新しいディレクトリを作りましょう。Goのツールチェーンでは、全てのソースコードは$GOPATH/srcにあることが前提のため、そこがワークスペースとなります。また、ツールチェーンは、GitHubやBitbucketといったサイトにホストされているプロジェクトを、それらが正しい場所にありさえすれば、直接インポートしたり、やり取りをしたりすることも可能です。</p><p>この例として、GitHubで空のレポジトリを新規に作成してみます。仮に名前を「hello」として、$GOPATH内にそのレポジトリを設定してください。</p><p>いいですね。<code>main.go</code>を作成します。これがGoの最小限のプログラムです。</p><p><code>go build</code>を呼び出して、カレントディレクトリ内の全てをコンパイルします。これにより、ディレクトリと同じ名前のバイナリが生成されます。</p><p>簡単ですね。Goを書き始めて数年が経ちますが、私はいまだにこうやって新規プロジェクトを始めています。手始めに空のGitレポジトリ、続いて<code>main.go</code>を作成し、あとはわずかなタイピング操作のみです。</p><p>共通の規則に従っているため、このアプリケーションは自動的に<code>go get</code>が可能な状態になります。このファイルをコミットし、GitHubにプッシュした場合、Goがインストールされた作業環境では、次のことができるはずです。</p><p>このhello, worldをWebサーバに転化してみましょう。以下がその全プログラムです。</p><p>手順は次の通りです。まずは標準ライブラリから<a href="http://golang.org/pkg/net/http" rel="nofollow" title="" class="ext-link">net/http</a>パッケージをインポートする必要があります。</p><p>次に、main関数の中で、Webサーバのルートパスにハンドラ関数を設定します。<a href="http://golang.org/pkg/net/http/#HandleFunc" rel="nofollow" title="" class="ext-link">http.HandleFunc</a>は、正式には<a href="http://golang.org/pkg/net/http/#ServeMux" rel="nofollow" title="" class="ext-link">ServeMux</a>と呼ばれており、デフォルトのHTTPルータ上で動作します。</p><p>関数helloは、<a href="http://golang.org/pkg/net/http/#HandleFunc" rel="nofollow" title="" class="ext-link">http.HandleFunc</a>で、特定の型シグネチャを持ち、HandleFuncに引数として渡すことができることを意味します。ルートパスにマッチした新しいリクエストがHTTPサーバに来る度に、サーバはhello関数を実行する新しいgoルーチンを生成するというわけです。hello関数は、シンプルに<a href="http://golang.org/pkg/net/http/#ResponseWriter" rel="nofollow" title="" class="ext-link">http.ResponseWriter</a>を使い、クライアントにレスポンスを返します。http.ResponseWriter.Writeは、パラメータとして、より一般的な<code>[]byte</code>（byteスライス）を取るので、文字列を単純に型変換すれば大丈夫です。</p><p>最後に、<a href="http://golang.org/pkg/net/http/#ListenAndServe" rel="nofollow" title="" class="ext-link">http.ListenAndServe</a>経由で、デフォルトServeMuxのHTTPサーバをポート8080で開始させます。これは同期、またはブロッキングやコールで、割り込みがあるまではプログラムを起動し続けます。先ほどのようにコンパイルして実行してみましょう。</p><p>別のターミナルかブラウザで、HTTPリクエストを出してみてください。</p><p>簡単ですね。インストールすべきフレームワークもなく、ダウンロードすべき外部依存関係もなく、作成すべきプロジェクトスケルトンもありません。バイナリ自体でさえ、静的にリンクされたネイティブコードで、ランタイムの依存関係もないのです。さらに、標準ライブラリのHTTPサーバは、一般的な攻撃に対する耐性を持つ本番用の製品グレードで、何の仲介もなしにインターネットからのリクエストを直接、処理することができます。</p><p>もちろん、単にhelloと言う以外にも、もっと面白いことができますよ。都市を入力して気象データAPIを呼び出し、気温と共にレスポンスを送ってみましょう。<a href="http://openweathermap.org/" rel="nofollow" title="" class="ext-link">OpenWeatherMap</a>は、<a href="http://openweathermap.org/api" rel="nofollow" title="" class="ext-link">現在の天気予報</a>用の<a href="http://openweathermap.org/current" rel="nofollow" title="" class="ext-link">シンプルなフリーAPI</a>を提供しており、<a href="http://api.openweathermap.org/data/2.5/weather?q=Tokyo" rel="nofollow" title="" class="ext-link">都市名によってクエリ</a>ができるようになっています。そして、次のようなレスポンスを返します（一部編集済みです）。</p><p>Goは静的型付き言語であるため、このレスポンス形式を反映した構造を作成する必要があります。情報は全てではなく、必要な分だけ取得できれば大丈夫です。現状、都市名と（面白いことに）ケルビンで返される気温を取得してみましょう。ここで、気象データAPIから戻された必要データを表現するための構造体を定義します。</p><p><code>type</code>は、新しい型を定義するキーワードです。名前を<code>weatherData</code>とし、構造体として宣言します。構造体の各フィールドには名前（例：<code>Name</code>、<code>Main</code>）、型（<code>string</code>、別の無名<code>struct</code>）、そしてタグと呼ばれるものがあります。タグはメタデータのようなもので、構造体へのAPIのレスポンスを直接、展開するために<a href="http://golang.org/pkg/encoding/json" rel="nofollow" title="" class="ext-link">encoding/json</a>パッケージを使えるようにするものです。PythonやRubyといった動的プログラミング言語に比べると、入力が多くなるものの、非常に理想的な形で型の安全性の特性が得られます。JSONとGoについてのより詳しい情報は、<a href="http://blog.golang.org/json-and-go" rel="nofollow" title="" class="ext-link">ブログのこの投稿</a>や<a href="https://gobyexample.com/json" rel="nofollow" title="" class="ext-link">こちらのコード例</a>をご覧ください。</p><p>これで構造体は定義ができました。次は、そこにデータを投入する方法を定義する必要があります。そのための関数を書いてみましょう。</p><p>この関数は都市を表す文字列を受け取り、weatherData構造体とエラーを返します。これはGoの基本的なエラー処理のイディオムです。関数は振る舞いをエンコードしますが、振る舞いは概して失敗する可能性があります。この例で言うと、OpenWeatherMapに対するGETリクエストが失敗する理由はいくらでもあり、返されたデータが期待したものではない可能性もあります。いずれの場合も、クライアントにはnil以外のエラーを返します。そうすればクライアントは、呼び出し元のコンテキストに従ってそれを処理するはずです。</p><p><a href="http://golang.org/pkg/net/http/#Get" rel="nofollow" title="" class="ext-link">http.Get</a>が成功すると、レスポンスボディをクローズするための呼び出しを<a href="http://golang.org/doc/effective_go.html#defer" rel="nofollow" title="" class="ext-link">defer</a>して保留します。この呼び出しは関数スコープを離れる時（クエリ関数から戻る時）に実行されます。これはリソース管理の洗練された形です。その一方で、weatherData構造体をアロケートし、<a href="http://golang.org/pkg/encoding/json/#Decoder" rel="nofollow" title="" class="ext-link">json.Decoder</a>を使用してレスポンスボディから直接この構造体に展開します。</p><p>余談ですが、<a href="http://golang.org/pkg/encoding/json/#NewDecoder" rel="nofollow" title="" class="ext-link">json.NewDecoder</a>はGoの洗練された機能である<a href="http://go-book.appspot.com/interfaces.html" rel="nofollow" title="" class="ext-link">インターフェース</a>を利用します。DecoderはHTTPレスポンスボディの実体を受け取らず、<a href="http://golang.org/pkg/net/http/#Response" rel="nofollow" title="" class="ext-link">http.Response.Body</a>の要件を満たす<a href="http://golang.org/pkg/io/#Reader" rel="nofollow" title="" class="ext-link">io.Reader</a>インターフェースを受け取ります。Decoderは、型に対して他の振る舞い（Read）の要件を満たすメソッドを呼び出すことで機能する振る舞い（Decode）を提供します。Goでは、インターフェースで動作する関数単位で振る舞いを実装することが多いです。これにより、データ転送と経路制御を明確に切り離し、モックを使ったテストを容易にし、論理的で分かりやすいコードを書くことができます。</p><p>最後に、デコードが成功したら、成功を意味するnilエラーを付けてweatherDataを呼び出し元に返します。それでは、この関数をリクエストハンドラまでつないでみましょう。</p><p>ここでは、ハンドラを個別の関数ではなくインラインで定義しています。<a href="http://golang.org/pkg/strings/#SplitN" rel="nofollow" title="" class="ext-link">strings.SplitN</a>を使用して/weather/以降のパス全てを受け取り、それを都市として扱います。クエリを行いエラーがあればクライアントに<a href="http://golang.org/pkg/net/http/#Error" rel="nofollow" title="" class="ext-link">http.Error</a>ヘルパー関数を使って伝えます。HTTPリクエストを完了するため、その時点で戻る必要があります。エラーがない場合は、JSONデータを送信することをクライアントに伝え、<a href="http://golang.org/pkg/encoding/json/#NewEncoder" rel="nofollow" title="" class="ext-link">json.NewEncoder</a>を使って直接weatherData をJSON形式にエンコードします。</p><p>ここまで、コードはいい感じです。手順に沿い、理解しやすいものになっています。誤った解釈の心配はありませんし、一般的なエラーを見逃す恐れもありません。「hello, world」ハンドラを<code>/hello</code>に移動し、必要なインポートを行うと、プログラムが完成します:</p><p>ビルドして実行しましょう。前回と同じです。</p><p>コミットしてプッシュしましょう！</p><p>複数の気象データAPIにクエリして平均値を出せば、その都市のより正確な気温を出せるかもしれません。残念ながらほとんどの気象データAPIは認証が必要です。ここでは自分で<a href="http://www.wunderground.com/weather/api" rel="nofollow" title="" class="ext-link">Weather Underground</a>のAPIキーを取得して下さい。</p><p>すべての気象データAPIで同じ振る舞いをしてほしいので、その振る舞いをインターフェースとしてエンコードします。</p><p>これで、先ほどのOpenWeatherMapクエリ関数を、weatherProviderインターフェースの要件を満たす型に変換できるようになりました。HTTP GETを行うために状態を保存する必要がないので、空の構造体を使用します。そして動作を確認するために、ロギングを行うためのシンプルな行を追加しましょう。</p><p>レスポンスからはケルビン温度を取り出したいだけなので、レスポンス構造体はインラインで定義できます。それ以外は、openWeatherMap構造体でメソッドとして定義したクエリ関数とほとんど同じです。このようにして、openWeatherMapのインスタンスをweatherProviderとして使用できます。</p><p>Weather Undergroundでも同じことをしましょう。唯一の違いは、APIキーを提供する必要があることです。キーを構造体に保存して、メソッド内で使用します。非常に似通った関数になります。</p><p>（Weather UndergroundはOpenWeatherMapほどあいまいさを排除しないことに注意してください。ここでは例を示すことを優先して、あいまいな都市名を扱うための重要なロジックをいくつか飛ばします。）</p><p>これで気象データプロバイダが2つ揃いました。では両方にクエリし、平均気温を返す関数を書きましょう。ここでは複雑さをさけるために、エラーが発生したらあきらめることにします。</p><p>この関数の定義はweatherProvider temperatureメソッドとほとんど同じであることにお気付きですか？　個々のweatherProvidersを型に集めて、その型にtemperatureメソッドを定義すれば、他のweatherProvidersから構成される包括的なweatherProviderを実装できます。</p><p>完璧です。これで、weatherProviderを受け入れるところならどこへでもmultiWeatherProviderを渡すことができます。</p><p>これで、HTTPサーバにつなぐことができるようになりました。前回とほとんど同じです。</p><p>前回と同様に、コンパイルして、実行し、GETします。JSONレスポンスに加えて、サーバログに何か出力されるはずです。</p><p>コミットしてプッシュしましょう！</p><p>現時点では、APIを1つずつ同期的にクエリしているだけです。しかし、同時にクエリしてはいけない理由はありません。そうすればレスポンス時間を削減できるはずです。</p><p>これを行うために、Goの並列処理命令であるgoルーチンとチャネルを使います。各APIへのクエリをそれぞれのgoルーチン内で生成すれば、並列で実行されます。レスポンスを1つのチャネルに集めて、全てが完了したら平均値を算出します。</p><p>これで、リクエストは最も遅いweatherProviderにかかる時間で処理できるようになりました。multiWeatherProviderの振る舞いを変更するだけでできたのです。そして特筆すべきは、いまだにシンプルで同期的なweatherProvider インターフェースとしての要件を満たしていることです。</p><p>コミットしてプッシュしましょう！</p><p>「hello world」から始めて、並行処理のREST風バックエンドサーバまで、わずかなステップとGoの標準ライブラリだけを使ってやってきました。このコードはフェッチして、<a href="https://golang.org/doc/install#requirements" rel="nofollow" title="" class="ext-link">ほとんどすべてのサーバアーキテクチャ</a>にデプロイできます。結果として生成されるバイナリは自己完結型で高速です。そして最も重要なのは、このコードは読みやすく解釈が容易なことです。必要に応じて保守や拡張を簡単に行うこともできます。これらの特性は、シンプルさをあくまで最重要視したGoの哲学のおかげだと私は思います。Goの開発者の1人であるRob Pikeが記したように、<a href="http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html" rel="nofollow" title="" class="ext-link">少ないほど飛躍的に増加する</a>のです。</p><p>最終コードをgithubに<a href="https://github.com/peterbourgon/how-i-start-go" rel="nofollow" title="" class="ext-link">フォーク</a>しましょう。</p><p>別のweatherProviderを追加してみましょう（ヒント:<a href="https://developer.forecast.io/" rel="nofollow" title="" class="ext-link">forecast.io</a>はお勧めです）。</p><p>multiWeatherProviderにタイムアウトを実装しましょう（ヒント:<a href="http://golang.org/pkg/time/#After" rel="nofollow" title="" class="ext-link">time.After</a>を参照してください）。</p>
