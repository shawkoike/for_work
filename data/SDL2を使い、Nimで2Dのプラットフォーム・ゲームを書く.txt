<p><a href="https://hookrace.net/blog/writing-a-2d-platform-game-in-nim-with-sdl2/" rel="nofollow" title="" class="ext-link">Writing a 2D Platform Game in Nim with SDL2</a> （2016-06-14） by <a href="http://felsin9.de/nnis/" rel="nofollow" title="" class="ext-link">Dennis Felsing</a></p><p>この記事ではシンプルな2Dの<a href="https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%83%BB%E3%82%B2%E3%83%BC%E3%83%A0" rel="nofollow" title="" class="ext-link">プラットフォーム・ゲーム</a>を書きます。SDLを使ったNimによるゲーム開発のチュートリアルとしてもよいでしょう。</p><p>ここでは、ユーザ入力を読み込み、グラフィックスとタイルマップを表示させ、衝突判定と処理を伴うシンプルな2Dの物理をシミュレーションします。その後、シンプルなカメラの動作とゲームロジックを実装します。また、適宜情報を表示するため、テキストをレンダリングし、そのためのキャッシュの仕組みを構築していきます。</p><p>最終的な成果物は、SDL2のみで動いて簡単に配信できる、ゲームに最適なバイナリファイルです。Linux環境の場合、NimをWindows用にクロスコンパイルする簡単な方法も提示しますので参照してください。</p><p>簡潔に説明するため、<a href="https://ddnet.tw/" rel="nofollow" title="" class="ext-link">DDNet</a>と<a href="https://www.teeworlds.com/" rel="nofollow" title="" class="ext-link">Teeworlds</a>のなじみ深いグラフィックスを使います。このチュートリアルの成果は下の動画のようになります。</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview3.png"><source src="https://hookrace.net/public/platformer/platformer-finished.mp4" type="video/mp4"></source></video></p><p>この記事では、画像とビデオによる解説で開発手順を追っていきますが、最善の学習方法は、この記事を見ながらご自身で各ステップを実装してみることです。コードは、各自でいじったりあらゆる変更を試したりすることによって直感的に理解できるよう、意図的にシンプルかつ簡易にしてあります。フルソースコードのリンクは、各セクションの末尾に用意しました。</p><p>ここで紹介するコードの各イテレーションと最終的な成果物は<a href="https://github.com/def-/nim-platformer" rel="nofollow" title="" class="ext-link">GitHubのレポジトリ</a>で入手可能です。出来上がったバイナリは以下からダウンロードできます。<a href="https://hookrace.net/public/platformer/platformer_1.0_win64.zip" rel="nofollow" title="" class="ext-link">Win64</a>、<a href="https://hookrace.net/public/platformer/platformer_1.0_win32.zip" rel="nofollow" title="" class="ext-link">Win32</a>、<a href="https://hookrace.net/public/platformer/platformer_1.0_linux_x86_64.tar.gz" rel="nofollow" title="" class="ext-link">Linux x86_64</a>、<a href="https://hookrace.net/public/platformer/platformer_1.0_linux_x86.tar.gz" rel="nofollow" title="" class="ext-link">Linux x86</a></p><p>このプロジェクトに必要なものは下記のとおりです。</p><p>LinuxやMac OS X等のUnix系のシステムの場合は、インストールは下記のようになります。</p><p>C言語コンパイラも必要になりますので注意してください。望ましいのはGCCやClangです。</p><p>ソースコードからNimとNimbleをコンパイルする代わりに、パッケージマネージャを使って最新バージョンのNimとNimbleをインストールしてもよいでしょう。</p><p>SDL2を他のプラットフォームで設定したい人には、<a href="http://lazyfoo.net/tutorials/SDL/01_hello_SDL/index.php" rel="nofollow" title="" class="ext-link">より幅広いガイド</a>があります。<a href="http://nim-lang.org/download.html" rel="nofollow" title="" class="ext-link">Nim</a>と<a href="https://github.com/nim-lang/nimble#installation" rel="nofollow" title="" class="ext-link">nimble</a>の設定に関しても同様です。</p><p>C言語やC++で書かれたSDL2を知っているなら、これからNimで行うことはそれに非常に似ていると気付くでしょう。実際、NimのSDL2ラッパーは、C言語による本来のSDL2インターフェースを包括する薄いレイヤーに過ぎません。SDL2のチュートリアルで学んだことを何でも適用できる利点がありますが、ハイレベルのNimライブラリを使った場合と比べると若干ボイラープレート的になってしまうのが欠点です。</p><p>まさにこのボイラープレートで画面を初期化するところから始めましょう。</p><p>条件を確認する<code>sdlFailIf</code>テンプレートを導入し、条件が真ならSDLの追加エラー情報と共に<code>SDLException</code>を発生させるようにします。<code>main</code>procで、SDL2を初期化し、通常の画面と加速した2Dレンダラを作成します。エラー処理は先ほど導入した<code>sdlFailIf</code>procで行います。</p><p>いまのところ、ゲームのループは画面の消去と描画を毎フレーム行っているだけです。VSyncが有効で、スクリーンの設定が60 Hzの場合、そのループは1秒に60回実行されます。</p><p><code>nim -r c platformer</code>を実行すれば、同様のステップでコンパイルと実行ができます。ファイル名は<code>platformer.nim</code>になるでしょうか。最適化しながらコンパイルする場合は、<code>nim -d:release -r c platformer</code>を使います。結果はシンプルな単色の画面です。</p><p><img src="https://hookrace.net/public/platformer/platformer-empty.png" alt="Just a window with blue content"><br>
この小さなプログラムを終了するには、ターミナル画面の中でCtrl-Cを入力してください。残念ながら、まだゲームの画面そのものから終了することはできないので、その修正を行いましょう。</p><p><a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part1.nim" rel="nofollow" title="" class="ext-link">セクション1のフルコード</a></p><p>初めに、<code>Input</code>型を追加し、サポートしたいすべての入力と、ゲームの状態オブジェクトにおける入力の配列を格納できるようにしましょう。</p><p><code>Game</code>状態の型に<code>ref</code>型を選ぶことで、誤ってそのコピーが作られてしまうのを簡単に防げます。初期設定では、Gameオブジェクトに対してスマートポインタだけが渡されます。<code>inputs</code>フィールドは<code>Input</code>から<code>bool</code>にマッピングされる配列で、現在どの入力が押されているか(<code>true</code>)/押されていないか(<code>false</code>)を示します。新規ゲーム状態オブジェクトの作成は大したことではないので、今は新規ヒープオブジェクトを作成し、あとで必要になるSDL2 <code>renderer</code>を割り当てます。</p><p><code>inputs</code>を何らかの方法で初期化する必要はありません。全てデフォルトでバイナリnullに初期化されているため、「スタート時には全てオフになっている」という要求事項に完全に合致するからです。<code>renderer</code>フィールドを初期化しなかった場合、それはnullポインタになり、誤ってそこを参照してしまうと問題が起こります。</p><p>次に必要なのは、キーボードのスキャンコードを解釈可能な入力にマッピングする関数です。</p><p><code>toInput</code>は、未定義のケースに対しては常に<code>Input.none</code>を返すことに注意してください。この挙動を使って、コード内に分岐を設けることなく、未使用のキーボード入力を無視します。1つの入力にマッピングするための複数のスキャンコードを知るのは難しいことではありません。</p><p>次に、ゲームループを修正し、新しい<code>handleInput</code>procを呼び出してキーボード入力に反応するようにします。また、<code>main</code>procの中で関心の分離をせずにすむよう、レンダリングそのものを分割しました。</p><p>これで、<em>q</em>の入力、あるいは画面の<em>閉じる</em>ボタンでゲームを終了できるようになりました。今は、その他のユーザ入力は<code>inputs</code>配列に格納しておき、あとで使いましょう。</p><p>できる限り効率よくアクセスできるよう、inputs配列はわざと簡潔な配列にしています。ハッシュテーブルやその他のデータ構造を使うとなると、簡単にそのような約束ができません。多くの場合、シンプルさは有利であり、開発中のシステムにおいて何が起こっているのかを理解しやすいものです。</p><p><a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part2.nim" rel="nofollow" title="" class="ext-link">セクション2のフルコード</a></p><p>これらのユーザ入力が何かの役に立つようにしたければ、青空以外のものを表示しなければなりません。</p><p>プレイヤーのテクスチャと現在の位置・速度も格納するようにゲーム状態オブジェクトを拡張しましょう。ここでは<a href="http://nim-lang.org/docs/basic2d.html" rel="nofollow" title="" class="ext-link">basic2dモジュール</a>を使います。</p><p>プレイヤー用に、Teeworldの初期設定のキャラクター、teeのグラフィックを使います。</p><p><a href="https://hookrace.net/public/platformer/player.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="Player" src="https://hookrace.net/public/platformer/player.png"><img style="display: inline;" alt="Player" src="https://hookrace.net/public/platformer/preview-player.png"></a><br>
このファイルを<a href="https://hookrace.net/public/platformer/player.png" rel="nofollow" title="" class="ext-link">player.png</a>として保存すると便利です。しっくりこないようであれば、<a href="https://ddnet.tw/skins/" rel="nofollow" title="" class="ext-link">DDNet Skin Database</a>の数百のスキンの中から選んでもよいでしょう。例えば次のようなグラフィックです。</p><p>
</p>
<p><a href="https://ddnet.tw/skins/skin/Apish%20Coke.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="Apish Coke" src="https://hookrace.net/public/platformer/preview-Apish%20Coke.png"></a><a href="https://ddnet.tw/skins/skin/aqua.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="aqua" src="https://hookrace.net/public/platformer/preview-aqua.png"></a><a href="https://ddnet.tw/skins/skin/cutie.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="cutie" src="https://hookrace.net/public/platformer/preview-cutie.png"></a><a href="https://ddnet.tw/skins/skin/dragon.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="dragon" src="https://hookrace.net/public/platformer/preview-dragon.png"></a><a href="https://ddnet.tw/skins/skin/hammie-chew.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="hammie-chew" src="https://hookrace.net/public/platformer/preview-hammie-chew.png"></a><a href="https://ddnet.tw/skins/skin/penguin.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="penguin" src="https://hookrace.net/public/platformer/preview-penguin.png"></a><a href="https://ddnet.tw/skins/skin/tank.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="tank" src="https://hookrace.net/public/platformer/preview-tank.png"></a><a href="https://ddnet.tw/skins/skin/turtle_r.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="turtle_r" src="https://hookrace.net/public/platformer/preview-turtle_r.png"></a><a href="https://ddnet.tw/skins/skin/bomb.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="bomb" src="https://hookrace.net/public/platformer/preview-bomb.png"></a><a href="https://ddnet.tw/skins/skin/coala.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="coala" src="https://hookrace.net/public/platformer/preview-coala.png"></a><a href="https://ddnet.tw/skins/skin/Tutawek1.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="Tutawek1" src="https://hookrace.net/public/platformer/preview-Tutawek1.png"></a><a href="https://ddnet.tw/skins/skin/zzz.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="zzz" src="https://hookrace.net/public/platformer/preview-zzz.png"></a><a href="https://ddnet.tw/skins/skin/robin_hood.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="robin_hood" src="https://hookrace.net/public/platformer/preview-robin_hood.png"></a><a href="https://ddnet.tw/skins/skin/red_bird.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="red_bird" src="https://hookrace.net/public/platformer/preview-red_bird.png"></a><a href="https://ddnet.tw/skins/skin/dino.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="dino" src="https://hookrace.net/public/platformer/preview-dino.png"></a><a href="https://ddnet.tw/skins/skin/godlike.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="godlike" src="https://hookrace.net/public/platformer/preview-godlike.png"></a><a href="https://ddnet.tw/skins/skin/lightbulb.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="lightbulb" src="https://hookrace.net/public/platformer/preview-lightbulb.png"></a><a href="https://ddnet.tw/skins/skin/mario.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="mario" src="https://hookrace.net/public/platformer/preview-mario.png"></a><a href="https://ddnet.tw/skins/skin/mike.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="mike" src="https://hookrace.net/public/platformer/preview-mike.png"></a><a href="https://ddnet.tw/skins/skin/mouse.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="mouse" src="https://hookrace.net/public/platformer/preview-mouse.png"></a><a href="https://ddnet.tw/skins/skin/Robot.png" rel="nofollow" title="" class="ext-link"><img style="display: inline;" alt="Robot" src="https://hookrace.net/public/platformer/preview-Robot.png"></a></p><p>別のイメージを使いたい場合は、忘れずにプレイヤーグラフィックの名称を<code>player.png</code>にしてください。</p><p>まず使うと決めたプレイヤーグラフィックを<code>newGame</code>の定義で読み込み、<code>Game</code>と<code>Player</code>のデータ構造体を初期化する必要があります。次のとおりです。</p><p><code>restartPlayer</code>を使って、プレイヤーをスタート地点にリセットします。<code>loadTexture</code>関数で、PNGイメージをSDL2テクスチャとしてメモリに読み込み、<code>Game</code>オブジェクトに格納できるようにします。</p><p>さらに、SDL2の初期化と同じように、<code>main</code>procの中で、SDL2イメージモジュールも忘れずに初期化しましょう。</p><p>PNGファイルだけサポートできればよいのですが、<code>const imgFlags: cint = IMG_INIT_PNG or IMG_INIT_JPG</code>を追記して、JPEGファイルも加えてもよいかもしれません。</p><p>次のタスクはこれを適切に配置することです。もちろん、柔軟なプレイヤーイメージを使う意図は、ボディを部分ごとに個別に動かすことにあるのですが、簡潔にするため、固定位置に置きましょう。簡単な追加で、プレイヤーの水平位置によって足を回転させることができるようになります。もう1つの追加で、目がマウスカーソルを追うようにもできます。</p><p>数字がいくつかというのはさほど重要ではなく、ただプレイヤーがどう配置されるべきかを表しています。<code>renderTee</code>によって、どのボディパーツをどの場所にどの順序で描くかを定義します。最後にこれらの各ボディパーツは<code>copyEx</code>を使ったSDL2レンダラで描画されます。</p><p>ここで、ゲームループにteeキャラクターを描くには、<code>renderTee</code>を呼び出すだけです。</p><p>ついにまた、ビジュアルが進展を見せました。プレイヤーが空に浮いたのを見てください。</p><p><img src="https://hookrace.net/public/platformer/platformer-player.png" alt="Tee on blue background"><br>
<a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part3.nim" rel="nofollow" title="" class="ext-link">セクション3のフルコード</a></p><p>これで、プレイヤー用のレンダリングシステムが動くようになったので、プレイの場、マップが必要です。タイルのリストだけでなくテクスチャも格納しなければなりません。</p><p>それぞれのタイルは<code>uint8</code>になるよう定義されます。これは包括的に0から255の間の値を表すということです。都合の良いことに、Teeworldsタイルセットのグラフィックは16 × 16 = 256タイルです。芝のタイルセットを使ってみましょう。</p><p><img src="https://hookrace.net/public/platformer/grass.png" alt="Grass Tileset"><br>
ダウンロードし、このイメージを<a href="https://hookrace.net/public/platformer/grass.png" rel="nofollow" title="" class="ext-link">grass.png</a>として保存します。</p><p><code>Map</code>データ構造体を初期化するため、以下のフォーマットのマップを解析するちょっとしたパーサを書いてみます。</p><p>このセクションの目標は、芝のタイルセットのマップで、次のようなレンダリング結果を得ることです。</p><p><img src="https://hookrace.net/public/platformer/platformer-partmap.png" alt="Map rendered with grass tileset"><br>
各数字は芝のタイルセットから選んだタイルを表します。今後この記事内では、<a href="https://hookrace.net/public/platformer/default.map" rel="nofollow" title="" class="ext-link">このdefault.map</a>を使います。私たちのパーサは、次のように<code>newMap</code>に実装されます。</p><p>ファイルを句と行の両方で分割します。各数字を符号なしの整数にパースし、正しく<code>0..255</code>の範囲内にあるかをチェックします。最終的な幅と高さは、行の長さと行数から計算されます。マップデータにエラーがあると、例外が投げられ、ゲームが終了してしまいます。</p><p>ここで、<code>newGame</code>を拡張し、マップを初期化しなければなりません。</p><p>この時点でテクスチャとマップのタイルが用意できています。やり残したのは、このすべてをレンダリングすることだけです。</p><p>これは<code>renderTee</code>に似ていますが、固定サイズのテクスチャのパーツを使います。テクスチャは64 × 64ピクセルサイズに切り分けられ、1行に16タイルあります。マップ内で各タイルを反復し、マップテクスチャからタイル<code>tileNr</code>をレンダリングしていきます。タイル0はエアタイルであり常に空なので、レンダリングする必要はありません。典型的なマップは大部分が空なので、これによりパフォーマンスが向上します。</p><p>最後に、プレイヤーをレンダリングした後は、マップがプレイヤーの上に配置されるよう、<code>main</code>procの中でレンダリングしなければなりません。</p><p>今のところ動かせるカメラがありませんので、静的な<code>game.camera</code>で、固定のレンダリング位置を取得します。しかしまだ動くことさえできませんから、あとでユーザ入力に関連づけたシンプルな物理モデルを実装することにします。</p><p>このセクションの成果は美しいマップのレンダリングです。</p><p><img src="https://hookrace.net/public/platformer/platformer-map.png" alt="Renderer Map"><br>
<a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part4.nim" rel="nofollow" title="" class="ext-link">セクション4のフルコード</a></p><p>このゲームの物理は、1秒50ティックに決めました。新規のティックが届いた時には、次のゲームのイテレーションだけを計算し、ゲームがが60 fpsで動こうが240 fpsで動こうが関係ないようにします。それでは、<code>main</code>procにティックを追加しましょう。</p><p>これがこのゲームの物理フレームワークですが、まだ一切動きません。重力を追加するところから始めます。</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview1.png"><source src="https://hookrace.net/public/platformer/platformer-gravity.mp4" type="video/mp4"></source></video><br>
プレイヤーが動きましたね。この素晴らしいアニメーションを、rを押すだけで繰り返し見ることができるよう、ここでプレイヤーを再起動できたほうがよさそうです。</p><p>まるで繰り返し再生する先のGIFそのものです。想像がつくかもしれませんし、<em>play</em>を何度かクリックしてみてもいいでしょう。</p><p><em>a</em>と<em>d</em>で左右に動かし、<em>space</em>でジャンプするように実装するのは訳もないことでしょう。</p><p>固有の値は試行錯誤で見つけるしかありません。他に優先したいことがあれば、いろいろな変更も可能です。ただ、プレイヤー位置は直接設定せず、速度ベクターを調整して位置に加算するようにしてください。これは衝突判定の際に重要です。</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview1.png"><source src="https://hookrace.net/public/platformer/platformer-moving.mp4" type="video/mp4"></source></video></p><p>壁と地面にエフェクトがあるかのように動かしてみましたが、読者は気付いてしまったかもしれません。実は衝突判定と処理の準備がまだ何もできていないことに。このコードの大部分はTeeworldsから適用しています。渡した速度ベクターに基づきプレイヤーの位置を計算する<code>moveBox</code>内で、タイルとの水平/垂直の衝突をチェックすることにより動作します。</p><p>衝突が起こると、プレイヤーはタイルから外れるよう正しい方向に動きます。<code>isSolid</code>をシンプルに保つため、<code>air, start, finish</code>以外のあらゆるタイルは硬い(=Solid)ブロックとみなします。浮動小数点のプレイヤー位置はタイルマップの中のインデックスに変換されるのです。</p><p><code>getTile</code>はマップ内の指定された位置からタイルを読み込み、オーバーフローやアンダーフローが起こらないようにします。</p><p><code>isSolid</code>はプレイヤーがタイルと衝突できるかどうかを決めます。先述したように、air、start、finish以外のすべてのタイルは衝突が可能です。</p><p>どちらかの足の下にブロックがある時、プレイヤーは地上にいます。</p><p>一方、<code>testBox</code>はプレイヤーを座標軸に平行な境界ボックスとみなし、プレイヤーが硬い壁の中に挟まっているかどうかを示します。</p><p>そして<code>moveBox</code>は、速度ベクター<code>vel</code>をプレイヤー位置<code>pos</code>に適用しようとします。これで衝突が起こる場合、コードはプレイヤーをx軸上のみ、そのあとでy軸上のみで動かし、タイルのどの側面にプレイヤーが衝突したかを探っていきます。プレイヤーがどの側面にも衝突していなかった場合はコーナーにぶつかります（これが本当のコーナーケースです）。</p><p><code>moveBox</code>procはさらに衝突のセットを返し、このイテレーションにおいてどのような種類の衝突が起こったのかを伝えてくれます。その情報は使いませんが、ただプレイヤーを衝突した壁から押し出すのでなく、特別な方法で衝突を処理したい場合には役立つかもしれません。</p><p>やっと<code>onGround</code> と<code>moveBox</code>が使えるようになりました。</p><p>ジャンプは地上に立っている時のみ可能です。空中における水平の動作は地上とは別の方法で計算し、空中における摩擦と地上の摩擦を異なるものとしてシミュレーションします。</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview1.png"><source src="https://hookrace.net/public/platformer/platformer-collisions.mp4" type="video/mp4"></source></video><br>
<a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part5.nim" rel="nofollow" title="" class="ext-link">セクション5のフルコード</a></p><p>キャラクターが画面右へ消えていったのが分かりましたか？　イケてるでしょ？　でも、このままでは残りのコースをプレイするのは難しすぎますよね。キャラクターはうまく動くようになりましたが、カメラが静止したままです。このセクションでは、カメラを水平方向に動かしていきましょう。この説明をすれば、垂直方向への動かし方もすぐに分かるはずです。カメラ位置はプレイヤーが動いている時だけ調整する必要があります。つまり、<code>game.physics()</code>の呼び出し後です。</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview3.png"><source src="https://hookrace.net/public/platformer/platformer-camera1.mp4" type="video/mp4"></source></video><br>
これでカメラは常に、プレイヤーの動きに合わせて水平方向に移動するようになりました。他にも、プレイヤーがスクリーンの中央から外れた時のみカメラを追わせるという方法もあります。今回の場合は200ピクセルです。</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview2.png"><source src="https://hookrace.net/public/platformer/platformer-camera2.mp4" type="video/mp4"></source></video><br>
もう1つ、カメラを滑らかに動かす方法もあります。プレイヤーが中心エリアから遠くへ離れた時ほど、カメラを素早く動かすのです。プレイヤーにくっついている輪ゴムでカメラが引っ張られていると考えてみてください。プレイヤーとカメラの距離が離れれば離れるほど、カメラはプレイヤーに強く引っ張られますよね？</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview3.png"><source src="https://hookrace.net/public/platformer/platformer-camera3.mp4" type="video/mp4"></source></video><br>
どれを採用するか決め難いので、とりあえず3つの方法とも実装します。コンパイルする時に<code>-d:fluidCamera</code>か<code>-d:innerCamera</code>を使って選択をしてください。</p><p><a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part6.nim" rel="nofollow" title="" class="ext-link">セクション#6のフルコード</a></p><p>これで、どこの場所に行ってもカメラがきちんとついて来てくれるようになりました。では、ゲームの目標を作りましょう。コースの始まりと終わりに、濃いグレーの明かりのような縦の線があることに気付いたでしょうか？　それぞれ<code>start</code>と<code>finish</code>として言及されているのではと予想していた人もいたんじゃないでしょうか？　　もうお分かりですね。これらはスタートラインとゴールラインです。スタートしてからゴールにたどり着くまでのプレイヤーのタイムを記録する役割もあります。</p><p>これで、<code>Player</code>に<code>Time</code>オブジェクトが格納されている状態です。プレイヤーが今回スタートを切ったタイムと、前回のタイム、プレイヤーのベストタイム、という3つの情報を教えてくれます。デフォルトでは、これらの値は、無効値を示す<code>-1</code>に初期化されていて、それ以外ではティックを格納します。</p><p>ディスプレイに表示する時間をフォーマットするのに、使い勝手のいい<a href="http://lyro.bitbucket.org/strfmt/" rel="nofollow" title="" class="ext-link">strfmt</a>ライブラリの文字列補間を使います。</p><p>このゲームのロジックは以下のようになっています。</p><p>コースの<code>main</code>procで<code>logic</code>を呼び出す必要があります。</p><p>これで、コースをプレイすることができ、端末に以下のようなアウトプットがやっと得られるようになりました。</p><p><a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part7.nim" rel="nofollow" title="" class="ext-link">セクション#7のフルコード</a></p><p>レースの結果のテキストが端末上ではなく、実際のゲーム画面に表示されたほうがいいですよね。では、SDL_ttfを使ってみましょう。</p><p><code>FontPtr</code>でSDL2のサーフェス（RAMに保存されている）にテキストをレンダリングし、テクスチャ（GPUのVRAMに保存されている）にしました。そしてテクスチャは、スクリーン上の指定した場所にレンダリングされます。</p><p>TTFのサブシステムを初期化し、<code>render</code>に現在のティックを渡す必要があります。</p><p>ゴール後に画面に表示されるテキストのレンダリングが以下です。</p><p><img src="https://hookrace.net/public/platformer/platformer-time1.png" alt="Finished time 1"><br>
なんかカッコ悪いですね。文字のふちがギザギザして見えます。これは、<code>renderUtf8Solid</code>がアルファブレンドを使用してないからです。アルファブレンドは高価なので、代わりに全ピクセルをすべて白にするか、完全に透明にし、半透明など中途半端にはしないようにしましょう。テキストに対して背景の色が決まっているのなら、背景の色を決める<code>renderUtf8Shaded</code>を使うこともできますが、ダイナミックな背景にカッコいいアウトプットを載せたいなら、<code>renderUtf8Blended</code>を使いましょう。</p><p><img src="https://hookrace.net/public/platformer/platformer-time2.png" alt="Finished time 2"><br>
よくなりました。しかし、背景が明くなると見にくいですね。この問題を解決するために、テキストを2回描いて、テキストのアウトラインを作ります。1回目は半透明の黒にして、2回目は背景と同じ色を上に載せます。</p><p><img src="https://hookrace.net/public/platformer/platformer-time3.png" alt="Finished time 3"><br>
<a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part8.nim" rel="nofollow" title="" class="ext-link">セクション#8のフルコード</a></p><p>このチュートリアルの間にCPUの使用率を見た人は気付いたかもしれませんが、このゲームでCPUはほとんど必要ありません。私のシステムでは、今のところ60 fpsで3％ほどです。しかし、テキストをレンダリングすると20％にまで上がります。これは、現状ではテキストが前のフレームと全く同じものだとしても、毎フレームごとにテキストのテクスチャを再生成しているからです。テキストが決まっていれば、再計算をするのではなく、単純にテクスチャを保存すればいいのです。しかし、よりフレキシブルにしたければ、グリフかテクスチャ･キャッシングシステムを使ってください。例えば、<a href="https://github.com/grimfang4/SDL_FontCache" rel="nofollow" title="" class="ext-link">SDL_FontCache</a>などのシステムです。</p><p>代わりに、Nimでアプリケーションに特化したちょっとしたキャッシング･スキームを書くこともできます。ここでのヒューリスティクスは、コードベースの一行が、同じ文字列を少なくとも何回かは生成し続ける、というものです。ですから、画面に何かを表示させる行それぞれについて、1つのテキストのレンダリングのみをキャッシュに格納すればいいのです。ということで、キャッシュデータ構造で検索する必要は一切なくなり、キャッシングには確実で不変のメモリの量しか使わないことになります。</p><p><code>CacheLine</code>が保存するもので、テクスチャへのポインタと、テクスチャの幅と高さの情報が含まれます。アウトラインの効果を出すためにテキストを2回レンダリングするので、このオブジェクトは2つ必要にあります。また、<code>text</code>は<code>TextCache</code>にも保存され、正しくテクスチャがキャッシュされたかを確認できます。</p><p><code>renderText</code>を実行して、使用できる<code>CacheLine</code>を返します。</p><p>テキストがキャッシュから直接格納されたら、2つのpassesでテキストがレンダリングされます。直接ではない場合は、古いキャッシュエントリは削除され、新しいテクスチャに替えられます。</p><p>Nimのメタプログラミングは、小規模なテンプレートで使い続けることができます。数日前に<a href="https://hookrace.net/blog/introduction-to-metaprogramming-in-nim/" rel="nofollow" title="" class="ext-link">『Metaprogramming in Nim（Nimのメタプログラミング）』</a>という記事を書きましたので、Nimの強みをさらに勉強したい人はお読みください。</p><p>3つの<code>renderTextCached</code>呼び出しはそれぞれの<code>TextCache</code>を割り当てられました。これは残りのプログラムの実行で使われます。注意しなければいけないのは、このキャッシングスキームは、「<code>renderTextCached</code>を呼び出す別々のコード行が比較的少なく、また頻繁に同じテキストを複数回連続してレンダリングする」という仮定のもとにのみ実力を発揮します。今回のケースにはぴったりです。</p><p>また、現在時間のタイム・フォーマットは毎フレームごとに再計算されていたので、精度を下げました。これで、CPUの使用率は4％に戻りました。そして、ゲームの最終形は以下のようになりました。</p><p><video controls="" muted="" poster="https://hookrace.net/public/platformer/video-preview3.png"><source src="https://hookrace.net/public/platformer/platformer-finished.mp4" type="video/mp4"></source></video><br>
<a href="https://github.com/def-/nim-platformer/blob/master/tutorial/platformer_part9.nim" rel="nofollow" title="" class="ext-link">セクション#9のフルコード</a></p><p><code>platformer.nimble</code>ファイルを生成して、Nimのパッケージマネージャである<a href="https://github.com/nim-lang/nimble" rel="nofollow" title="" class="ext-link">Nimbel</a>にどのようにパッケージをビルドするかを命令します。</p><p>この記事のすべての中間コードのステータスは<code>nimble tests</code>でコンパイルできます。<code>nimble build</code>を実行することで、ビルトをテストできます。これで、バイナリ<code>platformer</code>を生成できるようになります。<code>nimble install</code>は同じバイナリをインストールし、<code>~/.nimble/bin</code>で使用できるようになります。</p><p>しかし、インストールされた<code>platformer</code>バイナリを実行すると、以下のようなエラーが出てしまいます。</p><p>考えればこれは当然のことです。現在のディレクトリから実行時のファイルをロードしているからです。今となってはどこのディレクトリでもあり得ます。これを解決するには2つの方法があります。</p><p>ファイル名の代わりに<code>Stream</code>を受け入るために、<code>newMap</code>を変更する必要があります。</p><p>コンパイルの時、<code>-d:embedData</code>を以下のようにセットできます。</p><p><a href="https://github.com/def-/nim-platformer" rel="nofollow" title="" class="ext-link">リポジトリ</a>の中に、<a href="https://github.com/def-/nim-platformer/blob/master/platformer.nim" rel="nofollow" title="" class="ext-link">最終的なプラットフォーム･ゲームのコード</a>を見つけることができます。</p><p>そして、プルリクエストとして<a href="https://github.com/nim-lang/packages" rel="nofollow" title="" class="ext-link">Nimble packages</a>にリポジトリをサブミットできるようになり、すぐにNim開発者は<code>nimble install platformer</code>で端末からパッケージをインストールでき、<code>platformer</code>を実行するだけでプレイができるようになりました。</p><p><a href="https://github.com/def-/nim-platformer/blob/master/circle.yml" rel="nofollow" title="" class="ext-link">circle.yml</a>ファイルは、リポジトリをどのように実行してコンパイルするかを定義し、変更に応じて最新ビルドを保つのに使用できます。</p><p>しかし、このゲームのメインターゲットはおそらくNim開発者ではありませんので、Linux x86、x86-64とWindows x86、x86-64のような一般的なプラットフォーム向けにバイナリをビルドできるようにもしたいものです。Mac OS X向けにのビルドするのは、少し複雑です。<a href="https://hookrace.net/blog/ddnet-evolution-architecture-technology/#software-releases" rel="nofollow" title="" class="ext-link">DDNet</a>がどのように<a href="https://github.com/ddnet/ddnet/blob/master/scripts/make_release.py" rel="nofollow" title="" class="ext-link">それ</a>を<a href="https://github.com/ddnet/ddnet-scripts/blob/master/ddnet-release.sh" rel="nofollow" title="" class="ext-link">する</a>のかチェックしてみてください。</p><p>もちろん、ビルドしたい各システム用に単にVMをセットアップし、この記事の冒頭のインストラクションを使うこともできます。でもそれは面倒なので、簡単に1つのマシンでビルドできるようにしたいですよね。</p><p>私はArch Linuxを使っています。Arch Linuxは、他のLinuxディストリビューションと似たような方法で実行することが可能なはずです。</p><p>Linux向けのポータブルなバイナリをビルドするのは、glibcのせいで大変です。より新しいバージョンのglibcを使ってシステム上でコンパイルすると、古いバージョンのシステムでは実行されない可能性があります。一般的な解決法は、古いLinuxをインストールしたビルドシステムを使うことです。他にも、<a href="https://wiki.debian.org/Debootstrap" rel="nofollow" title="" class="ext-link">debootstrap</a>で古いDebianのchrootを生成するという方法もあります。また、この問題を解決するための<a href="http://www.linuxfoundation.org/collaborate/workgroups/lsb" rel="nofollow" title="" class="ext-link">Linux Standard Base</a>というのもありますが、私はまだ使ったことがありません。</p><p>もう少し過激な解決法としては、新しいシステム上にバイナリを生成し、glibcのより新しいバージョンに対して何のシンボルとリンクしているのかを確認する方法があります。今回のケースでは、すべてにおいて<code>GLIBC_2.2.5</code>を使用させたいので、別のことを確認します。</p><p><code>memcpy</code>だけが問題ですね。古いバージョンの<code>memcpy</code>ともう1つの問題<code>realpath</code>をリンカに無理やり使わせることもできます。例えば、インラインアセブラを使ったCコードだと以下のようになります。</p><p>しかし、これでは生成したすべてのCファイルにこれをインサートしなければならなくなります。もしくは、<code>nimbase.h</code>ファイルを乱用して、インサートし、以下のようにコンパイルします。</p><p>これで、glibc 2.2.5以上のLinuxバージョンでバイナリが使えるようになりました。注意したいのは、ユーザはSDL2やSDL_image2、SDL_ttf2のインストールが必要であるということです。</p><p>もし動的にリンクしていて、バイナリと一緒に共有のライブラリを配布したい場合は、<code>nim --passC:-Wl,-rpath,. c platformer</code>でコンパイルして、共有ライブラリをバイナリと同じディレクトリに置くこともできます。</p><p>x86-64を使用し、gcc-multilibがインストールされていれば、少なくとも、Linux上でx86向けにビルドするのは簡単です。</p><p>Windows向けのポータブルなバイナリをビルドするのは驚くほど簡単です。Linuxからだとしてもです。</p><p>Windows向けのSDLライブラリは<a href="https://www.libsdl.org/download-2.0.php" rel="nofollow" title="" class="ext-link">SDL2 website</a>（<a href="https://www.libsdl.org/download-2.0.php" rel="nofollow" title="" class="ext-link">image, ttf</a>）からダウンロードできます。</p><p>もし、スペースを節約したくて、バイナリをデバッグすることに抵抗がなければ、シンボルのバイナリを<code>strip -s platformer</code>で削除するのは有効な方法です。</p><p>今までの情報を元にすると、完全に自動化されたビルドスクリプトもNimで書くことができます。</p><p>Lunuxのユーザはパッケージマネジャを使ってsdl2やsdl2_image、sdl2_ttfをインストールしなければなりません。Windowsユーザにとってはこれらはバンドルされています。ビルドスクリプトは、<code>nim -r c release</code>で実行される時に、このディレクトリ構造を生成します。</p><p>結果はここからダウンロードしてください：<a href="https://hookrace.net/public/platformer/platformer_1.0_win64.zip" rel="nofollow" title="" class="ext-link">Win64</a>、<a href="https://hookrace.net/public/platformer/platformer_1.0_win32.zip" rel="nofollow" title="" class="ext-link">Win32</a>、<a href="https://hookrace.net/public/platformer/platformer_1.0_linux_x86_64.tar.gz" rel="nofollow" title="" class="ext-link">Linux x86_64</a>、<a href="https://hookrace.net/public/platformer/platformer_1.0_linux_x86.tar.gz" rel="nofollow" title="" class="ext-link">Linux x86</a></p><p>書いているうちに、どんどん長くなってしまいました。単純なプラットフォーム･ゲームを書くために出発したこの旅路は思った以上に壮大でした。皆さんにとってこの記事が長くすぎてつまらないものになっていないこと、そして、プラットフォーム･ゲームをSDL2を使ってNimで書く方法のいい手引きとして役に立つことを願います。</p><p>今回の記事で紹介したマテリアルはすべて<a href="https://github.com/def-/nim-platformer" rel="nofollow" title="" class="ext-link">GitHubのリポジトリ</a>にあります。最後まで内容をいじくりまわしたので、もしかしたら、間違えや抜けがあるかもしません。もし、バグを発見したり、コメントがあったりする場合は私にメールをお願いします：<a href="dennis@felsin9.de">dennis@felsin9.de</a></p><p><a href="https://www.reddit.com/r/programming/comments/4o0h0u/writing_a_2d_platform_game_in_nim_with_sdl2/" rel="nofollow" title="" class="ext-link">r/programming</a>と<a href="https://news.ycombinator.com/item?id=11927780" rel="nofollow" title="" class="ext-link">Hacker News</a>で議論もされています。</p>
