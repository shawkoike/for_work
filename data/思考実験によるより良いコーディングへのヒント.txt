<p><a href="http://joshondesign.com/2014/08/22/typopl" rel="nofollow" title="" class="ext-link">Typographic Programming Language</a> by <a href="http://joshondesign.com/c/about" rel="nofollow" title="" class="ext-link">Josh Marinacci</a></p><p>簡単な思考実験をさせてください。コードをASCIIとしてディスクに保存する必要がないとしましょう。僕たちがシンボルを使うコードの書き方を変えられたら?　そして何よりもその”読み方”を変えられたら?　想像できるすべてを読めて、編集できて、書ける魔法のコード・エディタがあるとしましょう。さらに、同じように機能する魔法のコンパイラがあるとしましょう。理想のコードはどのようになるでしょうか?</p><p>まず区切り文字から自由になれるでしょう。どうしてそんなものがあるのか?　コンパイラが十分賢くないから。</p><p>引用符のような区切り文字はコンパイラにシンボルが終わるときとリテラルが始まるときを知らせるためにあります。なぜ変数が数字で始められないかも同様です。コンパイラは変数名なのか数値リテラルなのか知りようがありません。もし代わりにタイポグラフィを使ってそれらを区別できるとしたらどうなるでしょうか。</p><p>例をあげましょう。<br>
<img src="http://joshondesign.com:3194/images/64218_SafariScreenSnapz013.png" alt="text"><br>
この例は意味的に次のコードと等しいです。</p><p>特別に色付けされた囲みの中のリテラルの描画はプレーンテキスト版より読みやすくなります。僕たちは21世紀に生きています。引用符よりもタイポグラフィ的な選択肢があります。それらを使いましょう。緑の囲みは単純な選択肢の一つでしかありません。</p><p>さらに文字列リテラルの例をあげましょう。</p><p><img src="http://joshondesign.com:3194/images/35718_SafariScreenSnapz014.png" alt="text"></p><p>リテラルの区切りについて悩まされないし、連結のための余分な演算子を必要としません。ただインラインに配置するだけです。実のところ、文字列の連結と変数展開のあいだに違いはなくなります。唯一の違いは画面上での描画の選び方です。数値の書式もインラインで示せますが、灰色の囲みの書式制御を置くことで視覚的に分けます。</p><p><img src="http://joshondesign.com:3194/images/28095_SafariScreenSnapz017.png" alt="text"></p><p>コメントがまったく違うフォントで脇に押しやられて描画されている点にも気づくでしょう（もちろんUnicodeの完全なサポートで）。</p><p>いったん文字列リテラルの違った表示方法を受け入れると、数値についても同じことができるでしょう。</p><p><img src="http://joshondesign.com:3194/images/49154_SafariScreenSnapz018.png" alt="text"></p><p>演算子はもちろんまだ有用ですが、実際の数学的な操作を表すときだけです。掛け算のための区切りのグリフになっていて、ただのxではないので視覚的にまだ混乱させます。たぶん適切なドットがもっとよいでしょう。</p><p>いくつかの数値は実際には単位があるので、この仮説の言語は単位のための区切りが必要でしょう。一般的な計量用の略語を使って文として描画できそうです。</p><p><img src="http://joshondesign.com:3194/images/58114_SafariScreenSnapz019.png" alt="text"></p><p>ある意味で、実際に単位のある数値はただの数値と違ったものです。このプログラミング言語がそれらを見分けるためには好都合です。</p><p>数値・文字列リテラルに対して個別にサポートさせようとしている以上、ぜひ行けるところまで行きましょう。</p><p>色リテラル</p><p><img src="http://joshondesign.com:3194/images/87674_SafariScreenSnapz020.png" alt="text"></p><p>画像リテラル</p><p><img src="http://joshondesign.com:3194/images/37593_SafariScreenSnapz021.png" alt="text"></p><p>バイト配列</p><p><img src="http://joshondesign.com:3194/images/26240_SafariScreenSnapz022.png" alt="text"></p><p>もしIDEがこの言語で示された概念を実際に理解すれば、非常に視覚的ながらもシンボリックなコードを書けるでしょう。もしコンパイラが<a href="http://c2.com/cgi/wiki?SufficientlySmartCompiler" rel="nofollow" title="" class="ext-link">十分に賢く</a>ありさえすれば。</p><p>この方法で実際にコードを書くべきというより、思考実験が新しい考えを見つけるためによい方法だと僕は言いたいのです。既存のプログラミング・システムに適用できそうな考えです。</p>
