<p><a href="http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/" rel="nofollow" title="" class="ext-link">From AngularJS to React: The Isomorphic Way</a> （2014-09-08） by <a href="https://twitter.com/slashdotpeter" rel="nofollow" title="" class="ext-link">Péter Márton</a><br>
Péter Márton<br>
アーキテクト。Node.jsでビール醸造のシステムを開発。</p><p>先週、私たちはWebサイトを検索エンジン向けにインデックス付けできるようにしようとしていました。この記事では、私たちがWebサイトを書き直していて学んだことの要約を紹介したいと思います。</p><p>2ヵ月前に<a href="http://risingstack.com/" rel="nofollow" title="" class="ext-link">RisingStack.com</a>を作成した時、私たちはそのWebサイトでどんなテクノロジを使うか決めなくてはなりませんでした。イベントを追跡する静的なページが数ページあるだけだったので、とても簡単でしたが、私たちはWebサイトをスケーラブルでできるだけ高速なままにしておきたいと考えていました。<br>
私たちのチームは<a href="https://angularjs.org/" rel="nofollow" title="" class="ext-link">AngularJS</a>の経験が豊富なので、フロントエンドにAngularを選ぶのは妥当だと思われました。</p><p>この記事はReactやAngularJSがどちらか一方より優れている理由について述べているわけではないので注意してください。どちらがいいかは常にユースケース次第です。</p><p>AngularJSはGoogleによって開発されているかなりすごいツールです。ルーティングや双方向データバインディングのようなすばらしい機能をたくさん提供して、開発を勢いづけ、テスト可能なアプリケーションを作り出しています。</p><p>Angularによって単一ページアプリケーション（SPA）を作成することができ、コンテンツをクライアント側でレンダリングできますが、JavaScriptをサポートしない検索ロボットはコンテンツにインデックスを付けることができません。<br>
それはSEOの観点から深刻な問題になる可能性があります。特に新しく設立されたNode.js企業を有名にしたい時はね(^-^)</p><p><img src="http://blog.risingstack.com/content/images/2014/Sep/angular.png" alt="Angular site without JavaScript" class="full-img"></p><p><em>JavaScriptを使用していない私たちのAngularサイト</em></p><p>RisingStackでは、私たちは半端なことは好きではないので、この問題を解決したいと考えました。そんな時に登場したのが<a href="https://prerender.io/" rel="nofollow" title="" class="ext-link">prerender.io</a>です。ヘッドレスブラウザを使って外部サーバ上にサイトをレンダリングし、その結果をHTMLで送り返してくれる外部サービスです（オープンソースプロジェクトでもあります）。<br>
それにより、ほとんどの検索エンジンが読み取り可能なサイトになりますが、AngularJSバインディングが解かれてしまうので本物の人間のユーザのためにprerender.ioを使うことはできません。</p><p>私たちのサイトでは、ジェネレータをベースとした、prerender.ioにサポートされていないNode.jsフレームワークである<a href="http://koajs.com/" rel="nofollow" title="" class="ext-link">Koa</a>が使われているので、私たちはprerender.ioを自分たちで実装しなければなりませんでした。<br>
それでRisingStackはKoa向けの<a href="https://github.com/RisingStack/koa-prerender" rel="nofollow" title="" class="ext-link">koa-prerender</a>ミドルウェアを公開しました。<br>
簡単に言うと、リクエストパラメータ（<code>_escaped_fragment_</code>やuser-agentなど）からクローラを検出し、外部のprerenderサービスを呼び出して静的なHTMLコンテンツで応答します。</p><p>ようやくGoogleやYahooのような検索エンジンのほとんどにサイトを見つけてもらえるようになったので私たちは喜びましたが、それで終わりではありませんでした。ユーザエージェントは変わる可能性がありますし、同じユーザエージェントのままにしておきたくはないので、私たちはより良いソリューションを探し続けました。</p><p><img src="http://blog.risingstack.com/content/images/2014/Sep/prerender.png" alt="Our Angular site without JavaScript" class="full-img"><br>
<em>JavaScriptを使用していないがkoa-prerenderを使用している私たちのAngularサイト</em></p><p>私たちが求めていたのは、最初にロードした時はサーバサイドでコンテンツをレンダリングするが、その後はシングルページアプリケーションとしての体験を提供するものです。<br>
クライアントサイドとサーバサイドの両方でレンダリングすることができ、２つのサイドの間でアプリケーションの状態を共有できるものが必要でした。そうすれば、クライアントは、サーバがジョブを終えたポイントから続行できるはずです。<br>
この種のアーキテクチャを実装するためには、コードベースがサーバサイドとクライアントサイドで共通でなければならず（BrowserifyまたはWebpack）、またアプリケーションも両方のサイドでレンダリングできなければなりません。</p><p>このことは、事実上、Node.jsの従属関係システムと<a href="https://www.npmjs.org/" rel="nofollow" title="" class="ext-link">npm</a>パッケージをブラウザ内で使用できるということを意味します。例えば、AJAXリクエストのための<a href="https://github.com/visionmedia/superagent" rel="nofollow" title="" class="ext-link">superagent</a>や、フローコントロールを改善するための<a href="https://github.com/caolan/async" rel="nofollow" title="" class="ext-link">async</a>などです。</p><p><img src="http://blog.risingstack.com/content/images/2014/Sep/isomorphic-client-server-mvc.png" alt="Isomorphic JavaScript architecture" class="full-img"><br>
<em>IsomorphicなJavaScript アーキテクチャ　出典：<a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/" rel="nofollow" title="" class="ext-link">AirBnb Nerds</a></em></p><p><em>isomorphicなアプリケーションの詳細については、ぜひAirBnbの記事を参照してください：<a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/" rel="nofollow" title="" class="ext-link">Isomorphic JavaScript: The Future of Web Apps</a></em></p><p><a href="http://facebook.github.io/react/" rel="nofollow" title="" class="ext-link">React</a>は、データバインディングに単方向のフローを使用してクライアントサイドとサーバサイドの高性能なレンダリングを提供します。ReactJSはオープンソースで、Facebook Engineeringチームにより構築されました。</p><p>Reactはフレームワークではないので、Facebookの<a href="http://facebook.github.io/flux/" rel="nofollow" title="" class="ext-link">Flux</a>アプリケーションアーキテクチャのような他のソリューションを使って拡張します。</p><p><img src="http://blog.risingstack.com/content/images/2014/Sep/flux-diagram.png" alt="Flux architecture" class="full-img"><br>
<em>Fluxアーキテクチャ　出典：<a href="http://facebook.github.io/" rel="nofollow" title="" class="ext-link">http://facebook.github.io/</a></em></p><p>ReactとFluxを使ってisomorphicなアプリケーションを作成すると決めてから、私たちは、他社からアイデア、つまりサンプルを探し始めました。<br>
最終的には、Yahooの<a href="https://github.com/yahoo/flux-examples" rel="nofollow" title="" class="ext-link">flux-examples</a>を元にしてサイトの構築を開始しました。</p><p>Yahooのflux-examplesには、ルーティングと<a href="http://expressjs.com/" rel="nofollow" title="" class="ext-link">Express</a>を使ったNode.jsの２つのisomorphicなアプリケーションのサンプルコードがありました。</p><p>このアイデアはとてもシンプルです。<a href="http://webpack.github.io/" rel="nofollow" title="" class="ext-link">Webpack</a>を使えば、サーバサイドとクライアントサイドの両方から実行可能なJavaScriptコードを書けるということです（私たちはWebpackから<a href="http://browserify.org/" rel="nofollow" title="" class="ext-link">Browserify</a>に変えてしまいましたが）。</p><p>Isomorphicなアーキテクチャの主なコンセプトは以下のとおりです。<br>
アプリケーションの状態とコードは、ブラウザとサーバ間で共有されています。サーバがリクエストを受け取ると、新しいflux-reactアプリケーションインスタンスを生成してレンダリングをします。すると、ストレージ（アプリケーション）の状態がそのレンダリング済みのHTMLアウトプットに渡されます：<script>var STATE = ...</script>サーバはこのレンダリング済みのファイルで応答します。</p><p>ブラウザは（BrowserifyやWebpackで作られた）同じコードをロードし、（サーバによって共有され、グローバル/ウィンドウスコープに送り込まれた）共有の状態からアプリケーションを起動させます。つまり、アプリケーションはサーバが処理を終えたポイントからずっと動き続けることができるのです。</p><p>ユーザは以前と同じように最初のロードで完全にレンダリングされたサイトを見ることができますが、超高速のシングルページアプリとしてネットサーフィンを続けることもできるのです。<br>
JavaScriptなしでサイトのコンテンツを閲覧できるので、検索エンジンはインデックスを付けることができます。</p><p><em>（<a href="http://risingstack.com/" rel="nofollow" title="" class="ext-link">RisingStack.com</a>はKoaを使うので、私たちはいくつかのミドルウェアを移し変えなければなりませんでした。近日<a href="https://github.com/RisingStack/" rel="nofollow" title="" class="ext-link">RisingStack GitHub repository</a>で発表する予定です）</em></p><p><img src="http://blog.risingstack.com/content/images/2014/Sep/react.png" alt="React site" class="full-img"><br>
<em>JavaScriptを使用していない私たちのReactのサイト</em></p><p>ここでの私たちにとって一番のプラスになったのは、インデックス可能なisomorphicなSPAがやっと使えるようになったことでしょう。これは私たちの最優先課題ではありませんでしたが、今や人間のユーザのためにもJavascriptなしで私たちのサイトが機能するようになったのです。</p><p>繰り返しになりますが、今回の記事の投稿の目的はReactがAngularJSより優れていると主張することではありません。ある部分ではReactが勝っているのは事実ですが、別の部分ではAngularJSより劣っている部分もあります。どちらがいいのかはユースケース次第でしょう。</p><p>また、この２つは共存することもできます。<a href="https://github.com/josebalius/ngReactGrid" rel="nofollow" title="" class="ext-link">ngReactGrid</a>プロジェクトがいい例です。</p><p>今回はここまでです。Isomorphicの時代が今後、Web開発やNode.jsに何をもたらしてくれるのか、私たちはとても楽しみにしています。</p><p>もし類似の話題があれば、ぜひあなたのお話を聞かせてください。私たちのツイッターアカウントは<a href="https://twitter.com/RisingStack" rel="nofollow" title="" class="ext-link">@RisingStack</a>です。</p><p>発表したばかりのisomorphicの例です。</p><p>RisingStackでは<a href="http://risingstack.com/" rel="nofollow" title="" class="ext-link">JavaScriptの開発とコンサルティングサービスを行っています。</a>ご連絡お待ちしています！</p>
