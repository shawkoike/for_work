<p><a href="http://blog.rongarret.info/2015/05/why-lisp.html" rel="nofollow" title="" class="ext-link">Why Lisp?</a>(2015-05-07) by <a href="http://www.flownet.com/ron/" rel="nofollow" title="" class="ext-link">Ron Garret</a></p><p>たくさんの人から<a href="https://news.ycombinator.com/item?id=9501198" rel="nofollow" title="" class="ext-link">私が昨日Hacker Newsに書いたコメント</a>についてもっと詳しく説明してほしいというメッセージをいただきました。例えば以下のような質問です。</p><p>Lispは単なる表記法の1つにすぎないと私は考えますが、間違っているでしょうか？　Lispのコードをデータ構造にマッチさせるのがなぜそんなに重要なことなのか理解できません。（おそらく、そのマッチさせるという行為がなぜLispを使うのかという答えになるのだとは思いますが。）私はマクロの大事な何かを見落としているでしょうか？ 　何か私が気付いていないことがあるでしょうか？</p><p>この質問に答えるには少し長くなりそうだったので、ブログに投稿することにしました。以下が私の答えです。</p><p>手短に言えば、Lispは<em>単なる</em>表記法の1つではなく、プログラミングとは<em>何か</em>という考え方を根本的に覆すものなのです。プログラミングに関する主流な考え方は、「<em>プログラミング</em>とは、<em>データ</em>という人工物に対して、それを処理するスタンドアローンな人工物である<em>プログラム</em>を生み出すことからなる」というものです。もちろんプログラムは<em>データ</em>であるということは誰しもが知っている事実ですが、上記の主流な考え方は<em>2つのコンセプトの人為的な区別を主張</em>するものです。そうです、プログラムはデータですが、<em>コンパイラという名の特殊なプログラムのためだけに存在するデータ</em>ということになります。コンパイラは書くのが難しく、勉強をする必要があります。ただし、自分自身でコンパイラを書く人は（アカデミックな演習をする以外では）少ないでしょう。大抵の人は、そんなおもちゃのようなコンパイラではなく、熟練された技術を有する専門家が書いたコンパイラを使用します。</p><p>Lispのプログラミングは、マシンとのより一般的なインタラクションです。マシンに何をして欲しいかを<em>記述する</em>という行為は、あなたが記述したことのマシンによる実行、その結果の観察、その観察を元に加えられた「あなたがマシンにしてほしいこと」の記述の変更と交互します。つまり、どこまでやればプログラムが完成するとか、どこでそれがスタンドアローンな人工物になるという明確なラインはありません。しかし、Lispを使えばそのような明確なラインを引くことができますし、スタンドアローンな実行ファイルを生成することができます。これはC言語でインタラクティブなプログラムを書くことができるのと同じようなものです。しかし、LispはAIのリサーチを目的として開発されたので、<em>意図的に</em>インタラクティブに作られています。一方でC言語はプログラムのオペレーションを目的に開発されたので、インタラクティブではありません。Lispと違ってC言語にとってスタンドアローンな実行ファイルを作成することがネイティブであるように、C言語と違ってLispにとってはインタラクティブ性はネイティブです。</p><p>もちろん反復する以外に選択肢がない場合もあるでしょう。時には完成されたデザインを生成するのに必要な知識が十分でなかったり、実験を行わなければならなかったり、スピードが命の時もあるでしょう。このような場合には小さなプログラムを組み合わせて大きなプログラムにするような一般的な仕組みが便利です。C言語の世界ではそのような仕組みが存在します。それがpipeです。しかし、C言語は階層的なデータをシリアライズ/デシリアライズをする標準的な方法を<em>持ち合わせていません</em>。その代わりC言語は、様々な種類のシリアライゼーションフォーマットを持っています。Fixed-Width、delimiter-separated、MIME、JSON、ICAL、SGML とそこから派生したもの、HTML 、XMLなどです。これでもごく一部です。これらは単なる、<em>データ</em>のシリアライゼーションフォーマットにすぎません。<em>コード</em>の記述に使うプログラミング言語はそれぞれ独自のシンタックスと特異性を保持しています。</p><p>Ｃ言語の生態系はシンタックスが<em>重要である</em>という奇妙な考え方を生み出しました。シンタックスのデザインにはたくさんのエネルギーが注がれていますし、LEXやYACCなどのツールが広く使われています。Ｃ言語の世界では、パーサを書くことがプログラマの仕事の大半を占めます。</p><p>今も昔もＣ言語に携わる人なら、<a href="http://en.wikipedia.org/wiki/Category%3aXML-based_programming_languages" rel="nofollow" title="" class="ext-link"><em>コード</em>を表現するのにシリライズフォーマットのデータの1つを使ってみよう</a>という考えに一度は至るでしょう。しかしその努力はすぐに終わりを迎えます。XMLやJSONで表現されたコードは、コードを表現するためにデザインされたシンタックスを使って表現されたコードに比べると、絶対的に<em>ひどい</em>ものになるからです。結局、データとしてコードを表現するのは得策ではなかったと気付き、パーサを書くことになるのです。</p><p>しかし、それは間違いです。</p><p>XMLやJSONで表現されたコードがひどいものになるのは、データとしてコードを表現するのが得策ではなかったということではなく、XMLとJSONが<em>シリアライズフォーマットしてうまくデザインされていない</em>からです。つまり、句読点が多すぎるのです。XMLの場合は余計なものが多すぎます。Lispが他のシンタックスと違ってコードを表現するのに優れているのは、S式のシンタックスがシリアライズフォーマットとしてよくデザインされているからです。S式は<em>最小限</em>のコードで書くことができます。3つを比べると以下のようになります。</p><p>XMLはこんなにシンプルな例でも明らかにひどく長ったらしくなってしまいました。JSONとＳ式はあまり変わらないようにも見えますが、よく考えてください。以下のような場合、Ｓ式は本領を発揮します。</p><p>同じものをJSONで書くと以下のようになります。</p><p>これをXMLにするとどうなるかは、みなさんの宿題にします。</p><p>ただ式を眺めるのではなく、実際に<em>タイプ</em>してみると、その違いがより明確になります。（ぜひ試してみてください。）小規模なデータ構造には害がなさそうに見える引用符やカンマは、非常に複雑なデータ構造にとっては即座に耐えがたい負担となるのです（そして、XMLのようにSGMLから派生した言語では、完全にお手上げです）。</p><p>Lispが非常に素晴らしく効果的な理由は、Lispを使う人がコードをデータとして表現しようとする直感が実際に<em>正しい</em>からです。 Lisp<em>こそ非常に</em>有効な手段です。特に、Lispを使うと、インタプリタやコンパイラを書くのが<em>本当に簡単</em>になります。そして、C言語の世界でパーサを書くのが通常の仕事であるのと同じくらい、Lispのプログラミングにとって、新しい言語を生み出し、そのためにインタプリタやコンパイラを書くことが当たり前になります。しかし、簡単にインタプリタやコンパイラを書くためには、<em>コードとデータを表現する正しい構文から始める</em>必要があります。つまり、コードとデータを表現する最小構文から始めるのです。それ以外のものから始めると、大量のカンマや引用符、山括弧で訳が分からなくなってしまうでしょう。</p><p>そうなると、まずはS式から始める必要があります。S式<em>こそ</em>が階層データを表現する最小構文だからです。 考えてみてください。階層データを表現するために必要なのは、トークンセパレータとブロックデリミタという2つの構文要素のみです。S式では、スペースがトークンセパレータで、丸括弧がブロックデリミタになります。それだけです。他のやり方では、ここまで構文要素を減らすことはできません。</p><p>Lispで丸括弧がよく目につくからといって、Lispが他のプログラミング言語に比べて丸括弧を多用しているわけではないということは特筆に値するでしょう。Lispには１つしかブロックデリミタ（丸括弧）がないため、丸括弧が目につきやすくなるのです。その他の言語は、区切られるブロックの種類によってさまざまなブロックデリミタを使っています。例えば、C言語ファミリは引数リストや部分式に丸括弧、配列に角括弧、コードブロックや辞書には波括弧を使います。また、カンマやセミコロンをブロックデリミタとして使用します。両者を比較してみると、大抵Lispの方がCのような言語よりもブロックデリミタが<em>少ない</em>です。特にコールバックがいたるところにあるJavaScriptでは、デリミタが頻繁にあらわれ、よく深みにはまります。そして、文脈によって異なる<em>正しい</em>デリミタを把握するのは、プログラマにとって頭を悩ませる問題です。Lispを使うプログラマは、そんな心配をする必要がありません。ブロックを閉じる場合は、閉じ括弧をタイプするだけです。<em>常に</em>頭を悩ます必要がないので、Lispを使うプログラマは思考力に余裕があり、本当に自分たちが解決したい問題に集中することができます。</p><p>そのことに関しては、コーディングに立ち戻った方がよさそうですね。もちろん何度も繰り返しです。</p>
