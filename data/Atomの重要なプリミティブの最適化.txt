<p><a href="http://blog.atom.io/2015/06/16/optimizing-an-important-atom-primitive.html" rel="nofollow" title="" class="ext-link">Optimizing An Important Atom Primitive</a> （2015-07-02） by <a href="https://github.com/nathansobo" rel="nofollow" title="" class="ext-link">Nathan Sobo</a></p><p>これまで数カ月にわたり、私たちはAtomのパフォーマンスの改善に取り組んできました。その結果、最適化するための課題として特に興味深いのが<a href="https://atom.io/docs/api/latest/Marker" rel="nofollow" title="" class="ext-link"><em>マーカ</em></a>という構造体だと分かりました。マーカはバッファの内容が変更されても、バッファの論理的な領域を追跡することができます。例えば、以下の図で緑色のハイライトがかかった部分のマーカは、文字列を書き換えたとしても同じ領域に残り続けます。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8137921/10846602-1147-11e5-8116-f21101af20c5.gif" alt="markers animation"></p><p>マーカは、Atomの機能を幅広くサポートする基本的なプリミティブです。検索および置換を行う場合には、マーカを使うことで<a href="https://github.com/atom/find-and-replace/blob/a241d88f7c747b715d5221c565234af6eaabf40f/lib/buffer-search.coffee#L208" rel="nofollow" title="" class="ext-link">検索結果のハイライト表示</a>ができます。スニペットの場合も、文字列を書き換える際にマーカを使い、<a href="https://github.com/atom/snippets/blob/550b9d11e91eb17a4c11779b02f96224725d7bb9/lib/snippet-expansion.coffee#L36" rel="nofollow" title="" class="ext-link">タブストップで移動する位置</a>を追跡することができます。さらにはスペルチェックの場合でも、マーカを使って<a href="https://github.com/atom/spell-check/blob/bb5c967a67b9a74c037a1a337ecec9aa0ce9c43e/lib/misspelling-view.coffee#L13" rel="nofollow" title="" class="ext-link">スペルミスのある単語を抽出</a>したり、その単語を書き換える際の再チェックをしたりすることもできます。そもそもAtom自体がマーカを使って<a href="https://github.com/atom/atom/blob/ebc5758d79e421f61f2b6669a886a27ee7283816/src/text-editor.coffee#L1890" rel="nofollow" title="" class="ext-link">選択やカーソルの機能を実装</a>しています。しかも、これはマーカ機能のほんの一部です。</p><p>しかし、ここ数回より前にリリースされたAtomでは、マーカのパフォーマンスは場合によっては厄介なものでもありました。例えば、検索および置換など、膨大な数のマーカを使う場合です。私たちはその問題を改善するために、ここ2カ月にわたって取り組んできたのですが、その内容が大変興味深いのでシェアすべきだと考えました。</p><p>マーカのパフォーマンスを最適化するために私たちが行った方法を説明する前に、まずは<a href="https://github.com/atom/text-buffer/blob/d655122d3e0f0d532ca7686fb82dcd82b0d58133/src/marker-manager.coffee" rel="nofollow" title="" class="ext-link">初期の頃のうまくいかなかった実装</a>を例に、何が悪かったのかを見ていきましょう。以前はバッファに変更をかけるたび、単純に全てのマーカを見直し、変更に従いマーカ位置をその都度計算していました。さらに悪いことに、効率的な範囲クエリを可能にしていたデータ構造の中で、それぞれのマーカの位置を更新していました。そのため、文字列のマーカを更新するのにかかる総コストが<a href="https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%83%80%E3%82%A6%E3%81%AE%E8%A8%98%E5%8F%B7" rel="nofollow" title="" class="ext-link"><code>O(n*log(n))</code></a>（<code>n</code>はマーカ総数）となってしまっていました。</p><p>マーカがそれほど多くない場合は、こうした作りになっていてもパフォーマンスは妥当でした。しかし、マーカの数が増えると、これが大きな問題となったのです。例えば、検索して置換を行う場合、検索結果をハイライト表示させるためマーカを使いますが、もし大きなファイルを対象に<code>e</code>で検索をかけたとしたらどうでしょうか。全てのキーストロークに対して何万、何十万というマーカが更新されるため、気の遠くなるような時間がかかり、うんざりすることでしょう。では、以下の図に示したAtom 0.198.0の<a href="https://developer.chrome.com/devtools/docs/cpu-profiling" rel="nofollow" title="" class="ext-link">CPUプロファイル</a>をご覧ください。jQuery内でハイライト表示された全ての<code>e</code>に改行を入れたものです。このバージョンのAtomでは、実際にタイピングするのぐらい見苦しい状況です。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8119828/fdac3f36-1098-11e5-807d-19387a441aad.png" alt="screenshot 2015-06-12 00 15 11"></p><p>私たちはマーカの処理数を広範囲にわたって減らすことで、この問題にじっくり取り組むことができました。例えば、検索結果に対してマーカを表示するのは、実際の画面に見えている範囲だけとすることもでき、それらが更新されるのはエディタがスクロールされたときとしました。とはいえ、マーカは非常に使用頻度の高い、便利に使える抽出機能です。このような重要なツールですから、極端な条件の下であっても、コストをかけずに簡単に使えるようにすることが必要でした。</p><p>最大の問題となっていたのは、「各マーカを絶対位置を表示させる」という単純な手法では、編集のたびに全てのマーカが見直されることになっていた点です。しかし、いつでも全てのマーカの正確な位置を把握する必要はありません。ただ実際に画面に見えている範囲でマーカがどこにあるのかということさえ分かれば十分なのです。それならば、画面が切り替わるタイミングでマーカの位置を計算できます。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8166960/7ce2ab0a-139b-11e5-8a30-430ef077dff9.png" alt="marker-visible-eye"><br>
<small><em>訳注：バッファの変更に従いマーカを更新する際に必要となるコストは、画面に見えている分</em>だけに<em>対して線形にかかる</em></small></p><p>私たちは、マーカの処理をよりインクリメンタルに行う必要がありました。バッファに変更があるたび、むやみに全てのマーカの位置を算出するのではなく、情報が実際に必要とされるまで、まずは必要とする情報に関連付けられた処理の大部分を優先させる方法が必要だったのです。このため、実装を新たに変える必要がありました。</p><p>私たちは以下に示すダイアグラムから、問題を解決する重要な手がかりを得ました。文頭を編集すると、マーカがつけられた単語の位置は絶対的に変化します。しかし、<em>単語と単語の間</em>の距離は一定です。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8149498/68bf69d2-12c5-11e5-9016-c625904b9fa5.png" alt="markers-relationships"></p><p>マーカがつけられた単語と単語の間を編集しないかぎり、その単語間の距離は編集中も変わりません。この事実を利用することで、バッファに変更を加えた際に計算していたところのうち、その大部分について、計算する必要がなくなります。</p><p>今まで書いてきたとおり、私たちはマーカの状態を絶対的な位置として保持していました。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8149599/5df0a15c-12c9-11e5-9133-fa785a099c6b.png" alt="markers-absolute"></p><p>そうではなく、マーカの位置を単語と単語の間の距離でエンコードすることにしましょう。そうすることで、バッファを領域に細分化するのです。以下の図で示しているとおり、各領域は、その領域に何文字含まれるかを示す<em>extent</em>と、その領域に含まれるのがどのマーカなのかを示す<em>marker id</em>のセットと関連づけられています。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8149654/9cf2d404-12cb-11e5-81ed-6ec9cfcb4a4b.png" alt="markers-relative"></p><p>marker idは任意の方法で領域を超えて重複していてもよいということに注目してください。ある特定の領域に関連づけられているmarker idのセットには1つ以上のidが含まれるので、同じidが複数の連続した領域に関連づけられていることもあります。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8150645/e48fa848-12f1-11e5-8d5a-9205112f45bf.gif" alt="animated-relative-overlap"></p><p>以下では、テキストを変更した際の影響を見るために、1つの領域のextentだけを更新する場合の例を挙げています。以下の図のように先頭の領域でextentが更新されることにより、あとに続く領域が（マーカの動きと連動して）正しい文字数分だけシフトしていることが分かるでしょう。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8150640/c5be8718-12f1-11e5-85de-8fcd47d597dd.gif" alt="relative-markers-animation"></p><p>上記の実装における問題は、ある特定のマーカが入っている領域を探索するために、領域の始めから１つ１つ確認しながら、絶対的な位置を計算する必要があるということです。また、バッファに変更があった際にどの領域のextentを更新する必要があるのかということも探索しなければなりません。この方法を使えば、変更を加えたあとに全てのマーカを更新する必要がなくなります。解決に向けての取りかかりとしてはよさそうです。しかし、マーカの総数がn個ある場合、<code>O(n)</code>の時間がかかります。</p><p>最後のステップとして、以前のデータ構造で必要だった線形探索をしないで済むようにしましょう。これは単純なリストを平衡木に置き換えることによって実現します。平衡木を実装する方法は数多くあります。今回は、<a href="https://ja.wikipedia.org/wiki/B%2B%E6%9C%A8" rel="nofollow" title="" class="ext-link">B+木</a>をベースにしますが、それに少し手を加えたものを使いましょう。<br>
どんな探索木にも当てはまる基本的な考え方ですが、木の上の方にあるノードは、その下にぶら下がっているノードの必須情報を<em>集約しています</em>。そのため、木の上から下に向かって探索していけば、木の大部分の探索を省略できるのです。この記事で例に挙げている領域木では、各内部ノードがその下にぶら下がる子ノードのextent全てを集約しており、子ノードのmarker idとも連動しています。先ほど示した、カラフルに重なり合ったマーカの探索木は、以下のようになります。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8167247/3be8dc80-139d-11e5-97fa-e244b6eae9e3.png" alt="markers-btree"></p><p>この構造を持つことで、様々な演算をさらに効率的に行うことができます。（O(n)ではなく<code>O(log(n))</code>の速さになります）。テキストを挿入する際、更新が必要な領域を見つけるために、それぞれの領域に対して繰り返し処理を行う必要はありません。そうではなく、集約を利用して木の大部分の探索をスキップし、更新が必要なノードに直接アクセスできるのです。</p><p>例えば、22番目の位置に1文字挿入するとしましょう。その場合、目的とする位置を含むノードを上から下に探索することによって、22番目の位置を含んでいる領域に直接アクセスすることができます。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8170645/8ac0cda8-13b2-11e5-993c-72b7acbe4303.gif" alt="btree-stab"></p><p>今挙げた例では小さな木を使ったので、大きな違いは見えません。しかし木が大きくなった場合にこの方法を使えば、以前の方法では計算しなければならなかった多数のノードをスキップできます。では、多くのマーカが存在するシナリオで、どれほどのノードをスキップできるかを実感するために、大きな木の例を見てみましょう。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8171952/60a50980-13bc-11e5-8a21-1895b665b3db.gif" alt="big-btree"></p><p>ある特定のマーカがどの領域に存在するかを探す場合、木の上から下に向かって探索することができます。目的とするマーカを含む子ノードをたどり、オフセットの経過を追っていくのです。</p><p>範囲検索を行うこともできます。特定の領域と交わるマーカのセットをたどるのです。これは、膨大な数のマーカを全て処理するのではなく、実際に画面に見えているマーカのみに絞って処理する方法における最後のステップです。任意の数の更新をしながらエディタを再描画することで、画面に見えているマーカに対して効率的に検索をし、その領域のみを計算できるようになりました。計算する必要がないマーカに対しては、計算しません。</p><p>この場合について、<code>jquery.js</code>の全てのハイライト済みの<code>e</code>に改行を入力した際のプロファイルを作ってみました。処理が終わるまでの合計時間は800ミリ秒だったのが約50ミリ秒まで短縮されました。</p><p><img src="https://cloud.githubusercontent.com/assets/1789/8172411/9d75fe56-13c0-11e5-8fb6-68151bcb6be7.png" alt="screenshot 2015-06-16 00 42 44"></p><p>今回ご紹介したのは、私たちがマーカを最適化するために利用した方法の概略に過ぎません。しかしこの方法は完全な実装を検討する際のよい出発点となるはずで、その実装には、B木を管理する<a href="https://github.com/atom/text-buffer/blob/0855c8c5e36faf252b8be467a8a67c2dce28bafa/src/marker-index.coffee" rel="nofollow" title="" class="ext-link">marker-index class</a>、そして補助的な詳細を扱う<a href="https://github.com/atom/text-buffer/blob/0855c8c5e36faf252b8be467a8a67c2dce28bafa/src/marker-store.coffee" rel="nofollow" title="" class="ext-link">marker-store wrapper class</a>が含まれてくることでしょう。完全な実装では、完全なマーカAPIをサポートするために、マーカの無効化、平衡木のメンテ、そしてアンドゥ・リドゥ時のマーカ状態の回復など、他にも多くのことを考慮しています。</p><p>Atomにおいて、私たちが早期に最適化した機能は、DOMとのインタラクションの改善を考慮したものでした。近いうちに、レンダリングの改善もブログで発信していくつもりです。今のところ、システムのより深いレイヤ部分に焦点を当てて考え始めるための、十分な進捗を得られていると思います。ElectronでのNodeの統合は、重要なAtomのコンポーネントを、必要に応じてC++にドロップするというオプションを示してくれました。今回のマーカに関する徹底的な見直しは、よいアルゴリズムを単に実装することによって改善できるということを示す、好例となるでしょう。ここ数カ月の間に、Atomは以前と比べてかなり処理が速くなりました。今後もこのような最適化をシステムのそれぞれの場所に適用していけば、継続して改善していくことができると思います。</p>
