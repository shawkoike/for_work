<p><a href="http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/" rel="nofollow" title="" class="ext-link">How to boost your Vim productivity</a> （2014-03-21） by <a href="https://twitter.com/sheerun" rel="nofollow" title="" class="ext-link">Adam Stankiewicz</a></p><p><code>Leader</code>は素晴らしい概念です。キーの<em>組み合わせ</em>ではなく<em>並び</em>によって、操作を行えるようにするものです。私はこれを使っているので、操作のために”<code>Ctrl</code>-何らかのキー”の組み合わせを押す必要はめったにありません。</p><p>私は長い間、<code>,</code>を<code>Leader</code>キーとして使っていました。ですがある時、キーボードの中で一番目立つキーにマップすることを思い付いたのです。Space（スペース）キーです。</p><p>これで私のVim生活は激変しました。今や、私は<code>Leader</code>をどちらの親指でも押すことができ、他の指は常にホームポジションにあります。<code>Leader</code>がとても使いやすくなったので、私が様々なキーバインドで用いるようになったことは周知の話です。</p><p>私は、自分がVimで作業を行っている中で、その時間の大半を費やしている操作を特定して、それらを<code>Leader</code>キーでマップすることにしました。例えば以下のような操作です。</p><p><strong>自分が</strong>特によく行う操作を特定して、それをマップすると良いでしょう。</p><p>私は、以下のマッピングに<a href="https://github.com/terryma/vim-expand-region" rel="nofollow" title="" class="ext-link">terryma/vim-expand-region</a>を使っています。</p><p>これで以下の操作ができるようになります。</p><p><code>vvv</code>は<code>vp</code>より時間が掛かるように思えますが、実際には、選択すべき範囲や使うべきキーの組み合わせを事前に考えずに済んでいます。</p><p>この方法で<code>v</code>が、<code>viw</code>、<code>vaw</code>、<code>vi"</code>、<code>va"</code>、<code>vi(</code>、<code>va(</code>、<code>vi[</code>、<code>va[</code>、<code>vi{</code>、<code>va{</code>、<code>vip</code>、<code>vap</code>、<code>vit</code>、<code>vat</code>などの代わりとなっていることにはお気づきですね。</p><p>私はVimの検索と置換を決して十分に活用してはいなかったのですが、そんな時に<a href="http://vim.wikia.com/wiki/Copy_or_change_search_hit" rel="nofollow" title="" class="ext-link">Vim wiki</a>で以下のスニペットを見つけました。</p><p>これで、検索と置換を以下の流れで実行できるようになりました。</p><p>補足：代わりに、<a href="http://vimcasts.org/episodes/operating-on-search-matches-using-gn/" rel="nofollow" title="" class="ext-link">Vim 7.4から導入された<code>cgn</code></a>を使う方法もあります。</p><p>私は、以下のショートカットを毎日のように使っています。これで何カ月分もの時間を節約できているはずです。</p><p><code>ppppp</code>と押すだけで、複数行の貼り付けを繰り返し実行できます。</p><p>テキストを選択してその上に貼り付ける時に、削除しようとしているテキストでペーストバッファが上書きされてしまう心配がありません（以下のコードを<code>~/vimrc</code>の末尾付近に置きます）。</p><p><a href="https://github.com/skalnik/vim-vroom" rel="nofollow" title="" class="ext-link">vim-room</a>を使い、テストに合うようにtmuxを設定しました。</p><p><code>vim-room</code>では、<code>&lt;Leader&gt;r</code>を押すとテストスイートが実行されるようになっています。私は<code>&lt;Space&gt;</code>をLeaderに使っているので、<code>&lt;Space&gt;r</code>を押すとテストが実行されます。</p><p>tmuxで画面を<em>分割して</em>テストを行うため、次の項目の開発に移りつつ、常にコードを確認しながらテストを実行することができます。</p><p>私は度々、シェルでランダムなコマンドを実行する必要があります。そういった場合、<code>Ctrl-z</code>を押してVimを一時停止しておきます。そしてコマンドを打ち込んだら、<code>fg&lt;Enter&gt;</code>を押してVimにスイッチバックします。</p><p>しかし、個人的には、<code>fg</code>を使うのは嫌でした。もう一度、<code>Ctrl-z</code>を押してVimにスイッチバックしたかったのです。ソリューションが見つからなかったので自分で開発したところ、ZSH上でうまく動作しています。</p><p>これを自分の<code>~/.zshrc</code>に貼り付けると、シェルとVimを非常に素早く切り替えることができるようになります。ぜひ試してみてください。</p><p>tmuxとOS XとVimは、かなり難しい組み合わせです。理由は以下の通りです。</p><p>かなりの時間を費やして調整したところ、以下のような結果に至りました。</p><p>マッピングに<code>&lt;C-a&gt;</code>を使う人がいますが、私は行の先頭に移動するショートカットキーとして使っていますので対象外です。その上、<code>&lt;C-Space&gt;</code>の方がはるかに便利です。その理由は、後で説明します。</p><p>考えてみてください。<code>&lt;C-Space&gt;&lt;Space&gt;</code>を押すだけで、tmuxのコピーモードに切り替えられるようになるのです。</p><p>システムのクリップボードにコピーするには、<code>brew install reattach-to-user-namespace</code>を事前に実行します。</p><p><code><c-h></c-h></code>、<code>&lt;C-j&gt;</code>、<code>&lt;C-k&gt;</code>、<code>&lt;C-l&gt;</code>を使って、Vimとtmuxウィンドウのいずれの組み合わせでも、シームレスに切り替えることができます。</p><p>また、tmuxのウィンドウを分割するには、以下のキーバインドを使うことをお勧めします。<code>&lt;C-Space&gt;l</code>と<code>&lt;C-Space&gt;j</code>は<code>&lt;C-Space&gt;%</code>と<code>&lt;C-Space&gt;|</code>に比べると、明らかに速く押すことができます。</p><p>詳しい情報については<a href="https://github.com/sheerun/dotfiles/blob/master/tmux.conf" rel="nofollow" title="" class="ext-link">tmux.conf</a>をご覧ください。</p><p>以下のコードを<code>.vimrc</code>に挿入します（そうすることで、CtrIPがオートコンプリートにgitまたはThe Silver Searcherを使うように設定されます）。</p><p><a href="https://github.com/vim-scripts/gitignore" rel="nofollow" title="" class="ext-link">vim-scripts/gitignore</a>を使うことをお勧めします。</p><p><a href="https://github.com/Shougo/neobundle.vim" rel="nofollow" title="" class="ext-link">neobundle.vim</a>は、以下の点でVimプラグインの管理に非常に役立ちます。</p><p>私は、生産性を高めるために以下の一般的なプラグインを利用しています。</p><p>私はRuby開発者なので、以下のRubyプラグインも使っています。</p><p>私は、サーバを構成するために頻繁にVimを使う必要があります。残念がなら、Vimには私にとって都合の良いデフォルト設定がないのでそのまま使うことはできません。</p><p><a href="https://github.com/tpope/vim-sensible" rel="nofollow" title="" class="ext-link">vim-sensible</a>が役に立つこともあるかもしれませんが、私の場合、それでは不十分でした。そこで、（特にRuby開発者にとって）非常に便利なデフォルト設定をもつ<a href="https://github.com/sheerun/vimrc" rel="nofollow" title="" class="ext-link">vimrc</a>プラグインを開発し、<code>~/.vimrc</code>がVim構成のシングルソースになるようにしました。このプラグインには、デフォルトスキーマ、パッケージマネージャ、多言語構文サポートも含まれています。</p><p>つまり、サーバサイドでVimを構成するために<code>~/.vim</code>ディレクトリを台無しにしなくても済むということです。以下のようにして簡単にVim環境をサーバにインストールすることができます。</p><p>また、独自の<a href="https://github.com/sheerun/dotfiles" rel="nofollow" title="" class="ext-link">dotfiles</a>も開発したので、開発環境をあっという間にセットアップできるようになりました。</p><p>Vimのセットアップを有効なものにするための秘訣は、開発時に遭遇する問題を常に認識し、それらに対処することです。</p><p>対処の手段は、<code>.vimrc</code>によるクイックマッピング、Google検索、IRCでのチャットなど、どのようなものでも構いません。</p><p>どのようにしてVimの生産性を高めることができるか考えてみてください。</p><p>Vimコンサルタントとしてご相談に乗ります。ご連絡は<a href="mailto:sheerun@sher.pl">Eメール</a>でお願いします。</p>
