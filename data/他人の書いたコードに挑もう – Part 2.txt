<p><a href="http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html" rel="nofollow" title="" class="ext-link">Diving Into Other People's Code</a> （2016-03-15） by <a href="http://www.lihaoyi.com/Resume/" rel="nofollow" title="" class="ext-link">Li Haoyi</a></p><p>この記事の前編はこちら：<a href="http://postd.cc/divingintootherpeoplescode-1/">他人の書いたコードに挑もう – Part 1</a></p><p>前にも言ったように、よく知らないプロジェクトのコードを探索する時は、段階を追って進めます。第一段階は、通常、様々なファイルやフォルダを大まかに見ていくことです。何がどこにあって、そのプロジェクトがどんな「モノ」を持っているのかを把握します。それを終えてやっと、自分の見たい特定の「何か」を詳細に見ていくことができるのです。</p><p>Spyderにあると思われる主なトップフォルダは下記のものです。</p><p>他にやるべきこととしては、単純にリポジトリ内にあるコードの行カウントを行うことです。これで詳細な情報が山ほど得られるわけではありませんが、これをすることによって、自分が今どんな怪物を見ているのかがよく分かります。何千行のコードでしょうか、何万行というコードでしょうか、それとも何百万でしょうか。</p><p>5万8,000行のPythonのコードですね。膨大というわけではありませんが、決して小さなコードベースだとは言えません。大部分の”モノ”が<code>spyderlib/</code>のフォルダ内にあることがすぐに確認できます。</p><p>
</p>
<p>ファイルブラウザで<code>spyderlib/</code>の中をのぞいてみると、含まれている主なフォルダの内容が把握できました。</p><p>現時点で押さえておく概要としては、これで十分でしょう。慣れるための次の段階では、実行したい具体的な変更について詳しく見ていきます。コードベースを眺めて得たばかりの知識を実際に用いてみると共に、さらに理解を深めることもできるはずです。</p><p>
</p>
<p>コードを動かして大まかな状況も把握できましたので、次のステップでは「Hello World」の例題で、自分で本当にコードを変更しそのコードが実行できることを確認します。Hello Worldの練習としてよく行われるのは、アプリケーション中のテキストの変更です。例えば、ウィンドウのタイトルは以下のようになっています。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderTitle.png" alt="Diving/SpyderWorks.png" style="max-width: 100%; max-height: 500px"></p><p>この<code>Spyder 3.0.0dev (Python 3.5)</code>の部分を、<code>Spyder Hello World...</code>に変えてみましょう。</p><p>見た感じ、タイトルっぽいですよね。HTMLやJava Swingなど、私が今まで使ってきた他のGUIフレームワークではいずれも、ウィンドウ上部のラベルは<code>title</code>と呼ばれていましたので、今回もきっと<code>title</code>だと思います。コードベースを<code>title</code>で検索してみましょう。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderSearch.png" alt="Diving/SpyderSearch.png" style="max-width: 100%; max-height: 500px"><br>
460件見つかりました。多い気もしますが、実はそうでもありません。460件なら、5分以内でざっと調べられるはずです。多くは各種モーダルにタイトルを設定するもので、他にはHTMLなど他言語のタイトルもあります。とはいえ、ヒットしたものは全てチェックした方がいいでしょう。というのも、「タイトルが<code>.ini</code>や<code>.json</code>などの設定ファイルから生成されているため<code>.py</code>のコード中では明示的には全くセットされていない」ということも十分あり得るからです。</p><p>このケースでは幸い、目的の箇所が見つかったようです。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderFound.png" alt="Diving/SpyderFound.png" style="max-width: 100%; max-height: 500px"><br>
あいにく見つからなかった場合は、別のキーワードを試すか、GUIのインスタンス生成が始まる場所を知るためにコードの実行をトレースしてみることも必要でしょう。ですが今回は運良く、5分以内に関連コードが見つかりました。</p><p>このファイルは見たところ、Spyderが起動するエントリポイントと、Spyder IDEの動作に関連する膨大なロジックの両方の役目を持っているようです。3,168行のコードは、決して単なるイニシャライズ用のスタブではありません。<code>self.register_shortcut</code>にショートカットの登録を行ったり、<a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB_%28%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%29" rel="nofollow" title="" class="ext-link">OSのシグナル</a>をいじったり、セッション（IDEでの意味合いは不明）を扱ったり、<code>env</code>変数をいじったりしているようなのですが、この3,000行のはるか終わりの部分で、Pythonプログラムのエントリポイントの印を見つけました。</p><p>発見したコードのスニペットに戻り、文字列を微調整すれば、タイトルを<code>Spyder Hello World...</code>に変えられるはずです。</p><p>そして<code>python bootstrap.py</code>を再度実行すると、次のようになりました。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderTitleChanged.png" alt="Diving/SpyderTitleChanged.png" style="max-width: 100%; max-height: 500px"></p><p>最初の変更がうまくいきました。</p><p>
</p>
<p>初めに課題として挙げたのは、画面上部にある既存の<code>Help</code>メニューの隣に、新しいドロップダウンメニューを追加することでした。</p><p><img src="http://www.lihaoyi.com/post/Diving/SpyderMenus.png" alt="Diving/SpyderMenus.png" style="max-width: 100%; max-height: 500px"><br>
これらのメニューが定義されている場所を見つける1つの方法は、<code>menu</code>というキーワードでコードベース内を検索することです。開発者が私たちの予想どおりの語彙を使っていると想定して、比較的大きな概念を用いた網羅的な検索で引っ張ってくることになります。もう1つの方法は、メニューの中で使われている文字列で検索することです。一意的に特定可能な長さの文字列であれば、その文字列が定義されている箇所をすぐに見つけられるはずです。</p><p>今回は、<code>Consoles</code>のキーワードで、大文字と小文字を区別してコードベースを検索することにしました。<code>Consoles</code>という文字列が出現する箇所はそれほど多くないだろうと期待したのです。というのも、Pythonの変数やモジュール名には全て小文字が使われているでしょうし、Python以外での使用（HTML文書など）やコメントは簡単に無視できるからです。実行してみると10数件の結果が得られ、その多くは<code>.md</code>、<code>.rst</code>、<code>.po</code>のファイルでした。</p><p><img src="http://www.lihaoyi.com/post/Diving/MenuSearch.png" alt="Diving/MenuSearch.png" style="max-width: 100%; max-height: 500px"><br>
珍しいことに、一見したところ、どれも求めていた箇所ではなさそうです。大体が長大なヘルプページやコメントの一部なのです。しかし、1つ気になるコメントがありました。</p><p>コードを見てみましょう。</p><p>まさに、探していた箇所ではないでしょうか。このコードが、各ドロップダウンメニューをツールバーに追加するハードコード部分です。なぜかどの名前にも、先頭か途中に奇妙な<code>&amp;</code>の記号が含まれていますが、これはどうやら、次の文字をそのメニューのショートカットキーとするための不思議なシンタックスであるようです。OS-Xでは機能しないでしょうが、Windows版と思われるオリジナルのスクリーンショットを見ると、ショートカットキーを表す下線付きの文字の位置とちょうど一致しています。</p><p><img src="http://www.lihaoyi.com/post/Diving/Spyder.png" alt="Diving/Spyder.png" style="max-width: 100%; max-height: 500px"><br>
あとは割と簡単に、メニューバーに新しいメニューを追加できそうです。</p><p>すると、<code>Misc</code>メニューが現れました。</p><p><img src="http://www.lihaoyi.com/post/Diving/MiscMenu.png" alt="Diving/MiscMenu.png" style="max-width: 100%; max-height: 500px"><br>
現時点では、このメニューからは何も実行できず、クリックしてもメニュー項目の表示さえできません。まだ項目を1つも追加していないので、メニュー内に何も存在しないためでしょう。次のステップは、既存のメニューが項目を追加している方法を突き止め、それを流用して独自のメニュー項目を加えることです。</p><p>
</p>
<p>見ての通りこの時点では、メニュー項目は上記の場所にまだ追加されていません。各ドロップダウンメニューに名前を付けて初期化しただけです。メニュー項目を追加するコードを書かなければなりません。メニューが使われている場所を探せば、どこでそのメニューが使われるのか、誰かそのメニューに項目を追加しようとしているのかどうかは、簡単に分かります。例えば、<code>console_menu</code>が使われている場所を探してみましょう。</p><p><img src="http://www.lihaoyi.com/post/Diving/ConsoleMenuSearch.png" alt="Diving/ConsoleMenuSearch.png" style="max-width: 100%; max-height: 500px"><br>
すぐにこんなものが見つかりました。<code>self.consoles_menu</code>の初期化を行っているだけでなく、そのメニューを<code>None</code>に設定するコード、<code>self.console_menu_actions</code>を<code>None</code>に設定するコード、さらには今回の目的に関係がありそうな、<code>add_actions</code>関数を<code>self.consoles_menu</code>と<code>self.consoles_menu__actions</code>から呼び出すコードがあります。これはすばらしい。同様の呼び出しを実行することにしましょう。ただし、<code>consoles_menu_actions</code>は今のところ空っぽです。ここにどんなコードを書けばいいのでしょう。これも検索すれば簡単に見つけることができます。</p><p><img src="http://www.lihaoyi.com/post/Diving/ConsolesMenuActions.png" alt="Diving/ConsolesMenuActions.png" style="max-width: 100%; max-height: 500px"><br>
どう見てもこれは、<code>interpreter_action</code>を含むリストです。これはどこから来ているのでしょう。どちらかといえば豆知識ですが、このファイルに対して<code>Cmd-F</code>キーを叩けば、その答えが見つかります。</p><p>比較的分かりやすいコードです。<code>create_action</code>を呼び出し、<code>self</code>（中身は何であれ）に渡すのは、<code>_(...)</code>でラップした文字列、<code>None</code>、何かのアイコン、そして<code>triggered</code>引数です。これがどうやらコールバックのようです。<code>create_action</code>の定義にジャンプ（またはgrepで検索）するとすぐに、<code>spyderlib/utils/qthelpers.py</code>にあることが確認できます。その定義を次に示します。</p><p><code>None</code>が渡されている先はどうやら、このショートカットのようです。ということは、<code>Open a Python Console</code>へのショートカットはもしかして存在しない？　それに、<code>data</code>や<code>menurole</code>引数の役割が私には分からないのですが、恐らくこの時点では、まだ理解する必要がないのでしょう。次に注目するのは、ここに渡される<code>self.open_interpreter</code>関数です。</p><p><code>@Slot(str)</code>が何なのか、手掛かりは何もありませんが、それぞれのコールバック（例えば上記のスニペットに含まれている<code>run_action</code>）には全て、コールバックが取る引数の数に見合う<code>@Slots</code>修飾子が含まれるようです。その規則に従ってコードを書けば、なんとか動作するものになるでしょう。</p><p>修飾子の部分を除けば、このコードは比較的分かりやすいものです。何か動作をするメソッドを呼び出しているだけです。これで完成です。何かを実行するメソッドを呼び出す関数の書き方を理解することができました。</p><p>
</p>
<p>ここまでに学んだのは、<code>foo_menu_actions</code>リストをどこで作成すればいいか、このリストをどこに追加すればいいのか、このリストをどのようにして<code>add_actions</code>に渡せば、メニューにそのリストの処理が追加されるのか、ということでした。ここまでできれば、元のプログラムを真似たうえで、独自の処理をフローに組み込むことは難しくありません。</p><p>あとは<code>python3 bootstrap.py</code>を実行すれば…と思いきや、このコードはうまく動作しません。私たちが作成した<code>Misc</code>メニューをクリックしても、コマンドを選択するための、クリック可能なドロップダウンメニューが表示されないのです。既存のコードをそっくりコピーしたつもりでしたが、途中に幾つか抜けがあったことが分かりました。</p><p>これで動くようになりました！</p><p><img src="http://www.lihaoyi.com/post/Diving/MenuAction.png" alt="Diving/MenuAction.png" style="max-width: 100%; max-height: 500px"><br>
メニューをクリックすることはできます。ただし、printステートメントが行き場を失っているようです。少なくとも、コンソールには表示されません。コンソールの表示は次の通りです。</p><p>追加したアクションをクリックしても、コンソールの表示には変化がありません。IDEであるSpyderがprintステートメントをどこかのログファイルにリダイレクトしている可能性がありますが、とにかくリポジトリツリーの中にはprintステートメントは見当たりません。私のホームディレクトリには次の通り<code>~/.spyder-py3</code>フォルダが確かに存在するのに、くどいようですがログファイルには表示されないのです。</p><p>私たちが書いたコードが動作していることを確認するには、stdoutに出力するのではなくファイルに書き出すというのも一手です。</p><p>しかし、それを実行して<code>Do something</code>をクリックしたのですが、<code>find / -name "logfile.txt"</code>で私のファイルシステムを検索しても、ログファイルがどこにも見当たりません。これはつまり、ここまでこんなに苦労して書き上げたコールバックが動作しないということでしょうか？　では1語ずつ<code>open_interpreter</code>の呼び出しをコピーするようにしたらどうでしょう？</p><p>間違いなく、<code>Do something</code>をクリックすると新規のインタープリタペインが開くようになりました！　では<em>ここで</em><code>print</code>ステートメントを追加したらどうなるのでしょう？</p><p>ようやく<code>Do something</code>で新規のインタープリタペインが開くようになりましたが、<em>プリント処理はまだうまく動作しません</em>。私たちが書いたコード自体は正常に動作しているのですが、恐らくSpyderが<code>print</code>ステートメントやファイル出力をどこかにリダイレクトしているのでしょう。この状態からどのようにデバッグを進めればいいのか、まだ確信が持てませんが、少なくともコードが動作するようになったことは確認できました。</p><p>
</p>
<p>当初の目標を達成するために必要な最後の作業は、コードエディタの修正です。ファイルシステムをざっと調べると、<code>widgets/editor.py</code>という期待できそうな名前のファイルが見つかります。</p><p><code>EditorWidget</code>という期待できそうな名前のクラスがあります。</p><p>編集すべきコードは確かにここに入っています。問題は、これがどこで作られるのか、そして、どうすれば使えるか、です。</p><p>どうやら、<code>EditorMainWindow</code>内で作られるようです。</p><p><code>EditorMainWindow</code>そのものは、<code>plugins/Editor.py</code>内の<code>Editor</code>内に作られています。</p><p>いろいろなファイルを調べて回るのは、PyCharmなどのスマートエディタを使えば簡単ですが、そのようなエディタを使わなくても、<code>grep</code>や<code>ack</code>、<code>ag</code>などを使ってプロジェクト全体で<code>EditorMainWindow</code>という名前を探せば、見つかります。</p><p><code>Editor</code>そのものは、<code>MainWindow</code>の<code>setup</code>メソッドの一部として<code>spyder.py</code>内に見つかります。</p><p>よし、これでメインウィンドウからの経路が分かりました。</p><p>この経路は、ちょっとハズレだったみたいですね。<code>widgets/sourcecode/codeeditor.py</code>の下に<code>CodeEditor</code>という名前の別のクラスがあって、実際にはこれがテキストエディタの機能を実装しているようです。</p><p><code>CodeEditor</code>クラスには<code>set_text</code>というメソッドがあって、これが、私たちが求めている動作をしているようです。</p><p><code>set_text</code>のスーパークラス<code>TextEditBaseWidget</code>には<code>toPlainText</code>というメソッドがあって、修正すべき現在のテキストを取得するメソッドとして期待できそうです。</p><p>ここのDocstringに何が書いてあるのか私には分かりませんし、奇妙なunicodeの<code>replace</code>呼び出しが何をするのかも、<code>toPlainText</code>の<code>super</code>バージョンが何をするのかも全く分かりません。でも、このメソッドが<code>replace</code>を呼び出すと<code>Python str</code>が返されるのなら、探していたものは、これだと思われます。</p><p>それが、先ほど見たエディタとどのように関係するのでしょうか？　エディタは<code>EditorStack.create_new_editor</code>の中で作られるようです。</p><p>このエディタは<code>EditorStack.new</code>の中で呼び出され、<code>EditorStack.new</code>そのものは<code>Editor.new</code>の中で呼び出されています。こういったものが、私が使えるアトリビュートとして最終的にセットされるかは分かりませんが、こうした数少ないエディタ関連のファイルを見て回るうちに、<code>EditorStack</code>の中に<code>get_current_editor</code>というメソッドを見つけました。これこそ、私が求めている動作をするメソッドです。</p><p>この実装が何をするのか、他のメソッドがどこに定義されているのかは分かりませんが、その名前から推測すれば、私のやりたい動作をする可能性が高く、現在IDEがフォーカスしているエディタが手に入ると思われます。コードをきちんと調べていないので間違った推測かも知れず、このコードは何か別のことをするのかも知れません。でも、もし、これが現在フォーカスされているウィンドウではないとしたら、この名前でそんなコードを書く人は大馬鹿者です。普通は、ほとんどのプログラマは良識ある人たちなので、たぶん間違いありません。</p><p>さて、<code>self.main.editor.get_current_editor()</code>を<code>misc_action</code>の中で呼び出せば、現在のエディタを手に入れることができますが、手に入るのは、どのエディタなのでしょうか？　名前から推測すれば、次の候補があります。</p><p>どれにも”Editor”という語が含まれており、<code>get_current_editor</code>メソッドからの戻り値は、どれもそれらしいタイプです！　どうすれば、手に入れたエディタが何なのかを知ることができるでしょうか？　<code>misc_action</code>メソッドが実行しているのが分かっていながら、このメソッドから何かプリントすることもできないのに。</p><p>これがJavaなどの静的型付け言語なら、メソッドが何を返すかすぐに分かるのですが…</p><p><img src="http://www.lihaoyi.com/post/Diving/ThisIsPython.jpg" alt="Diving/ThisIsPython.jpg" style="max-width: 100%; max-height: 500px"><br>
闇の中を手探りするしかありません。</p><p>何かプリントしたりファイルに書き込んだりすることができなくても、何が起こっているのかを調べるために<code>misc_action</code>からのデバッグ出力を得る方法があることが判明しました。1つは、<code>QMessageBox.warning</code>メソッドを使う方法です。実は、このメソッドは、<code>misc_action</code>のすぐ下の<code>start_ipykernel</code>メソッドで使われています。</p><p>これを<code>misc_action</code>メソッドで利用して、何が起こっているかを知るために役立てることができます。</p><p>こうすれば、アクションを選択すると、<code>get_current_editor</code>から返されるもののタイプがプリントアウトされるので、やりたいことをするために、5つの候補のうちどれで、どのメソッドまたはアトリビュートを呼び出せるのかを知る手掛かりとして期待できます。</p><p>では、ドロップダウンで<code>Do something</code>をクリックしましょう。結果は下の画像です。</p><p><img src="http://www.lihaoyi.com/post/Diving/Debugging.png" alt="Diving/Debugging.png" style="max-width: 100%; max-height: 500px"></p><p>これを見ると、5つの候補のうち<code>get_current_editor</code>が<code>spyderlib.widgets.sourcecode.codeeditor.CodeEditor</code>オブジェクトを返し、それ以外の候補は返さないことが分かります。それでも、これはPythonなので、<em>今回は</em><code>CodeEditor</code>オブジェクトを返しても、別のときには別のものを返す可能性はあります。最初にこれを書いたプログラマが大馬鹿者で、毎回違うタイプのものを返すように作っているかも知れませんが、今は、その人が良識ある人だと仮定して、戻り値のタイプが密かに変わることはないと考えてもいいでしょう。</p><p>そう仮定すれば、このエディタ上で<code>set_text</code>を呼び出すことができます。</p><p>結果の画像はこうなります。</p><p><img src="http://www.lihaoyi.com/post/Diving/SetText.png" alt="Diving/SetText.png" style="max-width: 100%; max-height: 500px"><br>
次に、<code>toPlainText</code>を、<code>spyderlib.plugins.editor.Editor</code>の便利な<code>get_current_filename()</code>メソッドと一緒に試してみます。私は<code>Editor</code>のように見える5つの似たクラスを調べていたときに、このメソッドに気付いていました。</p><p>作業を始めてから5時間で、ついに完成しました。</p><p><img src="http://www.lihaoyi.com/post/Diving/Works.png" alt="Diving/Works.png" style="max-width: 100%; max-height: 500px"><br>
githubの<code>master</code>から分岐するブランチからの、コミット<code>df9577cfc279d2b6f2c07c7ba4e8e7aebfdd1835</code>の書き込み時点での最終的なdiffは、次のようになりました。</p><p>プロ並みの貢献をしたかという点でいえば、まだ「やりきった」とは言えません。今回、<em>できる</em>変更を加え、機能するパッチを実際にやって見せましたが、どのような変更を<em>すべき</em>なのか、そしてそれらを<em>どう</em>扱うのかをよく知るために、基本的なコードベースを理解することは、完全に別問題です。例えば、<code>externalconsole.py</code>に<code>misc__action</code>コマンドをダンプしても機能はします。しかし、これは明らかに正しい方法ではありませんし、コードレビューは決してできないでしょう！</p><p>ともあれ、この問題に取り組むことによって私たちは、プロの環境でのコードレビュープロセスのスタート地点に立たされるのだと思います。私たちが加える変更を、どのように幅広いコードベースに適合するのかについて合理的な議論を行うために、また、洗練された完成品を作るための土台として、（なんとなく動く程度の）パッチを完成させるために、コードベースの全体的なアーキテクチャについて十分な理解を得ることができました。5時間を費やしただけあって、悪い結果ではありません！</p><p>私たちは、何も分からない状況から、大規模な既存のデータベースに対して、奮闘を続け、問題を理解し、そして進歩してきました。今回学んだいくつかの興味深い教訓を以下に挙げます。</p><p>これが、初めて目にする他人が書いたコードに挑み、数時間あまり分かってない状態で作業しながらも、重要な変更を加える方法です。是非、皆さんの経験や技、技術などを下にあるコメントに投稿してください！</p><p>article originally written by Li Haoyi on <a href="http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html" rel="nofollow" title="" class="ext-link">http://www.lihaoyi.com/post/DivingIntoOtherPeoplesCode.html</a></p>
