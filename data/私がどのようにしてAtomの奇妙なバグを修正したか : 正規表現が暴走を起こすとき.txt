<p><a href="http://davidvgalbraith.com/how-i-fixed-atom/" rel="nofollow" title="" class="ext-link">How I fixed Atom</a> （2016-01-28） by <a href="http://davidvgalbraith.com/about-me/" rel="nofollow" title="" class="ext-link">Dave Galbraith</a></p><p><a href="https://atom.io/" rel="nofollow" title="" class="ext-link">Atom</a>は、今注目の最新テキストエディタです。私は、このエディタをソフトウェア開発に使用しているのですが、オープンソースになっているので、少しでも貢献できればとAtomが抱えるIssuesについて検証してみることにしました。私は、<a href="https://github.com/atom/atom/issues/10272" rel="nofollow" title="" class="ext-link">ある奇妙なバグ</a>を見つけました。それは、Atomのユーザ<a href="https://github.com/speter" rel="nofollow" title="" class="ext-link">speter</a>がテキストを1行書き、行末で<code>Enter</code>を押した時に起こりました。新たな行が書けるようになるまで、Atomは30分も計算していたのです。私は、そんな単純かつよくあるオペレーションもろくにできないことに大きな衝撃を受け、早速その原因を探ることにしました。</p><p>これが、問題のテキストです。</p><p>これは、Googleが作った新しいプログラミング言語である<a href="https://golang.org/" rel="nofollow" title="" class="ext-link">Go</a>で書かれたコードです。これで何が起こるのかよく分かりませんが、問題はコードの内容ではありません。私の関心は、行末で<code>Enter</code>を押すと、なぜAtomが固まってしまうのかという点だけです。</p><p>すぐにコードベース全体に対して”newline”という語の検索を始めました。原因に結び付かないものがいくつかあった後、<code>Enter</code>が押されると新しい行に移行する関数を見つけました。text-editor.coffeeというファイルに入っている<code>insertNewline</code>と呼ばれる関数です。これがその内容です。</p><p>Atomは、<a href="http://coffeescript.org/" rel="nofollow" title="" class="ext-link">CoffeeScript</a>で書かれています。CoffeeScriptは、キーワードや丸括弧、角括弧がほとんどないJavascriptのようなものです。<a href="https://unspecified.wordpress.com/2011/10/18/why-pythons-whitespace-rule-is-right/" rel="nofollow" title="" class="ext-link">Python</a>のようにスコープを定義するためにスペースを使い、<a href="http://harmful.cat-v.org/software/OO_programming/" rel="nofollow" title="" class="ext-link">クラス</a>もサポートしています。上記2行は、<code>insertNewline</code>と呼ばれる<code>TextEditor</code>クラスのメソッドの1つを定義しています。<code>insertNewline</code>は、改行文字に関するクラスメソッド<code>insertText</code>を呼び出すだけです。私の考えが正しいことを確認するために、このメソッドにちょっとした微調整をしました。</p><p>この変更によって、Enterとタイプするたびに<code>Hello!</code>と<code>Goodbye</code>がAtomのコンソールに現れるのが見えます。しかし、遅いGoのコードの最後にEnterとタイプすると、<code>Hello!</code>は確認できましたが、<code>Goodbye</code>は表示されませんでした。その理由は、プログラムが、<code>insertText</code>で固まってしまって、<code>console.log "Goodbye"</code>の行にたどりつけないからです。これを見て、<code>insertText</code>メソッドの中に動きを遅くしている原因があると分かりました。</p><p>そこで、<code>TextEditor</code>の<code>insertText</code>メソッドを確認しました。<code>TextEditor</code>は、選択中のテキストを記録する<code>Selection</code>と呼ばれるオブジェクトを保持しており、<code>TextEditor</code>の<code>insertText</code>メソッドは、単にこの<code>Selection</code>の<code>insertText</code>メソッドを呼び出します。（Atomは、実際<a href="https://discuss.atom.io/t/multiple-selections/755" rel="nofollow" title="" class="ext-link">複数選択</a>をサポートしていて、<code>Selection</code>オブジェクトがいくつあっても大丈夫ですが、私の事例では1つだけでした）。</p><p><code>Selection.insertText</code>は、非常に長いメソッドですが、Hello/Goodbyeロギングを使って、最終的にこれらの行で起こる問題を突き止めました。</p><p>新しい行を書くと、このコードは新しい行のインデントを決定するために<code>TextEditor</code>にコールバックします。Atomは、新しい行のインデントを<a href="https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97" rel="nofollow" title="" class="ext-link">スコープ</a>に基づいて計算します。もし新しい行が前の行と全く同じスコープであれば、同じインデントということになります。新しいスコープを入力すると、タブ1つ分多くインデントされ、スコープを終了すると、1つ分少ないインデントになります。</p><p><code>TextEditor</code>は、編集されているファイルに使われているプログラミング言語を管理する<code>LanguageMode</code>と呼ばれるオブジェクトを持っています。<code>LanguageMode</code>は、各言語のスコープの開始と終了の仕組みを知っているので、<code>TextEditor</code>の<code>autoIndentBufferRow</code>メソッドが、<code>LanguageMode</code>の<code>autoIndentBufferRow</code>メソッドを呼び出すのです。</p><p><code>LanguageMode</code>の<code>autoIndentBufferRow</code>メソッドは、インデントレベルを計測するために、<code>LanguageMode</code>の長ったらしい名前の<code>suggestedIndentForTokenizedLineAtBufferRow</code>メソッドを呼び出します。Hello/Goodbyeのロギングは、これが遅延の原因だと教えてくれていました。以下は、<code>suggestedIndentForTokenizedLineAtBufferRow</code>をスリム化したものです。</p><p>まず、現在の行のスコープ情報をカプセル化している<code>ScopeDescriptor</code>というオブジェクトを構築します。この<code>ScopeDescriptor</code>に基づいて、正規表現の<code>increaseIndentRegex</code>と<code>decreaseNextIndentRegex</code>を取得します。<code>increaseIndentRegex</code>は、スコープを開始しようとしている行にマッチし、<code>decreaseNextIndentRegex</code>は、スコープが終了している行にマッチします。つまり、新しい行が新しいスコープを開始しようとしたとき、<code>increaseIndentRegex?.testSync(precedingLine)</code>は真になるので、<code>desiredIndentLevel</code>がインクリメントされます。新しい行がスコープを終了するときは、<code>decreaseNextIndentRegex?.testSync(precedingLine)</code>が真になるので、<code>desiredIndentLevel</code>がデクリメントされます。最後に、Hello/Goodbyeは、<code>decreaseNextIndentRegex?.testSync(precedingLine)</code>がパフォーマンス障害を引き起こす最大の要因だと教えてくれました。</p><p><code>decreaseNextIndentRegex</code>は、<em>正規表現</em>です。<a href="https://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE" rel="nofollow" title="" class="ext-link">正規表現</a>はパターンを定義するもので、その<code>test</code>メソッドは文字列の引数を取り、文字列がパターンにマッチしているかを教えてくれます。正規表現の構文は少し不安定ですが、非常に強力です。</p><p>肩慣らしに、簡単な例を挙げましょう。</p><p>この正規表現は、”bananas（バナナ）”のように<code>b</code>で始まる文字列にマッチします。細かく見ていきましょう。最初の<code>^</code>は”文字列の1文字目”を意味します。<code>^</code>がないと、正規表現は”abacus”(そろばん)といったように、位置に関係なく<code>b</code>が含まれる文字列にマッチしてしまいます。次に<code>[b]</code>は、<code>b</code>の文字を探し、最後の<code>+</code>は、”最低1つ”を意味します。つまり、この正規表現は”bananas”や”bbbananas”といったように、含まれる数に関係なく<code>b</code>で始まる文字列にマッチしますが、”abacus”といったように<code>b</code>で始まらない文字列にはマッチしません。</p><p><code>decreaseNextIndentRegex</code>の目的は、<code>(</code>よりも<code>)</code>が多くある、不平衡な括弧が含まれる行にマッチすることです。以下はその例です。</p><p>このように、1行に対して1つの引数を書くスタイルは、かなり一般的です。<code>arg1</code>などと違い、引数の名前が長い場合は特にです。<code>arg2</code>や<code>arg3)</code>の行がインデントされているのは、この行が引数のリストの一部であることを明確にするためです。<code>arg3)</code>は閉じ括弧を持ち、不平衡です。つまり、<code>decreaseNextIndentRegex</code>にマッチするということです。この行の最後で<code>Enter</code>を押せば、Atomは新しい行を<code>someObject.someFunction(arg1,</code>と同じラインにインデントするでしょう。</p><p><code>decreaseNextIndentRegex</code>を使用する準備はできましたか？　いえ、まだ誰も<code>decreaseNextIndentRegex</code>を使える段階ではありません。でも深呼吸をしてください。私はこんなものを見つけました。</p><p>正直に言いましょう。この何だか訳の分からないコードを見たとき、もう止めようと思いました。しかし、ここまでやってこれたんだから、これも何とかなると考えたんです。では、分かりやすいところで区切って少しずつ見ていきましょう。</p><p>「<code>^</code>は文字列の1文字目を意味する」と先程説明しました。<code>\s</code>は、スペースを意味し、タブ文字とスペースにマッチします。<code>*</code>は”最低でもゼロ個”の意味になります。つまり、これは<code>arg3</code>の行の最初にある2つのスペースのように、文字列の最初にある全てのスペースにマッチします。</p><p><code>[^</code>がありますが、これは”どの文字でもない”を意味します。つまり、<code>[^\s()}]</code>は、スペースではない、もしくは<code>(</code>や<code>)</code>、<code>}</code>でもない文字を探します。<code>+</code>は、先程と同じく”最低1つ”の意味です。結果として、これは上の例にある<code>arg3</code>にマッチします。</p><p>引き締めて行きましょう。もし、最後の引数が<code>arg3)</code>といった単純なものではなく、関数の評価結果や関数だった場合はどうでしょう？例えば以下のように。</p><p>大きな塊である<code>decreaseNextIndentRegex</code>の目的は、ネストの深さを問わず<code>f1(f2(xyz), abc),</code>などの関数呼び出しにマッチさせることです。では、これをもっと細かく見て行きましょう。</p><p>これは、<em>名前付きキャプチャグループ</em><code>&lt;m&gt;</code>を定義します。<code>&lt;m&gt;</code>は<code>decreaseNextIndentRegex</code>の塊全体の名前で、あらゆる深さの関数呼び出しにマッチしようとします。</p><p><code>[^()]*</code>は、任意の個数の、括弧ではない文字にマッチします。上の例では<code>f1</code>です。</p><p>これは、<code>f1</code>の後ろにあるような<code>(</code>にマッチします。<code>(</code>は関数呼び出しを意味するので、関数の引数のように見える文字列にマッチさせなくてはなりません。</p><p><!--  --><br>
関数の引数は<code>f2</code>に対する引数<code>xyz</code>のような、単純な文字のリスト、または<code>f1</code>に対する引数<code>f2(xyz)</code>のように、関数呼び出しそのものです。<code>xyz</code>のような単純な文字のリストの場合は、もう1つの<code>[^()]*</code>で機能しますが、<code>&lt;m&gt;</code>はどのように関数呼び出しにマッチするのでしょうか？　それに、この関数呼び出しは、引数として別の関数呼び出しを持っているかもしれません。この場合に使う表現は、深層部に対する関数呼び出しにマッチする必要があります。しかし、深層部に対する関数呼び出しにマッチする表現はありましたよね。そうです、<code>&lt;m&gt;</code>です！</p><p>これが、<code>(?:\g&lt;m&gt;|[^()]*)</code>を関数の引数にマッチさせる方法です。<code>|</code>は<em>選択子</em>で、”左もしくは右にあるものどちらか”という意味を持ちます。<code>|</code>の左側は<code>\g&lt;m&gt;</code>で、関数に対する引数が関数呼び出しである場合の<code>&lt;m&gt;</code>に対する再帰的な参照です。<code>|</code>の右側は、引数が単純な文字列である場合の<code>[^()]*</code>です。少しは理解してもらえたら幸いです。私は全てを理解するまでに、かなり長い時間考え込みました。</p><p>これは、引数のリストを閉じることを意味する<code>)</code>にマッチします。</p><p><code>&lt;m&gt;</code>の説明の最後は、<code>f1</code>のように、1つは関数呼び出しで、もう1つが文字列といった、複数の引数を持つ関数の場合です。<code>(?:\g&lt;m&gt;|[^()]*)</code>は、関数呼び出しの引数である<code>f2(xyz),</code>にマッチし、追加の<code>[^()]*</code>は文字列<code>abc</code>にマッチします。</p><p><code>&lt;m&gt;</code>については以上です。ここまでくれば後は楽勝です。</p><p><code>&lt;m&gt;</code>の後ろには、別の<code>[^()]*</code>があります。これは、<code>&lt;m&gt;</code>がマッチした関数呼び出しと行の最後の間に表示される文字にマッチします。例では、<code>[^()]*</code>は<code>.def</code>にマッチします。</p><p><code>decreaseNextIndentRegex</code>の塊の最後は、もう1つの<code>\)</code>で始まります。この余分な<code>)</code>は、行を挿入句的に不平衡にします。覚えていますか？　<code>decreaseNextIndentRegex</code>の目的は、<code>(</code>よりも<code>)</code>が多い行を見つけることでしたよね？　次に、<code>[,]?</code>はゼロもしくは1つのカンマにマッチし、<code>$</code>は文字列の最後にマッチします。<code>)</code>を不平衡にした後に、<code>decreaseNextIndentRegex</code>にマッチするために許可された文字列内の唯一の文字は、オプショナルのカンマです。</p><p>ふぅ～。<code>decreaseNextIndentRegex</code>をやり遂げました。頑張りましたね！</p><p>ここまでやってきたのには理由があります。それは、<code>vVar.Type().Name() == "" &amp;&amp; vVar.Kind() == reflect.Ptr &amp;&amp; vVar.Type().Elem().Name() == "" &amp;&amp; vVar.Type().Elem().Kind() == reflect.Slice</code>にマッチさせるのが恐ろしく遅いという、<code>decreaseNextIndentRegex</code>の何かが問題だったからですよね。私には原因が全く分からないので、Googleで”正規表現のパフォーマンス”と検索してみました。行き着いた先は、<a href="https://regex101.com/" rel="nofollow" title="" class="ext-link">https://regex101.com/</a>という、とても素晴らしいサイトで、正規表現を直接入力して文字列をテストすることができるのです。また、マッチングプロセスを細分化して説明してくれています。<code>decreaseNextIndentRegex</code>と文字列を入力してみたら、<code>Catastrophic backtracking detected</code>（壊滅的なバックトラッキングが検出されました）と返ってきました。これは良くないですね。</p><p>regex101.comは、壊滅的なバックトラッキング現象について、<a href="http://www.regular-expressions.info/catastrophic.html" rel="nofollow" title="" class="ext-link">詳細な説明</a>をしてくれました。ここでは今回の例の原因について深く言及するつもりはありませんが、<code>*</code>演算子の取り扱いがぞんざいな正規表現を悩ます問題です。基本的には、「<code>*</code>演算子を内部に持つ文字列自体に対して<code>*</code>を用いたことにより、ネストされて<code>*</code>を使われた表現の両方が同じ文字列にマッチしてしまう」ということにより起こります。このケースでは、「正規表現全体にはマッチしないが、<code>*</code>を用いた部分式2つにはともにマッチする文字列」を特定するコストが、文字列の長さに対して指数関数的になります。</p><p>簡単な例を挙げましょう。正規表現である<code>([a]*[ab]*)*c</code>は、<code>aaaaaaaaaaaaaaaaaa</code>のような文字列を与えた場合、壊滅的なバックトラッキングに出くわすでしょう。というのも<code>[a]*</code>あるいは<code>[ab]*</code>のどちらかが、<code>a</code>の1つ1つにマッチしてしまうからです。</p><p>それでは、壊滅的なバックトラッキングが、どのように<code>decreaseNextIndentRegex</code>に影響を及ぼすかを見ていきましょう。問題を簡略化するため、壊滅的なバックトラッキングを引き起こした最小の設定を見つけるまで、かなりの量の<code>decreaseNextIndentRegex</code>を取り除きました。</p><p>これは、<code>&lt;m&gt;</code>のうち、<code>\(</code>と<code>\(</code>の間から<code>(?:\g&lt;m&gt;|[^()]*)</code>を引き、不平衡さのために別の<code>\(</code>を加えたものです。この最小限の問題表現で、壊滅的なバックトラッキングが起こることが分かりました。2つの<code>[^()]*</code>を含むパターンで<code>*</code>を使っています。<code>[^()]</code>と<code>[^()]</code>は、全く同じ表現なので、同じ文字列にマッチし、<code>*</code>付きの表現の<code>*</code>付き部分式であることから、壊滅的なバックトラッキングを引き起こします。この2つの間は<code>()</code>なので、たくさんの<code>()</code>を持つ文字列では、<code>vvVar.Type().Name()…</code>の文字列で見られたように、壊滅的なバックトラッキングにぶつかるだけです。</p><p>壊滅的なバックトラッキングを避けるために、<code>&lt;m&gt;</code>を成す<code>[^()]*</code>のうちの1つを取る必要がありましたが、<code>decreaseNextIndentRegex</code>がマッチする、もともとの文字列を変更することなく、取り出すことはできませんでした。これは好ましいことではありません。なぜ、2つめの<code>[^()]*</code>がここにあるのか思い出してください。関数が複数の引数(1つは関数呼び出しで、もう1つは文字列)を持つ場合を網羅するためです。関数呼び出しの引数の後に書かれた文字列にマッチさせるためにこの表現があるのです。しかし、現在の位置では、全ての関数呼び出しの後のテキストに適用されます。<code>&lt;m&gt;</code>の外側の<code>[^()]*</code>がトップレベルの関数呼び出しの後に続くテキストを扱っているので、必要なのは、それ自体が関数の引数である関数呼び出しを行うテキストのチェックだけです。</p><p><code>&lt;m&gt;</code>の再帰的な参照で、入れ子された関数の呼び出しを見つけました。そこで、2つめの<code>[^()]*</code>がネストされた関数の呼び出しのみに適用されるよう、<code>\g&lt;m&gt;</code>のすぐ後に動かしました。移動させた<code>[^()]*</code>は必要のあるテキストとマッチするかどうか試そうとしますが、すでに別の<code>[^()]*</code>がカバーしているテキストとのマッチを試行することはありません。冗長性を取り除いたので、壊滅的なトラッキングはもはや起こりません。最終的な<code>decreaseNextIndentRegex</code>は次のようになりました。</p><p>この変更といくつかの追加のテストをプルリクエストとまとめ、プッシュしました。このプロジェクト協力者の<a href="https://github.com/svanharmelen" rel="nofollow" title="" class="ext-link">svanharmelen</a>は、私の評価と修正に同意してくれました。私の<a href="https://github.com/atom/language-go/commit/669f1d0c01cc72ccae6661d4540ab354e843d002" rel="nofollow" title="" class="ext-link">コミット</a>は、間もなく実行されるでしょう。このように、Atomの修正が終わりました！</p><p>この修正は間違いなく、私が今までオープンソースの世界でやってきた中で、最も骨の折れる取り組みでした。当初はCofeeScriptを見たことが全くありませんでしたし、数年前、バークレーのCS 164で2週間ほど正規表現を学びましたが、うろ覚え程度しか頭に残っていませんでした。最終的には、これでもかという量のCofeeScriptの行を読むことになり、存在を知っていた以上の正規表現を学ぶことができました。何より、自分のお気に入りのテキストエディタの奇妙バグを修正できたのです。とてもいい経験になりました！</p>
