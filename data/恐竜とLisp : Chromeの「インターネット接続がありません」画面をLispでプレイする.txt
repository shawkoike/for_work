<p><a href="http://vito.sdf.org/dino.html" rel="nofollow" title="" class="ext-link">Dinosaur and Lisp</a> (2016-08) by <a href="http://vito.sdf.org/about.html" rel="nofollow" title="" class="ext-link">Vito Van</a></p><p><img src="http://vito.sdf.org/dino/high-score.png" alt="High Score" style="max-width:100%;"></p><p>恐竜は十分古いですが、Lispもかなり古いので、気が合うのではないかと思います。ここで話している恐竜とは、Google Chromeに隠れている、”There is no Internet connection”（インターネットに接続されていません）のメッセージと一緒に現れる恐竜のことです。</p><p>この記事は、Chromeの恐竜ゲームをできるようなコードをCommon Lispで書く話です（<a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0" rel="nofollow" title="" class="ext-link">ディープラーニング</a>は必要ありません）。</p><p>Common Lispでプログラミングするために、Linuxをインストールしたコンピュータの前に座っていますが、もちろんモニタも接続しています。Common Lispの環境設定は簡単で、次のものがあればできます。</p><p>さらに、Lispをいじれるように、私は<a href="https://www.gnu.org/software/emacs/" rel="nofollow" title="" class="ext-link">Emacs</a> を <a href="https://common-lisp.net/project/slime/" rel="nofollow" title="" class="ext-link">SLIME</a>と一緒にインストールしましたが、他のエディタでも大丈夫です。</p><p>準備はできたので始めましょう。</p><p>短い2本足でスクリーン上を動くかわいいものを人が見れば、恐竜と分かりますが、Lispには分かりようがありません。人はスクリーンを目で見ることができますが、それはLispにはできません。そのため、スクリーンを読むようプログラミングし、恐竜を見つけられるようにします。</p><p>Webで検索をすると、Common Lispにはスクリーンという概念がないことを知りました。実は次の記述を見つけたのです。</p><p>「OSは存在しない」とは……。Common Lispを選ぶなんて、自分でもおかしくなってしまったのかもしれないと思ってしまいました。</p><p>しかし、上の記事が書かれた2001年5月からは15年以上も経っているので、多くのことが変わったはずです。再びいろいろと調べてみると、便利なものを見つけることができました。</p><p>実際には<a href="http://www.cliki.net/current%20recommended%20libraries" rel="nofollow" title="" class="ext-link">たくさんのライブラリ</a>が存在していますので、基本的にはCommon Lispでやりたいことは何でもできるのです。<strong>OSは存在するのです</strong>。喜んでください。</p><p><a href="https://common-lisp.net/project/cmucl/doc/clx/" rel="nofollow" title="" class="ext-link">CLXマニュアル</a>を読んだ後、<code>get-raw-image</code>関数を使用して直接<a href="https://common-lisp.net/project/cmucl/doc/clx/7_5_Direct_Image_Transfer.html" rel="nofollow" title="" class="ext-link">特定の領域からイメージデータを取得</a> できることを知りました。次にすることは。どうすれば恐竜を見つけられるのか考えてみましょう。</p><p>でもすぐにショックからは立ち直りました。これ以上分かりにくい文書を読む必要がなくなったのです。よかった。</p><p>では、何をすればいいのでしょうか。</p><p>恐竜に関しては状態を確認するだけでいいんです。<strong>立って</strong>いるのか、<strong>ジャンプして</strong>いるのか、<strong>前かがみになって</strong>いるのか（そう、Downキーで前かがみにすることができるんです）。</p><p><img src="http://vito.sdf.org/dino/state.png" alt="Three State of Dinosaur" style="max-width:100%;"></p><p>実際には恐竜は前後に動くわけではないので、異なる姿勢の恐竜のスクリーンショットを撮り、それを<a href="https://www.gimp.org/" rel="nofollow" title="" class="ext-link">GIMP</a>で開き、姿勢に対応する位置決め点を取得ですることができます。これをコードにすると次のようになります。</p><p>これらの点を得た後は、現在のスクリーンのイメージデータをキャプチャし、特定のドットの色を取得し、そのドットの色が恐竜の色と同じかを判別します。もし、全ての<code>*dino-standing-points*</code>が一致すれば、恐竜は立っている状態です。もし、全ての<code>*dino-bending-points*</code>が一致すればかがんでいる状態で、そのどちらでもなければ恐竜はジャンプしている状態です。</p><p>ところが、少し遊んでみた後に、恐竜の色が昼と夜では異なることに気が付きました。そのため、恐竜の色を変える関数が必要です。恐竜はジャンプしたり屈んだりするため、色を抽出する点は背景にした方が簡単です。そうすると、恐竜の状態を背景の色を使用して判定することができます。もし、全ての<code>*dino-standing-points*</code>の色と背景の色が<strong>一致しない</strong>のであれば、恐竜は立っていることになります。</p><p>恐竜を見つけられるようになりました。</p><p>前方のサボテンと鳥によって、恐竜は死んでしまいます。そのため、サボテンと鳥に遭遇したら、<strong>ジャンプする</strong>か<strong>前かがみに</strong>なる、あるいはただ<strong>立っている</strong>だけのいずれかの動作を取る必要があります（動作のタイミングも重要になります）。恐竜の前方の画像データを取得し、サボテンや鳥がいるかどうか確認することができます。</p><p><img src="http://vito.sdf.org/dino/search-squre.png" alt="Search Squre" style="max-width:100%;"></p><p>サボテンと鳥を探す領域を500×35の四角形の範囲に絞り、この四角形の位置を固定し、画面全体のスクリーンショットから<a href="https://www.gimp.org/" rel="nofollow" title="" class="ext-link">GIMP</a>を用いて取得します。次のようなコードになります。</p><p>この領域のイメージデータと背景の色を画素ごとに比較してみてください。もし一致しなければ、サボテンと鳥を見つけたことになります。</p><p>画素を比較する時、左上から右下の方向にイメージをスキャンすると、最初に特定できるのは、サボテンあるいは鳥の左上の位置になります。</p><p>サボテンと鳥をまとめてみました（全てのサボテンを集められていないかもしれません）。</p><p><img src="http://vito.sdf.org/dino/cactuses-and-birds.png" alt="Cactuses and Birds" style="max-width:100%;"></p><p>実際、サボテンのサイズが異なっても何も変わらず、高くても低くても、太くても細くても適切なタイミングでジャンプすればやり過ごすことができます。しかし、鳥の場合は、飛んでいる高さを<strong>低・中・高</strong>に分けて特定する必要があり、<strong>低</strong>の位置にいる鳥に対してはジャンプし、<strong>中</strong>の位置にいる鳥に対しては前かがみになり、<strong>高</strong>の位置にいる鳥に対しては何もしないようにします。</p><p>上の画像からも分かるように、異なる高さで現れる鳥やサボテンはそれぞれ固有のy座標を持ち、鳥がどの高さにいるのかをy座標の値から特定することができます。</p><p><strong>低</strong>の位置にいる鳥はサボテンと同じ扱いにし、<strong>高</strong>の位置にいる鳥は存在しないもの（実際に無視します）とすればいいので、実際には<strong>中</strong>の位置にいる鳥の固有のy座標だけあればいいのです。そのため、必要なのは次のコードだけなのです。</p><p>サボテンと鳥を避けることもできるようになりました。</p><p>次のことが分かっています。</p><p>他にやるべきことは何か。</p><p><strong>どのように</strong>と<strong>どのタイミング</strong>で<strong>ジャンプ</strong>や<strong>前かがみ</strong>のアクションを取るようにするのかを考えなければなりません。どのように前かがみになるアクションを取るのか、そして、そのアクションを取るタイミングはいつなのかです。次で説明します。</p><p>恐竜をジャンプさせるか前かがみにさせるためには、<code>SPACE</code>キー（あるいは<code>UP</code>キー）と<code>DOWN</code>キーの入力イベントをシミュレーションする必要があります。</p><p>キー入力イベントをシミュレーションする方法が必ずX Window Systemにあるはずです。さらに、<a href="http://www.cliki.net/CLX" rel="nofollow" title="" class="ext-link">CLX</a>はCommon Lisp用のX Window Systemプロトコルなので、こちらもキー入力イベントのシミュレーションする方法があるはずなのです。シミュレーションする方法が分かれば、恐竜を制御することができます。</p><p><a href="https://common-lisp.net/project/cmucl/doc/clx/" rel="nofollow" title="" class="ext-link">CLXマニュアル</a>を読むと<a href="https://common-lisp.net/project/cmucl/doc/clx/12_Events_and_Input.html" rel="nofollow" title="" class="ext-link">イベントと入力</a>というセクションを見つけました。このセクションで書かれていたのは、使うことのできるイベントの操作方法でした。しかし、IRCのすばらしい方々の話を聞いて、<a href="https://www.x.org/docs/Xext/xtest.pdf" rel="nofollow" title="" class="ext-link">XTEST</a>というX Window Systemの拡張機能の存在を知りました。これは「ユーザ介入なしにX11サーバを完全に試験するために必要な最低限のクライアントとサーバ拡張機能のセット」で、キーやマウスでの入力を疑似する<code>XTestFakeInput</code>という名のとおりの操作ができます。</p><p>幸運なことに、この機能はすでに<a href="https://github.com/sharplispers/clx/blob/master/extensions/xtest.lisp" rel="nofollow" title="" class="ext-link">CLXに実装されています</a>ので、その関数を呼び出すことができます。<code>fake-key-event</code>あるいは<code>fake-button-event</code>で、できるはずです。順調です。<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow" title="" class="ext-link">REPL</a>でも同じようなことができます。</p><p>そして、恐竜はジャンプしました。</p><p>サボテンや鳥に近づいたらジャンプできるようにしなければなりません。しかし、どれくらい近づけばいいのでしょうか。100画素なのでしょうか。それとも200画素なのでしょうか。それとも全ての値を試してみて最適な値を特定するべきなのでしょうか。いいえ、最適な値を1つだけ特定することはできません。「サボテンとの距離が100画素以下になったらジャンプ」と恐竜に指示することはできません。それは、速度が上がっていくからです。おそらく速度が遅い場合には100画素でいいかもしれませんが、速度が上がれば100画素以上の値でなければタイミングは合いません。</p><p>速度に関係するのです。もし、恐竜の前のサボテンの座標が分かれば、x座標の変化を時間で割って速度を算出することができます。スクリーンを読み込むたびに全ての速度の値を集め、平均を算出することができます。次のようになります。</p><p><code>jump?</code>関数が取るパラメータは2つあり、1つはサボテンと恐竜の距離を表す<code>distance</code>、もう1つはサボテンの速度を表す<code>speed</code>です。すると、<code>(/ distance speed)</code>はサボテンが恐竜に当たってしまうまでの残り時間となります。また、<code>0.15</code>は、恐竜の足が地面から離れるのに確保しておく時間です。つまり、この関数は、「0.15秒後にサボテンが恐竜に当たることが分かっていればジャンプするので、サボテンが接近した時には恐竜は空中にいることになり、無事サボテンをやり過ごすことができる」ということになります。</p><p><img src="http://vito.sdf.org/dino/jumping.png" alt="Jumping Dinosaur" style="max-width:100%;"></p><p>毎秒60回スクリーンを読み込み、それぞれのスクリーンで<code>jump?</code>関数を呼び出してアクションを読み込めば、ジャンプするタイミングが確認できます。</p><p>SLIME-REPLのコードスニペットをいじってみると、全てのシステムは次のように納まります。</p><p>もう少しきれいにすれば、Common Lispで操作できるスーパー恐竜ゲームの出来上がりです。</p><p>ここでは、実装コードの詳細については説明しませんが、この記事の最後にコード公開先のリンクを貼っていますので、そちらを見てください。</p><p>最後にもう一言。Lispは決して古くて使えない机上の言語ではありませんし、強大な未知の力でもありません。正しく使えば、思いどおりのことが実現できる言語です。</p><p><a href="https://youtu.be/PkzlJcKR4TI" rel="nofollow" title="" class="ext-link">https://youtu.be/PkzlJcKR4TI</a></p><p><img src="http://vito.sdf.org/dino/such-dino.gif" alt="WOW! SUCH DINO!" style="max-width:100%;"></p><p><a href="https://github.com/VitoVan/cl-dino" rel="nofollow" title="" class="ext-link">https://github.com/VitoVan/cl-dino</a></p><p>私はCommon Lisp初級者なので、整理されたコードではないかもしれません（でも、きれいにしようと心がけています）。コードを見てエレガントではない部分がありましたら、ご指摘ください。</p><p>License: GNU GPL v2.0</p>
