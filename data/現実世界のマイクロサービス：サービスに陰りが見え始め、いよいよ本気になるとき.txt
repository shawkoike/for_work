<p><a href="https://blog.buoyant.io/2016/05/04/real-world-microservices-when-services-stop-playing-well-and-start-getting-real/" rel="nofollow" title="" class="ext-link">Real World Microservices: When Services Stop Playing Well and Start Getting Real</a> （2016-05-04） by <a href="https://twitter.com/olix0r" rel="nofollow" title="" class="ext-link">Oliver Gould</a></p><p>マイクロサービスを用いれば、エンジニアリングチームは迅速にプロダクトを拡大することができます……もちろん、彼らが分散システム運用の複雑さのせいで泥沼にはまっていなければの話です。本記事では、マイクロサービスの運用に関わる非常に厳しい問題―例えば大規模なサービスのステージングやカナリアデプロイなどの問題―が、RPC層に<em>ルーティング</em>の考え方を導入することにより、どう解決できるのかを説明します。</p><p>私は、Twitterでインフラのエンジニアを務めていた時代（2010年から2015年まで）を振り返ってみました。すると、当時はそういった言葉がなかったというだけで、私たちは「マイクロサービスを使っていた」のだということが分かります（当時は、今思えば分かりにくい言葉、<em>SOA</em>＜サービス指向アーキテクチャ＞と呼んでいました）。</p><p>バズワードはさておき、当時も、現在私たちがマイクロサービスを使おうとする動機と同じ動機がありました。私たちは、エンジニアリングチームが独立して運用できるように、言い換えれば、デプロイスケジュールやオンコールのローテーション、可用性やスケールを自分たちでコントロールできるようにする必要があったのです。こうしたチームには、サイトを停止することなく、迅速かつ独立的に工程を繰り返したりスケールしたりできるという柔軟性が求められていました。</p><p>私はマイクロサービスの形成期に、世界最大レベルに属するマイクロサービスのアプリケーションに取り組んできました。そんな私が確信を持って言えるのは、マイクロサービスとはスケーリングにかける魔法ではないということです。すなわち、それは柔軟性もなければ、セキュリティも信頼性もないものなのです。実は、運用するのはモノリシックなサービスよりもずっと難しいというのが、経験に基づく私の見解です。私がよく使っていたという意味で信頼できる真のツール、例えばコンフィギュレーション管理、ログ処理、strace、tcpdumpなどですが、これらをマイクロサービスに当てはめてみると、まだ粗削りでとてもスマートとは言えない手段だと分かります。マイクロサービスとは、1つのリクエストのために何百ものサービスに手を出す可能性があるという世界です。そんな世界では、何百というインスタンスに対し、どこでtcpdumpを実行したらいいのでしょうか？　どのログを読めばいいのでしょうか？　そこに時間がかかっていたら、どうやってその原因を突き止めることができるでしょうか？　何かを変えたいときには、その変更は安全に行えるということをどうやって確信できるのでしょうか？</p><p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><br>
<em>訳：私たちはモノリスをマイクロサービスに切り替えたから、サービス停止の度に殺人ミステリーのような状況になるかもしれない。</em></p><p>Twitterがマイクロサービスに移行したときは、操作性を取り戻すためだけに何百もの（数千もの？）スタッフによる何年にもわたる取り組みが必要となりました。マイクロサービスには、どんな組織でもこのレベルの投資が必要になるということならば、そうしたプロジェクトは大半があっさり失敗に終わるでしょう。しかし、ありがたいことに、ここ数年、マイクロサービス運用の負担を一部軽くする目的でオープンソースプロジェクトが登場しています。それは、データセンターやクラウドの詳細を簡潔にまとめるプロジェクト、システムの実行時間のステータスに可視性を加えるプロジェクト、あるいはサービスの記述を単純化してくれるプロジェクトなどです。しかし、これはまだ、マイクロサービスの規模を拡大していくために必要となるものとしては完全ではありません。チームにとっては、ソースコードから製品、クラウドに至るまで、いいお助けツールはいろいろとありますが、オペレータとしては、これらのサービスが一度実行されるとそれがどうインタラクトするかを制御するには、まだ到底十分とは言えません。Twitterの例で、私たちがサービス間の通信、すなわち<a href="https://monkey.org/~marius/redux.html" rel="nofollow" title="" class="ext-link">RPC</a>を制御できるツールが必要だということが分かりました。</p><p>こうした経験を基に、<a href="https://linkerd.io/" rel="nofollow" title="" class="ext-link">linkerd</a>（”リンカーディー”と発音します）が生まれました。linkerdは、オペレータがサービス間のトラフィックをコマンド＆コントロールできるように設計されたプロキシです。<a href="https://blog.buoyant.io/2016/03/24/transparent-tls-with-linkerd/" rel="nofollow" title="" class="ext-link">トランスポート・セキュリティ</a>、<a href="https://blog.buoyant.io/2016/03/16/beyond-round-robin-load-balancing-for-latency/" rel="nofollow" title="" class="ext-link">ロードバランシング</a>、多重化、タイムアウト、リトライ、ルーティングといった、あらゆる機能を有します。</p><p>本記事では、linkerdによるルーティングへのアプローチを説明しようと思います。古くから、ルーティングはレイヤ3と4、すなわちTCP/IPに属する問題の1つであり、ハードウェアのロードバランサ、BGP、DNS、iptablesなどに絡む問題でした。これらのツールはこうした世界でまだまだ使われてはいるものの、現代のマルチサービスソフトウェアシステムへの拡張はしづらいものです。コネクションやパケットよりもリクエストとレスポンスを、IPアドレスとポートよりもサービスやインスタンスを、それぞれ操作したいのです。</p><p>実は、リクエストルーティングは、汎用性が高く、強い影響力を持つツールであることが分かりました。つまり、リクエストルーティングを用いることにより、マイクロサービスに生じる非常に困難な問題の一部を解決することができます。本番環境を安全に、インクリメンタルに、そして制御可能な状態を保って変更していくことができるのです。</p><p>linkerdは、クライアントのリストを使用して設定する必要がありません。そうではなく、必要に応じてリクエストを<em>動的にルーティング</em>し、クライアント情報を供給します。ルーティングの仕組みは基本的に以下の3つによって成り立っています。</p><p>linkerdは、処理する全てのリクエストに対し<em>論理名</em>を割り当てます。例えば、<code>/http/1.1/GET/users/add</code>あるいは<code>/thrift/userService/addUser</code>です。論理名が表現する情報はアプリケーションに関連するもので、インフラに関するものではありません。そのため、論理名は通常、サービスディスカバリ（例えばetcd、consul、ZooKeeper）や環境（例えば本番環境やステージング環境）、地域（例えばus-central-1b＜アメリカ中央部1b＞、us-east-1＜アメリカ東部1＞に関する詳細は表しません。</p><p>こうした情報の詳細は、<em>具体名</em>でコード化されます。具体名は、通常、ZooKeeper、etcd、consul、DNSなどのようなサービスディスカバリのバックエンドを表します。例えば以下のようなものです。</p><p>この「namer」サブシステムは、任意のサービスディスカバリの構想をサポートするための拡張ができるよう、プラグインが可能です。</p><p>論理名および具体名を区別することで、以下の2つのメリットがあります。</p><p>論理名から具体名へのマッピングは、委譲テーブル、すなわち<a href="https://linkerd.io/doc/dtabs/" rel="nofollow" title="" class="ext-link">Dtab</a>によって記述されています。例えば、linkerdは<code>/http/1.1/&lt;METHOD&gt;/&lt;HOST&gt;</code>の形式でHTTPリクエストに名前を割り当てることができます。</p><p>linkerdを以下のように設定すると仮定します。</p><p>このコンフィギュレーションでは、<code>/http/1.1/GET/users</code>のような論理名が<code>/io.l5d.k8s/default/http/users</code>のような具体名へと書き換えられることにより委譲されます。</p><p>最終的に、具体名の<code>/io.l5d.k8s/default/http/users</code>はサービスディスカバリシステムをアドレス指定します。この場合は、KubernetesのマスターAPIに対応しています。<em>io.l5d.k8s</em>のnamerは、「<em>名前空間</em>／<em>ポート</em>／<em>サービス</em>」という形式の名前を期待しますから、つまり、<em>default</em>という名前空間の<em>http</em>ポートの<em>users</em>サービスに対するアドレスのlinkerdロードバランサです。</p><p>「<em>ZooKeeperの中でこのサービスを探し、見つからなければローカルのファイルシステムにフォールバックする</em>」といったロジックを表現するために、複数のnamerが組み合わされることもあります。</p><p>サーバセットが見つからない場合には、ファイルシステムのnamerに対して検索が行われるよう、<code>/srv</code>の委譲を組み合わせてフォールバックを構成しています。</p><p>コンテキストに沿って解決するというこの考え方は、<em>個々のリクエスト</em>のルーティング方法を変えることにまで拡張できます。</p><p>仮に、「あるサービスの新バージョンをステージして、新バージョンでのアプリケーションの振る舞いについてイメージをつかみたい」という状況を考えてみましょう。このサービスは、ユーザに直接的には関わらないものの、このサービスを呼び出す他のサービスが存在するという想定です。例としては、「users」サービスが一般的でしょう。ここでは以下の選択肢があります。</p><p><img src="https://blog.buoyant.io/post-images/staging-users-v2.png"></p><p>どちらのやり方も特に処理しやすいわけではありません。前者はユーザに関わる問題を引き起こします。後者は複雑で扱いにくくなります。というのも、このサービスを呼び出す全サービスの新たな設定をデプロイするのに必要な、アクセスやツーリングを持っていないかもしれないのです……。</p><p>幸い、linkerdで得られるルーティング能力のおかげで、アドホックなステージングが可能となります。個々のリクエストに対して前述の委譲システムを拡張すれば、どの呼び出し元も変えることなくusersサービスの新バージョンをステージすることができます。例えば以下のように実行します。</p><p>これは、通常は<code>/srv/users</code>にリクエストを送信する全てのサービスが、代わりに<code>/srv/users-v2</code>にリクエストを送信するようにするものです。このリクエストに対してのみ適用されます。カバーされるのは全サービスです。</p><p>そしてこれはcurlコマンドに限った話ではありません。同じようなことが<a href="https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj" rel="nofollow" title="" class="ext-link">ブラウザのプラグイン</a>でも簡単にサポートできます。</p><p>上記のアプローチは、複雑なマイクロサービスにおいてサービスの新バージョンをステージする際のオーバーヘッドを大いに減らしてくれます。</p><p>ここまで、静的な委譲テーブルを用いてlinkerdを設定する方法をお話ししてきました。ですが、実行時にルーティングポリシーを変更したい場合はどうでしょうか？　「カナリア」や「ブルーグリーン」のデプロイをサポートするためにステージングで用いた方法と同様のアプローチを取りたい場合は？　<em>namerd</em>の出番です。</p><p><a href="https://github.com/BuoyantIO/linkerd/tree/master/namerd" rel="nofollow" title="" class="ext-link">namerd</a>は、オペレータが委譲を管理できるようにするサービスです。namerdはサービスディスカバリシステムに対するフロントエンドとして機能するので、linkerdがサービスディスカバリシステムと直接通信しなくてもよくなります。つまり、linkerdインスタンスがnamerdを介して名前を解決することで、サービスディスカバリ用バックエンドのビューがメンテナンスされるのです。</p><p><img src="https://blog.buoyant.io/post-images/namerd.png" alt="namerd topology"><br>
<em>注釈<br>
application RPC：アプリケーションのRPC<br>
proxied RPC：プロキシされたRPC<br>
routing policy：ルーティングポリシー<br>
pluggable data store：接続可能なデータストア</em></p><p>namerdは以下のように<a href="https://github.com/BuoyantIO/linkerd/blob/master/namerd/docs/config.md" rel="nofollow" title="" class="ext-link">設定</a>します。</p><p>次に、linkerdの設定は、簡略化して示すと以下のようになります。</p><p>そして、namerdの設定はこうなります。</p><p>いったんnamerdが実行され、linkerdがnamerdを介して名前を解決するよう設定されると、コマンドラインユーティリティ<a href="https://github.com/BuoyantIO/namerctl" rel="nofollow" title="" class="ext-link"><code>namerctl</code></a>を使ってルーティングを動的に更新できるようになります。</p><p>namerdを最初に開始する際には、（<em>web</em>という名前の）基本的な<a href="https://linkerd.io/doc/dtabs/" rel="nofollow" title="" class="ext-link">dtab</a>を次のように生成します。</p><p>例えば下記は、<em>users-v2</em>サービスの「カナリアテスト」を実行するため、実際の本番環境におけるトラフィックの1％を送信するものです。</p><p>新バージョンが受け取るトラフィックの量は、重みを変えることで制御できます。例として、<em>users</em>のトラフィックの25％を<em>users-v2</em>に送信するには、namerdを以下のように更新します。</p><p>ついに新しいサービスのパフォーマンスに満足できるようになったときには、新バージョンが実際に用意できているのであれば、それを指すようにnamerdを更新できます。もし新バージョンがなくなるのであれば、元のバージョンにフォールバックするよう更新することになります。</p><p>linkerdとは違って、namerdはまだまだ新しいプロジェクトです。私たちは、namerdが運用とデバッグのしやすいツールであるようにするため、開発の工程を迅速に繰り返しています。プロジェクトが成熟してくれば、オペレータにとって<em>実行時</em>にサービスを制御するための強力なツールとなるでしょう。新しい機能を安全に少しずつ管理された形でロールアウト（およびロールバック）する、デプロイツールと統合される可能性もあります。namerdは、チームがモノリスからマイクロサービスへと機能を移行させるのに役立ち、システムのデバッグをやりやすくしてくれるでしょう。私は、RPCのツーリングがいかに強力なものとなる可能性があるかを直に見てきたので、その機能をオープンソースコミュニティに持ち込むことができて大変うれしいです。</p><p>linkerdと同様に、namerdはApache License v2のもとで提供されているオープンソースソフトウェアです。namerdをオープンソースコミュニティにリリースできたのは本当に喜ばしいことですし、私たちがBuoyantで構築しているツールの開発に皆さんも関わってくださることを期待しています。すごい経験ができますよ。</p><p>私たちは、linkerdとnamerdを<a href="https://github.com/BuoyantIO/linkerd-examples/tree/master/k8s" rel="nofollow" title="" class="ext-link">Kubernetes</a>や<a href="https://github.com/BuoyantIO/linkerd-examples/tree/master/dcos" rel="nofollow" title="" class="ext-link">Mesos + Marathon</a>で実行するやり方の例を<a href="https://github.com/BuoyantIO/linkerd-examples" rel="nofollow" title="" class="ext-link">linkerd-examples</a>リポジトリで公開しています。これらのリポジトリには、環境の立ち上げとルーティングに必要なものをできるだけたくさん登録していきたいと考えています。</p><p>もし、作業をしていて分からない点があれば、ご遠慮なく<a href="http://slack.linkerd.io/" rel="nofollow" title="" class="ext-link">slack.linkerd.io</a>までお尋ねください。</p>
