ThreadTone （2016/12/25） by Tobias Scheepers少し前、私はPetros Vrellisが作り出した芸術作品に出会いました。それを見て、私の中のエンジニア魂が叫びました。「自動化だ！」下の画像で分かるように、Petrosは丸い織機を使って糸で肖像画を作ります。しかし、これにはかなりの根気が必要です。これから、私がざっとこのプロセスを自動化するステップをやってみます。しかし、もちろん、称賛されるべきは、この驚くべきアイディアを思い付くきっかけとなったアーティスト本人です。最終的に出来上がるのは、糸だけを使って画像をハーフトーンで表現したものです。
この主なアイデアは、3つのステップに分かれます。ステップ1で、様々な入力画像に対して、糸で作品を表現するためにちょっとした前処理を行います。ステップ2で、最善の画像表現とするために製作者が長い糸をどのように配置していくのか決める処理をPythonで行います。ステップ3では、私の場合、この重労働をこなすためにレーザーカッターをレーザーなしで動作させます。ピクセルレベルで画像処理をするのにopenCVを使います。早速、画像の最初の処理をやってみましょう。下のコードの小片は、画像のロード、トリミング、サイズ変更の方法を示しています。画像が正しいサイズになれば、グレースケールに変換し、反転させます。この形式では、画像をもともと最も暗かった部分が最も高い値になるような配列として表現することが出来ます。最後に、画像に丸いマスクをかけます（丸の外側の値が全て0に設定されます）。


元の画像を表現するために、糸をどのように通す必要があるかを決定するのが、アルゴリズムの中心的役割です。製作には、ピンが等間隔に並んだ丸い織機を使用することを想定しています。上のクリップで見られるように、アルゴリズムはランダムなピンから始めます。画像を再現するのに最善のピンを探すためにあらゆる選択肢をチェックします。そして、最適な線を引いて、その線によって加わる”暗さ”を加算すると、最初に戻って同じことを繰り返します。下の関数は、織機のピンの座標と特定の線を表すマスクを生成します。上の関数を使って、線が最大数に達するか終了基準が満たされるかのいずれかまで、アルゴリズムが繰り返し画像に線を追加します。画像を特定の線積分で表すには、適応度関数が必要です。もともと暗かった領域の多くを線で覆うことによって、結果として高い適応度を実現します。アルゴリズムがそれ以上引くべき線を見つけられなくなったら、ループから抜け出します。その結果をさらに処理することも可能です。以下は、アルゴリズムの結果の2つの例です。それぞれの画像の上にカーソルを合わせると、元の画像が見られます。レーザーカッターに重要な作業を任せられるという手軽さにいつも魅力を感じていたので、自作を始めました。大きな投資は必要なく、実際にはレーザー管とレンズを購入しました。ということは、私の学生向けの小さな部屋の大部分がこの大きなデカルトのプロッタに占領されているということです。Petrosのプロジェクトに出会って、やっとこの使い道が決まりました。結果の線の座標をGコードにパースすると、数値制御で糸を通すことが出来るようになります。糸の小さなガイドを作るのに、ペンを使いました。以下は、最初の約900本の線に相当する糸が通された状態です。この時点で、糸が切れたので、その日はそこで切り上げました。再度トライする時間ができたら、投稿を更新して最終結果の画像をアップします。
このコード全体は、GitHubに投稿されていて、パラメータの調整の方法も書かれています。コメントやアドバイスは大歓迎なので、質問があれば、お気軽にご連絡ください。
