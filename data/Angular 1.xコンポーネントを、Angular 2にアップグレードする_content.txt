Walkthrough to upgrade an Angular 1.x component to Angular 2 (2015-10-27)　By Todd Mottoこの記事では、シンプルなTodoアプリのAngular 1のコンポーネントを、Angular 2のコードにアップグレードする方法を見ていきます。APIの違いや文法のテンプレートを比較することで、それがAngular 2へのアップグレードに何らかのヒントを与え、難しさが軽減すると感じてもらえることを願っています。注意：Angular 2は、まだ”アルファ”の状態なので、APIやこれまでの技法は変化するかもしれません。しかし、この記事は残し、コードをアップグレードしていくつもりです。この小さなコンポーネントを、Angular 2で書き換えてみます。まずは、このアプリの機能は以下の通りです。これがどのように構築されているのか、何が行われているのかを正確に理解するため、ソースコードを見てみましょう。HTMLは非常にシンプルで、&lt;todo&gt;要素だけです。そしてJavaScriptのディレクティブは、次のようになります。このtodo.htmlは、Todoアイテムに繰り返し適用するUIロジックを持つシンプルなテンプレートで、追加/削除などの全機能を管理しています。これは全て、見慣れていますね。

完成したアプリは、次のとおりです。私が強く勧めるデザインパターンの1つは、ディレクティブの定義の中でcontrollerAs構文（私が書いたこちらの記事を参照してください）を使うことです。これにより、Controllerが$scopeを自由に注入できるようになり、より”クラスのような”方法でControllerを書くことができるようになります。thisというキーワードはPublicメソッドを作るために使われます。このメソッドはAngularのランタイムによって、自動的に$scope内のスコープを持つメソッドになります。私の考えでは、controllerAsを使うことは、Angular 1.xコンポーネントをAngular 2へ移行させる準備には必要不可欠のステップです。Angular 2でコンポーネントを書く場合、Publicメソッドにおいてオブジェクトの定義でthisキーワードを使うからです。含まれるファイルと、アプリケーションのブートストラップです。Angular 1.xとAngular 2で行う設定を、アプリのブートストラップからコンポーネントの作成まで、1つずつ見ていきます。しっかりついてきてください。1.4.7バージョンも含め、Angularには基本的なHTMLページがあり、angular.bootstrapを使って手動でブートストラップします。ES5で、実際にAngular 2アプリのコンポーネントを作ってみます。ES6やTypeScriptは使いません。なぜなら、これだと簡単にブラウザ内でAngular 2を書けてしまい、さらには最終的に機能する例はJSFiddle内のES5で実行するからです。しかし、1.xからES5に完全に移行させるデモンストレーションでは、最後にTypeScript/ES6の例を出しています。最終的なES6とTypeScriptの解法です。まずはAngular 2のインクルードが必要ですが、npm installや依存関係のインストールをちょっとやってみる気はありません。このやり方はangular.ioのサイトにあります。それでは、実行してフレームワークの基本を学び、Angular 1.xアプリを移行しましょう。まず、&lt;head&gt;の中にAngular 2を含める必要があります。私が2.0.0-alpha.44からはangular2.sfx.dev.jsを使っていることに気付いたと思います。この.sfx.はES5をSystemローダーのポリフィルを使わないことに焦点を当てた自動実行型のバンドルのバージョンですから、プロジェクトにSystem.jsを加える必要はありません。ここまでは、全ては非常に簡単です。グローバルなnamespaceは、window.angularの代わりにwindows.ngになっています。ディレクティブをAngular 2のコンポーネントにアップグレードします。ディレクティブからJavaScriptのControllerロジックを全て分離すると次のようになります。Angular 2では、変数Todoを作成します。変数Todoは、（ComponentやClassに）ひも付けされた定義と同じようにngモジュールの結果を指定します。これは、Angular 2に新しく追加されました。.Component()の中で、selector: 'todo'を使用するようAngularに通知します。これは、Angular 1.xの.directive('todo', todo)と全く同じです。さらに、Angular 1.xでtemplateUrlプロパティを使用してテンプレートの場所を教えるように、Angularにテンプレートがどこにあるか通知します。最後に、コンポーネントのロジックを持っているのは.Class()メソッドなので、”コンストラクタ”クラスとして振る舞うconstructorプロパティを使用して始めます。今のところいい感じですね。次に、ControllerロジックをAngular 1.xからAngular 2の.Class()メソッドへと移行するのがいいでしょう。ReactJSを使ったことがあれば、聞いたことがあると思います。そのため、プロセスが非常に簡単なcontrollerAs構文の使用をお勧めします。ここまでtodoコンポーネントに何が入っているか見てみましょう。publicメソッドはthisコンポーネントを使用して$scopeオブジェクトに自動的に結び付けてくれます。DOMで使用されるControllerのインスタンスのnamespaceにcontrollerAs: 'vm'が使用されます。では、Angular 2でControllerを完全になくして、publicメソッドを.Class()の定義に移動します。ここで分かるのは、”public”メソッドは.Class()に渡されるオブジェクトのプロパティになり、コードのリファクタリングをする必要が一切ありません。これは、Angular 1.xではcontrollerAs構文をthisキーワードと共に使用していたからです。スムーズで簡単です。この段階で、コンポーネントは動作しますが、テンプレートがまだ完全にAngular 1.xディレクティブベースのため、これをアップデートする必要があります。移行させる必要のあるテンプレートの全文は次のとおりです。&lt;div class="todo"&gt;
  &lt;form ng-submit="vm.onSubmit($event);"&gt;
    &lt;h3&gt;Todo List: ({{ vm.updateIncomplete() }} of {{ vm.todos.length }})&lt;/h3&gt;
    &lt;div class="todo__fields"&gt;
      &lt;input ng-model="vm.label" class="todo__input"&gt;
      &lt;button type="submit" class="todo__submit"&gt;
        Add &lt;i class="fa fa-check-circle"&gt;&lt;/i&gt;
      &lt;/button&gt;
    &lt;/div&gt;
  &lt;/form&gt;
  &lt;ul class="todo__list"&gt;
    &lt;li ng-repeat="item in vm.todos" ng-class="{
      'todo__list--complete': item.complete
    }"&gt;
      &lt;input type="checkbox" ng-model="item.complete"&gt;
      &lt;p&gt;{{ item.label }}&lt;/p&gt;
      &lt;span ng-click="vm.deleteItem($index);"&gt;
        &lt;i class="fa fa-times-circle"&gt;&lt;/i&gt;
      &lt;/span&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;ここは賢く、必要な機能部分だけを分けて移行していきましょう。まず、&lt;form&gt;から始めます。

まず、主な変更点は新しい(submit)構文です。通常どおり$eventで渡す時に、イベントがバインドされる予定であることを示しています。第2の変更点は、Controllerはもう必要ないということです。プレフィックスvm.が外れていることから分かるようにcontrollerAsは機能しません。これはすばらしいことです。次は&lt;input&gt;で双方向データバインディングをする方法です。

これでng-modelに双方向データバインディングを設定し、プレフィックスvm.を外します。完全にリファクタリングを行ったコードの部分は次のようになります。

Todoアイテムのリストに移りましょう。ここでは多くのことが起きています。ng-repeatでTodoアイテムの配列を展開し、条件付きng-classで完了したアイテムに取り消し線を引き、チックボックスで完了アイテムに印を付け、そして、ng-clickバインディングでtodoアイテムのリストから特定のアイテムを削除します。

上の2つの違いは、主にng-repeat構文内と、#item of Array構文を使用するng-forへの置換にあります。面白いことに、Angular 2では、”要求なし”では$indexを入手できません。入手するにはリクエストし、変数を指定して(#i = $index)にアクセスする必要があります。すると、deleteItemに特定の配列インデックスを渡すことができるようになります。これで、Angular 2コンポーネントのマークアップ移行が完了しました。

Angular 2コンポーネント全体は次のようになります。

さらに覚えておくと便利なのが.Component()メソッド内の他のdirectives: []プロパティです。これはコンポーネントにどのディレクティブを含めて使用するかを教えてくれます。COREとFORMディレクティブモジュール内の“ng-forとng-model“`を使用したので、配列で依存関係を明確に定義する必要があります。これで完了です。正常に動作するはずです。テンプレートをAngular 1.xから2へリファクタリングする時に、Angular 2 cheatsheet（虎の巻）が大変役に立つのでぜひ見てみてください。どのようにES6のimportをTypeScript@ decorator (@Component)とES6クラス構文を使用してエクスポートする新しいクラスを定義しているか注意してください。すばらしいことにブラウザグローバル(window.ng)ならどれでも良いというわけではありません。directives: []依存関係の配列を含め、必要な依存関係は全て'angular2/angular2'からインポートされます。他の情報に関しては、angular.ioを参照ください。
