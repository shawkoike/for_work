<p><a href="http://erenyagdiran.github.io/I-was-just-asked-to-crack-a-program-Part-1/" rel="nofollow" title="" class="ext-link">I was just asked to crack a program in a job interview !</a> （2014-09-17）by <a href="http://erenyagdiran.github.io/about/" rel="nofollow" title="" class="ext-link">Eren Yagdiran</a></p><p>長文ですが、よかったら読んでください。</p><p>就職面接でプログラムの解読を求められました。そして、就職が決まりました。</p><p>皆さん、こんにちは。新しいブログを開設したので、私は今とても張り切っています。週に何度か記事を投稿するつもりです。</p><p>タイトルを見れば大体の話の内容は分かると思いますが、これから書くのは、トルコのアンカラで受けた就職面接の話です。</p><p>私が応募した職は「ソフトウェアセキュリティエンジニア」でした。面接中、面接官たちは非常に専門性が低い質問をしてきましたが、分かることもあれば分からないこともありました。</p><p>その後、その企業からメールが届き、保護および暗号化されたバイナリファイルが添付されていました（「解読してみろ」ということでしょう）。</p><p>帰宅後にファイルをダウンロードすると、ファイルを開くために聞かれたのはパスワードだけでした。面接官が私に課した課題は、そのパスワードを探すことでした。</p><p>初めはとても難しそうに見えますが、私が行った手順の基本的な概念を紹介しようと思います。</p><p>まず端末に入力したのは以下の通りです。</p><p>的外れなキーワードを3回入力すると、プログラムが終了しました。</p><p>でも、分析手段はまだありますよ。もう少しファイルについて調べてみましょう。</p><p>よし、これで少しバイナリファイルに関する情報が増えましたね。</p><p>これはどうでしょう。</p><p>なるほど、普通の内容ですね。少し説明します。<code>linux-gate.so</code>はファイルシステム内に存在しませんが、<code>ldd</code>コマンドでは共有ライブラリとして表示されていますよね？　そうなんです。仮想DSO（仮想動的共有オブジェクト）について聞いたことはありますか？</p><p><a href="http://www.trilithium.com/johan/2005/08/linux-gate/" rel="nofollow" title="" class="ext-link">linux-gate.so</a>について読んでみてください。</p><p>恐らくご存じだと思いますが、 <code>libc.so.6</code>は、GNUシステムの標準Cライブラリです。</p><p><code>ld-linux.so</code>は、Linuxの動的ローダです。</p><p>とにかく、ここまでは全て順調です。あとはデバッグ環境でプログラムを実行して、何が起こるか見てみる必要があります。</p><p>プログラムがクラッシュしましたね。デバッガを走らせていると分かったのです。ということは、プログラムの中にアンチデバッグ技法が埋め込まれているはずです。</p><p>プログラムをリロードしてスタート地点に戻りましょう。</p><p>プログラムのエントリポイントがありました。そこにブレークポイントを入れ、エントリポイントを通じてプログラムのデバッグを開始しましょう。</p><p>“r”でプログラムを実行します。するとエントリポイントの1行目で中断するはずです。</p><p>このように見えるはずです。この構文モードはAT&amp;Tですが、Intelモードにも変更できます。私の考えではIntel構文の方が少し良いです。</p><p>アドレス中の<code>0x8047654</code>ですが、まずALレジスタに<code>0x55</code>を入れ、<code>0x99</code>を介して排他的論理和（xor）をとると、<code>0xCC</code>となります。</p><p><code>0xCC</code>は非常に重要です。なぜなら、それは処理を中断する、もしくはコメントでピーターが言ったように、x86アーキテクチャの中では実行を中断してデバッガを起動することを意味するからです。デバッガがプログラムを中断したい時、その中断したい所でバイトを0xCCにスワップします。</p><p><code>0x8047666</code>に<code>repnz scas</code>命令がありますね。これは、<code>es</code>レジスタによって区切られた<code>edi</code>までのメモリリージョンの中で<code>al</code>内の値（<code>0xCC</code>）があるかどうかを探します。</p><p>ですから、これらの行は基本的にはメモリをスキャンし、<code>0xCC</code>があるとプログラムをクラッシュさせたりするのです。</p><p>ここであまり時間を使いたくありません。<code>strace</code>を使ってみましょう。</p><p>最後の方の行を見ると、プログラムがまたクラッシュしています。原因は<code>ptrace</code>システムコールです。</p><p>Linuxで<code>ptrace</code>は「Process Trace」の略で、デバッガのように内部の状態を変更しながら別のプロセスを制御することができます。</p><p>デバッガは<code>ptrace</code>を非常によく使います。それが仕事ですからね。</p><p>コードをイメージすると、こんな感じのはずです。</p><p>ところで、<code>ptrace[PTRACE_TRACEMe]</code>は1度しか行えません。ですから、過去にデバッガがプログラムで<code>ptrace</code>を実行していたら、プログラム制御をしているものがあることに気付かせるために、その後の呼び出しにはFALSEが返ってくるでしょう。</p><p>デバッガの下で実行されているということをプログラムに気付かせないために、この<code>ptrace</code>保護を回避する必要があります。</p><p>そこで、システムコールの結果を書き変えてしまうことにしましょう。</p><p>システムコールはユーザ空間からカーネル空間への入り口です。<code>ptrace</code>もプロセスを操作するのに、何らかのシステムコールを使用しているに違いありません。</p><p>プログラムがいつptraceを使用するのかを見破り、その結果を0に設定してしまいましょう。次のようにします。</p><p>ホームディレクトリに、新たに<code>.gdbinit</code>ファイルを作成します。これにより、<code>gdb</code>を実行する度に次のような設定が自動的に読み込まれます。</p><p><code>eax</code>はシステムコールの結果を保持します。そしてそれは常に0に、いわば真になるわけです。</p><p>このようにして<code>ptrace</code>保護を回避します。それでは改めて<code>gdb</code>を実行しましょう。</p><p>これで少なくともデバッガは思い通りに使えるようになりました。</p><p>ここで<code>PJeGPC4TIVaKFmmy53DJ</code>に新たにブレークポイントを設定します。</p><p>これは面白いですね。</p><p>いくつかの定数がどこかに移動していっています。そして私がプログラムに与えた入力とこれらの定数との排他的論理和がとられています。</p><p>さらに調べてみます。</p><p>ここも同じですね。今度は別の定数群を格納しています。</p><p>さて、以下が関数の残りの部分です。</p><p>パターンが分かりましたか？　分からなくても大丈夫です。</p><p>ここでは再び、排他的論理和をとった後の私の入力と定数とを、プログラムが比較しています。</p><p>ここで、改めて入力に注目してみましょう。最初の入力といくつかの定数との排他的論理和がとられ、その結果が他の定数と比較されています。</p><p>これら2つの関数はおそらく以下のようなものでしょう。</p><p>パスワードを見つけるために、これらの2つの定数の排他的論理和をとる簡単なPythonのスクリプトを書いてみましょう。</p><p>やりました！</p><p>次は、パート2についても書こうと思っています。</p><p>会社がラウンド2として、新たな問題を送ってきたのです。そちらも面白いですよ。</p><p>（ちなみに、採用は決まりました）</p><p>自分も挑戦してみたいという方がいらっしゃれば、バイナリファイルをお送りしますので、私にメールをください。</p><p>(タイポの指摘でもいいですけどね）</p>
