A beginners guide to thinking in SQL 🐘 （2016-07-07） by Soham Kamaniもしあなたが私のようなプログラマだったら、SQLは、初めは優しく見える言語の1
つかもしれません（ただ単に普通の英語通り読めばいいですから）。ですが、何かしらの理由で、なんてことのないクエリにもいちいち正しいシンタックスをググらなければいけないでしょう。
いずれJOINにAGGREGTATION、サブクエリにたどり着くでしょうが、読んだとしてもさっぱりでしょう。例えば次のような感じです。うわっ！　これを見たらどんな初心者も震え上がるでしょうし、もしかしたら初めてSQLを見る、それなりの経験のある開発者でさえビビッてしまうかもしれません。実際はこうである必要はないのです。直観的なものを覚えるのは、常に簡単です。このガイドを通して、SQL初心者の皆さんやSQLを使って仕事をしているけれども、新鮮な視点が欲しい皆さんが、SQLに対する壁を取っ払うことができればなと思っています。この投稿で使用したすべてのクエリはPostgreSQL用ですが、データベース全体でSQL構文は似ているので、ここで紹介するクエリの中には他のSQLデータベースでも、私のSQL上と同じように動くものもあるはずです。

SQLではたくさんのキーワードが使われていますが、SELECT、FROM、WHEREはどのクエリにも登場するであろうワードです。先を読み進めれば、このキーワードがデータベースをクエリする上で最も基礎的な面を担っていることに頷けるでしょうし、他の、もっと複雑なクエリも、このキーワードの延長線上であるというのが分かるはずです。

この記事でこれ以降使うサンプルデータを見ていきましょう。
図書館があって、蔵書と会員がいます。別のテーブルには貸し出し者用のデータがあります。

最初のクエリから始めてみましょう。著者が”Dan Brown”である本の全てのタイトルとIDが知りたいとします。以下のようなクエリになるでしょう。結果は以下のようになります。簡単ですね。それでは実際に何が起きたか理解するために、クエリを細かく見ていきましょう。

現段階でははっきりしているかもしれませんが、これから結合とサブクエリに触れる際に、とても重要になってきます。FROMは、テーブル、つまりデータを探さなければならない場所を問い合わす役割を果たします。このテーブルは、単にすでに存在する（前の例のような）もの、あるいは結合、サブクエリを通して作成したテーブルであるはずです。

WHEREは私たちが表示したい行を抽出するという、とてもシンプルな命令をしてくれます。今回の例の場合では、author列の値が”Dan Brown”である行だけ考慮すればいいわけです。

探しているテーブルからお目当ての行にたどり着いたら、次は得たデータからまさに欲しいデータを取り出すにはどうしたらいいかということです。今回の場合では、本のタイトルとIDが知りたいわけです。そこでSELECTを使います。ASを使って表示したいカラムの名前を付け替えることもできます。最後に簡単な図として、これまでのクエリを表しておきます。

次は”Dan Brown”の（特定の本ではなく）全ての著書の中から、貸し出しがあった本のタイトルと貸出期間を表示させましょう。結果は以下のようになります。クエリの大部分は先ほどの例と似ていますが、FROM句が異なります。つまり、クエリで参照するテーブルが変わったということです。今回は”books”テーブルや”borrowings”テーブルではなく、この2つを結合した新たなテーブルに対してクエリを実行します。borrowings JOIN books ON borrowings.bookid=books.bookidの部分は、”books”テーブルと”borrowings”テーブルそれぞれのbookidが一致した場合に、これら2つのテーブルに含まれるエントリを全て結合し、別のテーブルを作成するという意味です。以下は、結合したテーブルです。このテーブルから、先ほどの例と同様にデータを取得します。このようにテーブルを結合する際は、必ず結合方法に配慮するようにしましょう。そうすると、あとは上述の”シンプルなクエリ”のレベルまでクエリを簡略化することができます。では2つのテーブルをもう少し複雑な方法で結合してみましょう。今回は”Dan Brown”の著書を借りた人全員の氏名をフルネームで表示します。では、これをボトムアップ手法で実現してみましょう。以下は結合したテーブルです。すばらしいですね。最後に上の3つの要素を組み合わせれば、以下のクエリの完成です。結果は以下のようになります。見事ですね。ただ同じ名前が重複しているので、この点は少し改善しましょう。

一言で表現すると、集約とは複数行を1行にまとめるための手法です。集約のパターンによって、各列に適用するロジックだけが異なります。さて、先ほどの例ではクエリ結果の中に重複したデータがありました。Ellen Hortonは本を複数冊借りていますが、この情報を先ほどのように表示するのはベストとは言えません。では、クエリを次のように書いてみましょう。結果は以下のようになります。集約には、大抵GROUP BY句を使います。これによりテーブル、またはクエリで返されたテーブルをグループ分けできます。各グループは、GROUP BY句で指定した列の固有値（または値の集合）に対応しています。
今回は、先ほどの例で取得した結果を行のグループに変換します。さらにcountで集約を行い、複数行を1つの値（この例では行数）に変換します。つまり、この値は各グループから得られる値ということです。結果の各行は、各グループの集約結果を表しています。論理的に言えば、結果として表示するフィールドは全てGROUP BY句で指定するか、集約する必要があるということになります。他のフィールドは全て行指向型に変わってしまうので、SELECTされても、どの値を取得すべきか判別できないからです。上の例では（行数をカウントするだけでよいので）COUNT関数を全ての行に適用しています。一方、その他のsumやmaxなどの関数は、特定の列にのみ作用します。例えば著者別の全蔵書数を知りたい場合は、以下のクエリを使用します。結果は以下のようになります。ここではstock列にのみsum関数が適用され、グループごとに全ての値が合計されています。

サブクエリは通常のSQLクエリを、大きなクエリの中に組み込んだものです。サブクエリは、返す結果によって以下の3つのタイプに分かれます。

これは複数列を返すクエリで、その良い例が先ほど集約の演習で扱ったクエリです。サブクエリを使うと単純に、さらにクエリをかけた別のテーブルが返されます。先ほどの例で”Robin Sharma”の著書の蔵書数だけを取得するには、以下のようにサブクエリを使うこともできます。結果は以下のようになります。

単一カラムから成る複数行を返すクエリは、配列や2次元テーブルと同じように使用できます。例として、蔵書数の合計が3冊を超える著者について、全ての本のタイトルとIDを取得してみましょう。この処理は以下の2ステップに分かれます。結果は以下のようになります。これは['Robin Sharma', 'Dan Brown']とも書けます。2. この結果を次のクエリに利用します。結果は以下のようになります。これは次のように書いても同じです。

これは1行1列の結果を返すクエリです。定数として使用できるため、比較演算子のように値を使用する箇所であればどこでも使用できます。さらに要素を1つしか持たない2次元テーブルや配列と同じように使用できます。例として、蔵書数がその平均値よりも多い本の情報を取得してみましょう。蔵書数の平均値は以下で取得できます。結果は以下のようになります。これはスカラー値の3と同じように使用できます。よって最終的なクエリは次のようになります。これは次のように書いても同じです。結果は以下のようになります。

データベースの書き込み操作は、複雑な読み取り用のクエリに比べると格段にシンプルです。

UPDATE構文は、意味としては読み取り用のクエリに似ています。唯一の違いは、一式の行の中から列をSELECTする代わりに、列をSETするという点です。例えば、突如”Dan Brown”の本が全てなくなったので、蔵書数を0に更新したいとしましょう。この処理は以下のように書けます。WHEREの部分は、ここでも行を選択するという処理になります。読み取りクエリの時はSELECTを使っていましたが、今回はSETを使います。列名に加えて、選択された列に新たに設定する値を指定します。

DELETEは、単純にSELECTやUPDATEクエリの列名がないものです。WHERE句の処理はSELECTやUPDATEと同じで、選択した列を削除します。DELETEは行ごと削除するので、列名を指定する必要はありません。では、蔵書数を0に更新する代わりに、以下のようにDan Brownのエントリを全て削除してしまいましょう。

他のクエリと唯一異なっているのが、INSERTクエリです。以下はそのフォーマットです。a, b, cは列名で、x, y, zは各列に挿入する値です。値は指定した順番通りに挿入されます。INSERTの説明はそれくらいでしょう。以下により具体的なサンプルを示します。これはbooksテーブルの全データをINSTERTするクエリです。

本ガイドも最後まできたので、ここで簡単なテストに挑戦してみましょう。この記事の冒頭で紹介したクエリを見てください。さて、このクエリはどのような処理を行っているのでしょうか？　SELECT、FROM、WHERE、GROUP BY、そしてサブクエリのコンポーネントに分解して考えてみてください。以下に、もう少し読みやすく書き直したものを載せます。このクエリでは、蔵書数の合計がその平均値よりも多い本を借りたメンバーのリストを取得しています。結果は以下のようになります。難なく正答が分かったでしょうか？　分からなかった方もフィードバックやコメントをお寄せください。いただいたご意見を参考に、本記事を改善していきます。お読みいただきありがとうございました！
