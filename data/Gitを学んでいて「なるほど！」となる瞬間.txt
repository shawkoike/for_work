<p><a href="http://betterexplained.com/articles/aha-moments-when-learning-git/" rel="nofollow" title="" class="ext-link">Aha! Moments When Learning Git</a> (2010-03-10) by <a href="https://twitter.com/betterexplained" rel="nofollow" title="" class="ext-link">Kalid Azad</a></p><p>Gitは速く柔軟性がありますが、理解に時間のかかる分散型バージョン管理システムです。Gitを始める前に次を理解しておきましょう。</p><p><a href="http://progit.org/book/" rel="nofollow" title="" class="ext-link">本</a>や<a href="http://www.eecs.harvard.edu/~cduan/technical/git/" rel="nofollow" title="" class="ext-link">学習書</a>、<a href="http://jonas.nitro.dk/git/quick-reference.html" rel="nofollow" title="" class="ext-link">指南書</a>はGitを理解するのに役に立ちました。しかし、その他にもGitの理解に至ったきっかけがありますのでご紹介します。</p><p>Gitにはステージング・エリアがあります。繰り返しますが、<strong>ステージング・エリアがあるのです</strong>。</p><p>これには混乱しました。リポジトリ（「オブジェクトデータベース」）とステージング・エリア（「インデックス」と呼ばれる）の両方がGitにはあります。チェックインには2段階あります。</p><p><strong>なぜステージなのでしょう</strong>？　Gitには柔軟性があります。例えばa、b、cが変更された場合、個別にコミットすることもできれば、同時にコミットすることができます。</p><p>取り消し方法も2つあります。</p><p>追加してコミットする、追加してコミットする。Gitにはリズムがあります。</p><p>ブランチはSaveAsメソッドのようにディレクトリに保存します。しかも、次のような利点があります。</p><p><strong>なぜブランチなのでしょう？</strong>　通常のファイル保存の際に使用するSaveAsメソッドを考えてみてください。オリジナルファイルは安全な場所に保管しておいて、試行錯誤をするものです。Gitでもこれを可能にするだけでなく、オリジナルとの統合を可能にしてくれています（実際、svnは1回しかバックアップを取らない1つの共有ドライブのようなものです）。</p><p>私はブランチを.gitフォルダの中にある「仮想ディレクトリ」として見ています。物理的なディレクトリ（c:\projectまたは~/project）においては、仮想ディレクトリ間をチェックアウトで行き来します。</p><p>私は、「devディレクトリに変更（チェックアウト）、変更して、変更を保存（追加・コミット）、masterディレクトリに変更、devへの変更をコピー（統合）」と覚えています。</p><p>物理的なディレクトリはメモ帳です。仮想ディレクトリはgitコマンドの入力で動きます。</p><p>現在のディレクトリを確認する時のように、現在のブランチをプロンプトに表示してください。</p><p><img src="http://betterexplained.com/wp-content/uploads/git/git_prompt.png" alt=""><br>
私の.bash_profileは次のとおりになっています。</p><p>Gitでは好きなようにブランチを構築することができます。Nvie.comでは、<a href="http://nvie.com/posts/a-successful-git-branching-model/" rel="nofollow" title="" class="ext-link">素晴らしいブランチングモデルを紹介しています</a>(訳注 : <a href="http://keijinsonyaban.blogspot.jp/2010/10/successful-git-branching-model.html" rel="nofollow" title="" class="ext-link">日本語訳の記事</a>があります)。</p><p><img src="http://betterexplained.com/wp-content/uploads/git/git_branch_strategy.png" alt=""></p><p>ブランチのレイアウトは整理整頓しておきましょう。私の場合、masterでsvnプロジェクトを管理し、devでコードを管理しています。私は通常、masterをクリーンな状態にしておくので、必要になった場合、いつでも修正ブランチを作成することができます。</p><p>Gitにはローカル操作とリモート操作があります。私も初めは混乱しました（git checkoutとgit pullの使い方など）。基本的にローカルで作業して、リモートでの作業は必要に応じて行えばいいのです。</p><p><strong>なぜローカルとリモートなのでしょう？</strong>　未完成の作業をコミットしないように、Subversionのチェックインは集中管理されています。Gitでは、頻繁にローカルコミットを実行し、プッシュは準備が整った場合のみ実行します。</p><p>Gitではコンテンツをハッシュ値（<a href="http://betterexplained.com/articles/the-quick-guide-to-guids/" rel="nofollow" title="" class="ext-link">GUID</a>で管理します。2つのブランチが同じ場合は、同じGUIDを持ちます（異なるブランチの場合、GUIDも当然異なります）。</p><p>なぜこれが素晴らしいのでしょう？　独立したブランチを複数作成し、それらを統合しても、共通のGUIDを持つことができます。集中的な番号管理は必要ありません。大抵の場合、最初の数桁を見ます。例えば、「a93」で始まっているかなど。</p><p>次を.gitconfigに利用してみてください。</p><p>Git用のGUIツールは存在しますが、私はツールを使わず、コマンドを覚えながら学ぶ方が好きです。Gitは、自己主張のあるソフトウェアです（私の気に入っているポイントです）。ロジックがgitの世界観を分かりやすくしてくれていると思います。</p><p>他にも記事を<a href="http://betterexplained.com/articles/category/guides/" rel="nofollow" title="" class="ext-link">Guides</a>や<a href="http://betterexplained.com/articles/category/programming/" rel="nofollow" title="" class="ext-link">Programming</a>に投稿しています。この記事は<a href="http://betterexplained.com/articles/tag/git/" rel="nofollow" title="" class="ext-link">git</a>や<a href="http://betterexplained.com/articles/tag/version-control/" rel="nofollow" title="" class="ext-link">version control</a>にタグしています。</p>
