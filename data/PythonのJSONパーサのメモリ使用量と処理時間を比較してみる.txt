<p><a href="http://blog.ionelmc.ro/2015/11/22/memory-use-and-speed-of-json-parsers/" rel="nofollow" title="" class="ext-link">Memory use and speed of JSON parsers</a>（2015-11-25）by<a href="http://blog.ionelmc.ro/about/" rel="nofollow" title="" class="ext-link">Ionel Cristian Mărieș</a></p><p>私は、多数の大容量のデータをあちこちに移動させなければならない(クライアント端末をHTTP APIに接続してデータを取得します)ような特殊な使用事例を扱っています。なぜだか<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>、転送形式にはJSONが使われていました。ある時、その大容量のデータが、さらに巨大になったのです。数百メガバイトどころではありません。JSONのデコード処理を実行すると大量のRAMが使用されることが分かりました。たった240MBのJSONペイロードで4.4GBですよ。信じられません。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup></p><p>組み込みのJSONライブラリを使っていて、まず「もっと性能の良いJSONパーサがあるはずだ」と思いました。そんなわけで、計測を始めたのです。</p><p>さて、メモリ使用量の計測はやっかいです。<code>ps</code>コマンドを使ったり、<code>/proc/&lt;pid&gt;</code>を見たりすることはできますが、断片的なスナップショットが得られるだけで、実際の最大使用量を求めることは難しいでしょう。幸いなことに、<a href="http://valgrind.org/" rel="nofollow" title="" class="ext-link">Valgrind</a>は、どんなプログラムでもメモリの割り当てを追跡することができますし(カスタムメモリアロケータを使うためにすべて再コンパイルするのとは対照的に)、<a href="http://valgrind.org/docs/manual/ms-manual.html" rel="nofollow" title="" class="ext-link">massif</a>という素晴らしいツールもあります。</p><p>そこで<a href="http://valgrind.org/" rel="nofollow" title="" class="ext-link">Valgrind</a>を使って<a href="https://gist.github.com/ionelmc/1521c5a87df8cf49a23d#file-memory-py" rel="nofollow" title="" class="ext-link">ちょっとしたベンチマーク</a>の作成に取り掛かりました。入力はこんな感じです。</p><p>私のアプリケーションで問題となっているデータと非常によく似た構造を持つ240MBのJSONを得ることができました。</p><p><code>valgrind --tool=massif --pages-as-heap=yes --heap=yes --threshold=0 --peak-inaccuracy=0 --max-snapshots=1000 ...</code>を実行します。Python 2.7上では各パーサについて次のような結果が得られます。(Python 3.5上の結果については下にスクロールしてください)。</p><p>結果をご覧ください。私のサンプルデータがおかしいのではとおっしゃるかもしれません。しかし残念ながら、このようなデータに遭遇する場合があるのです。時折、わずかな文字列が恐ろしいほどの大きさの容量に拡大するのです。</p><p><a href="https://docs.python.org/3/library/json.html" rel="nofollow" title="" class="ext-link">json</a>は重大な脆弱さをはらんでおり、入力の十数倍のメモリを必要とします。こんな結果になるとは。</p><p><a href="https://pypi.python.org/pypi/python-cjson" rel="nofollow" title="" class="ext-link">cjson</a>を使うようにという結果を突き付けられました。<em>VeryBadBugs™</em> を含んでいるうわさが出ていますが<sup id="fnref:6"><a href="#fn:6" class="footnote-ref">3</a></sup>、バグトラッカーの不足が、このプロジェクトを全く味気のないものにしているのだと思います。</p><p><a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=rapidjson&amp;submit=search" rel="nofollow" title="" class="ext-link">rapidjson</a> は、新く参入してきたパーサです<sup id="fnref:3"><a href="#fn:3" class="footnote-ref">4</a></sup>。しかし、<a href="https://github.com/hhatto/pyrapidjson" rel="nofollow" title="" class="ext-link">Python 2 バインディング</a>は、<a href="https://github.com/hhatto/pyrapidjson/blob/4f7b8f2f7e45a9cff9b7c2671dd7233ff52b8487/pyrapidjson/_pyrapidjson.cpp#L333-L336" rel="nofollow" title="" class="ext-link">肝心な</a>  <a href="https://github.com/hhatto/pyrapidjson/blob/4f7b8f2f7e45a9cff9b7c2671dd7233ff52b8487/pyrapidjson/_pyrapidjson.cpp#L374-L376" rel="nofollow" title="" class="ext-link">部分が</a>  <a href="https://github.com/hhatto/pyrapidjson/blob/4f7b8f2f7e45a9cff9b7c2671dd7233ff52b8487/pyrapidjson/_pyrapidjson.cpp#L144" rel="nofollow" title="" class="ext-link">欠けて</a>  <a href="https://github.com/hhatto/pyrapidjson/blob/4f7b8f2f7e45a9cff9b7c2671dd7233ff52b8487/pyrapidjson/_pyrapidjson.cpp#L187" rel="nofollow" title="" class="ext-link">いるようです</a>。それでも、これがどのように動くのか、少なくともその考え方を知るのは興味深いことです。<a href="https://github.com/kenrobbins/python-rapidjson" rel="nofollow" title="" class="ext-link">Python 3-onlyバインディング</a>の方が完成度が高そうに見えます。しかし、残念ながら、今のところこのアプリケーションはPython 2上でしか動作しません。</p><p><a href="https://pypi.python.org/pypi/yajl" rel="nofollow" title="" class="ext-link">yajl</a>と<a href="https://pypi.python.org/pypi/ujson" rel="nofollow" title="" class="ext-link">ujson</a>は、十分に完成度が高いにもかかわらず多くのメモリを食います。もっと良い方法があるはずです…。</p><p>何を選んでも短所があるようです。ここにぴったりの格言があります<sup id="fnref:8"><a href="#fn:8" class="footnote-ref">5</a></sup> 。</p><p>顧客が「<em>何か</em>を必要としている」と頼むとき、本当に必要としているものは、要求しているものよりももっとシンプルで低コストのものなのです。要件についてよく話し合い、精査すれば、問題の多くはその時点で解決します。これはそのような状況なのです。私のケースでJSONが全く必要なかったともっと早く気付いていれば…。</p><p>HTTP APIのフォーマットを変えるにはまだまだ手直しが必要です。しかし、<code>cjson</code>や<code>rapidjson</code>のバインディングを自力でメンテナンスしたり修正したりするよりはマシです。</p><p><a href="http://msgpack.org/" rel="nofollow" title="" class="ext-link">msgpack</a>を試してみたところ（さらに、怖いもの見たさで他の古いものも<sup id="fnref:9"><a href="#fn:9" class="footnote-ref">6</a></sup>）、このような結果が出ます。</p><p><a href="https://gist.github.com/ionelmc/1521c5a87df8cf49a23d" rel="nofollow" title="" class="ext-link">テストプログラム</a>を見ると、msgpackで非常に特殊なオプションが使われていることに気付くでしょう。その理由は、<a href="http://msgpack.org/" rel="nofollow" title="" class="ext-link">Msgpack</a>の初期バージョンが文字列の扱いをあまり得意としていなかったからで(扱う文字列型が1つでした <sup id="fnref:4"><a href="#fn:4" class="footnote-ref">7</a></sup>)、特殊なオプションが必要なのです。</p><p>Python 2では、</p><p>Python 3では、<br>
  * <code>bytes</code> は、バイナリになります。<br>
  * <code>str</code>は、文字列になります。</p><p><a href="https://github.com/ionelmc/pytest-benchmark" rel="nofollow" title="" class="ext-link">pytest-benchmark</a>を使った結果<sup id="fnref:5"><a href="#fn:5" class="footnote-ref">8</a></sup>です。</p><p>最短の処理時間だけを表示しました。テストの目的に合わせて実行した結果ですが、他に気になることがあれば、<a href="https://gist.github.com/ionelmc/1521c5a87df8cf49a23d" rel="nofollow" title="" class="ext-link">テストプログラム</a>をご自分のコンピュータで試してください。</p><p>問題を抱えた私のアプリケーションをPython 2の上だけで走らせるのは、まともな（と同時に悲しい）理由があってのことです。しかし、最新で最高の環境下でどうなるのかを探って自ら墓穴を掘る理由はありません。そのうち誰かが移植するでしょう…。</p><p>Python 3には<a href="https://pypi.python.org/pypi/python-cjson" rel="nofollow" title="" class="ext-link">cjson</a>や<a href="https://pypi.python.org/pypi/jsonlib" rel="nofollow" title="" class="ext-link">jsonlib</a>がありません。<a href="https://pypi.python.org/pypi/jsonlib2" rel="nofollow" title="" class="ext-link">jsonlib2</a>が生まれた背景すらわかりません。<a href="http://msgpack.org/" rel="nofollow" title="" class="ext-link">Msgpack</a>を使う方が無難なようです。</p><p>この実験は、非常に偏ったデータを使っています。完全に例外的なデータ形式だと言う人がいるかもしれません。ですので、<a href="https://gist.github.com/ionelmc/1521c5a87df8cf49a23d" rel="nofollow" title="" class="ext-link">テストプログラム</a>を使って、ご自身のデータでベンチマークすることをお勧めします。</p><p>しかし、ベンチマークが面倒なら、異なる種類のデータを使った結果がいくつかあります。これは、単に、入力データでメモリ使用量と処理時間がどのくらい変わるかを知るために行なった結果です。</p><p>189MBの<a href="https://github.com/zemirco/sf-city-lots-json/" rel="nofollow" title="" class="ext-link">citylots.json</a>では驚くほど違う結果が出ます。</p><p>小容量のオブジェクトでは、明らかに<a href="https://pypi.python.org/pypi/simplejson" rel="nofollow" title="" class="ext-link">simplejson</a>が他よりも優れており、Python3上では<a href="https://docs.python.org/3/library/json.html" rel="nofollow" title="" class="ext-link">json</a>の結果が大幅によくなっています。</p><p>処理時間について。</p><p>2.2MBというとても小さな<a href="https://github.com/miloyip/nativejson-benchmark/tree/master/data" rel="nofollow" title="" class="ext-link">canada.json</a>では、さらに異なる結果が出ます。メモリ使用量は重要な指標とは言えません。</p><p>処理時間は、またしても異なる結果が出ます。</p><p>こういう結果だから<a href="http://effbot.org/pyfaq/why-doesnt-python-release-the-memory-when-i-delete-a-large-object.htm" rel="nofollow" title="" class="ext-link">freelists</a>といううまい利用法が考えられたのかも？</p><p>処理速度もメモリ使用量もデータの構造に左右されます。処理速度がメモリ使用量に必ずしも比例するというわけではありません。</p><p>繰り返しますが、上記の数値を鵜呑みにしないで、ご自分のデータを使って自らベンチマークを行って下さい。たとえ、あなたのデータの形式が私のものと全く同じものであっても、あなたのコンピュータは私のコンピュータとは違った動きをするでしょう。あなたのコンピュータ（例えば、アーキテクチャ、共有ライブラリが異なります）上ではメモリ使用量すら違います。その上で、ベンチマークで使用した私のデータのどれかとあなたのデータがきっちり同じ形式になる見込みはあるでしょうか？</p><p>テスト環境のセットアップ</p><p>上記セットアップは完璧ではありません。もし本当に関心があるのでしたら、<a href="https://gist.github.com/ionelmc/1521c5a87df8cf49a23d" rel="nofollow" title="" class="ext-link">テストプログラム</a>をお使いください。</p><p><strong>メモ</strong><br>
要約：ペイロードが大きいデコード中心の利用において、JSONデコーダーは、たびたび過度のメモリを使います。私はJSONをあきらめて<a href="http://msgpack.org/" rel="nofollow" title="" class="ext-link">Msgpack</a>に変えました。</p><p>ご自分で<a href="https://gist.github.com/ionelmc/1521c5a87df8cf49a23d" rel="nofollow" title="" class="ext-link">テストプログラム</a>を走らせてみて、ご自身の中での結論は決めてください。</p><p>⸻</p><p>いただいたいろいろなフィードバックを基に<sup id="fnref:7"><a href="#fn:7" class="footnote-ref">9</a></sup> <a href="http://valgrind.org/" rel="nofollow" title="" class="ext-link">Valgrind</a>の代わりに<code>ru_maxrss</code>を使い、さらにいくつか実装してベンチマークを行いました。</p><p>最新の結果はこちらです。</p>
