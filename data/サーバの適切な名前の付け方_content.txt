A PROPER SERVER NAMING SCHEME by MNX.io現在、MNXではクラウドホスティングサービスの新しいデータセンタを立ち上げているところで、とてもバタバタしています。クラウドホスティングサービスは、今の私たちの主な業務ですが、この会社が始まった当初は、Linux管理のコンサルティングサービスを中心としていました。そのサービスを通じて、たくさんの顧客環境を目の当たりにしましたし、それと同じ数だけの、顧客ごとに異なるデバイス名の指定方法も見てきました。そしてもちろん、その全ての指定方法をいいなと思ったわけではありません。名前の付け方は、コンピュータ草創期からの問題ですよね。おのおのがホスト名の指定方法について一家言持っていました。でも、それらの方法は最初のうちはうまくいっても、時を経てシステムインフラが拡大し、状況に応じて変更を余儀なくされるようになると、すぐに扱いにくくなってしまうものがほとんどでした。そこで今回は、先述した私たちのデータセンタが白紙状態からの立ち上げということもあり、これまでに見てきた一般的な問題を踏まえる形で、独自の命名規則を考えてみることにしました。まずやるべきことは、参考となるアイデアの収集です。大企業が公開しているデータや、名前の付け方に関するRFC、それにブログやフォーラムなど、様々なソースを見て回りました。そして、それらのソースを精査した上で、これは優れていると自信を持って言える命名規則を編み出しました。この規則は、中小規模のほとんどの企業にうってつけだと思います。まずは、私たちの規則の概要を見ていき、その後で、その優れた点や妥当性をご紹介します。手始めに、（お使いのOSの設定方法に従って）それぞれのホストに名前を付けて、リストからランダムに選択した単語でDNSのAレコードを設定しましょう。単語が集積されたリストは数多くありますが、特にお勧めしたいのはOren Tirosh氏のMnemonic encodingプロジェクトです。ここに紹介されている1633の単語は、音声的に互いに異なる短い（4-7文字）単語で、電話越しでも理解しやすく、国際的にも認識が容易なものです。またMnemonicのリストにある単語を使うと、複雑な構造を持つ単語に比べて、文字を前後逆にしたりスペルを間違ったりする可能性を大きく減らすことができます。この単語リストは多くの時間と研究の上に出来上がっており、その成果は、私たちの目的に理想的と言えるでしょう。
基本的に、ホストの目的や機能を示唆するような名前をホスト名にするのはお勧めできません。それよりも、ハードウェアのライフサイクルを通じてその対象を指し示すような、恒久的で独自の識別子を持った名前の方がいいと思います（ハードウェア交換の際、名前の使い回しはできるだけ避けたいところです）。つまり、その名前を対象ハードウェアの物理的なラベルとして機能させ、ほとんどの場合、例えばエンジニアの運用時であれリモート作業時であれ、またはレコードの記録時であっても、使い勝手が変わらないようにした方がいいということです。また、DNSの逆引き（PTR）レコードにとっても有益です。次に、マシンの機能的な詳細を明示するために、例えば地域や環境、作業部門、用途など、1つ以上のDNS CNAMEレコードを割り当てましょう。割り当てた全ての情報はCMDBにミラーリングされるため、容易に参照ができます。
CNAMEレコードは、ディベロッパが知っておくべき情報で、サービスを相互接続する際に使われるものです。これらの名前に一貫性を持たせておくと、ホスト名を覚えなければならない時の精神的な労力を軽減することができますよ。まず登録したドメインへ順番に適切なサブドメインを追加情報として割り当てていきます。DNSは階層構造になっていて、その構造を利用することで、後々、利便性が出てきます。ドメイン名の後には、ホストの地域を示したサブドメインを加えます。ホストのデータセンタの場所に基づいて国連欧州経済委員会（UNECE）によって制定された港及び地名コード（UN/LOCODE）を使いましょう。IATAの空港コードよりも、さらに具体的な場所を示せ、よく定義された規格です。ほとんどのケースで、国を示す2文字は省略でき、3文字の地域名コードだけで使えます。つまり、複数の国にまたがってデータセンタがあって、国は違うのに、たまたま同じ地域名コードが使われているなんてことがない限りは、nyc.us.example.com.ではなく nyc.example.comを使用できます。次に、ホストが所属する環境を指定します。上記に挙げた例は、あなたがリリース管理のために従っているプロセスモデルに基づく必要があります。全く同じプロセスモデルである必要はなく、サンドボックスやトレーニングなどのような環境を指定する場合もあります。最後に、ホストの機能の基礎となるカテゴリーを指定し、シリアル番号を付けます。シリアル番号には、必要とするキャパシティに基づいて、ゼロパディングを使用してください。拡張を考えたとしても、2桁あれば十分こと足ります。全世界で固有のインデックスよりも、むしろ特定のデータセンタのサーバタイプに基づき割り当て、シリアル番号を増やし関連づけていきましょう。つまり複数のデータセンタでweb01を持つ可能性があることを意味します。標準化された構造の他、webmail, cmdb, puppetなどといった利便性のある機能を示す単語のために、さらにCNAMEレコードが必要になるかもしれません。ネット機器と電力装置に対して、ハードウェアは用途を指示しますが、再構成せずに動かすことはほとんど不可能でしょう。ですので、ランダムな単語の命名規則ではなく、機能の略語をDNSのAレコードに割り当ててください。恐らく、ここでもデータセンタの地理的情報が欲しくなるでしょう。希望すれば、core/dist、パブリック vs プライベートといったさらに具体的な情報としてCNAMEレコードを追加することができます。セカンダリIPアドレスと仮想IPアドレス（高可用性、Webサービス、ネットワーク移行、トラフィックがタグづけされた仮想LANに使われます）が、一筋縄でいかないところは特定のハードウェアと結びついていないところです。このケースでは、直接、機能的なネームをDNSのAレコードに割り当てて、通常の命名規則に従うことが最も簡単です。メールサーバとネームサーバの場合は、DNSのAレコードを利用する必要があります。というのもMXレコードとNSレコードはCNAME仮想ファイルを指してはいけないからです。とはいえ、DNS のAレコードを複数持つことができるので、通常の構造に従い、パブリックMXレコードとNSレコードを利用するために別のものを加えます。各データユニットに適切なDNSサブドメインを使用したので、検索ドメインはホストごとに、マシンのローカルなカテゴリーに注意を払うためだけに設定できます：これにより短いバージョンのホスト名を使えるようになるため、そのマシンで仕事をしている時に便利です。例えば、データセンタ内で通信する際に、ping sql01と入力するだけでよく、ping sql01.prd.nyc.example.comと完全な名前を入力する必要がありません。一般的に、この命名規則を使うと不注意により情報が開示されるのを防ぐこともできます。公開されるのは短いランダムなホスト名だけで、機能的名称は内部ネットワークでのみ解決されるからです。これはちょっとした隠すことによるセキュリティではありますが、考慮すべき事項です（”特殊ケース”の名前も隠したい場合は、その命名規則を微調整する必要があります）。内部のDNS解決を利用して、プライベートネットワークアドレスや帯域外/IPMI/iDRACのアドレスを公開することもできます。ドメインは他のレコードと一致させる必要がありますが、ここでも適切なサブドメインを活用します。ちなみに、フェイクのTLDを使わないことをお勧めします。この理由は、ICANNがいつでもそれを登録することができるため、ネットワークの結合がややこしくなるからです。この命名規則では1500以上のグローバルサーバを問題なくサポートします。これよりも多くのサーバをお持ちの場合は、ランダムな名前に地域情報の部分を追加して、リストの単語を複数回利用することで対処できます。この手法のマイナス面としては、crimson.nyc.example.comとcrimson.pdx.example.comの用途がまったくかけ離れている可能性があることで、それを考えると少しためらわれるところです。その場合は、最初の単語リストを拡張することにして、mnemonic encoding単語と同様の基準で選んだ単語を追加して使用するといいでしょう。10,000台以上のサーバを管理している場合は、ホストは単一の区分化された用途を持っている場合がほとんどでしょうから、上記のことはすべて無視して、ロケーションベースの命名規則または機能的な命名規則をお使いください。このサーバ命名規則は、マシンを追跡しなければならないという精神的負担を減らしてくれます。また、サービスの関連付けや適切なハードウェアレコードの保守を直接的で分かりやすいものにしてくれます。時間の経過とともに変化する可能性のあるマシンの情報はCNAMEレコード内にだけ存在します。このため、もしサーバが故障しても、新しいホストを指すようにCNAMEレコードを更新すればいいだけなので、他のマシンのそのホストへの参照すべてを更新する必要がありません。この規則には、先行投資として多少の煩雑さはありますが、使いやすさ、保全性、長期的成長のサポートという利点を考えれば、決して損はありませんよ。
