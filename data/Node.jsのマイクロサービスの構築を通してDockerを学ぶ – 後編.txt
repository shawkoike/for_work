<p><a href="http://www.dwmkerr.com/learn-docker-by-building-a-microservice/" rel="nofollow" title="" class="ext-link">Learn Docker by building a Microservice</a> （2016-04-19） by <a href="https://twitter.com/dwmkerr" rel="nofollow" title="" class="ext-link">Dave Kerr</a></p><p>前編はこちら：<a href="http://postd.cc/learn-docker-by-building-a-microservice-1/">Node.jsのマイクロサービスの構築を通してDockerを学ぶ – 前編</a></p><p>さて、ここからがお楽しみです！</p><p>私たちには、互換性のあるNode.jsバージョンがインストールされている開発マシン上で実行できるマイクロサービスがあります。やりたいことは、<em>Dockerイメージ</em>を作成できるように、サービスをセットアップすることです。そうすれば、Dockerをサポートしているあらゆる場所にサービスをデプロイすることができます。</p><p>これを行うには<em>Dockerfile</em>を作成します。Dockerfileは、イメージを構築する方法をDockerエンジンに指示するレシピです。<code>users-service</code>ディレクトリに簡単なDockerfileを作成し、それを私たちのニーズに適応させる方法を探ることから始めましょう。</p><p><code>users-service/</code>ディレクトリに以下の内容を持つ<code>Dockerfile</code>いう名前の新しいテキストファイルを作成してください。</p><p>次に以下のコマンドを実行することで、イメージを構築して、そこからコンテナを実行します。</p><p>それでは、まず、ビルドコマンドを見てみましょう。</p><p>コンソールに幾つか出力された後、新しいイメージが作成されたことが表示されます。<code>docker images</code>を実行するとシステム上の全てのイメージを見ることができます。2番目のコマンド<code>docker run</code>は、ある程度説明してきたので、だいぶ慣れているはずです。</p><p>このイメージを実行すると、Node REPLが立ち上がります。現在のバージョンが以下のように表示されるので、確認してください。</p><p>これは、あなたの現在のマシン上のNodeバージョンと異なる可能性があります。</p><p>Dockerfileを見れば、何が行われているかを非常に簡単に知ることができます。</p><p>次のように、さらにコマンドを幾つか追加すれば、私たちのサービスを実行するようにDockerfileを更新することができます。</p><p>ここで追加した部分を説明します。<code>ADD</code>コマンドを使って、<code>app/</code>というコンテナの中のフォルダにカレントディレクトリにあるものを全て<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>コピーします。次に、<code>RUN</code>を使って、イメージの中のコマンドを実行します。それによって、私たちのモジュールがインストールされます。最後に、サーバポートを<code>EXPOSE</code>して、<code>8123</code>でインバウンド接続をサポートするつもりであることをDockerに伝えます。その後、私たちのサーバコードを実行します。</p><p>test-databaseサービスが実行されていることを確認してください。その次に、以下の通りに再度イメージを構築し、実行してください。</p><p>ブラウザで<code>localhost:8123/users</code>にアクセスすると、エラーが表示されるので、コンテナから報告されている問題をコンソールで確認してください。エラーは次の通りです。</p><p>うわー！　<code>users-service</code>コンテナから<code>test-database</code>コンテナへの接続が拒否されています。<code>docker ps</code>を実行して、実行中の全てのコンテナを表示してみましょう。</p><p>コンテナは両方ともありますね。一体どうなっているのでしょうか？</p><p>先ほど見た問題は、実は予想されていたことです。Dockerコンテナは隔離すべきものですから、私たちが明確な許可を出していないにも拘らずコンテナ間に接続を作れてしまっては、あまり意味はありません。</p><p>そうです。私たちのコンピュータ（ホスト）からコンテナへ接続することはできます。そのためにポートを開けてあるからです（例えば、<code>-p 8123:8123</code>という引数を使います）。もしもコンテナに、お互いに同じ方法で通信することを許せば、開発者が意図していなかったとしても同じコンピュータで実行されている2つのコンテナは、通信できてしまうのです。これは特に、異なるアプリケーションからコンテナを実行するのが仕事のコンピュータがいくつもある場合は大失敗の元になります。</p><p>もしもコンテナを他のコンテナと接続させるなら、<em>リンク</em>させる必要があります。これにより、Dockerに「2つのコンテナの間のコミュニケーションを明白に許可したい」と伝えられます。これを行う方法は2つあります。1つは”昔ながらの”非常にシンプルな方法です。2つ目はもう少し後で見ましょう。</p><p>コンテナを実行する時は、<code>link</code>パラメータを使って他のコンテナと接続する意図があることをDockerに伝えることができます。今回の場合では、以下に示すようにすれば、サービスを正しく実行できます。</p><p>これで<code>localhost:8123/users</code>としてみれば、全てが機能します。</p><p>サービスのための設定ファイルを覚えていますか？　それによって環境変数を使ってデータベースのホストを特定できるのです。</p><p>コンテナを実行する時、この環境変数を<code>DB</code>に設定します。つまり、<code>DB</code>というホストに接続するということです。これは、コンテナにリンクした時にDockerエンジンによって<em>自動的に</em>セットアップされます。</p><p>これが実際に機能しているのを見るには、<code>docker ps</code>を実行して動いているコンテナを全てリストアップさせてみてください。そして<code>users-service</code>を実行しているコンテナを探してください。<code>trusting jang</code>というような、ランダムな名前になっているでしょう。</p><p>これで、コンテナ上で利用可能なホストが見られるようになりました。</p><p><code>docker exec</code>はどのように機能するか覚えていますか？　コンテナの名前を選べば、その後に続くのが何であれ、それがコンテナで実行するコマンドになります。今回の場合では、<code>cat /etc/hosts</code>になります。</p><p>hostsファイルに、通常は含まれない<code># linking magic!!</code>というコメントがあることに気付きましたね。Dockerがhostsファイルに<code>db</code>を加えたので、ホスト名を使ってリンクされたコンテナを参照することができます。これは、リンクすることによる結果の1つです。他の例も挙げておきましょう。</p><p>Dockerがコンテナにリンクする時には、このコメントからも見ることができますし、いくつかの有益な情報と共に環境変数も与えてくれます。ホストとTCPポート、コンテナの名前が分かりました。</p><p>これでステップ3が完了しました。コンテナ内で快適に実行されるMySQLデータベースができ、ローカルで実行することも自身のコンテナ内で実行することもできるnode.jsのマイクロサービスもあり、これらをどのようにリンクさせるかも分かりました。</p><p>この段階でコードがどのようになっているのかは、<a href="https://github.com/dwmkerr/node-docker-microservice/tree/step3" rel="nofollow" title="" class="ext-link">ステップ3</a>のブランチに行くことで確認できます。</p><p>これで、実際のサーバを呼び出す統合テストを書くことができるようになりました。そして、Dockerコンテナとして実行し、コンテナ化されたテストデータベースを呼び出します。</p><p>統合テストは、常識の範囲内で、あなたが書きたいと思うどの言語、どのプラットホームで書いても構いません。しかし、状況を単純にしておくため、私たちのプロジェクトで既にMochaとSupertestを見てきたように、Node.jsを使っています。</p><p><code>integration-tests</code>と名付けた新しいフォルダの中に、以下のような内容を持つ<code>index.js</code>ファイルが1つだけ入っています。</p><p>これはAPI呼び出しをチェックして、テストの結果を示します<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>。</p><p><code>users-service</code>と<code>test-database</code>が動いている限り、テストは合格するでしょう。しかしこの段階では、サービスは少々扱いづらくなっています。</p><p>今は、少しDockerに詳しくなったので、こういった問題を解決することができます。</p><p>今のところ、私たちはテストデータベースのために以下のファイルを用いています。</p><p>Dockerについてさらに詳しくなっているので、これを改善することができます。Docker Hubの<a href="https://hub.docker.com/_/mysql/" rel="nofollow" title="" class="ext-link">MySQLイメージのドキュメンテーション</a>に目を通していただければ、イメージの<code>/docker-entrypoint-initdb.d</code>フォルダに追加した<code>.sql</code>と<code>.sh</code>という拡張子のファイルはどれも、そのDBをセットアップする際に実行されるという解説が記されています。</p><p>これは次のように、スクリプトファイル<code>start.sh</code>と<code>stop.sh</code>を<code>Dockerfile</code>に置き換えることができることを意味しています。</p><p>では、以下のようにテストデータベースを実行してみましょう。</p><p>各コンテナを構築し、実行するのは、いまだに時間がかかる作業です。<a href="https://docs.docker.com/compose/" rel="nofollow" title="" class="ext-link">Docker Compose</a>ツールを使って、更にもう一歩前に進むことができます。</p><p>Docker Composeはシステムの各コンテナと、コンテナ間の関係性を定義するファイルを作成し、全てのファイルを構築・実行します。</p><p>まず、<a href="https://docs.docker.com/compose/install/" rel="nofollow" title="" class="ext-link">Docker Composeをインストール</a>します。さて、あなたのプロジェクトのルートディレクトリに以下の内容をもつ<code>docker-compose.yml</code>という名前の新しいファイルを作ってください。</p><p>さて、以下を確かめてみて下さい。</p><p>Docker Composeはアプリケーションに必要となるイメージを全て構築し、そこからコンテナを作成し、正しい順番でコンテナを実行ました。これで、全部の作業が開始されました。</p><p>以下に示すように、<code>docker-compose build</code>というコマンドは<code>docker-compose.yml</code>ファイルに記載された各イメージを構築します。</p><p>それぞれのサービスに対する<code>build</code>の値は、<code>Dockerfile</code>をどこで見つければよいかをDockerに伝えます。<code>docker-compose up</code>と実行すると、Dockerは全サービスを開始します。<code>Dockerfile</code>から、ポートと依存パッケージを特定できることにご注意ください。実のところ、私たちが変更できる設定がこのファイルの中にたくさん含まれています。</p><p>別のターミナルで、<code>docker compose down</code>と実行すれば、円滑にコンテナを終了します。</p><p>この記事の中で、Dockerについて多くのことを見てきました。しかし、まだまだたくさんあります。あなたの業務においてDockerを使えるような興味深く役に立つことをご紹介できていればいいのですが。</p><p>いつものように、質問やコメントは大歓迎です！　Dockerがどのように機能するかという理解をより深めるために、<a href="https://docs.docker.com/engine/understanding-docker/" rel="nofollow" title="" class="ext-link">Dockerを理解する</a>という文書も一読されることを強くお勧めします。</p><p>この記事でご紹介したプロジェクトの最終的なソースコードは、以下のWebサイトから入手できます<a href="github.com/dwmkerr/node-docker-microservice">github.com/dwmkerr/node-docker-microservice</a>。</p>
