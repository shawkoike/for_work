<p><a href="http://seiferteric.com/?p=356" rel="nofollow" title="" class="ext-link">IP Over QR Code!</a> （2016-11-18） by <a href="http://seiferteric.com/?page_id=2/" rel="nofollow" title="" class="ext-link">Eric Seifert</a></p><p>**更新**<br>
現在のスループットについて質問をいただきました。今のところ100バイト/秒程度ですが、もっと改善できるのではないかと思います。<img draggable="false" class="emoji" alt="🙂" src="https://s.w.org/images/core/emoji/2.2.1/svg/1f642.svg"></p><p>**更新2**<br>
カスタムなSEQ／ACKヘッダを取り除いても、動作しています。速度は約<strike>2倍</strike>10倍で、およそ<strike>200Bps</strike>1kBpsから2kBpsです（今は新しいデータについてQRコードを生成する場合に限ります）。しかし、依然としてレイテンシが問題です。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/_BUlrzEvwEE" frameborder="0" allowfullscreen></iframe></p><p>ずいぶん前に、私は、オーディオ/マイクジャックでデータを送信することを思いつきました。そして、今ひとつながらも、テキストメッセージを何とか送れるだけの実装をしました（実にあやしいものですが）。それがこちら<a href="http://seiferteric.com/?p=319" rel="nofollow" title="" class="ext-link">http://seiferteric.com/?p=319</a>です。これは、かなり前にHackadayで取り上げられました。</p><p>今回は、モニタとWebカメラを使ってデータを送信しようと思いました。一体どうすれば、あまり手間をかけずに、確実にデータを送れるでしょうか。それは<a href="https://ja.wikipedia.org/wiki/QR%E3%82%B3%E3%83%BC%E3%83%89" rel="nofollow" title="" class="ext-link">QRコード</a>です。というわけで今回は、TUNデバイスを使用して、パケットを読み込み、QRコードに変換し、画面にQRコードを表示するというアイデアをご紹介します。そして、受け取った側はカメラを使ってコードを確認してデコードし、自分のTUNデバイスにパケットを投入します。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/E4qs1FmtDUA" frameborder="0" allowfullscreen></iframe></p><p>この過程で、いくつかの課題に突き当りました。1つ目は、受け取り手がメッセージを読んだという受信確認が必要だということです。そこで、SEQ/ACK形式のシンプルなヘッダを追加しました。そのヘッダに、新しいQR毎のシークエンスと、相手のQRコードをうまく読み取れた場合の受信確認をインクリメントします。2つ目は、データをエンコードする方法が必要だということです。QRコードはバイナリモードをサポートしていますが、これは最も効率が悪いので、その代わりに英数字と<a href="https://en.wikipedia.org/wiki/Base32" rel="nofollow" title="" class="ext-link">Base32</a>を使ってパケットデータをエンコードすることに決めました。このモードのQRコードは大文字しかサポートしていないので、Base64は機能しません。次に問題となったのは、QRコードを生成するのに使用していた<a href="https://github.com/primetang/qrtools" rel="nofollow" title="" class="ext-link">qrtools</a>です。このライブラリでデータをエンコードしていたのですが、デコードすると同じデータにならならないのです。そこで私はこれを見つけて修正しました。それでデータにパディングを追加し、それがうまく動作するまで試して、もう一方の側でパディングを取り除きます。</p><p>テストをしている間、正気を保っていることができたのは、リモートサイドのDockerコンテナでコードを実行することができたからです。そうするとWebカメラを使う代わりに、ボリュームマウントでQRコードのイメージファイルを渡すだけです。もちろん、これはずっと速くて、ほぼ使える接続でした（sshは問題ありませんでしたし、ping時間は50ミリ秒～60ミリ秒程度でした）。しかし、もちろんカメラを使うのが目標です。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/kc9COP5dALU" frameborder="0" allowfullscreen></iframe></p><p>sshのログインに成功しました！</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/N_Qr5AP_2wU" frameborder="0" allowfullscreen></iframe></p><p><strong><a href="https://github.com/seiferteric/qrtun" rel="nofollow" title="" class="ext-link">コードの入手はGitHubで</a></strong></p>
