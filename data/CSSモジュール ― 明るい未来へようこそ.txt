<p><a href="http://glenmaddern.com/articles/css-modules" rel="nofollow" title="" class="ext-link">CSS Modules – Welcome to the Future</a> (2015-08-20) By <a href="https://twitter.com/glenmaddern" rel="nofollow" title="" class="ext-link">Glen Maddern</a></p><p>ここ最近、CSSに対する考え方が広がりを見せています。皆さんの中には、その転換点を見つけようと、Christopher Chedeauの”CSS in JS”という講演を聞いた方もいるでしょう。2014年11月にNationJSで行われたこの講演は、CSSにおける重大な分岐点となりました。まるで高エネルギー粒子が衝突した後のように、それを機に、数ある多様な考え方が、各々の方向へ渦を描くように広がったのです。その例として、<a href="https://github.com/js-next/react-style" rel="nofollow" title="" class="ext-link">React Style</a>と<a href="https://github.com/petehunt/jsxstyle" rel="nofollow" title="" class="ext-link">jsxstyle</a>、<a href="https://github.com/FormidableLabs/radium" rel="nofollow" title="" class="ext-link">Radium</a>を挙げましょう。これら3つは、Reactのスタイリングにおける最新かつ最良、そして最も実行しやすいアプローチに含まれており、<em>各々のプロジェクトのReadmeファイルでも、</em>そのように言及しています。もし”発明”が、<a href="http://www.practicallyefficient.com/home/2010/09/28/the-adjacent-possible" rel="nofollow" title="" class="ext-link">adjacent possible（一歩先にある可能性）</a>を探ることの一例であるのなら、Christopherのおかげで数ある実現可能な事柄が、より身近なものになったと言えます。</p><p><img class="_lib_components_figure__img _styles_traits_layout__layout _styles_traits_layout__mw100 _styles_traits_layout__block _styles_traits_layout__m0-auto _styles_traits_border__border _styles_traits_border__polaroid" src="http://glenmaddern.com/assets/images/7_problems_css.jpg" alt="Christopher Chedeau's 7 problems with CSS at scale" data-reactid=".0.1.1.1.0.0"><br>
<em>注釈:<br>
大規模化するCSSの問題点<br>
1. グローバルネームスペース<br>
2. 依存性<br>
3. デッドコードの削除<br>
4. 縮小<br>
5. 定数の共有<br>
6. 非決定論的な解決<br>
7. 分離</em><br>
<em>このスライドの内容は、多くの人にとって耳が痛いものでしょう。</em></p><p>どの問題も、もっともな内容です。更に多くの場合、大規模なCSSのコードベースに何かしらの形で影響を与える問題です。Christopherは、スタイリングをJavaScriptに移行すれば、これらの問題を全てうまく解決できると指摘しています。彼の意見は正しいのですが、そうするとスタイリング自体の複雑性や特異性が増してしまうことになります。<em>長年</em>にわたりCSSで解決されてきた<code>:hover</code>状態の扱いについて、先ほど私が挙げたプロジェクトで、どのようなアプローチが取られているのか見てみてください。</p><p>CSSの良い点を全て残した上で、そこにstyles-in-JSコミュニティが開発した素晴らしい機能を追加する――私たち<a href="https://github.com/orgs/css-modules/people" rel="nofollow" title="" class="ext-link">CSSモジュールチーム</a>は、この課題に真っ向から取り組めると信じてきました。私たちは自らのアプローチを固持し、断固としてCSSの美点を主張してきましたが、私たちがそうしている間、CSSの限界を別の角度から押し広げてくれた人々には、深く感謝しています。本当にありがとう！👬👫👭</p><p>ではCSSモジュールとは何か、なぜそこに未来があるのかを説明していきましょう。</p><p><img class="_lib_components_figure__img _styles_traits_layout__layout _styles_traits_layout__mw100 _styles_traits_layout__block _styles_traits_layout__m0-auto _styles_traits_border__border _styles_traits_border__polaroid" src="http://glenmaddern.com/assets/images/jony.jpg" alt="Jony Ive contemplates CSS Modules" data-reactid=".0.1.1.5.0.0"><br>
<em>こんな風に私たちはCSSについて真剣に考えてきました。</em></p><p>CSSモジュールでは、各ファイルが別々にコンパイルされるため、一般的な名称のシンプルなクラスセレクタを使うことができます。よって、グローバルスコープを汚染する心配がありません。ここで、以下の4つの状態をもつ簡単な送信ボタンを作成するケースを考えてみましょう。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/09/buttons.jpg"><img src="http://postd.cc/wp/wp-content/uploads/2015/09/buttons.jpg" alt="buttons" width="1052" height="156" class="alignnone size-full wp-image-4580"></a></p><p>Suit/BEMスタイルのクラス名と、ごく普通のCSSとHTMLを使って以下のようなコードを書いたとしましょう。</p><p>これは実に良くできています。4つのバリアントを含んでおり、BEMスタイルの命名規則通り、ネストされたセレクタは使用していません。Buttonの表記を大文字で始めているのは、（願わくは）読み込んでいる以前のスタイルや依存関係で競合が発生しないようにするためです。また<code>--modifier</code>シンタックスを用いることで、バリアントが適合する基底クラスを必要としているということを明示しています。</p><p>全体としては、非常に明確で保守性の高いコードです。命名規則関連では、相当の注意を払う必要がありますが、これは標準のCSSにおいて最良の方法です。</p><p>CSSモジュールを使う場合、より一般的な名前を付ける必要はなく、最も意味が分かりやすい名前を使えば大丈夫です。</p><p>ここでは、<em>“button”</em>という単語をどこにも使用していないことに注目してください。一体なぜでしょうか？　それは、このファイル自体がすでに<em>“submit-button.css”</em>という名称だからです。どの言語においても、全てのローカル変数の前に、ファイル名を付ける必要などありません。それはCSSでも同じです。</p><p>CSSモジュールのコンパイル方法、つまりJavaScriptからファイルを読み込むために、<code>require</code>や<code>import</code>を使うことによって、これを可能にしています。</p><p>実際のクラス名は自動生成され、一意的であることが保証されます。CSSモジュール側でその点を全て考慮し、ICSS（<a href="http://glenmaddern.com/articles/interoperable-css" rel="nofollow" title="" class="ext-link">詳細は私のブログを参照してください</a>）というフォーマットにファイルをコンパイルしてくれます。これにより、CSSとJSが連携できるようになり、アプリを起動すると、以下のように表示されるはずです。</p><p>DOMでこの内容が確認できれば成功です！　</p><p><img class="_lib_components_figure__img _styles_traits_layout__layout _styles_traits_layout__mw100 _styles_traits_layout__block _styles_traits_layout__m0-auto _styles_traits_border__border _styles_traits_border__polaroid" src="http://glenmaddern.com/assets/images/gorilla_shark.jpg" alt="A gorilla high-fives a shark in front of an explosion" data-reactid=".0.1.1.o.0.0"><br>
<em>あなたがゴリラで、CSSモジュールがサメですよ。</em><br>
<em>（著作権者：<a href="http://www.topatoco.com/merchant.mvc?Screen=PROD&amp;Store_Code=TO&amp;Product_Code=RB-HIGHFIVE&amp;Category_Code=RB" rel="nofollow" title="" class="ext-link">Christopher Hastings</a>）</em></p><p>では、ボタンの例を再考してみましょう。</p><p>ここでは、全てのクラスがスタンドアローンである点に注目してください。1つのクラスが“基底”となり、それを他のクラスが”オーバーライド”しているのではありません。CSSモジュールでは、<strong>バリアントに必要な全てのスタイルが、各クラスに含まれている必要があります</strong>（この仕組みについては、後ほど説明します）。これにより、JavaScript上で、このようなスタイルを扱う方法が大きく変わってきます。</p><p>もちろん、あなたがキーストローク単位で給料を貰っているのであれば、好きなようにやっていただいていいですよ。</p><p>これはCSSモジュールというより、Reactの仕様の話になりますが、Reactを使うことで、CSSの使用感が飛躍的に向上するので、少し複雑な例を出す価値もあるでしょう。</p><p>スタイルを使う際に、グローバルで使えるCSSのクラス名がどんな名前で生成されるかを気にする必要はありません。つまり、スタイリングではなく、<em>コンポーネント</em>に集中できるのです。このように、常にあったコンテキストスイッチが取り除かれると、それまで耐え忍んできた状況に唖然とすると思います。</p><p>しかし、これはまだ始まりに過ぎません。スタイルがどう統合されるかを考える段階では、CSSモジュールが役立ちます。</p><p>先ほど、各クラスには全ての状態に対応したボタンのスタイルが含まれるべきだと述べました。これは複数のスタイルを持たないと見なすBEMとは正反対です。</p><p>ところで、全ての状態間で共有されたスタイルをどのように表現するのでしょうか。その答えは、おそらくCSSモジュール最大の武器である<strong>コンポジション</strong>です。</p><p>この<code>composes</code>キーワードは、「<code>.normal</code>が<code>.common</code>の全てのスタイルを含む」という意味で、Sassでいう所の<code>@extends</code>キーワードにあたります。SassはCSSセレクタを上書きすることによってこれを行うのに対し、<strong>CSSモジュールはどのクラスをJavaScriptにエクスポートすべきかを変更しています。</strong></p><p>上記のBEMの例に、Sassの<code>@extends</code>を適用してみましょう。</p><p>これが以下のCSSにコンパイルされます。</p><p>これで、マークアップ内で1つのクラス<code>&lt;button class="Button--error"&gt;</code>だけを使い、共通するスタイルと固有のスタイルの両方を思い通りに付与することができます。実に有力な概念ですが、この実装にはエッジケースや落とし穴もあるので、注意が必要です。具体的な問題の概要と参考文献へのリンクは、Hugo Giraudelによる<a href="http://www.sitepoint.com/avoid-sass-extend/" rel="nofollow" title="" class="ext-link">こちらで確認することができます</a>。</p><p>キーワード<code>composes</code>は、概念的には<code>@extends</code>と同じですが、異なった働きをします。実際にやってみますので、以下の例を見てください。</p><p>コンパイルされたコードは、ブラウザに到達するころには、以下のようになります。</p><p>JavaScriptのコードでは、<code>import styles from "./submit-button.css"</code>が以下を返します。</p><p>　<code>styles.normal</code>や<code>styles.error</code>のコードも変わらず使うことはできますが、<strong>複数のクラスがDOMにレンダリングされます。</strong></p><p>これは<code>composes</code>がもたらす効果で、マークアップを変更したり、CSSセレクタを書き換えたりすることなく、複数の独立したスタイルのグループを統合することができます👌</p><p>SassまたはLESSでは、<code>@import</code>する各ファイルは、同じグローバルワークスペースで処理されます。これによって、1つのファイル内で変数またはミックスインを定義することができ、全てのコンポーネントファイルで使えます。便利ではありますが、変数名が互いに競合の危機にさらされると（他のグローバルネームスペースであるため）、必ず<code>variables.scss</code>または<code>settings.scss</code>のリファクタリングを余儀なくされます。すると、どのコンポーネントが、どの変数に依存しているかという可視性を失うことになり、設定ファイルは<a href="https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss" rel="nofollow" title="" class="ext-link">扱いにくくなってしまいます</a>。</p><p>より最適な方法もありますが（実際、Ben Smithettが<a href="http://bensmithett.com/smarter-css-builds-with-webpack/" rel="nofollow" title="" class="ext-link">投稿したSass &amp; Webpackを一緒に使うことについての記事</a>は、CSSモジュールプロジェクトに直接的な影響を与えていますので、是非読んでみてください）、依然として、Sassのグローバルな性質によって制約されます。</p><p>CSSモジュールが一度に起動できるのは、1つのファイルに対してです。ですから、グローバルコンテキストが汚染されることはありません。それに、依存を<code>import</code>したり<code>require</code>したりすることができるJavaScriptのように、CSSモジュールは他のファイルから<code>compose</code>してくれます。</p><p>コンポジションを使うと、<code>colors.css</code>といったような、一般的なファイルにたどり着くことができ、ローカル名として使いたいクラスを1つ参照してくれます。コンポジションは、CSSそのものではなく、どのクラスがエクスポートされるのかを変更するので、ブラウザに到達する前に<code>composes</code>ステートメントそのものは、CSSから消去されます。</p><p>実際、ブラウザに到着する頃には、ローカル名である”normal”には、独自のスタイルがなくなっています。これは良いことです！　つまり、<strong>新たにCSSの行を1つも追加することなく、</strong>ローカルで認識することのできるオブジェクト（”normal”と呼ばれるエンティティ）を追加することができるのです。この作業を多く行うことができれば、サイトに紛れ込む視覚的な矛盾が発生する頻度が軽減され、お客様のブラウザを肥大化させなくて済みます。</p><p>余談ですが、これらの空のクラスは、簡単に検知することができ、<a href="https://github.com/css/csso" rel="nofollow" title="" class="ext-link">csso</a>などで消去することができます。</p><p>コンポジションは、構成されているスタイルではなく、要素が何であるかを説明してくれるので、効果的です。概念エンティティ（要素）をスタイルエンティティ（<em>ルール</em>）にマップイングするには異なる方法を取ります。では、簡単な例をごく普通のCSSで見ていきましょう。</p><p>要素、スタイル共にシンプルです。しかし、問題があります。<em>他でもこのスタイルを使うことがあるかもしれないのに、</em>色やフォントの大きさ、ボックスの影、パディングなど、全てが詳細に指定してあります。ではSassを使ってリファクタリングしてみましょう。</p><p>改善されました。しかし、行の<em>半分</em>を抽出しただけです。<code>$large-font-size</code>がタイポグラフィ、<code>$padding-normal</code>がレイアウトに対する指定であるという事実は、名前によって表現されただけで、どこにも強制力がありません。<code>box-shadow</code>のように、宣言の値が変数にならない場合、<code>@mixin</code>または<code>@extends</code>を使う必要があります。</p><p>コンポジションを使って、<em>再利用という観点から、</em>コンポーネントを宣言します。</p><p>フォーマットは、単一目的ファイルがたくさんあり、異なる目的別にスタイルを記述するために、名前空間ではなくファイルシステムを使うことに適しています。複数のクラスを単独のファイルから作成したい場合は、以下のように簡素化することができます。</p><p>これは、サイトが使用する全ての可視性のあるトレイトに対して別名を与えるために、<em>極度に</em>粒度の細かいクラスを使うという、一つの可能性を広げることになります。</p><p>これは、私が更に掘り下げたいと思っている手法です。頭の中では、<a href="http://tachyons.io/" rel="nofollow" title="" class="ext-link">Tachyons</a>といった、アトミックなCSSの手法の最も良いところと、<a href="http://semantic-ui.com/" rel="nofollow" title="" class="ext-link">Semantic UII</a>のように、正確で信頼性のある、読みやすいものを組み合わせた感じと思っています。</p><p>ですが、CSSモジュールはまだ始まったばかりです。まずは、あなたの次のプロジェクトで実際に試してみてください。そして今後、内容を具体化していくために、私たちに協力していただけたら嬉しいです。</p><p>CSSモジュールを使うことによって、あなたが今持ち合わせているCSSの知識やプロダクトの維持の手助けになれば幸いです。より快適で生産性のあるものになるでしょう。ここでは、シンタックスの使用を最低限に抑え、あなたが現在作業しているものに似通った例を使用するように努めました。<a href="https://github.com/css-modules/webpack-demo" rel="nofollow" title="" class="ext-link">Webpack</a>や<a href="https://github.com/css-modules/jspm-demo" rel="nofollow" title="" class="ext-link">JSPM</a>、<a href="https://github.com/css-modules/browserify-demo" rel="nofollow" title="" class="ext-link">Browserify</a>を使っているのであれば、リンクからデモ用のプロジェクトをご覧いただくことができます。私たちは、CSSモジュールが機能する新しい環境を常に探しています。サーバーサイドのNodeJSのサポートについては、<a href="https://github.com/css-modules/css-modules-require-hook" rel="nofollow" title="" class="ext-link">現在対応中</a>ですし、Railsについては、近い将来対応する予定です。</p><p>皆さんがより理解できるように、<a href="http://plnkr.co/edit/FbcJpb?p=preview" rel="nofollow" title="" class="ext-link">実際に試せる用例</a>をPlunkrに投稿しました。インストールなどは不要なので、是非試してみてください。</p><p><a href="http://plnkr.co/edit/FbcJpb?p=preview" rel="nofollow" title="" class="ext-link"><img src="http://glenmaddern.com/assets/images/css_modules_plunkr.png" alt="Try CSS Modules live"></a></p><p>自信がついたら、メインの<a href="http://github.com/css-modules/css-modules" rel="nofollow" title="" class="ext-link">CSSモジュール</a>リポジトリも確認してみてください。質問があれば問題を上げていただき、直接話し合っていきましょう。<a href="https://github.com/orgs/css-modules/people" rel="nofollow" title="" class="ext-link">CSSモジュールチーム</a>は小規模なので、全ての使用例を見切れてはいませんが、皆さんからの意見をお待ちしています。</p><p><strong>スタイルの楽しさを皆さんにも！</strong></p>
