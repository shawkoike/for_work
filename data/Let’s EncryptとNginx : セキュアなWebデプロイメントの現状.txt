<p><a href="https://letsecure.me/secure-web-deployment-with-lets-encrypt-and-nginx/" rel="nofollow" title="" class="ext-link">Let's Encrypt &amp; Nginx</a> （2016-03-15） by <a href="https://twitter.com/loiclambiel" rel="nofollow" title="" class="ext-link">Loic Lambiel</a></p><p>最近まで、SSL暗号化通信は「あると好ましい機能」という程度にしか考えられていませんでした。そのため、安全なのはアプリのログインページだけというサービスが数多く存在していました。</p><p>しかし、状況は良い方向へと変化しています。現在では暗号化は必須と考えられ、ほとんどの開発者が導入を義務付けています。また、巨大検索エンジンGoogleでは、SSLの導入が検索結果の順位を決定する要因にさえなっています。</p><p>しかし、SSLが広範に普及しているにも関わらず、セキュアなWebサービスを構築することは、未だに面倒で、時間がかかり、エラーの原因になりやすいと考えられています。</p><p>最近この分野では、<a href="https://letsencrypt.org/" rel="nofollow" title="" class="ext-link">Let’s Encrypt</a>が、SSL証明書をより広く普及させ、Webサイトのセキュリティ維持に係るワークフローを大幅に簡略化しようと取り組んでいます。</p><p>強力なWebサーバNginxや、他のハードニング方法と組み合わせれば、<a href="https://www.ssllabs.com/ssltest/" rel="nofollow" title="" class="ext-link">Qualys SSL Labs</a>や<a href="https://securityheaders.io/" rel="nofollow" title="" class="ext-link">SecurityHeaders.io</a>といった人気のアナライザで最高グレードのセキュリティ評価Aの獲得が可能です。</p><p>この記事では、評価Aを獲得するために必要な手順を説明していきます。</p><p>以下がこの記事で扱う内容です。</p><p>このチュートリアルでは、<a href="https://www.exoscale.ch/" rel="nofollow" title="" class="ext-link">Exoscale</a>が統合型のファイアウォールとDNS管理システムを提供する点を考慮し、これをクラウドプロバイダとして利用します。更に、Exoscaleはデータの安全性／プライバシー及びセキュリティを重視しているという点も選択した理由の一つです。もちろん、他のクラウドや従来のホスティングサービスを使っている場合でも、この記事の内容は対応しています。</p><p><a href="https://letsencrypt.org/" rel="nofollow" title="" class="ext-link">Let’s Encrypt</a>は、SSL/TLSサーバ証明書を無料で発行するとともに、証明書の発行プロセスを自動化した新しいオープンソースの認証局（CA）です。そのルート証明書は多くの<a href="https://community.letsencrypt.org/t/which-browsers-and-operating-systems-support-lets-encrypt/4394" rel="nofollow" title="" class="ext-link">ブラウザ</a>で高い信頼を得ています。また、Let’s Encryptでは証明書の生成、検証、署名、インストール、更新といった面倒なワークフローを減らそうと積極的に取り組んでいます。</p><p>次に進む前に、次の注意事項を確認してください。<a href="https://letsencrypt.org/" rel="nofollow" title="" class="ext-link">Let’s Encrypt</a>の使用を検討する場合、いくつかの懸念事項が残っています。</p><p><a href="https://community.letsencrypt.org/t/list-of-client-implementations/2103" rel="nofollow" title="" class="ext-link">軽くて制約の少ない他のクライアント</a>を代わりに使って証明書を発行することもできますが、このチュートリアルでは説明しません。</p><p>公式のドキュメンテーションは<a href="http://letsencrypt.readthedocs.org/en/latest/intro.html" rel="nofollow" title="" class="ext-link">こちら</a>からご覧いただけます。一読の価値がある内容となっています。</p><p>それでは、新しいクラウドインスタンスの生成から始めましょう。まずは、SSH公開鍵が手元に必要です。自分の鍵を持っていない場合や、急いでセットアップしたい場合は、Exoscaleを使うとマシンが起動するより先にオンザフライで鍵を生成できます。SSH鍵のメニューから、自分の鍵を生成しましょう。SSH鍵を初めて扱う場合は、<a href="https://community.exoscale.ch/documentation/compute/ssh-keypairs/" rel="nofollow" title="" class="ext-link">ガイドライン</a>をご覧ください。このチュートリアルでは、SSH鍵とは何かを知っていて、使用方法を理解していることを前提としています。</p><p><a href="https://portal.exoscale.ch/login?next=%2F" rel="nofollow" title="" class="ext-link">Exoscaleポータル</a>（または各自が選んだクラウドプロバイダ）で、Linux Ubuntu 14.04を起動させます。このデモ用には、microインスタンス（RAM 512MB、1vCPU、ディスク容量10GB）で十分過ぎるくらいでしょう。生成物からSSH鍵を選び、”デフォルト”のセキュリティグループがチェックされていることを確認します（詳しくは後述）。</p><p>数秒以内にインスタンスが入手でき、使用できる状態になります。この段階で、DNSのセットアップを続けるために必要なIPアドレスを記録することができます。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/instance1.png" alt="Our instance detailed view"><br>
ExoscaleはDNSゾーンのホスティングサービスを提供しているので、インターフェースを離れる必要はありません。DNSで新しいゾーンを作成すればいいのです（この例では「letsecure.me」の部分です。ここに自分のドメインを記入することになります）。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/dns1.png" alt="DNS zone creation"><br>
この段階で、”多様な用途で使える”（ワイルドカードのような）CNAMEレコードを加えるだけでなく、新たに生成されたインスタンスのIPアドレスの値と共に”A”レコードも加えることができます。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/dns2.png" alt="DNS record creation"><br>
これでDNSレコードが設定できました。Exoscaleを使ってこのチュートリアルを受ける場合は、以下に示すドメインのネームサーバを忘れずにアップデートしてください。ドメインレジスタのアドミニストレーションコンソールで操作できるはずです。</p><p>ようやくクラウドインスタンスを扱う準備ができました。しかし、証明書やWebサービスに取り掛かる前に、まずは初歩的なセキュリティのベストプラクティスをいくつか取り入れていきます。</p><p>ファイアウォール側では、要求されたトラフィックのみを許可し、それ以外のトランジットを拒否する必要があります。具体的には以下のルールを加えなければいけません。</p><p>Exoscaleのファイアウォールは<em>セキュリティグループ</em>と呼ばれるインターフェースを通して管理されています。デフォルトでは上りトラフィックは全て拒否され、下りトラフィックは全て許可されています。マシンの詳細について、”デフォルト”のセキュリティグループに登録されているか確認しなければいけません。また、”デフォルト”のグループを言及されているルールに基づき修正する必要があります。他のクラウドプロバイダでは、似たようなシステムがある場合もありますし、自分のファイアウォールソフトウェアをインストールしなければならない場合もあります。また、Ubuntuでは<a href="https://help.ubuntu.com/community/UFW" rel="nofollow" title="" class="ext-link">UFW</a>を選ぶのが妥当で簡単でしょう。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/firewall1.png" alt="Firewall rules"><br>
他に推奨されているマシンのハードニング方法は、SSHと鍵ペア認証を通して処理する方法だけです。最近では、ほとんどのクラウドプロバイダがこのオプションを提供しています。ここまでの説明に沿って作業を進めていれば、既にExoscaleでデプロイされた鍵があるはずです。しかし、説明に沿って作業をしていなかった場合や、選んだクラウドプロバイダで似たようなワークフローが提供されていない場合は、このタイミングで鍵をアップロードしてください。このチュートリアルでは、この部分に関しては理解していることを前提とし、詳細を省きます。</p><p>これで、<em>ubuntu</em>ユーザとしてSSH経由でログインできます。</p><p>そして、SSH鍵認証を使っているのであれば、<strong>その場合のみ</strong>、SSHパスワード認証を無効にすることができます。</p><p><a href="https://help.ubuntu.com/community/UFW" rel="nofollow" title="" class="ext-link">UFW</a>を使っている場合は、下記のルールを追記してください。</p><p>次に、全てのソフトウェアアップデートとパッチを適用し、インスタンスを再起動させます。</p><p>これによって、全てのソフトウェアが最近のバグ修正やセキュリティパッチを含む最新状態になります。更に、システムが常に最新のパッチが適用された状態になっていると良いと思いませんか？　自動セキュリティアップデートを有効にすれば、可能です。</p><p>このようにすれば、いつ重要なセキュリティアップデートがリリースされても、システムが自動的にアップデートされて、全てがセキュアな状態を維持します。</p><p><a href="http://www.fail2ban.org/wiki/index.php/Main_Page" rel="nofollow" title="" class="ext-link">fail2ban</a>をインストールしてSSH総当たり攻撃を予防するのも、グッドプラクティスです（具体的に、パスワード認証を使っている場合）。</p><p>これで全てがセキュアな状態になったので、Nginxに取り掛かることができます。Ubuntuリポジトリからパッケージをインストールするつもりはありません。最新の”メインライン”ブランチのみで見られる機能(HTTP/2など)が必要になるからです。以下を使ってNginxの公式リポジトリを追加することができます。</p><p>Webサイトが保存される予定の場所に対象フォルダを作ってください。</p><p>デフォルトのNginxの設定ファイルを削除し、空のファイルから新規作成してください。</p><p><a href="https://letsencrypt.org/" rel="nofollow" title="" class="ext-link">Let’s Encrypt</a>のクライアントは、証明書を要求しているドメインの認証に必要なテンポラリファイルを作らなければなりません。そのために、<code>/etc/nginx/conf.d/default.conf</code>にあるNginxの設定ブロックを次のように調整する必要があります。</p><p>Nginxをリロードしてこの設定変更を適用してください。差し当たりのNginxの設定は以上です。</p><p>Let’s Encryptを適用しましょう。<a href="https://letsencrypt.readthedocs.org/en/latest/intro.html%20-%20installation" rel="nofollow" title="" class="ext-link">公式ドキュメンテーション</a>にある通り、<a href="https://github.com/letsencrypt/letsencrypt" rel="nofollow" title="" class="ext-link">Git</a>リポジトリをcloneして<code>letsencrypt-auto</code>を起動させる必要があります。</p><p>最初に言ったように、セットアップスクリプトは、必要な依存関係にあるパッケージを全て自動的にインストールします。便利ですが、自分のマシンにインストールするものをコントロールできないということになります。</p><p>もうこれであなたのドメインの証明書を要求できます。失効通知のためのEメールアドレスを入力して、利用規約に同意するよう求められます。</p><p>もちろん、<code>DOMAINS</code>リストにある自分のドメイン名を使う必要があります。</p><p>これで、証明書が発行されてインストールされるはずです。</p><p>Let’s Encryptは、コンフィギュレーションと証明書を<code>/etc/letsencrypt</code>ディレクトリの中で整理しています。<a href="https://letsencrypt.readthedocs.org/en/latest/using.html%20-%20where-are-my-certificates" rel="nofollow" title="" class="ext-link">Let’s Encryptドキュメンテーション</a>に、このディレクトリの構造と内容についての詳細情報があります。</p><p>新しい証明書を使うには、Nginxにその扱いを命令して、443ポートをSSLに設定する必要があります。<code>/etc/nginx/conf.d/default.conf</code>にある次の最小限のコンフィギュレーションブロックを使うこともできます。</p><p>Nginxをもう一度リロードしましょう。</p><p>Webブラウザで<a href="https://yourdomain.here" rel="nofollow" title="" class="ext-link">https://yourdomain.here</a>を見ましょう。<br>
Webサイトのホームページは、HTTPSで見られるようになっているはずです。</p><p>前述したように、<a href="https://letsencrypt.org/" rel="nofollow" title="" class="ext-link">Let’s Encrypt</a>が発行する証明書の有効期限は90日のみです。確実に証明書を自動的に更新するために、短いスクリプトとcrontabを使います。</p><p>renewCerts.shという名前のファイルに以下のコードを保存してください。</p><p>cronが毎日スクリプトを起動します。crontabがこれを読み込むようセットアップするには･･･</p><p>そして、<code>@daily</code>マクロの行を追加してください。</p><p>保存してエディタを終了します。以下のコードを使って、忘れずにスクリプトを実行可能にしてください。</p><p>おめでとうございます！　これであなたのコンテンツは、自動更新される有効な証明書を持った状態でHTTPS経由で公開されます。</p><p>もし<a href="https://www.ssllabs.com/ssltest/" rel="nofollow" title="" class="ext-link">SSLアナライザ</a>でデフォルトのSSL/TLSコンフィギュレーションを使ってグレードをチェックすると、まだ、結果はあまり良くないでしょう。評価を上げるために、Nginxのコンフィギュレーションを少し変更しましょう。</p><p><code>/etc/nginx/conf.d/default.conf</code>にある実際のコンフィギュレーションを削除し、下記のブロックと入れ替えましょう。自分のドメイン名に変更するのを忘れないでください。</p><p>これが終わったら、Nginxをリロードしてください。</p><p>今、追加した重要なコンフィギュレーション項目をいくつか見直しましょう。</p><p>この命令で、クライアントブラウザがサポート/要求している場合、NginxにSSL経由でリッスンし、また新しい<a href="https://ja.wikipedia.org/wiki/HTTP/2" rel="nofollow" title="" class="ext-link">HTTP/2</a>規格での接続もサポートするよう指示しています。HTTP/2は、SSL/TLSだけです。</p><p>古くて脆弱なSSLv2/SSLv3プロトコルを無効にして、TLSプロトコルだけを有効にしてください。</p><p>これは、Nginxにサポートを指示する暗号のリストです。古いWebブラウザによるサポートとセキュリティのバランスが最もよく取れているリストの1つだと思います。Nginxでは、クライアントから要求された暗号よりこのリストの暗号の方が好まれます。</p><p>OCSP Staplingを有効にしましょう。OCSP Stapling についての詳細は<a href="https://www.maxcdn.com/one/visual-glossary/ocsp-stapling/" rel="nofollow" title="" class="ext-link">こちら</a>をご覧ください。</p><p>これでHTTPヘッダが追加され、クライアント側のブラウザに対して、ドメインとサブドメイン全てに1年間強制的にHTTPS接続をするよう指示することができます。<br>
<strong>警告！</strong>　本番環境に適用する前に以下の点に注意してください。まず、<strong>全てのサブドメイン（もしあれば）も同様に保護されている</strong>ことを確認しなければなりません。サブドメインも強制的にHTTPS接続を行うように指示するため、正しく設定されていない場合、サブドメインにアクセスできなくなります。</p><p><a href="https://www.ssllabs.com/ssltest/" rel="nofollow" title="" class="ext-link">Qualys SSL</a>でこのセットアップを再テストしてみましょう。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/qualys2.png" alt="Qualys SSL final check"><br>
ほら、ご覧の通り良くなりました。最適なSSL/TLSコンフィギュレーションを使って保護されたセットアップになり、私たちの最初の目的が達成されました。</p><p>さて、Webサイトのコンテンツや動作はどうでしょうか。<a href="https://securityheaders.io/about/" rel="nofollow" title="" class="ext-link">Scott Helme</a>は、ヘッダを基にコンテンツのセキュリティグレードを評価する素晴らしいHTTPレスポンスヘッダ<a href="https://securityheaders.io/" rel="nofollow" title="" class="ext-link">アナライザ</a>を作成しました。</p><p>現在のセットアップをテストする場合（HTTPSを使ってテストするようにしてください)、結果は…あまり良くありません。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/securityheaders1.png" alt="securityheaders.io first check"><br>
再び、HTTPヘッダを少し追加してNginxコンフィギュレーションを調整してみましょう。</p><p><a href="https://scotthelme.co.uk/hardening-your-http-response-headers/#x-content-type-options" rel="nofollow" title="" class="ext-link">X-Content-Type-Options</a>ヘッダは、ブラウザがMIMEスニッフィングを行ってコンテンツタイプを判断するのをやめさせて、強制的に宣言されたcontent-typeに基づいた動作を行わせるようにします。</p><p><a href="https://scotthelme.co.uk/hardening-your-http-response-headers/#x-frame-options" rel="nofollow" title="" class="ext-link">X-Frame-Options</a>ヘッダは、サイトのページをフレーム内に表示することを許可するかどうかをブラウザに伝えます。ブラウザに対し、サイトのページをフレーム内に表示させないように指示すれば、クリックジャッキングのような攻撃を防ぐことができます。</p><p><a href="https://scotthelme.co.uk/hardening-your-http-response-headers/#x-xss-protection" rel="nofollow" title="" class="ext-link">X-Xss-Protection</a>ヘッダは、ほとんどのブラウザに組み込まれているクロスサイトスクリプティングフィルタに対するコンフィギュレーションを設定します。</p><p>Content-Security-Policyヘッダは、ブラウザがロードする可能性のあるコンテンツの承認されたソースを定義します。クロスサイトスクリプティング（XSS）攻撃に対して効果的な対策をとることができます。<strong>警告！</strong>このヘッダによって、ページが正常に動作しなくなり、Webサイトによるコンテンツのロードが妨げられる可能性があるので、本番環境のWebサイトにデプロイする前に慎重に計画を立てなければなりません。幸い、”レポートモード”が利用できます。このモードでは、ブラウザはデバッグコンソール内で問題を報告するだけで、実際にコンテンツをブロックすることはありません。これは、このヘッダをスムーズにデプロイするのに本当に役に立ちます。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/reportmode.png" alt="report mode"><br>
このポリシーのコンフィギュレーションについては、<a href="https://scotthelme.co.uk/content-security-policy-an-introduction/" rel="nofollow" title="" class="ext-link">こちら</a>で詳細をご覧いただけます。</p><p>レポートモードは、以下を使って有効にすることができます。</p><p>最終的なNginxコンフィギュレーションは以下のようになります。</p><p>Nginxをもう一度リロードして、新しいヘッダを適用してみましょう。</p><p><a href="https://securityheaders.io/" rel="nofollow" title="" class="ext-link">securityheaders.io</a>を使ってサイトを再スキャンしてください（繰り返しになりますが、https://プレフィックスをつけてスキャンするのを忘れないでください）。</p><p><img src="https://letsecure.me/img/2016-03-10-secure-web-deployment-with-lets-encrypt-and-nginx/securityheaders2.png" alt="securityheaders.io final check"><br>
評価”A”がもらえるはずです。はるかに良くなります。</p><p>A+を獲得できると思われるHPKP（HTTP Public Key Pinning、HTTP公開鍵ピンニング）を有効にしなかったことに気づいた人がいるかもしれません。実は、機能の理解が不十分で、慎重に計画されていない場合、そのヘッダはWebサイトをダメにしてしまう可能性があります。このテーマについては、今後このページで取り上げるかもしれないので、お楽しみに。</p><p>WebサイトにSSL/TLSをデプロイする理由はたくさんあります。当然ながら、最も重要で理由の明らかなものはセキュリティです。閲覧者の一部にとっては信頼構築の印でもあります。Webサイトでアクティブな証明書を持っていることが欠点になることはありません。Let’s Encryptからの無料証明書があって、このチュートリアルに書かれた手順を踏めば、心配する理由は全くありません。</p><p>Let’s Encryptは、Nginxの上で簡単にデプロイし、保守できます。特定のSSL/TLSとブラウザヘッダのハードニングによって、最新のセキュアなWebデプロイメントを成し遂げることができます。</p><p>このプロジェクトのソースファイルは、<a href="https://raw.githubusercontent.com/llambiel/letsecureme/" rel="nofollow" title="" class="ext-link">GitHub</a>から直接ダウンロードできます。</p><p>最先端のセキュアなWebデプロイメントにおいて今後出てくるベストプラクティスは言うまでもなく、Let’s EncryptとNginxの新しいリリースや改善に従って、このプロジェクトは拡大し、アップデートされ続けるでしょう。</p>
