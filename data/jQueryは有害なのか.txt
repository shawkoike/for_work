<p><a href="http://lea.verou.me/2015/04/jquery-considered-harmful/" rel="nofollow" title="" class="ext-link">jQuery considered harmful</a> （2015-04-19） by <a href="https://twitter.com/leaverou" rel="nofollow" title="" class="ext-link">Lea Verou</a></p><p>ずっと「～は有害なのか」という記事を書いてみたかったんです<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>。<img src="http://lea.verou.me/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley"></p><p>まず本題に入る前に、1つ言わせてください。<strong>jQueryはWeb業界の発展に大いに役立った</strong>と私は考えています。jQueryがあることで、開発者はこれまで想像もできなかったことをできるようになりましたし、そういった機能をブラウザの製作者がネイティブに実装するきっかけにもなりました（もしjQueryが開発されていなければ、今でもdocument.querySelectorAllは存在していなかったでしょう）。jQueryは、今ある便利なツールを使うことができなかったり、IE8やそれ以下の過去の遺産をサポートしなければならない際に今でも必要になってきます。</p><p>しかし、そのようなケースはもはや稀なものとなりました。Web開発者の大半は、マーケットシェアの縮小した古いブラウザをサポートする必要はありません。更に、忘れてはならないのは、webの専門家ではない開発者たちのことです。例えば学生や研究員は、古いブラウザはおろか複数のブラウザをサポートする必要すらないことも多いです。しかし、「学界にいるような人々は皆Open Web Platformのモダンな長所を全て使いこなしている」などと思われるかもしれませんが、実際のところ学界ほどjQueryが重宝されている場所を他に知りません。<br>
なぜでしょうか。それは、学生たちが知っているのがjQueryであるというのが１つと、彼らはOpen Web Platformに関するニュースを追っていく時間もなく、興味もないということが言えます。彼らはjQueryが何のために必要なのか理解しないまま、jQueryをとりあえず使っているだけなのです。しかし、jQuery以外でもこれらのことがネイティブに実装できるようになったという事実だけが、私がjQueryを使わない理由ではありません。</p><p>jQueryを使わなくてもネイティブに実装できると指摘するのは私が初めてではないと思うので、他の人が書いているような内容は書きません。もし詳しい内容を知りたい方がいれば以下の記事をご覧ください。</p><p>*　<a href="http://youmightnotneedjquery.com/" rel="nofollow" title="" class="ext-link">jQueryは必要ないはず</a><br>
*　<a href="http://blog.garstasio.com/you-dont-need-jquery/" rel="nofollow" title="" class="ext-link">jQueryなんて必要ない！</a><br>
*　<a href="http://www.sitepoint.com/do-you-really-need-jquery/" rel="nofollow" title="" class="ext-link">本当にjQueryは必要ですか？</a><br>
*　<a href="http://tutorialzine.com/2014/06/10-tips-for-writing-javascript-without-jquery/" rel="nofollow" title="" class="ext-link">jQueryなしでJavaScriptを書く10個のヒント</a><br>
*　他にも関連する多くの記事があります。単に<a href="https://www.google.co.jp/search?q=you+don%27t+need+jquery&amp;gws_rd=cr&amp;ei=dA1MVeatIOPDmQXqvYGgDg" rel="nofollow" title="" class="ext-link">“jQueryは必要ない”とググってみてください</a>。簡単に検索することができるはずです。</p><p>今回の記事では<strong>ファイルサイズ</strong>やネイティブメソッドがどれだけ<strong>速い</strong>のかというようなことに関しても省きます。これらは以前にも議論したことがあるからです。そこで今回は今まであまり語ってこなかったことに焦点を当てたいと思います。</p><p>ネイティブ要素のプロトタイプを拡張しないように、jQueryは自身のwrapperオブジェクトを使用します。過去に行われたネイティブオブジェクトの拡張は大きな間違いでした。その原因は衝突の可能性があることだけではなく、古いIEではメモリリークが起こりうるからです。つまり、<code> $("div")</code>を実行した時に返ってくるのは要素の参照やNodeListではなくjQueryオブジェクトなのです。これはjQueryオブジェクトが、DOM要素の参照や要素の配列、NodeListのどんな種類とも全く違うメソッドであることを意味します。しかし、これらのようなネイティブオブジェクトは実際のコードの中に頻繁に登場します。jQueryがネイティブオブジェクトを取り除こうとするように、あなたもネイティブオブジェクトと常に格闘しなければなりません。しかも、それがただ、$().にラッピングされているとしてもです。例えば、コールバックがjQueryの.bind()のメソッドで呼び出された時のコンテキストは、HTML要素の参照で、jQueryのコレクションではありません。言うまでもありませんが、複数のソースからコードを使うと、コンテキストはjQueryオブジェクトであったりそうでなかったりします。つまり、できあがったコードはjQueryオブジェクトやネイティブの要素、NodeListsが混ざったものになります。これが悪夢の始まりです。</p><p>せめて開発者が、jQueryオブジェクトを含む変数（通常は変数名の頭に$を付けるのが普通だと思います）やネイティブ要素を含む変数に、命名規則に沿った名づけをしていれば、大した問題ではなかったのです（人はこのような決まりに従うのを忘れがちですが、完璧な世界があると仮定しましょう）。しかし、そういった決まりごとは無視されることが多く、結果として不慣れな人には恐ろしく解読しにくいコードができあがります。編集のたびにトライアンドエラーを課されるのです（「あっ、これはjQueryオブジェクトじゃなかった、<code>$()</code>でラップしなきゃ」とか「あっ、これは要素じゃないや、[0]を使わなきゃ」といった事態です）。このような混乱を避けるため、編集を行う開発者たちは身構えて何でもかんでも<code>$()</code>でラッピングするので、コードのいたるところで、同じ変数が複数回、$()にはさまれている状態になってしまいます。同じ理由で、jQueryのリファクタリングを行うのは非常に困難です。そもそもの始まりから<strong>閉じ込められていた</strong>というわけです。</p><p>また、たとえ命名規則に沿った名称がつけられていても、jQueryオブジェクトだけを扱えば済むというわけでもありません。ネイティブDOMメソッドを使ったり、jQueryに依存していないスクリプトから関数を呼び出したりする必要もたびたびあるはずです。すぐにjQueryオブジェクトへの変換やjQueryオブジェクトからの変換は方々に広がり、コードをめちゃめちゃにします。</p><p>加えて、記述したコードベースにコードを追加する時、どんなインプットを取得するか分からないために、あらゆる要素やNodeListへの参照も<code>$()</code>でラッピングしてしまうことが多いでしょう。つまり、今閉じ込められているだけではなく、<strong>同じコードベースに将来書くコードもまた閉じ込められていくのです。</strong></p><p>他人が書いたjQueryに依存するランダムなスクリプトを用意し、jQueryが要らなくなるようにリファクタリングしてみてください。そうすれば必ず、問題の焦点は、ネイティブAPIを使うためにどう機能性を変換するかではなく、悪夢のような事態を理解することなのだ、と気づくでしょう。</p><p>確かに今日、jQueryを要するライブラリはごまんとあります。そして最近私が<a href="https://twitter.com/leaverou/status/588504217410609152" rel="nofollow" title="" class="ext-link">ツイート</a>したように、jQueryを完全に避けると、デジタル界のベジタリアンになったような気がするかもしれません。しかし、だからと言ってjQueryを使う必要はないのです。jQueryに取って代わるものができれば、ライブラリも差し替えられる可能性が常にあります。</p><p>さらに、ほとんどのライブラリは、jQueryが$変数にエイリアスされていなくても動くように書かれています。<a href="https://api.jquery.com/jquery.noconflict/" rel="nofollow" title="" class="ext-link">jQuery.noConflict()</a>を呼び出しさえすれば、$変数はjQueryから解放され、あなたが思うとおりのものに割り当てることが可能になります。たとえば、私は<a href="https://developer.chrome.com/devtools/docs/commandline-api#selector" rel="nofollow" title="" class="ext-link">Command Line API</a>にならって、下記のようなヘルパー関数をよく定義しています。</p><p>さらに、jQueryを使うたびに<code>$</code>の代わりに<code>jQuery</code>と入力しなければならないので、本当に必要ではないところで無駄に使っているのではないか、と再考させられます。自分が誤っていることもあります。<img src="http://lea.verou.me/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley"><br>
また、jQuery APIを現に<strong>気に入っている</strong>けれども、コードの膨張は避けたいという場合は、<a href="http://zeptojs.com/" rel="nofollow" title="" class="ext-link">Zepto</a>の使用を検討してみてください。</p>
