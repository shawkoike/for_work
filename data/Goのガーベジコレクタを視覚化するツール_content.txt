Visualising the Go garbage collector（2014-07-11）by Dave Cheney本投稿では、私が取り組んでいる試験的なツールを紹介します。gcvisはGoプロセスのガーベジコレクタのオペレーションを視覚化するシンプルな手法です。以下は、作動中のgcvisのスクリーンショットです。

ここからは、gcvisの仕組みとgcvisから得られる結果をどう解釈するかについて検証します。Goプログラムからデータを取得するには、いくつかの方法があります。ビルトインプロファイラは、net/http/pprof、または、私のプロファイルパッケージから利用できますが、プログラムのソースを改変できない場合があります。他には、それぞれのGoプログラムに組み込まれている遠隔測定データのソースもあり、以下の環境変数を指定することでアクセスできます。（環境変数GODEBUGは、ランタイムパッケージで提供されています）この環境変数を指定してプログラムを起動すると、標準出力に以下の追加出力が出力されます（少し簡略化されています）。ここで提示されている2種類の情報は次のセクションでは、gcvisの使い方とgcvisから得られるデータの解釈の仕方について述べます。gcvisを使用するには、timeやniceと同じように、検証をしたいGoプログラムの前に置きます。以下はインデクシングモードでgodocと一緒にgcvisを使用した例です（メモリとCPU時間を大量に消費し、興味深いデータを生成しています）。以上です。gcvisはGODEBUGの適切な値を設定し、生成された追加情報を取り除く処理をします。gcvisはまた可視化したデータを見るためにブラウザのウィンドウを開こうとします。この機能はpkg/browserによってもたらされ、オペレーティングシステムに、いくらか依存しているところがあります。gcvisはリアルタイムでgcデバッグ行を記録しているので、タイムスタンプ情報を追加することが可能です。これは最初に記録されたままのデータであるGODEBUG出力に現在欠けている機能です。この例では、ヒープが増えるにつれ、gcサイクルの頻度が減少しているのが分かります。gcデバッグデータの主な用途は、ヒープ上でライブオブジェクトのサイズを記録することにあります。しかしながら、これだとヒープの全体のサイズや、ライブオブジェクトがヒープ内に占める割合が分かりません。そのため、スカベンジャからデバッグ情報を追加する必要があります。スカベンジャは現在では2分ごとにタイマーで実行されるのでプログラム開始の数分後にしかgcvisへデータの報告が開始されません。以下は約15分間稼働した後の例です。このグラフにおいて注意すべき興味深い点は以下のとおりです。コードはGithub上のオープンソースなので、取得して自分のアプリケーションで試してみてください。gcvisが役に立つかどうか、他のGoユーザからのご意見を心からお待ちしています。プルリクエストやバグレポートも大歓迎です。Damian Gryski、Matthew Holt、Bill Kennedyの提案とフィードバックに深く感謝します。
