Dissecting a spammer’s spam script （2016-04-18） by Jelle Raaijmakersスパムを送るのに使われていたPHPスクリプトを見ていきましょう。こういった種類のスパムは世界中のサーバで走っており、あなたを困らせるスパマの熱意を見通せる力を得ることができるはずです。スパマは、セキュリティ対策が施されていないWebサイトやアプリケーション内の既知の脆弱性を悪用してサーバに入り込み、大量のスパムを送ることができるスクリプトをインストールします。完全に信頼できる送信者であると確証するのは難しいという理由から、全てのスパムを取り除くことは困難です。完全に強化されたサーバは、スイスチーズ、つまり後にいくつかのゼロデイ・エクスプロイトになりかねないのです。評判がいいとは言えないソースからプラグインをインストールしたり、プラグインが最新状態に保たれていなかったりすることで、エクスプロイトが簡単に取り込まれてしまうということは、それなりに人気のあるWordPressのサイトを運営する人は誰もが知っていることです。時には、人気があるWordPressプラグインへのゼロデイ・エクスプロイトが発覚し、そのプラグインがインストールされた何千もの個所で一瞬にして感染が起こってしまうこともあります。私が管理するシェアホストWebサーバ上のWordPressのサイトの1つが、スパムスクリプトによって感染されてしまいました。運が良かったのは、スクリプトが実害を与える効力がなかったことと、感染してから30分後に検出されたことです。ここで皆さんにその時のスクリプトをお見せしつつ解析を行ったら面白いと思ったので、これらのスクリプトが実際にどのように機能するのか、そして何千人ものEメール管理者にどのような地獄の苦しみを味合わせているのかを探っていきたいと思います。スパマによるWebサイトの感染は、ほとんどの場合ボットネットによって実行されます。ノードが攻撃を連動し、異なるIPアドレスから以下の3段階のアクションを実行します。管理者が（スパマによってアクセスされたロケーション全てを確認せずに）Webサイトの再インストールやバックアップの復元を行ったとしても、Webサイトが依然として不正アクセス下にあるかの確認のために1段階目と2段階目が用いられます。3段階目は、簡単に認識することのできる悪行をもたらすスクリプトファイルをインストールします。なぜ1段階目でアクションを止め、eval()メカニズムを介してスパムスクリプトを注入しないのでしょうか？　恐らく、目立たなくするためだと思います。長いスクリプトをアップロードして、最低限のフォーマットで必要なスパム情報を送ることは、アクションそのものを隠すには最適な方法です。WordPressのエクスプロイト・インストレーションで見つかった手を加えていない、難読化されたスクリプトを見てみましょう。まず気付いたのは、とても長い乱雑な1行の中に全部詰め込まれているという点です。次に、ここから明らかに分かるのは、ある種のトランスコーディングが行われていることです。次のステップでは、この乱雑なスクリプトをもう少し読みやすくし、ほぼ全てに使われているトランスコーディングをリバースしてみます。セミコロンの直後に改行を追加しました。これで、このスクリプトで起こっていることが少し分かりやすくなりました。いくつかのグローバル変数の代入を行っているのは恐らく、引数として変数を渡すことなく関数の呼び出し間で変数を共有するためでしょう。スクリプトの冒頭に2つの個別の変数の宣言を見つけました。$pateの値の最後にある2つの＝（イコール）は、Base64のパディングに似ています。また、$j10変数の値は完全にランダムのようです。変数$j10は、何度もアクセスされているようですし、ほとんどの場合これは、文字列連結のコンテキスト内で起こっています。トランスコーディングをリバースするのには完璧な置換候補ですね！　私は以下のデコーダを使って、全スクリプトを実行してみました。これをステップ2のスクリプトに当て込むと以下のようになります。うまくいきました！　いくつかはPHP関数を参照しているので、これらが残りのスクリプトでどのように使われているのか見てみましょう。スパマは、PHP可変関数を使用しているので、どの関数を呼び出したかを隠すことができます。これは、ユーザ定義、ビルトイン関数両方の全ての関数の呼び出しに使用することができます。いくつかのPHPコードは、関数を呼び出しているように見えますが、実際は以下のような言語を構築しています（例えばisset()）。スパマは、関数の呼び出しを隠しただけではなく、全ての変数名を難読化したのが分かります。$vcmra37は変数の直感的な名前のようには思えません。次のステップでは、これら難読化の対処をする必要があります。全てのインスタンスの$j10[…]の値を単純に対応する値で置換しただけなので、この段階のスクリプトには、定数の文字列の連結が多く含まれています。そこで、次のsedコマンドを実行して読みやすくします。このコマンドですと少しだけ置換できなかったケースがありますが、実行後に少しだけ直せば済むことです。私は、356行目、472行目、519行目をパース用のPHPスクリプトで処理しました。グローバル変数の宣言がどのようになったか、見てみましょう。いいですね！　これで、コードの端々が意味を成してきました。しかしまだ、厄介な関数の呼び出しが、グローバル変数の配列の中に文字列の値として残っています。次は、これをどうにかしてみましょう。ここまでで書いてきたスクリプトでは、全てのグローバル変数に関するコード$GLOBALS['foo'](...)を、対応する関数に置換することができました。また同時に、独自に割り当てられたグローバル変数も削除できました。では、ここまで解析してきたスパムスクリプトが上述のデコーダを切り抜けた後、 “xzfoh12″がどのような振る舞いをするか見てみましょう。いい感じです！　単純なdate(...)というコードになりましたね。コードの一部は、その本来の姿を現し始めています。このスクリプトが何をするのか理解できるまで、あと一歩と感じました。そこで私は、Spark Labs PHP FormatterというオンラインでPHPを整形するサービスを使いました。これによって、ここまで私が解析してきたスクリプトをきれいに整形したのです。これはコードの全体の構成を理解するのに非常に役立ちます。先ほどのコードの抜粋は、次のようになりました。関数名や変数名はまだ分かりにくいものではあります。しかし、スクリプトにおいて呼び出されているPHPの内部関数や、使われている文字列や数値型の定数の値に基づいて見ていくと、記述された関数がどのような仕様なのかが見え始めてきました。あなたもぜひ、整形後のスクリプト全文を見てみてください。スパマは、グローバル変数$j10を作る代わりに、ユーザ定義関数のコードでそれぞれ値を渡していました。簡単にチェックすると、$j10はもう使われていないことが分かります。私がステップ3で変数へのアクセス部分を全て置換したからです。では、sedの魔法をいくつか使って、これらのパラメータを隠してみましょう。この変更の後、手作業でスクリプトの冒頭部分に記述された$j10の代入部分を削除します。何をするコードなのかを理解するために、スクリプトの冒頭部分にある$pateのペイロードの内部を見られるようにする必要があります。どのように使われているか、見てみましょう。どんな値が渡されたとしても、関数kvkdh88は”JSON”という文字列を返します。よく見てみましょう。この関数はbase64の文字セットを適用しています。このため文字列を多くても4文字のブロックで読み込み、いくらかのbitを変換し…と、処理は続きます。ユーザ定義のbase64_decode()を使えそうではありませんか？やっぱり、できました！　$pateの定義をこの出力値で置換し、kvkdh88メソッドを完全に削除しました。スクリプトの冒頭で、これ以外にもちょっとした難読化が起きています。これを解消しましょう。コード全体に目を通したところ、とても役立ちそうな事実を発見しました。スクリプト全体を通して、同じ変数名については同じように難読化されているということです。例えば、全ての等しい変数名は、同一の変数名に難読化されていました。もし変数名を1つ正しく変換すれば、スクリプト全体を通して正しく変換できるはずです。そういうわけで、まずは関数名と変数を変換することから始めました。比較的単純な関数から取り掛かり、徐々に多くの変数を使い、関数をたくさん呼び出している大掛かりな関数へと進めていきました。これは恐らく、スパムのロジック全体で使用されているものです。それらをJSON マップファイルに入力しました。このマッピングを、最終的なデコーダのスクリプトに使用してみましょう。最終的に難読化が解消されたクリプトを見てください。変換されずに残っている変数もありますが、変数の意図は明らかです。これはたぶん、スパマが最初に記述したものにかなり近いと思われます。基本的に、スパムスクリプトは以下の順序で動作します。このスクリプトには、特筆すべき点がいくつかあります。今回初めてスパマのスクリプトを解析したのですが、その高い技術に少々感心してしまいました。状態マシンを利用したり、多くのソケットエラーのコーディングを巧みに扱ったりしているとは思いもしませんでした。適切なレスポンスを処理するループを備えたカスタムDNSルックアップにも驚きました。人々に対して真剣にスパム攻撃を仕掛けようとする人がいたのです。ここで皆さんに質問です。この悪企みの根源が何なのか分かりますか？　分かったらぜひ教えてください。
