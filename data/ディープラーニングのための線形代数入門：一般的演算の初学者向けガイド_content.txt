Linear algebra cheat sheet for deep learning （2017-03-05） by Brendan Fortuner
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
Jeremy Howardによるディープラーニングの素晴らしいコースを受講している間、自分の前提知識がさびついてきているせいで、誤差逆伝播法のような概念が理解しにくくなっていることを認識しました。そこで、理解度を上げるべく、そうした概念に関するいくつかのWikiページをまとめてみることにしました。本記事では、ディープラーニングでよく使われる線形代数演算のいくつかについて、ごく基本的な事項をざっとご紹介します。ディープラーニングの文脈での線形代数とは、数の集合を同時に操作するための便利な手法を提供してくれる、数学的ツールボックスです。これらの数値を保持するためのベクトルや行列（スプレッドシート）のような構造体と、それらを加算、減算、乗算、および除算するための新しい規則を提供します。線形代数は、複雑な問題を単純で直感的に理解できる、計算効率の良い問題に変換してくれます。以下は、線形代数を使えばいかに高速で単純な解法を導くことができるかを示す例です。配列の初期化後で比較すると、線形代数を使った方法は3倍の速さでした。ニューラルネットワークは、行列の重みを格納します。線形代数は、特にGPUのトレーニング時の行列演算を高速かつ簡単にしてくれます。実は、GPUはベクトルと行列の演算を念頭に置いて作られたのです。画像がピクセルの配列として表現されるのと同様、ビデオゲームは進化し続ける巨大な行列を使って魅力的なゲーム体験を生み出します。GPUは、ピクセルを1つずつ処理するのではなく、ピクセルの行列全体を並列処理するのです。ベクトルは数や項の1次元配列です。幾何学において、ベクトルは点の位置変化の大きさと方向を格納します。ベクトル［3, -2］は、右に3、下に2進むことを示します。1次元以上のベクトルは行列と呼ばれます。ベクトルを表現するには様々な方法があります。以下は、皆さんが目にする記法の数例です。ベクトルは一般的に、点からの移動を表現します。点の位置変化の大きさと方向を格納するのです。ベクトル［-2, 5］は、左に2単位、上に5単位進むことを示します。（出典）
v =［-2, 5］ベクトルは空間のどの点にも適用できます。ベクトルの方向は、上に5、左に2移動する際に作られる斜辺の傾きと一致します。ベクトルの大きさは、その斜辺の長さと一致します。スカラー演算では、ベクトルと数が含まれます。ベクトルの全ての値に対して加算や減算、乗算を行い、ベクトルをインプレースで変化させます。
スカラーの加算加算、減算、除算などの要素ごとの演算においては、対応する位置の値を組み合わせて新しいベクトルを求めます。ベクトルAの1つ目の値はベクトルBの1つ目の値と、2つ目の値は2つ目の値といった要領です。つまり、演算が完結するには、ベクトルの次元が一致している必要があるのです（※）。
ベクトルの加算（※）NumPyにおけるブロードキャストの詳細については、後出のセクションをご参照ください。ベクトルの乗算には、内積とアダマール積の2種類があります。2つのベクトルの内積は、1つのスカラーとなります。ベクトルや行列の内積（行列の乗算）は、ディープラーニングにおいて非常に重要な演算です。アダマール積は要素ごとの乗算であり、その結果は1つのベクトルとなります。ベクトル場は、加算や乗算などのベクトル関数を適用した場合に点（x,y）が仮説上どこまで移動するかを示します。空間に点がある時、ベクトル場は、グラフの様々な点において働く変化の力と方向を示します。
出典このベクトル場は、始点によって移動方向が異なるという点で興味深い概念です。始点ごとに移動方向が違う理由は、この場の背後にあるベクトルが、-2や5のようなスカラー値ではなく $ 2x $ や $ x^2 $ のような項を格納するからです。グラフの各点について、x座標を $ 2x $ や $ x^2 $ に代入して、始点から新しい位置までの矢印を描いているのです。ベクトル場は、勾配降下法のような機械学習の手法を可視化するのに大変有用です。行列とは、加算、減算、乗算の特別な規則を持った、数や項から成る長方形の配列（Excelシートのイメージ）です。行列の次元は行×列で記述します。行列に対するスカラー演算は、ベクトルに対する場合と同様に行います。加減乗除などは、行列の全要素に対して単純にスカラーを適用します。
行列のスカラー加算2つの行列間で加算、減算、除算を行うには、両者の次元が同じである必要があります（※）。対応する要素の値を組み合わせて、新しい行列を求めます。これは実作業に大いに関わることなので、触れないわけにはいきません。NumPyでは、ブロードキャストと呼ばれるメカニズムを使うことで、要素ごとの演算に対する次元要件が緩和されています。各行列の対応する次元（行と行、列と列）が以下の要件を満たしていれば、その2つの行列同士は演算可能です。3次元や4次元といった高次元では状況が不可解になっていきますが、当面は気にしないでおきましょう。2次元の演算を理解することがいい取り掛かりとなります。行列のアダマール積は、要素ごとの演算です。対応する位置の値を掛け合わせて新しい行列を求めます。NumPyでは、行列とベクトルのアダマール積は、両者の次元がブロードキャストの要件を満たす限り、求めることが可能です。ニューラルネットワークでは、行列の乗算の要件を満たさない異なる場合、次元の重みや入力を頻繁に処理します。行列の転置は、乗算の要件を満たして演算を続行できるよう、行列の1つを「回転」する方法を提供します。行列の転置は以下の2段階で行います。例えば、以下の行列Mを転置すると行列Tになります。行列の乗算では、行列同士を掛け合わせて新しい行列を求めるための規則があります。全ての行列で乗算を行えるわけではありません。さらに、結果の行列の次元に関する規定があります。（出典）行列の乗算では、内積によって行と列の様々な組み合わせを掛けます。Khan Academyの素晴らしい線形代数コースから引用した以下の画像を見ると、行列Cの各要素は行列Aの行と行列Bの列の内積となっていることが分かります。
出典演算a1 · b1は、行列Aの1行目（1, 7）と行列Bの1列目（3, 5）の内積となります。以下の例もご覧ください。
注釈
What are the dimensions of the matrix product?：行列の積の次元は？
What is the matrix product?：行列の積は？NumPyでは、ベクトルの乗算と行列の乗算のいずれにも関数np.dot(A,B)を使います。この関数には、他にも興味深い機能や注意点がありますので、使う前にこちらのドキュメントを読んでおくことをお勧めします。Khan Academyの線形代数
書籍『Deep Learning』の数学のセクション
Andrew Ngのコースノート
線形代数の説明
行列の説明
線形代数の概要
immersivemath（没入型の数学）
