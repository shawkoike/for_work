<p><a href="https://uxplanet.org/designing-more-efficient-forms-structure-inputs-labels-and-actions-e3a47007114f#.8rz7kr6md" rel="nofollow" title="" class="ext-link">Designing More Efficient Forms: Structure, Inputs, Labels and Actions</a> （2016-04-10） by <a href="https://twitter.com/101babich" rel="nofollow" title="" class="ext-link">Nick Babich</a></p><p><a href="https://medium.com/@101" rel="nofollow" title="" class="ext-link">Nick Babich</a><br>
私は、テクノロジ好きで、UI/UXに夢中のソフトウェア開発者です。<a href="mailto:nick@babich.biz">nick@babich.biz</a></p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*W-Oh8xXfCU0udn5CFotoag.jpeg" src="https://cdn-images-1.medium.com/max/800/1*W-Oh8xXfCU0udn5CFotoag.jpeg"><br>
画像の出典：form-ux-tips</p><p>あなたのアプリやサイトを利用する人々にはある一定の目的があります。そしてその目的を達成するために<em>フォームに</em>記入しなくてはならないことがよくあります。Webやアプリにおいてフォームは、ユーザにとって未だに最も重要な<em>種類の操作</em>であるからです。事実、フォームは目的を達成するまでの<em>過程における最後のステップ</em>と見なされることも多いのです。</p><p>フォームは目的達成の手段にすぎません。迅速に混乱なく、ユーザがフォーム入力を完了させられるようにするべきです。</p><p>この記事では、ユーザビリティテスト、フィールドテスト、視線計測（アイトラッキング）、そしてユーザからの実際の不満の声に基づく実用的なガイドラインを紹介します。</p><p>一般的にフォームは以下の5つの要素から構成されます。</p><p>下記のような構成要素が含まれる場合もあります。</p><p>この記事では、構造、入力フィールド、ラベル、そしてアクションボタンについて記述します。</p><p><em>フォームとは対話です</em>。対話が一般的にそうであるように、2者による論理的なコミュニケーションによって成立します。この場合はユーザとアプリです。</p><p><em>本当に必要なことだけを入力させるようにしてください</em>。フォームに1つフィールドを足すたびに、コンバージョン率が下がります。ですから、ユーザに対して要求する情報がなぜ必要なのか、どう利用するのか常に問い続ける必要があります。</p><p><em>詳細事項は</em>アプリやデータベースのロジックからではなく、<em>ユーザの観点からの論理性に基づいた入力項目であるべきです</em>。例えば、名前の前に住所を尋ねるのは一般的なことではありません。</p><p>お互いに関連する情報は論理性に基づいてグループ化しましょう。1つのグループから次のグループへの質問は対話のような流れにするといいでしょう。関連するフィールドをまとめておけば、ユーザにとっても、入力すべき情報を理解するのに役立ちます。下記は<em>連絡先情報</em>の一例です。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*a6-nrdllYwgDxRlrGYMoRA.jpeg" src="https://cdn-images-1.medium.com/max/800/1*a6-nrdllYwgDxRlrGYMoRA.jpeg"></p><p>関連するフィールドをまとめる。画像の出典：<a href="https://www.nngroup.com/" rel="nofollow" title="" class="ext-link">NNGroup</a></p><p><em>フォームは決して複数列にしてはいけません</em>。フォームのフィールドが複数列になっていると、<em>ユーザのフィールドの読み取り方に一貫性がなくなってしまう傾向があるからです</em>。縦方向に隣接したフィールドがフォームにあると、ユーザはZの文字のようなパターンで目を動かさなくてはなりません。そうすると把握するスピードが遅くなり、完了に至る明瞭な経路を見失ってしまいます。フォームが1列であれば、入力完了までの経路は上から下へとページを真っすぐに貫く線となります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*FDR6xlcd36GxvwWtvLjysw.jpeg" src="https://cdn-images-1.medium.com/max/800/1*FDR6xlcd36GxvwWtvLjysw.jpeg"><br>
左：標準的な2列のレイアウトで構成されている場合の、フォームフィールドの関連性についての（複数あるうちの）1つの解釈。右：ページを下へと貫く直線。</p><p>入力フィールドはユーザがフォームを記入するためのものです。どのような情報を要求するかによって、異なるタイプのフィールドがあります。例えばテキストフィールド、ドロップダウン、チェックボックス、ラジオボタン、デートピッカーなどです。</p><p><em>できる限りフィールドの数は最小限にしましょう</em>。特にユーザに多くの情報を要求するような時は、フォームに余裕ができます。しかし、やりすぎはよくありません。フィールドが3つしかないはずだったのに、各フィールドで30個も尋問されるのは誰もが嫌ですからね。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*gc4TVRquQIB3etlcnNKtQQ.png" src="https://cdn-images-1.medium.com/max/800/1*gc4TVRquQIB3etlcnNKtQQ.png"><br>
複数のフィールドを、記入しやすい1つのフィールドにまとめる。</p><p><em>フォームでは、任意入力のフィールドは避けましょう</em>。もしどうしても使う場合は、最低でも、ユーザがどの入力フィールドを空欄にしておいてはダメかということを明確に区別する必要があります。慣例ではアスタリスク（*）や、「任意」（複数の入力フィールドを持つ長いフォームにはこちらが好ましい）を使います。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*664Cw2GCZVUPJC9EFuRQrA.jpeg" src="https://cdn-images-1.medium.com/max/800/1*664Cw2GCZVUPJC9EFuRQrA.jpeg"><br>
メーリングリストに登録するためのMailchimpのフォーム。</p><p>大多数（例えば90パーセント）のユーザに当てはまるという確信がない限り、<em>静的なデフォルト</em>を設定するのは避けたほうがいいでしょう。それが必須フィールドである場合はなおさらです。なぜかって？　オンライン上のフォームに入力する時、ユーザは時間をかけずにざっと読み進めるからです。静的なデフォルト値を設定しておくことがエラーにつながる可能性があります。ユーザが時間をかけて、全ての選択肢をじっくり見てくれることなど想定してはいけません。既に値が入っているフィールドについては、何も考えることなく単にスキップしてしまう可能性があります。</p><p>しかし<em>スマートなデフォルト値</em>は、ユーザが迅速かつ正確にフォームに入力する一助になります。例えば、アクセス元の地理的な位置データを基に、ユーザの国名を事前に選択しておくなどといったことです。しかし、その類のものだとしても、気をつけて設定を行うべきでしょう。なぜなら、ユーザは事前に選択されているフィールドをそのまま読み飛ばしてしまいがちだからです。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*XPJZDB73fbUOg3CG-IZjJQ.png" src="https://cdn-images-1.medium.com/max/800/1*XPJZDB73fbUOg3CG-IZjJQ.png"><br>
理にかなった形で、あらかじめ精算フォームに国名を選択してある例</p><p>ユーザが全てのフィールドにキーボードだけでアクセスし編集することができるようにするべきです。PCを使い慣れているユーザはキーボードを多用する傾向にあるので、キーボードから手を離すことなく<strong>タブ</strong>を使って簡単にフィールドを移動し、必要な編集を加えられるようにしておきましょう。キーボード操作パターンに関する前提条件の詳細は<a href="https://www.w3.org/TR/wai-aria-practices/#aria_ex" rel="nofollow" title="" class="ext-link">W3C’s Authoring Practices for Design Patterns</a>で参照することができます。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*DC0Xe1Ay3liYV3eDa-Ggqg.png" src="https://cdn-images-1.medium.com/max/800/1*DC0Xe1Ay3liYV3eDa-Ggqg.png"><br>
シンプルなデートピッカーでさえも、W3Cガイドラインに準じている。画像の出典: Salesforce</p><p>フィールドをオートフォーカスに設定すると、フィールドの位置を示すことができ、ユーザがどこから入力を始めればいいかが分かりやすくなります。フィールドが選択された時に、明確で視覚的な”通知”が表示されるようにすべきでしょう。色を変えるとか、ボックスを明るくするとか、矢印を点滅させるとか、そのようなことです。Amazonに登録する時のフォームは、オートフォーカスと視覚的な通知の両方を兼ね備えています。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*gD4W90zW7jpAgXUNuaOunw.png" src="https://cdn-images-1.medium.com/max/800/1*gD4W90zW7jpAgXUNuaOunw.png"></p><p>アプリユーザは、テキストを入力する時に適切なキーボードが表示されると助かるものです。この機能を実装する際は、特定のタスクのみに実装するのではなく、アプリ全体を通して実装するようにしましょう。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*dNq8ExFIvYXRKrNQsYYJFw.png" src="https://cdn-images-1.medium.com/max/800/1*dNq8ExFIvYXRKrNQsYYJFw.png"><br>
<em>注釈：（×のほう）ユーザは数字を入力するためにキーボードの数字キーをタップする必要がある。</em><br>
<em>注釈：数字入力が必要なフィールドの場合は、数字キーボードが自動的に表示される。</em></p><p>画像の出典: <a href="https://www.thinkwithgoogle.com/articles/chapter-5-form-entry.html" rel="nofollow" title="" class="ext-link">Google</a></p><p>UIをより使いやすくするために主にすべきことの1つが、明確な意味を示すラベルを付けることです。ラベルはユーザにフィールドの目的を示し、フィールド内にフォーカスが置かれている間もその役目を果たします。また、ラベルは、フィールドの入力完了後もそのまま表示されるべきです。</p><p><em>ラベルはヘルプ文ではありません</em>。ユーザがフォームに素早く目を通せるように、簡潔で短く、そして説明的なラベル（数文字程度）にすべきでしょう。前バージョンのAmazonの登録フォームは、余分な言葉が多く含まれており、ユーザがフォームを入力するのに時間がかかっていました。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*bOqgDJozabnGkjldUUOU6w.jpeg" src="https://cdn-images-1.medium.com/max/800/1*bOqgDJozabnGkjldUUOU6w.jpeg"><br>
現バージョンは改善され、簡潔なラベルになっています。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*gD4W90zW7jpAgXUNuaOunw.png" src="https://cdn-images-1.medium.com/max/800/1*gD4W90zW7jpAgXUNuaOunw.png"></p><p>表記のスタイルは「Full Name」（各語の先頭を大文字にする）と「Full name」（文の先頭だけを大文字にする）のうち、どちらが適切でしょうか。文の先頭だけを大文字にする方が、各語の先頭を大文字にするよりも、多少読みやすく（従って読むのが速く）なります。ここで1つ、覚えておいてほしいことがあります。ラベルを<em>全部大文字で書くのだけは絶対に避けてください</em>。フォームがとても読みづらくなりますし、さっと目を通すのも難しくなります。文字の高さが全部同じになると、文字の区別がしにくくなるためです。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*qTE2uuAbj2z7yqK2XNBVxw.png" src="https://cdn-images-1.medium.com/max/800/1*qTE2uuAbj2z7yqK2XNBVxw.png"><br>
「全部大文字」のラベルはとても読みづらい</p><p>Matteo Penzoが2006年に発表した、ラベルの配置に関する<a href="http://www.uxmatters.com/mt/archives/2006/07/label-placement-in-forms.php" rel="nofollow" title="" class="ext-link">記事</a>には、ラベルが<em>フィールドの上に置かれている</em>方がフォームの記入が速く進むという趣旨の記述があります。ユーザが<em>フォームを素早く読む</em>時間をできるだけ短くしたい場合は、このスタイルが適していると説明されています。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*RH8cGgjGgWuR-Xvz0Ox9ig.jpeg" src="https://cdn-images-1.medium.com/max/800/1*RH8cGgjGgWuR-Xvz0Ox9ig.jpeg"><br>
左揃えのラベル、右揃えのラベル、フィールドのすぐ上にあるラベルの違い。画像の出典： uxmatters</p><p>ただしその後の調査で、ラベルをフィールドの上に置いても右揃えにしても、ほとんど違いはないという<a href="http://www.slideshare.net/cjforms/labels-and-buttons-on-forms" rel="nofollow" title="" class="ext-link">結果</a>も出ています。</p><p><strong>フィールドのすぐ上に置くラベル</strong>。フィールドのすぐ上に置くラベルの最大の利点は、ラベルのサイズがまちまちな場合やローカライズする場合でもUIになじみやすいということです（スペースが限られるモバイル端末の場合、これは特に好都合です）。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*kWRUaUWErhP5ON3BtrFQPA.png" src="https://cdn-images-1.medium.com/max/800/1*kWRUaUWErhP5ON3BtrFQPA.png"><br>
<em>注釈：<br>
<strong>Top Aligned</strong>：フィールドのすぐ上に置くラベル<br>
– Best completion rates： – 入力の効率が最も優れている<br>
– Easiest for users to “process” ： – ユーザが最も入力しやすい<br>
– Best for multi-language support： – 複数の言語をサポートしたい場合に最適<br>
– Require the most vertical space： – フォームが縦方向に長くなりがち<br>
– Not ideal for very long forms： – 従って非常に長いフォームには不向き</em></p><p>画像の出典： <a href="https://css-tricks.com/label-placement-on-forms/" rel="nofollow" title="" class="ext-link">csstricks</a></p><p><strong>左揃えのラベル</strong>。左揃えのラベルの最大の<strong>欠点</strong>は、入力を完了するまでの時間が最長となることです。これはおそらく、入力フィールドとラベルとの間が、視覚的に離れていることが多くなるからでしょう。ラベルが短ければ短いほど、入力フィールドから離れた場所に配置されることになります。しかし入力を完了するまでの<em>時間が長いのは、欠点だとは限りません</em>。重要なデータを入力してもらうためのフォームであれば、むしろ適していると言えるかもしれません。運転免許書の番号や社会保障番号を入力してもらうためのフォームであれば、このスタイルを採用することでユーザの入力のペースを少し落とさせて、正しい値を確実に入力するよう促すのも一手です。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*JOSTXIv24ODpt5qM-GndKQ.png" src="https://cdn-images-1.medium.com/max/800/1*JOSTXIv24ODpt5qM-GndKQ.png"><br>
<em>注釈：<br>
<strong>Left Aligned</strong>: 左揃え<br>
– Require less vertical space : – 縦方向のスペースはあまり必要としない<br>
– Require more attention from users : – ユーザの注意深さが求められる<br>
– Require more horizontal space : – フォームが横方向に長くなりがち<br>
– Slowest completion rates : – 入力を完了するまでの時間が最長<br>
– 複数の言語をサポートしたい場合には不向き</em></p><p>画像の出典： <a href="https://css-tricks.com/label-placement-on-forms/" rel="nofollow" title="" class="ext-link">csstricks</a></p><p><strong>右揃えのラベル</strong>。右揃えのラベルの最大の<strong>利点</strong>は、<em>ラベルと入力フィールドの結びつきが自然に見えることです</em>。なぜなら<em>ラベルと入力フィールドの位置が近く、まとまって見えるからです</em>。項目同士の配置を近づけるとまとまって見えるというのは、特に目新しい法則ではありません。ゲシュタルト心理学ではこれを「<em>近接の法則</em>」と呼んでいます。短いフォームの場合に右揃えのラベルを採用すると、入力完了までの効率は向上します。一方、右揃えのラベルの欠点は、見栄えがしないという点です。この手のフォームは左端の線がまっすぐにはならないので、フォーム全体の形状はあまり美しくなく、その意味で読みづらくなります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*o7RZK2txZo1fmgOkW8S-GA.png" src="https://cdn-images-1.medium.com/max/800/1*o7RZK2txZo1fmgOkW8S-GA.png"><br>
<em>注釈：<br>
<strong>Right Aligned</strong>: 右揃え<br>
– Best visual connection between labels and forms : – ラベルとフォームの視覚的なバランスが最も美しい<br>
– Good completion rates on short familiar forms : – よくある短いフォームでは入力の完了までの効率がよい<br>
– Requires less vertical space : – 縦方向のスペースはあまり必要としない<br>
– Hardest to read and scan : – じっくり読む場合もさっと目を通す場合も効率がよくない<br>
– Poor multi-language support : – 複数の言語をサポートしたい場合には不向き</em></p><p>画像の出典： <a href="https://css-tricks.com/label-placement-on-forms/" rel="nofollow" title="" class="ext-link">csstricks</a></p><p><strong>要点</strong>： ユーザにフォーム全体をさっと読み通してほしい場合は、各フィールドの上にラベルを配置するとよい。このレイアウトでは、視線を上から下への一方向に動かすだけで全体を読み取ることができるので、効率に優れている。一方、ユーザに注意深く内容を確認してほしい時は、ラベルをフィールドの左側に置くとよい。このレイアウトにすると、視線を左右に往復させる（「Z」の形の）動きとなるため、ユーザがフォームを読む速度が落ちる。</p><p>ラベルの代わりにプレースホルダのテキストをフィールド内に書き込んでおくのは、ユーザ名とパスワードだけ、のような単純なフォームの場合に効果的です。</p><p><img class="graf-image" data-image-id="1*zKU-XEeYddX24yMtf6xCAA.gif" data-width="400" data-height="300" src="https://cdn-images-1.medium.com/max/800/1*zKU-XEeYddX24yMtf6xCAA.gif"><br>
画像の出典： <a href="https://www.snapwi.re/" rel="nofollow" title="" class="ext-link">snapwi</a></p><p>ただしそのプレースホルダのテキストが長くなると、ラベルを外に置く場合と比べて、視覚的に<em>優れた選択肢とは言えなくなります</em>。確かにこのスタイルのフォームはよく見かけますし、見栄えもします。ただしいったんユーザがテキストボックスをクリックすると、ラベルは表示されなくなるので、ユーザが入力した情報が、そのフィールドに適切なものであるかどうかをユーザが再度確認することはできません。さらに、テキストボックス内にプレースホルダのテキストが表示されていると、そのフィールドには何かが書き込まれているように見えるので、ユーザは既に入力済みであると勘違いして、そのフィールドを読み飛ばす可能性があります。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*cHVkeiUX-H7D4hMfRFLP7g.png" src="https://cdn-images-1.medium.com/max/800/1*cHVkeiUX-H7D4hMfRFLP7g.png"><br>
フィールドのラベルをプレースホルダのテキストにしている例</p><p>プレースホルダのテキストを表示するのに良い方法は、<em>フローティングラベル</em>です。デフォルトではプレースホルダのテキストが表示されていますが、入力フィールドがタップされ、テキストが入力されると、プレースホルダのテキストがフェードアウトし、入力フィールドの上部に移動して再表示されます。</p><p><img class="graf-image" data-image-id="1*GqNGB0mTjPwsRXInOlCZUw.gif" data-width="800" data-height="600" data-action="zoom" data-action-value="1*GqNGB0mTjPwsRXInOlCZUw.gif" src="https://cdn-images-1.medium.com/max/800/1*GqNGB0mTjPwsRXInOlCZUw.gif"><br>
画像の出典：<a href="https://dribbble.com/shots/1254439--GIF-Float-Label-Form-Interaction" rel="nofollow" title="" class="ext-link">Dribbble</a></p><p><strong>要点</strong>：プレースホルダに頼るだけでなく、ラベルも使用するとよい。いったんフィールドにテキストが入力されると、プレースホルダの表示は消えてしまう。そこで、フローティングラベルを使用すれば、ユーザはフィールドへ確実に正しく入力することができる。</p><p>クリックした時に、フォームを送信するなどのアクションを起こすのがアクションボタンです。</p><p><em>プライマリアクションとセカンダリアクションは、視覚的にはっきり区別できるようにしておかないと、エラーを招く恐れがあります</em>。セカンダリアクションをあまり目立たないようにすることで、起こり得るエラーのリスクを最小限に抑え、さらにユーザが希望通りの操作を行えるように誘導できます。</p><p><img class="graf-image" data-image-id="1*HiThFpW_NCMqGQhNDur9Gg.gif" data-width="450" data-height="401" src="https://cdn-images-1.medium.com/max/800/1*HiThFpW_NCMqGQhNDur9Gg.gif"><br>
視覚的な差がない場合とある場合。画像の出典：Lukew</p><p>複雑なフォームには通常、戻るボタンが必要です。そのようなボタンが（下の左の図のように）入力フィールドのすぐ下にある場合、ユーザは誤ってクリックする可能性があります。戻るボタンはセカンダリアクションなので、離れた位置に配置すべきです（右のフォームでは、適切な位置にボタンを配置しています)。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*IS5XNjqpT60sLAmeiCCMnw.jpeg" src="https://cdn-images-1.medium.com/max/800/1*IS5XNjqpT60sLAmeiCCMnw.jpeg"><br>
左：戻るボタンが不適切な位置にある場合。右：戻るボタンがユーザからは見えにくい位置にある場合(位置と色のコントラストの両方を変更)。画像の出典：<a href="http://www.slideshare.net/cjforms/labels-and-buttons-on-forms" rel="nofollow" title="" class="ext-link">Caroline Jarrett</a></p><p>アクション名に「送信」などの<em>汎用的な言葉を使うのは避けてください</em>。フォーム自体が汎用フォームだという印象を与えてしまうからです。代わりにボタンをクリックした時に実行されるアクションを正確に示してください。例えば、「無料アカウントを作成する」や「週替わりセール情報の送付を申し込む」などです。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*mhvwmn_ZeCBD53ATigIg3w.png" src="https://cdn-images-1.medium.com/max/800/1*mhvwmn_ZeCBD53ATigIg3w.png"><br>
画像の出典：<a href="http://uxmovement.com/forms/why-your-form-buttons-should-never-say-submit/" rel="nofollow" title="" class="ext-link">uxmovement</a></p><p>（フォームを送信するという）目的からユーザの気がそれる可能性があるので、<em>複数のアクションボタンを配置するのは避けてください。</em></p><p><em>「リセット」ボタンは使用しないでください</em>。Webから、ほとんど全ての<em>リセット</em>ボタンを削除することができたら、みんな幸せになれるでしょう。このボタンはユーザの役にほとんど立たないどころか、そのせいでユーザが痛い目に遭うことがよくあります。</p><p><img class="graf-image zoomable is-zooming" data-image-id="1*LbRL48JMQJ9MKEYaeCEStg.gif" data-width="1000" data-height="500" data-action="zoom" data-action-value="1*LbRL48JMQJ9MKEYaeCEStg.gif" src="https://cdn-images-1.medium.com/max/800/1*LbRL48JMQJ9MKEYaeCEStg.gif" style="left: -20px; top: -98.8125px; width: 631px; max-width: 631px; height: 315.5px;"><br>
画像の出典：<a href="http://www.form-ux-tips.com/" rel="nofollow" title="" class="ext-link">form-ux-tips</a></p><p><em>アクションボタンは、必ずボタンに見えるような外観にしてください</em>。盛り上がっているようなスタイルにしましょう（そうすれば、クリックできることが分かります）。ボタンの詳細については、記事『<a href="https://uxplanet.org/button-ux-design-best-practices-types-and-states-647cf4ae0fc6#.g2spn689u" rel="nofollow" title="" class="ext-link">Button UX Design: Best Practices, Types and States（ボタンのUXデザイン：実例、種類および状態）</a>』をお読みください。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*k4IrHHIuGQVf-uD7Aq6BzQ.png" src="https://cdn-images-1.medium.com/max/800/1*k4IrHHIuGQVf-uD7Aq6BzQ.png"></p><p>「送信」ボタンは、ユーザがクリックした後、フォームが処理されていることを必ず明確に示すように設計する必要があります。これは、ニ重に送信するのを回避すると共に、ユーザにフィードバックを提供するためです。</p><p><img class="graf-image" data-image-id="1*KlpwXZwYVxnP_xJXocb0-g.gif" data-width="500" data-height="332" src="https://cdn-images-1.medium.com/max/800/1*KlpwXZwYVxnP_xJXocb0-g.gif"><br>
画像の出典：<a href="http://cssbuttons.tumblr.com/post/139672762138/send-button-interaction-animation" rel="nofollow" title="" class="ext-link">cssbuttons</a></p><p>ユーザはフォームへの記入をためらうことがあるので、この作業をできるだけ簡単にしなければなりません。ちょっとした変更、 例えば、関連するフィールドのグループ化やどんな情報が各々のフィールドに入るかを示すことなどで、フォームのユーザビリティが大幅に向上します。ユーザビリティのテストは、フォームの設計には必要不可欠です。大抵の場合、テストを幾つか実行したり、フォームのプロトタイプを一通り試すよう同僚に依頼したりするだけで、使いものになるフォームをデザインするにはどうすればいいかが見えてきます。</p><p>入力支援とバリデーションに関しては、記事『<a href="https://uxplanet.org/designing-more-efficient-forms-assistance-and-validation-f26a5241199d#.xvf8og6qe" rel="nofollow" title="" class="ext-link">Designing More Efficient Forms: Assistance and Validation（より効率的なフォームの設計：入力支援とバリデーション）</a>』をご覧ください。</p><p>本記事を読んでくれて、ありがとうございます。</p><p>Originally published at <a href="http://babich.biz/designing-more-efficient-forms-structure-inputs-labels-and-actions/" rel="nofollow" title="" class="ext-link">babich.biz</a></p>
