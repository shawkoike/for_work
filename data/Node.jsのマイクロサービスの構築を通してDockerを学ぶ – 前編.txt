<p><a href="http://www.dwmkerr.com/learn-docker-by-building-a-microservice/" rel="nofollow" title="" class="ext-link">Learn Docker by building a Microservice</a> （2016-04-19） by <a href="https://twitter.com/dwmkerr" rel="nofollow" title="" class="ext-link">Dave Kerr</a></p><p>あなたが真剣に<a href="https://docker.com/" rel="nofollow" title="" class="ext-link">Docker</a>に取り組んで、その全てを学びたいと思っているのでしたら、もう探し回らなくても大丈夫です。</p><p>本稿では、Dockerがどのように機能するのか、どんな部分が話題になっているのか、そしてマイクロサービスを構築する際の基本的な開発作業にどのように役立つのかについて紹介したいと思います。</p><p>本稿では例として、ローカルで実行するコードからマイクロサービスやデータベースを実行するコンテナまで、バックエンドにMySQLを用いたシンプルなNode.jsのサービスの例を使います。</p><p><img src="http://www.dwmkerr.com/content/images/2016/04/Article.png" style="width:400px;"></p><p>Dockerとは要するに、（仮想マシン用のテンプレートに非常によく似ている）<em>イメージ</em>を作成して、<em>コンテナ</em>でイメージのインスタンスを実行できるソフトウェアです。</p><p>Dockerには、<a href="https://hub.docker.com/" rel="nofollow" title="" class="ext-link">Docker Hub</a>と呼ばれる大量のイメージのリポジトリがあり、これを利用して作業を始めたり、無料のストレージとして自分のイメージを保存したりできます。Dockerをインストールし、使いたいイメージを選び、コンテナでそのインスタンスを実行すればよいのです。</p><p>本稿では、イメージを構築し、イメージからコンテナを作成した後、更にいろいろなことを紹介したいと思います。</p><p>本稿を活用していただくために、まずはDockerが必要になります。</p><p>自分のプラットフォーム用のインストールガイドを<a href="https://docs.docker.com/engine/installation/" rel="nofollow" title="" class="ext-link">docs.docker.com/engine/installation</a>で確認してください。</p><p>MacやWindowsのユーザでしたら、仮想マシンを使用するのが良いでしょう。私はほとんどの開発作業において、UbuntuマシンをMac OS X用Parallelsの上で動かしています。試行錯誤する際に、スナップショットを取ったり処理を細分化したり元に戻したりできるのはとても便利です。</p><p>以下のコマンドを入力します。</p><p>少し待つと、次のようなプロンプトが表示されます。</p><p>コマンドをいくつか試して、コンテナを終了します。</p><p>大したことをしているようには見えませんが、多くのことが起きています。</p><p>これは、自分のマシン上でUbuntuを実行している<em>隔離された</em>コンテナのbash シェルです。そこは、いろいろなものをインストールし、ソフトウェアを実行し、何でも好きなことができる自分の場所です。</p><p>何が起きているかを詳しく示した図があります。（この図は<a href="https://docs.docker.com/v1.8/introduction/understanding-docker/" rel="nofollow" title="" class="ext-link">‘Understanding the Architecture’ Docker Documentation（Dockerのドキュメンテーションの”アーキテクチャを理解する”）</a>から引用しました。素晴らしい内容です）</p><p><img src="http://www.dwmkerr.com/content/images/2016/04/Flow.png" alt="Docker Run Flow"></p><p>次のコマンドのうちどれでもいいので試してみてください。</p><p>今回は<a href="https://xkcd.com/1312/" rel="nofollow" title="" class="ext-link">Haskell</a>を使いませんが、見てお分かりのように、環境の起動はとても簡単です。</p><p>自分のアプリやサービスやデータベースなど、必要なものを搭載した状態で自分専用のイメージを構築するのは実に簡単です。その後、Dockerをインストールしたマシンならどこでも実行が可能で、構築したイメージは予想通りに動きます。コードによって自分のソフトウェアと<em>ソフトウェアが実行される環境を構築し</em>、簡単にデプロイできるのです。</p><p>シンプルなマイクロサービスの例を見てみましょう。</p><p>マイクロサービスを1つ作ります。Node.jsとMySQLを使って、電話番号に結び付くメールアドレスのディレクトリを管理するものです。</p><p>ローカルで開発するには、MySQLをインストールしてテストデータベースを作って、それから…</p><p>…やめます。</p><p>ローカルでデータベースを作り、その上でスクリプトを実行すれば簡単に始められるのですが、煩雑になる可能性があります。コントロールできないものが山のように動き出してしまいます。実行すれば動くかもしれませんし、自分のリポジトリに登録したシェルスクリプトを使えばコントロールすることだってできるでしょう。しかし、もし、他の開発者が先にMySQLをインストールしてしまっていたら？　もし自分たちが使おうとしている開発用の”users”という名前が先にデータベースで使われていたら？</p><p>これはDockerの優れたユースケースです。Docker上で本番用のデータベースは動かすつもりはありません（サンプルでAmazonRDSだけ使うかもしれません）。それでも、開発用のDockerコンテナとしてまっさらなMySQLのデータベースを即座に稼働させることができます。開発マシンには手を入れず、何をしても全てをコントロールし再利用できる状態を保ち続けられるのです。</p><p>以下のコマンドを実行します。</p><p>これは、123というルートのパスワードでポート3306からのアクセスを許可するMySQLインスタンスの実行を促します。</p><p>最後の部分は、たとえMySQLのデフォルトのポートであるとしても、極めて重要です。もし割り当てを明確に記述しなければ、そのポートからのアクセスがブロックされてしまいます（なぜなら、アクセスの存在を知らせなければ、コンテナは隔離された状態だからです）。</p><p>この機能による戻り値は<em>コンテナID</em>、つまりコンテナへの参照値で、これを使って動作の停止、再スタート、コマンドの発行などを行います。どのコンテナが動いているか見てみましょう。</p><p>重要な情報はコンテナ ID、イメージ、名称です。このイメージに接続し、どうなるか見てみましょう。</p><p>これも非常に優れたものです。</p><p>データベース、テーブル、ユーザなど、必要なものを何でも作ることができます。</p><p>ここまででMySQLをコンテナ内部で実行し、既にDockerの効果的な利用方法をいくつか紹介していることになりますが、ここで一息入れてサービスの方に移りましょう。ひとまず、<code>test-database</code>というフォルダを作り、データベースの開始・終了、テストデータのセットアップを行うスクリプトを入れます。</p><p>開始は、簡単です。</p><p>このスクリプトは、分離されたコンテナの中（つまりバックグラウンド）にあるデータベースイメージをユーザセットアップと共に実行します。ユーザセットアップは、<code>users</code>というデータベースにアクセスして、データベースサーバが立ち上がるのを待ち、<code>setup.sql</code>スクリプトを実行して初期データを設定します。</p><p><code>setup.sql</code>は、以下のことを行います。</p><p><code>stop.sh</code>スクリプトは、コンテナを止めて取り除きます（コンテナは、すぐに再起動できるよう、デフォルトでDockerにその状態が保存されます。この例ではこの機能は特に必要ありません）。</p><p>これは、後ほどもっと単純化して、さらに良い感じに整えます。リポジトリの<a href="https://github.com/dwmkerr/node-docker-microservice/tree/step1" rel="nofollow" title="" class="ext-link">ステップ1</a>のブランチを見て、現時点のコードを確認してください。</p><p>本稿では、Docker習得に焦点を当てていますので、Node.jsのマイクロサービスに長い時間をかけるつもりはありません。その代わりに、この領域と要点について説明します。</p><p>これを少しずつ見て行きましょう。最初に見るセクションは、<code>repository</code>です。データベースアクセスをある種のクラスやアブストラクションに含めると、テスト目的でモックするのに便利かもしれません。</p><p>恐らく、同じことをするためにもっと良い方法がたくさんあるでしょう。しかし、基本的に、以下のような方法で<code>Repository</code>オブジェクトを作成できます。</p><p><code>repository/repository.spec.js</code>ファイルにユニットテストのセットもあります。リポジトリができたので、サーバを作成することができます。以下は、<code>server/server.js</code>です。</p><p>このモジュールは、<code>start</code>関数をexportしています。このように使うことができます。</p><p><code>server.js</code>が、<code>api/users/js</code>を使うことに気付きましたか？　こちらです。</p><p>これらのファイルは、どちらもソースの近くにユニットテストがあります。</p><p>コンフィギュレーションが必要です。専用のライブラリを使うのではなく、シンプルなファイルが、<code>config/config.js</code>の目的にかなっています。</p><p>必要な場合は、コンフィギュレーションを<code>require</code>（要求）することもできます。現在、多くのコンフィギュレーションは、ハードコード化されていますが、<code>port</code>から分かるように、環境変数をオプションとして追加するのは簡単です。</p><p>最後のステップです。全てをまとめる<code>index.js</code>ファイルとつなぎ合わせます。</p><p>ちょっとしたエラー処理を行い、それが終わったら、コンフィギュレーションをロードして、リポジトリを作成し、サーバを立ち上げるだけです。</p><p>これがマイクロサービスです。全てのユーザを対象としたり、ユーザを検索したりできます。</p><p>コードをチェックアウトすると、使えるコマンドがいくつかあることが分かるでしょう。</p><p>これまで見てきたコードの他に、このようなものもあります。</p><p>以上！</p><p>以下のコマンドを使って、テストデータベースを実行してください。</p><p>そして、サービスを実行してください。</p><p>ブラウザで<a href="localhost:8123/users">localhost:8123/users</a>にアクセスして、実行される様子を見てください。Dockerマシンを使っているようなら、つまり、MacかWindowsで実行しているなら、<code>localhost</code>は使えません。代わりにDockerマシンのIPアドレスが必要になります。<code>docker-machine ip</code>でIPアドレスを取得することができます。</p><p>以上、あっと言う間にサービスを構築しました。先に進む前にこのコードを見たければ、<a href="https://github.com/dwmkerr/node-docker-microservice/tree/step2" rel="nofollow" title="" class="ext-link">ステップ2</a>のブランチを確認してください。</p><p>後編はこちら：<a href="http://postd.cc/learn-docker-by-building-a-microservice-2/">Node.jsのマイクロサービスの構築を通してDockerを学ぶ – 後編</a></p>
