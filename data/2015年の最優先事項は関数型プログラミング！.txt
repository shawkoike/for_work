<p><a href="https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9" rel="nofollow" title="" class="ext-link">Functional Programming should be your #1 priority for 2015</a> （2015-01-01） by <a href="https://github.com/jugoncalves" rel="nofollow" title="" class="ext-link">Ju Gonçalves</a></p><p>—もはやOOP（オブジェクト指向プログラミング）は”クラウドモンスター”から私たちを守りきれない</p><p>おそらくあなたは、”Clojure”、”Scala”、”Erlang”といった言葉や、”Javaにラムダ式が導入された”という話を聞いたことがあるでしょう。そしてそれらの言葉が”関数型プログラミング”と関連があるのをご存じかもしれません。プログラミングコミュニティに参加していれば、おそらく既にこのテーマが議題に上がっているでしょう。</p><p>Googleで”関数型プログラミング”を検索しても、目新しいものは何も見つかりません。言語の中で2番目に古い言語は、関数型プログラミングを利用しています。1950年代に登場した、Lispという言語です。では一体なぜ人々は、今になって関数型プログラミングに沸き立っているのでしょうか？　およそ60年も経っているのに？</p><p>信じられないような話ですが、コンピュータはDOMよりもずっと処理速度が遅かったのです。これは本当の話です。そして当時は、プログラミング言語の設計と実装に関する主要な考え方が2つありました。</p><p>当時のコンピュータに高い処理能力はなく、関数型プログラムを評価するためのあらゆる抽象化の処理には不向きでした。Lispは処理が極端に遅い状態になり、ジョブに適していませんでした。それから命令型プログラミングが優勢になり始め、とりわけCが優位に立ちました。</p><p>現在は、アプリケーションがどの言語で記述されているかをあまり気にすることなく、ほとんどのアプリケーションを実行できると言えます。とうとう、関数型言語がセカンドチャンスを手にしたのです。</p><p>ここでは、関数型プログラミング（FP）の概要を説明するわけではありません。このセクションの最後には、FPがどんなものなのか、そしてこれからあなたがFPを始める方法が分かるはずです。</p><p>関数型プログラミングは、関数を持つプログラミングだと考えることができます。実際に、今あなたが想像するよりもずっと、そのままの意味です。ある関数の関数を作成し、関数を合成します（学校で習ったf ∘ gを覚えていますか？　これは今後役に立ちます）。それだけです。</p><p>以下は、FPの特徴のリストです（全てを網羅しているわけではありません）。</p><p>ここでは、<em>風変わりな</em>名前を気にする必要はありません。意味だけ理解してください。</p><p><strong>第一級関数</strong>とは、関数を変数に格納できる性質のことです。あなたは既に、JavaScriptで次のような処理を行ったことがあると思います。</p><p><script src="https://gist.github.com/jugoncalves/a75e7c284d0fc27b5ead.js"></script><br>
ここでは、aとbを受け取ってa + bを返す匿名関数を、addという名前の変数に格納しています。</p><p><strong>高階関数</strong>とは、関数を返したり、他の関数を引数として受け取ったりできる関数のことです。</p><p>もう一度、JavaScriptの例です。</p><p><script src="https://gist.github.com/jugoncalves/5b2ce307b9f23aac06aa.js"></script></p><p>または</p><p><script src="https://gist.github.com/jugoncalves/4a9b52d70ac1de944d1d.js"></script></p><p>これらは両方とも高階関数の例です。たとえこのようなコードを書いたことがなくても、おそらくどこかでこのパターンを目にしたことはあるでしょう。</p><p><strong>純粋関数</strong>とは、値を変更しない関数のことです。データを受け取ってデータを出力するだけのこの関数は、私たちが愛する数学の関数と似ています。もし、関数<strong>f</strong>に<strong>2</strong>を渡すと<strong>10</strong>が返されるとしたら、その関数は常に<strong>10</strong>を返します。環境やスレッド、評価の順番は、問題ではありません。プログラムの他の部分に副作用が起きないので、これは実に強力な概念です。</p><p><strong>クロージャ</strong>とは、戻り値となる特定の関数だけがアクセスできるデータを、関数の内部に保存できる構造のことです。言い換えると、戻り値となる関数はその実行環境を維持します。</p><p><script src="https://gist.github.com/jugoncalves/4a9b52d70ac1de944d1d.js"></script></p><p>高階関数の2つ目の例をもう一度見てください。変数aは閉じ込められていて、戻り値となる関数からしかアクセスできません。実際には、クロージャは厳密にはFPの機能ではなく、最適化です。</p><p><strong>不変状態</strong>とは、状態を全く変更できないということです（新しい状態を取得することはできても）。以下のコード（OCamlで記述）では、プログラムの中で<strong>x</strong>と<strong>5</strong>を置き換えて使うことができます。<strong>x</strong>は永遠に<strong>5</strong>のままです。</p><p><script src="https://gist.github.com/jugoncalves/b86b7585a4cfe9f3bcf9.js"></script></p><p>良い機能というよりはむしろ、ほとんどマイナス面にしか見えません。しかし、それがあなたを救うことになると分かります。</p><p>私たちはとうとう、分散処理や並行処理を実行するアプリケーションを持つようになりました。残念なことに、まだその準備はできていません。並行処理や並列処理を行う”現行の”（すなわち最も使用されている）モデルでは、たとえ問題を解決できても、多くの複雑さが伴います。</p><p>より優れたアプリケーションには、そのためのシンプルで信頼性の高い方法が必要です。上で説明したFPの機能を覚えていますか？　純粋関数や不変状態は？　そうです。既に取得した結果と異なる結果を出すことのない1つの関数を、別々のコアやマシンで1,000回実行できるということです。つまり、1つのコアで実行するコードを1,000個のコアで使用することもできます。これでまた救われます。</p><p>少なくとも並行処理や並列処理に関しては、もうOOPはあなたを守りきれません。というのも、OOPが可変状態に直接依存しているからです（OOP実装として最も一般的な、命令型言語において）。呼び出すオブジェクトのメソッドが、現在の<strong>self</strong>や<strong>this</strong>を変えるものと想定されているのです。全てのスレッドが正しくアップデートされ同期するよう保っていくには、かなり複雑な対処が必要となるでしょう。</p><p>私はここで、現在あなたの使っているパラダイムが何であれFPへ移行すべきだと主張するつもりはありませんが（<a href="https://blog.inf.ed.ac.uk/sapm/2014/03/06/enemy-of-the-state-or-why-oop-is-not-suited-to-large-scale-software/" rel="nofollow" title="" class="ext-link">そうすべきだと言う人もいるでしょう</a>が）、FPをマスターする必要があるのは間違いありません。JavaとC++11は既に、ラムダ式を取り入れているのです。近いうちに、ほぼ全ての現代的でメンテナンスされている言語は、FPの機能に依存するようになるでしょう。既に大半はそうなっています。</p><p>ただしお伝えしておくと、可変状態を使うのをやめることにはならないでしょう。有用なプログラムを書くには、やはりIOなどを使う必要があります。FPが与えてくれる主な考え方は、可変状態は必要な時にだけ使うということです。</p><p>はい。</p><p>関数型プログラミングは、優れたプログラムを書いたり、解決すべき問題について論理的に考えたりするのに役立つでしょう。</p><p>何事も最初は難しいものです。あなたは、プログラミングやOOPにしても、きっと苦労して学んできたはずです。おそらくOOPで何かを始めた時は、初めてプログラムを書いた時よりもずっと取り組みやすかったでしょう。その主な理由は、変数宣言やforループ、whileループといったよく使われる用語に既になじんでいたことです。</p><p>FPを始めるということは、プログラミングをまた初めから学ぶのに近いものがあります（言語によっては、本当に最初からやり直す感じになるでしょう）。</p><p>FPのコードは読みにくいと考える人も多いかもしれません。命令型言語を学んだ人にとっては、関数型プログラムは暗号のように見えるでしょう。実際に暗号なのではなく、用語をまだ知らないからです。基礎を身につければ、もっと読みやすくなります。</p><p>以下のプログラムをご覧ください。HaskellとJavaScript（命令型のスタイルを使用）の両方で書いてあります。<br>
<script src="https://gist.github.com/jugoncalves/1f4280e03d5303b38734.js"></script></p><p><script src="https://gist.github.com/jugoncalves/f821c2c1619c9f2dbc1e.js"></script></p><p>非常にシンプルなプログラムです。ユーザが7を入力したら成功のメッセージを出力し、それ以外ならエラーメッセージを出力します。Haskellのコードがたった2行で済んでいるというのは、暗号のように見えるかもしれません（差し当たって1行目は無視してください。単なる”型注釈”です）。でも実際のところ、いったんパターンマッチ機能を理解すれば、本当にシンプルなのです（パターンマッチはHaskellなどのFP言語で実装されています）。</p><p>Haskellが行っていること：</p><p><em>guess関数の受け取る引数が<strong>7</strong>と等しいなら”<strong>Much 7 very wow.</strong>“（7だ。すごい。）を返し、それ以外なら”<strong>Ooops, try again.</strong>“（残念。やり直し。）を返す。</em></p><p>そしてJavaScriptのコードもまさに同じ処理をしていますが、Haskellのほうはプログラマが与えた”パターン”とのマッチングを行っています。</p><p>代わりにifやelseさえ使うことができれば、その必要はないように思えるかもしれません。ですが、複雑なデータ構造を扱う時には大きな威力を発揮します。</p><p><script src="https://gist.github.com/jugoncalves/951adecf6f988ffef272.js"></script></p><p>上のプログラムの<strong>plus1</strong>は、Intのリストを受け取ってその各要素に1を加える関数です。空リスト[]とのマッチングを行い（要素がなければ別の空リストを返します）、そして空でないリストとのマッチングを、定義したパターンによって行います。その定義では、リストの最初の要素をx、それ以外の要素をxsと名づけています。その後、加算を行い、再帰呼び出しを使って連結しているのです。</p><p>この<strong>plus1</strong>関数を、命令型スタイルで2行のコードに読みやすいまま書き直そうとすると、大いに悩んでしまうことでしょう。</p><p>関数型プログラミングを扱ったコンテンツはたくさんありますが、以下はぜひ参考にしていただきたいものです。</p><p>残念ながら、これらのコースの受講期間は昨年末でしたが、アーカイブのコンテンツにアクセスでき、映像はYouTubeでも利用可能です。</p><p>一方、書籍で学びたい場合は、以下が大変お薦めです。</p><p>この新しい年があなたにとって、関数型の良い1年になりますように。☺</p>
