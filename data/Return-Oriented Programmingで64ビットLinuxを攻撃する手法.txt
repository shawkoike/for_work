<p><a href="http://crypto.stanford.edu/~blynn/rop/" rel="nofollow" title="" class="ext-link">64-bit Linux Return-Oriented Programming</a> by <a href="http://crypto.stanford.edu/~blynn/" rel="nofollow" title="" class="ext-link">Ben Lynn</a></p><p>完璧な人間はいません。プログラマならなおさらです。数日をかけて、自分が犯したミスを直すため、作成にかかったのと同じだけの時間を費やします。ですが、まだそれは運がいい方です。大抵は気づかぬうちにバグがとんでもないところに潜んでいて、我々は大惨事が起きてから初めてその存在を知るのです。</p><p>いくつかの惨事は偶発的なものです。例えば不運な一連のイベントが引き金となって、見落としていた論理エラーを引き起こす状況になることもあるでしょう。一方で故意に引き起こされる惨事もあります。会計士が複雑な法律の抜け道をかいくぐって税金を悪用するように、攻撃者がバグを見つけたとしたら、そのバグにつけ込んで多くのコンピュータを乗っ取るでしょう。</p><p>それゆえ、現代のシステムは悪意を持った人間にバグを利用されないよう設計されたセキュリティの機能を持っています。このようなセキュリティガードは、例えば、異常な動きが発見されるやいなや重要な情報を隠すか、あるいはプログラムの実行を停止するでしょう。</p><p>実行保護はセキュリティ機能の1つですが、残念ながら効果的な働きはしません。この記事では、Return-oriented programming(ROP)として知られるテクニックを使い64ビットLinuxにおける実行保護をどのように回避するかお見せしましょう。</p><p>まずはexecveシステムコール経由でシェルを立ち上げるアセンブリを書くところから始めましょう。</p><p>互換性に関していえば、32ビットLinuxシステムコールは64ビットLinuxでもサポートされています。そのため、私たちは32ビットシステムを対象としたシェルコードを再利用できると考えてしまいがちです。しかしながらexecveシステムコールは実行されるプログラムのNULL終端を含むメモリアドレスを引数にとります。シェルコードは32ビットより大きいメモリアドレスへの参照を要求する場所に注入されなければなりません。ですから私たちは64ビットシステムコールを使わなければなりません。</p><p>32ビットアセンブリに慣れた人にとっては、下記が役に立つかもしれません。</p><p>Cファイルにアセンブリコードを埋め込んだものを、shell.cと呼びます。</p><p>メモリのどこでコードが終了しようと問題なく、call/popのトリックによって、RDIレジスタは”/bin/sh”という文字列のアドレスとともに読み込まれます。</p><p>needle0とneedle1のラベルは後々検索しやすいように付けられています。定数0xdeadbeefもそうです（x86はリトルエンディアンなので、4バイト分の0に続いて EF BE AD DE というかたちで表されますが）。</p><p>シンプルに、私たちはAPIをあえて誤用しています。本来ならexecveに対する2番目、3番目の引数は、文字列を指すNULL終端のポインタ配列となるべきです(argv[]とenvp[])。しかしながら、システムは寛容なのです。argvとenvpがNULLのままで”/bin/sh”を実行してもうまくいきます。</p><p>いずれにせよ、argvとenvpの配列を付け加えても単純であることに変わりありません。</p><p>私たちが注入したいペイロードを抜粋します。マシンコードを調べてみましょう。</p><p>64ビットシステムでは、コードセグメントは通常0x400000にあります。つまり、バイナリの中では、私たちのコードは0x4bfオフセットで始まり、オフセット値0x4dcの直前に終わります。この差は29バイトです。</p><p>8の次の倍数まで切り上げることにして、32を得ます。そして実行します。</p><p>確認してみましょう。</p><p>ひどいC言語のチュートリアルは以下のvictim.cのような例を含んでいるでしょう。</p><p>x86システムのためのcdecl呼出規約のせいで、もしとても長い文字列を入力しようとしたら、バッファオーバーフローになったり、戻りアドレスを上書きしたりすることになるでしょう。適切なバイトを付加してシェルコードを挿入すれば、プログラムがメイン関数から戻ろうとする時に意図せずシェルコードを実行してくれます。</p><p>悲しいかな、スタックスマッシングは最近ではより難しくなっています。私のUbuntu 12.04では3つの対抗策が講じられています。</p><p>これらを回避するためにズルをしましょう。まず、SSPを無効にします。</p><p>次に、NXを無効にします。</p><p>最後に、バイナリを実行するときにASLRも無効にしましょう。</p><p>もう1つズルをします。バッファの場所を表示しましょう。</p><p>リコンパイルして実行します。</p><p>再実行しても同じアドレスが返るはずです。これをリトルエンディアンで取得する必要があります。</p><p>いよいよ我々はこの脆弱なプログラムを攻撃することができます。</p><p>シェルコードがバッファの最初の32バイトまでを取得します。printfの80個の0は40バイト分の0を表しており、そのうち32バイトがバッファの残りの部分を埋めて、残りの8バイトが保存されたRBPレジスタの場所を上書きします。次の8バイトは戻りアドレスを上書きし、シェルコードが保持されているバッファの開始地点を指します。<br>
エンターキーを何度か押してから、実行中のシェルの中にいることを確認するために、”ls”を入力しましょう。プロンプト表示はありません。なぜなら標準ストリームがターミナル(/dev/tty)ではなくcatで与えられているからです。</p><p>ここで面白半分で寄り道をして、ASLRについて見てみましょう。かつては/proc/pid/statを見ればあらゆるプロセスのESPレジスタを知ることができましたが、この脆弱性は遥か昔に封印されました。(現在ではptrace()する権限が与えられているプロセスに限り、与えられたプロセスを調べることができます)。</p><p>パッチが適用されていないシステムを想定しましょう。できるだけ本物に近いほうが満足感があるからです。またパッチ適用の重要性やASLRがランダム性だけでなく機密性を必要とする理由についてじかに知ることができるからです。<br>
<a href="https://www.cr0.org/paper/to-jt-linux-alsr-leak.pdf" rel="nofollow" title="" class="ext-link">Tavis OrmandyとJulien Tinnesのプレゼンテーション</a>を参考に、次のコマンドを実行します。</p><p>最初にASLRなしでvictimプログラムを実行します。</p><p>そして別のターミナルで以下を実行します。</p><p>このようにしてvictimプログラムがユーザの入力を待っている間、victimプログラムのスタックポインタは0x7fffffe038となります。このポインタからnameのバッファまでの距離を計算します。</p><p>古いシステムのASLRを打ち破るための値を手に入れました。ASLRを再度有効化してvictimプログラムを実行します。</p><p>それからプロセスを調べることで相対的なポインタを得ることができるので、それにオフセットを加えます。</p><p>デモをするのに、名前付きパイプを使うのが一番簡単でしょう。</p><p>もう1つのターミナルで以下を入力します。</p><p>エンターキーを数回押せば、シェルコマンドを入力できるようになります。</p><p>execstackコマンドを使用せずにvictimプログラムを再コンパイルしてください。または、以下を実行して実行保護をアクティベートしてください。</p><p>このバイナリを上記の方法で攻撃してみてください。我々の努力はプログラムがスタック上のインジェクション済みのシェルコードにジャンプした瞬間に無駄になります。全ての領域が実行不可能になっているため、シャットダウンされてしまうのです。</p><p>ROPは巧みにこの防御をかわします。古典的なバッファオーバーフローの脆弱性は我々が実行したいコードでバッファを埋めますが、ROPは代わりに我々が実行したいコードスニペットの”アドレスで”バッファを埋めます。そしてスタックポインタをある種の間接的なインストラクションポインタに変えてしまうのです。</p><p>このコードスニペットは実行可能なメモリから取得されます。例えばそれらはlibcの断片であったりするでしょう。そのためNXビットでは我々を止めることができません。詳しくいえば、詳細は下記のようになります。</p><p>ROPでは、RETで終わる一連の命令は”ガジェット”と呼ばれます。</p><p>我々の目的は、libcのsystem()関数で”/bin/sh”を引数として呼び出すことです。これは任意の値をRDIに割り当てるガジェットを呼び出し、libcのsystem()関数へジャンプすることで実現できます。<br>
まず、libcはどこにあるのでしょうか。</p><p>このシステムには32ビットと64ビットのlibcが存在しています。我々が欲しいのは64ビットのlibcです。64ビットのlibcはリストの2番目にあります。</p><p>さて、どんなガジェットが使用できるのでしょうか。</p><p>悪い選択ではないのですが、この取ってつけた検索方法では意図的なコードの断片しか発見できません。</p><p>もっとうまいやり方があります。我々の場合、次のコマンドを実行するのがよいでしょう。</p><p>“/bin/sh”へのポインタがスタックの一番上にあるうちはこの方法が使えます。この方法ではスタックポインタを処理する前にポインタの値をRDIレジスタに割り当てます。対応する機械語は0x5f 0xc3という2バイトの並びでした。libcのどこかで使われているに違いありません。</p><p>悲しいことに、私はファイルから複数バイトの並びを検索できるようなLinuxのツールを知りません。多くのツールはテキストファイルを対象としており、また入力が改行で整形されていることを前提としています。(Rob Pikeの” <a href="http://doc.cat-v.org/bell_labs/structural_regexps/se.pdf" rel="nofollow" title="" class="ext-link">Structural Regular Expressions</a>”を思い出しました。)</p><p>汚いですが以下で代替します。</p><p>まとめるとこうです。<br>
　1. 16進数コードが1行づつ出力されるようにライブラリをダンプします。<br>
　2. “c3″という文字列を検索し、該当する行の1つ前の行を出力します。あわせて行番号も出力します。<br>
　3. 結果から、最初にマッチする”5f”を検索します。<br>
　4. 行番号は1から始まりオフセットは0から始まるので、後者から前者を取得するために1を減算しなければなりません。また、アドレスは16進数の形で取得したいと思います。(減算のため)第1引数を数値としてawkを使います。すると都合よく数値の後の文字、つまりgrepが出力した”-5f”を全て落としてくれます。</p><p>あと少しです。戻りアドレスを以下の順で上書きします。</p><p>それから次のRET命令を実行すると、最初のガジェットのおかげでプログラムが”/bin/sh”のアドレスをRDIに割り当ててくれ、システム機能へアクセスできるようになります。</p><p>ターミナルで次のように実行します。</p><p>もう1つのターミナルで下記のように実行します。</p><p>これでlibcがメモリの0x7ffff7a1d000番地にロードされました。これが最初の鍵になります。ガジェットのアドレスは0x7ffff7a1d000 + 0x22a12となります。</p><p>次に、メモリのどこかに”/bin/sh”が要ります。以前と同じようにバッファの開始地点にこのストリングを挿入すればいいですよね。前述から、アドレスは0x7fffffffe090となります。</p><p>最後の鍵はシステムライブラリの関数の位置です。</p><p>分かりましたね。システム関数のアドレスは0x7ffff7a1d000 + 0x44320です。これをまとめると次のようになります。</p><p>何度かエンターキーを押してみて、そしてコマンドを打ち込み、実際にシェルが起動されているか確認してください。</p><p>今回は130個の0があり、xxdにより65個の0バイトに変換されます。これで”/bin/sh”のバッファの残りとその後ろにプッシュされたRBPレジスタの両方をカバーするのにちょうど足りていて、まさに次に上書きする箇所はスタックのトップということになります。</p><p>この短期間の実験結果としては、ProPoliceが最善の防御となりました。スタックの一番高い箇所に配列を移動させることにより、オーバーフローによる攻撃を困難にします。更に、配列の終端に”カナリア”として知られる特定の値が挿入されます。戻り命令の前にチェックを挿入し、もしカナリアが不正に修正されていたら実行が終了されます。完全にProPoliceを停止させないと手が出せませんでした。</p><p>ASLRも、エントロピーが十分で、かつランダム性についての機密が保持されている限りは攻撃を防御してくれます。注意しなくてはならないのは、古いシステムが/proc経由で情報をリークしていた点です。一般的に、攻撃者は巧妙な手口を開発して、隠されているアドレスを暴こうとしてきました。</p><p>最後に、最も役に立たないのは実行保護(NX)で、これは穴だらけでした。スタック上でコードを実行できないとしたら？　ただ他のコードに標的を変更し実行すればいいのです。今回はlibcを使いましたが、一般に攻撃しやすい一連のコードはあるものです。例えば、<a href="http://www.npr.org/templates/story/story.php?storyId=111889494" rel="nofollow" title="" class="ext-link">研究者たちが大がかりな実行保護で投票マシンに不正アクセスを試みた</a>例は、これを転用したものです。</p><p>面白いことに、それぞれの方法のコストは、役立ち度に反比例するようです。</p><p>もし実行保護がそんなに簡単に破られてしまうなら、設定する価値があるのかと疑問に思う人もいるのではないでしょうか。</p><p>価値があると考えた人がいるからこそ今は広く普及しているのでしょう。でも、もしかしたら、そろそろこう問いかけてみる時期かもしれません。「実行保護は削除してしまってもいいだろうか？　実行保護は何もないよりはマシなのか？」と。</p><p>既存のコードの断片をつなぎ合わせて攻撃を行うのは非常にたやすいことが分かりました。表面的に見てきただけですが、ほんの少しのガジェットでどのような呼出も可能なのです。もっと言うと、ガジェットのためのライブラリを攻撃するツールや、入力言語を一連のアドレスに変換するコンパイラが、無防備で非実行可能なスタックへ用いるために用意されているのです。完全武装した攻撃者なら、実行保護というものが存在することすら忘れていても大丈夫そうです。</p><p>そういう訳で、実行保護は最悪だと主張します。コストが高い上に役に立たず、データからコードを分離してしまいます。<a href="http://doc.cat-v.org/bell_labs/pikestyle" rel="nofollow" title="" class="ext-link">Rob Pikeもこのように言っています</a>。</p><p>実行保護は自己書き換えコードにより干渉しますが、これは実行時コンパイラに対しては非常に価値があり、さらに石に刻まれた大昔の呼出規約に新たな生命を吹き込むのです。</p><p>シンプルな呼出規約とシンポインタで<a href="http://www-cs-students.stanford.edu/~blynn//files/lexic.pdf" rel="nofollow" title="" class="ext-link">ネストされた関数をどのようにC言語に追加するかについての論文</a>で、Thomas Breuelは次のように意見を述べています。</p><p>ROPのことに最初に関心を持たせてくれた<a href="http://cseweb.ucsd.edu/~hovav/" rel="nofollow" title="" class="ext-link">Hovav Shacham</a>に感謝します。彼とは<a href="http://cseweb.ucsd.edu/~hovav/dist/rop.pdf" rel="nofollow" title="" class="ext-link">ROPについての総合的な紹介</a>を共著しました。また、<a href="http://cseweb.ucsd.edu/~hovav/dist/avc.pdf" rel="nofollow" title="" class="ext-link">ROPが投票マシンを侵害した事例</a>についての技術的な詳細もご覧ください。</p><p>今回は特定の攻撃に的を絞りました。他の種類の攻撃に対しては、今回の防御はあまり役に立たない可能性もあります。例えば、ASLRはHeap Sprayingをかわすのが苦手です。</p><p>ROPはReturn-to-libc攻撃を汎用化したもので、ガジェットではなくライブラリ関数をコールします。32ビットのLinuxでは引数がスタックに渡されるので、C言語の呼出規約が攻撃の助けになります。スタックを不正操作して私たちの引数とライブラリ関数のアドレスが保持されるようにすればいいだけです。RETが実行される時には既に攻撃が進行中なのです。</p><p>しかし、64ビットのC言語の呼出規約は、RCXがR10に代わるという点と、6個以上の引数が同時に存在するかもしれない（他はスタック上に右から左の順に存在している）という点以外は、64ビットのシステムコールと同じです。バッファのオーバーフローはスタックのコンテンツを制御することしかできず、レジスタを制御できないため、return-to-libc攻撃を行うのは難しくなります。</p><p>新しい呼出規約になっても、ガジェットがレジスタを操作できるので、ROPは有効な攻撃となり得ます。</p><p>高層ビルの建築が完成したら足場を取り除きますよね。私もそれまで活用していたGDBセッションを削除しました。最初の一回目でこれらのセキュリティ上の弱点を最初の一回で1バイトのズレもなく完璧にできたと思いますか？そうだと良かったのですが。</p><p>そう言えば、私はかなり自信を持って、デバッガを使ってデバッグをしたことがないと言えます。使ったのはアセンブリでプログラムを書いた時、ソースコードの無いバイナリを調査した時、そして今回のバッファオーバーフローの突破口のためだけです。ここでLinus Torvaldsの言葉を引用します。</p><p>Brian Kernighanも、こう言っています。</p><p>もう既に多くのガイドがあるので、いつかGDBについて書く機会があるかは分かりません。今のところ、いくつかコマンドを選んでリストにしておきましょう。</p><p>GDBは、ASLRが無効な時のシェルの選択とは微妙に違う位置を選択しますが、確定的にコードを挿入するのに役立ちます。</p><p>上記のことをいくつかのシェルスクリプトにまとめました。</p><p>私のシステム (Ubuntu 12.04 on x86_64)上で稼働します。</p><p>[<a href="http://crypto.stanford.edu/~blynn/" rel="nofollow" title="" class="ext-link">私のホームページ</a>] Emailアドレス：<em>blynn pleasedontspamme</em>アットマーク<em>cs</em>ドット<em>Stanford</em>ドット<em>edu</em></p>
