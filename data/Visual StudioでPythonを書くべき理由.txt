<p><a href="http://blogs.msdn.com/b/visualstudio/archive/2015/08/03/why-write-python-in-visual-studio.aspx" rel="nofollow" title="" class="ext-link">Why write Python in Visual Studio?</a> （2015-08-03） by <a href="http://stevedower.id.au/blog/" rel="nofollow" title="" class="ext-link">Steve Dower</a></p><p>SteveはMicrosoftのAzure機械学習チームのエンジニアです。Python Tools for Visual Studioやその他のPython開発者向けのライブラリに携わっており、またCPythonのコントリビュータでもあります。</p><p>最近、<a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200661214" rel="nofollow" title="" class="ext-link">Visual Studio 2015</a>がリリースされました。Pythonにも対応しており、<a href="https://github.com/Microsoft/PTVS" rel="nofollow" title="" class="ext-link">Python Tools for Visual Studio</a>（PTVS）を使うことで、編集やインテリセンス、デバッグ、プロファイリング、Azureへのパブリッシングなど、ほとんど全ての機能が利用可能です。その詳細や<a href="https://aka.ms/ptvs" rel="nofollow" title="" class="ext-link">ビデオチュートリアルの一部、ドキュメンテーション、その他のソース</a>はvisualstudio.comで見ることができます。また、<a href="http://blogs.msdn.com/b/visualstudio/archive/2014/10/15/python-tools-2-1-for-visual-studio.aspx" rel="nofollow" title="" class="ext-link">Python Tools 2.1</a>や<a href="http://blogs.msdn.com/b/visualstudio/archive/2015/03/16/python-tools-for-visual-studio-2-2-beta-released.aspx" rel="nofollow" title="" class="ext-link">Python Tools 2.2 beta</a>についてはリンク先のブログ記事をご覧ください。今回の投稿では、Pythonで仕事を始める際にVisual Studioの使用を検討すべき理由について話していきたいと思います。</p><p>何だかインテリセンスについてはいつも話していますね。Visual Studioでは、サポートする言語に対して常に優れたインテリセンスが用意されてきました。これをお読みの方がこの15年の間、C#やVB言語でプログラミングしてきたのであれば、その便利さに今さら驚きはしないでしょう。それに対して、Pythonの開発者はあまり幸運とは言えません。最小限のコードのサジェストや基本的な構文のハイライト表示のみで満足するしかなかったからです。</p><p>他の多くの言語と違い、Pythonのコードでは型をそこかしこに指定する必要はありません。そのためプログラミングの時間は大幅に短縮できますが、一方でプログラム全体についての深い理解が必要となり、その点においてエディタによるサポートはとても有益となります。しかし、ほとんどのエディタは大したヒントを与えてくれないため、結局は自分の頭の中でプログラムの動きを把握しなければなりませんでした。</p><p>Visual Studioは、この深い理解を提供しています。フルプログラム解析を使えば、最初に初期化されてからの変数を、それらが使われている全ての場所で追跡可能です。任意の変数をマウスオーバーして、その時点でそれがどういう型の役割を持つかを見たり、そのメンバーを順に見ていったりできます。</p><p><img style="float: none; margin-left: auto; display: block; margin-right: auto; border: 0px;" title="Hover over to see types or dot-through to see members" src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-29-92-metablogapi/0871.VS2015RTMWhyPythoninVS1Hoverovertoseetypesordotthroughtoseemembers_5F00_thumb_5F00_0DD0D379.png" alt="Hover over to see types or dot-through to see members" width="644" height="107" border="0"></p><p>解析を一般的なPythonのパターンに最適化するのに、私たちは多大な時間を費やしました。以下にいくつか挙げるので試してみてください。</p><p>インテリセンスと同じく、Pythonでのインタラクティブなデバッグはかなり最近の開発です。Pythonを使う開発者は元々、エディタと交互にターミナルやコマンドプロンプトをよく使ってきたため、初期のコマンドラインデバッガは、このワークフローに沿って開発されました。例えば以下のようなものです。</p><p><img style="float: none; margin-left: auto; display: block; margin-right: auto; border: 0px;" title="Early Debugging" src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-29-92-metablogapi/5734.EarlyDebuggingOLD_5F00_3CF0EBC6.png" alt="Early Debugging" width="640" height="381" border="0"></p><p>小さなプロジェクトであれば、この種のデバッギングでも問題ないでしょう。ただ、こういう形でコードを処理していくと混乱が生じ、複雑なプロジェクトなどでは非常に効率が悪くなってしまいます。対照的にVisual Studioでは、エディタのコードにデバッグ・インタフェースを直接オーバーレイするため、ブレークポイントや現在の状態、コールスタックなどを同一のコンテキストで確認することが可能です。</p><p><img style="float: none; margin-left: auto; display: block; margin-right: auto; border: 0px;" title="Debugging with Visual Studio" src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-29-92-metablogapi/6663.VS2015RTMWhyPythoninVS3DebuggingwithVisualStudio_5F00_thumb_5F00_3747A56A.png" alt="Debugging with Visual Studio" width="604" height="378" border="0"></p><p>カスタマイズ可能なウォッチウィンドウやフロート表示は自動的に更新されるため、逐一所定の要求をしなくても常に値を追跡できます。コールスタックへのアクセスも簡単で、現在の状態につながる変数を確認するのも容易です。</p><p>何よりいいのは、このデバッグがPythonの標準インターフェースを使って行われることです。特別なPythonを入手する必要はありませんし、コードは<a href="https://github.com/Microsoft/PTVS/wiki/Cross-Platform-Remote-Debugging" rel="nofollow" title="" class="ext-link">Windowsや他のプラットフォーム</a>でも動きます。また、最近のCPythonのバージョンで一部の非標準的なインターフェースも使用できるため、<a href="https://github.com/Microsoft/PTVS/wiki/Mixed-Mode-Debugging" rel="nofollow" title="" class="ext-link">ネイティブ/Pythonの混合</a>デバッグが可能となり、C/C++とPythonのコードをStep Inを押すのと同じくらい容易さで移動できるようになりました。キーボード指向の操作がお好みの場合は、<a href="https://github.com/Microsoft/PTVS/wiki/Debugging#the-debug-interactive-window" rel="nofollow" title="" class="ext-link">デバッグインタラクティブウィンドウ</a>を使うことでそれが可能です。</p><p>大きいプロジェクトの「大きさ」の度合いは人それぞれ感じ方が違うでしょう。100ファイルは大きいですか？　クラスが1000あればどうでしょう？　1万行のコードは？　その目安がどうであれ、プロジェクトが大きくなるにつれて、安全に変更を加えその更新をチームと共有しなければならないといった具合に、その困難の度合いも大きくなっていきます。</p><p>プロジェクトにおいて何が必要かは優れたインテリセンスが示してくれますが、それはまた、単にグローバル検索するよりももっと優秀な形でクラスや関数のリファレンスを見つけるサポートもしてくれます。<a href="https://github.com/Microsoft/PTVS/wiki/Editor-Features#go-to-definition" rel="nofollow" title="" class="ext-link">Go To Definition</a>と<a href="https://github.com/Microsoft/PTVS/wiki/Editor-Features#find-all-references" rel="nofollow" title="" class="ext-link">Find All References</a>はコードをナビゲートするのにうってつけのツールです。そして<a href="https://github.com/Microsoft/PTVS/wiki/Editor-Features#navigate-to" rel="nofollow" title="" class="ext-link">Navigate To</a>は、スマートフィルタリングでファイルやクラス、関数などを見つける手助けをしてくれます。</p><p><img style="float: none; margin-left: auto; display: block; margin-right: auto; border: 0px;" title="Tools to navigate large projects" src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-29-92-metablogapi/3124.VS2015RTMWhyPythoninVS4Toolstonavigatelargeprojects_5F00_thumb_5F00_77118BEF.png" alt="Tools to navigate large projects" width="604" height="400" border="0"></p><p><a href="https://www.visualstudio.com/products/what-is-visual-studio-online-vs" rel="nofollow" title="" class="ext-link">Visual Studio Online</a>では、アプリケーションが管理できます。その機能はTFSやGitバージョン管理、インタラクティブなコードレビュー、オンラインの予定ダッシュボード、チームルーム、ホストテスト、ビルド、デプロイサービス、サードパーティーのサービスとの統合など多種多様で、これら全ての機能がVisual Studio内で、<a href="https://www.visualstudio.com/en-us/products/team-explorer-everywhere-vs.aspx" rel="nofollow" title="" class="ext-link">EclipseのTeam Explorer Everywhereプラグイン</a>または各種Webブラウザを通じて、直接Pythonのプロジェクトに対して利用可能です。つまりPythonのみならずその他の言語によるプロジェクト管理でも、Visual Studioを使うと、たとえそのプロジェクトが100行のコードであろうと100万行のコードであろうと、チームの足並みをそろえることができるというわけです。</p><p>Pythonのコードの多くはオープンソースです。Pythonをお使いであれば、フリーの<a href="https://www.visualstudio.com/products/visual-studio-community-vs" rel="nofollow" title="" class="ext-link">Visual Studio 2015 Community Edition</a>を入手してみてください。あるいは雇用主や学校を通じて、<a href="http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200661214" rel="nofollow" title="" class="ext-link">Visual Studio 2015</a> ProfessionalやEnterpriseを入手してもいいでしょう。いずれにしてもPython Tools for Visual StudioはVisual Studioのセットアップで直接利用できるようになるため、個別にダウンロードしてインストールする必要はありません。</p><p><img style="float: none; margin-left: auto; display: block; margin-right: auto; border: 0px;" title="Visual Studio Community 2015 Setup" src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-29-92-metablogapi/6305.VS2015RTMWhyPythoninVS5_5F00_35D1AF4E.png" alt="Visual Studio Community 2015 Setup" width="454" height="634" border="0"></p><p><a href="https://github.com/Microsoft/PTVS/releases/v2.2" rel="nofollow" title="" class="ext-link">リリースページ</a>には、インストーラの他、サンプルパックや機能拡張もあります。もしVisual Studio 2015 Express for WebやExpress for Desktopを使いたい場合は、こちらのリリースページでインストーラを入手してください。</p><p>最後に、PTVSはフリーのオープンソースプロジェクトで、コミュニティーへのコントリビューションは歓迎します。私たちの<a href="https://github.com/Microsoft/PTVS/" rel="nofollow" title="" class="ext-link">github</a>のページをご覧いただき、フィードバックや質問などありましたらぜひお寄せください。また、公式リリース前の最新機能もぜひお試しいただければと思います。</p>
