Everything you need to know about Vim by Marco Hinz(訳注: 2016/2/26、記事タイトルを変更いたしました。)特定のトピックについての記述をご希望ですか？ Issueを立てるか、Twitterで私までお知らせください！ありがとう！Vimには、特殊なレイアウトのテキストファイル群から成る素晴らしいヘルプ文書が付属しています。Vimはタグをベースとするシステムを使って、これらのヘルプファイルの特定の部分にアクセスします。まず始めに:help :helpを実行し、読んでください。新しいウィンドウで$VIMRUNTIME/doc/helphelp.txtというファイルが開いて、ファイル内の:helpタグに移動します。簡単なルールがいくつかあります。&lt;c-d&gt;（ctrlキー + dキー）を使えば、入力したクエリに一致する全てのタグのリストが出力されます。例えば、:h tab&lt;c-d&gt;と入力すると、tabの項の'softtabstop'からsetting-guitablabelまで全てのタグがリスト出力されます。VimLの関数全部のリストが欲しければ簡単です。:h ()&lt;c-d&gt;。ウィンドウは別なほうがよければ、:h win*()&lt;c-d&gt;です。ヘルプはすぐにうまく使えるようになりますが、特に最初のうちは、どんなタグを探せばいいのか見当がつかない時もあるでしょう。そんな時は関係のありそうなキーワードをいくつか思い浮かべてください。:helpgrepが役に立ちます！このコマンドで、全てのドキュメントファイルから “backwards”という単語を探し、最初にヒットした箇所に移動します。検索結果はQuickfixリストの形に集約されます。:cn/:cpを使えば、次の/前の結果に移動します。または:copenでQuickfixリストをウィンドウ表示にして、&lt;cr&gt;を入力すればヒットした行に移動します。全容は:h quickfixを参照してください。

次のリストは、Vim開発者の中でも活動的な@chrisbraによってまとめられ、vim_devに掲載されています。若干の変更を加えてここに掲載しています。探しているものが分かっていれば、ヘルプの検索を使った方が大抵の場合は簡単に見つかります。項目はスタイルガイドに沿って分類されています。持っているVimのバージョンのヘルプで検索できるので、持っているバージョンより古いヘルプ項目や新しいヘルプ項目が検索結果に出ることはありません。そのため、ヘルプの使い方やヘルプで使用されている言語を覚える必要があります。いくつか例を挙げます（内容的に不完全あるいは書き忘れたことがあるかもしれません）。さらに、存在する場合は、ユーザドキュメント(多くの場合、コマンドの説明はユーザ視点からのものが多く、詳しく書かれているものは少ない)へのリンクはヘルプページの一番上に記載されています。:h pattern.txtでユーザマニュアルの項目である:h 03.9と:h usr_27を見ることができます。

どうしても解決のできない問題があったり、一般的な情報が必要だったりする場合は、vim_useのメールリストを参照してください。別の素晴らしい資料としては、IRCがあります。Freenodeの#vimチャンネルを使用している人が多く、役立つ情報を多く得ることができます。Vimのバグの報告はvim_devメールリストを使ってください。、

GUIサポートのないVimをUNIXシステムで使用する際に、'clipboard'オプションを使用する場合は、+clipboard、そして随意で+xterm_clipboard 機能 が必要となります。関連するヘルプ：記事後半の括弧付きペースト（なぜいつも”paste”を設定しなくてはならないのか）も参照してください。

Windowsにはclipboard機能があります。OSXにはpasteboard機能があります。両方ともユーザが期待するような機能です。コピーしたいテキストをctrl+c/cmd+cで選択し、ctrl+v/cmd+vで別のアプリケーションにペースト（貼り付け）できます。コピーされたテキストはクリップボートに移されるため、コピー元のアプリケーションを他のアプリケーションにペーストする前に閉じても問題はないことを覚えておいてください。この作業の時、クリップボードレジスタの*には選択範囲の文字列が入ります。Vimからは、"*yや"*pを使ってクリップボートにあるテキストをヤンク・ペーストしてください。常に*レジスタを指定したくない場合は、次をvimrcに入れてください。通常、ヤンク/削除/貼り付け機能の場合、"レジスタが使われます。この場合、*レジスタが同じ機能に使用されるため、yやpと入力するだけで十分になります。繰り返しになりますが、上のオプションを使用することで、同じVimのウィンドウで使用する場合でも、全てのヤンク・ペーストでクリップボードは変更されます。これが便利かどうかは使い手次第です。yとタイプするのさえ面倒な人は、設定を次のようにすることで全てのビジュアル選択をクリップボードに送ることができます。関連するヘルプファイル：

お使いのOSがXの場合、クリップボートの使い方は若干変わってきます。XはX Window System Protocolのオープンソース実装で、1987年から提供されており、現在バージョン11が提供されています。そのため、X11とも呼ばれます。以前、X10のバージョンでカットバッファが導入されました。これは、クリップボードのようなもので、コピーされたテキストはXによって格納され、全てのアプリケーションからアクセスが可能でした。この仕組みは今でもXに存在しますが、今では使用が反対され、多くのソフトウェアではもう使用されていません。現在はアプリケーション間のデータの移動は、セレクション機能で実行されます。定義された3つのセレクションアトムの中でも、実際使用されているのはプライマリ選択とクリップボード選択の2つのみです。この2つのセレクションは次のように機能します。

注：セレクションがXサーバに格納されることは絶対にありません（クリップボードセレクションでさえ格納されません）。そのため、アプリケーションを終了するとctrl+cでコピーしたものは失われます。"*pを使用してプライマリ選択したものをペーストするか、"+y1Gを使用して、クリップボード選択へファイル全体をヤンクしてください。もし、この2つのレジスタにアクセスする頻度が高い場合は、次を使うのも良いでしょう。(^=はデフォルト値の:h :set^=を追加するときに使います)これで全てのヤンク/削除/貼り付け機能は、無名の"レジスタの代わりに*か+で使用することができます。これによって、後でyやpでX選択に簡単にアクセスすることができます。関連するヘルプ：

この機能がないと、ファイルを開くとカーソル位置は一行目に戻ります。この機能があれば、カーソルの位置はファイルを閉じる前に作業していたところに復元します。次をvimrcに追加してください。これを追加することで、作業していた場所が存在すれば（他のプログラムによってファイルの行数が減っている場合があります）、g`"（ジャンプリストを変更することなく、最後に作業していた場所にカーソルが移動します）が実行されます。これをするには、:h viminfo-'というviminfoファイルを使用する必要があります。

オプションによっては、Vimは最大で4つの作業ファイルを作成します。バックアップファイルVimに元のファイルをバックアップするように指定できます。デフォルトでVimはバックアップを自動的に作成しますが、元のファイルの書き込みが成功するとバックアップを削除してしまいます(:set writebackup)。最新のバックアップファイルを取っておく場合は、:set backupを使います。あるいは、:set nobackup nowritebackupでバックアップを作成しないよう設定することもできます。では、私が最後にvimrcに追加したものを見てみましょう。関連するヘルプ：:h backupスワップファイル例えば、最高のサイエンスフィクション小説を書くアイデアが浮かんだとします。何時間も没頭して何千のも文字を書き続けて、停電になってしまったとします。そして、~/wicked_alien_invaders_from_outer_space.txtを保存していなかったことに気が付きます。絶望的ではないのでご安心を。ファイルを編集する際、Vimはオリジナルに保存されていない変更箇所を保持するスワップファイルを作成します。試してみましょう。ファイルを開いてみて:swapnameで現在のスワップファイルがあることを確かめてみてください。:set noswapfileをvimrcに追加することでスワップファイルも作成されないよう設定できます。デフォルトで、スワップファイルは編集したファイルと同じディレクトリに.file.swpのような名前で作成されます。スワップファイルの更新は200文字が変更された場合または4秒間タイプしていない場合にされます。ファイルの編集が終了するとスワップファイルは削除されます。更新の設定は:h 'updatecount'や:h 'updatetime'を使用して変更することが可能です。停電のせいでスワップファイルは削除されることはありませんでした。Vimで~/wicked_alien_invaders_from_outer_space.txtを入力すれば、Vimはファイルを復元してくれます。関連するヘルプ：:h swap-file and :h usr_11アンドゥファイルアンドゥファイルはメモリに格納され、Vimを終了すると削除されます。残しておきたい場合は、:set undofileにします。すると、~/foo.c.un~にアンドゥファイルを~/foo.cとして保存することができます。関連するヘルプ：:h 'undofile'および:h undo-persistenceViminfoファイルバックアップファイルやスワップファイル、アンドゥファイルはどれもテキストの状態に関するものでした。viminfoファイルはそれ以外のもの、Vimを終了すると失われてしまうものを保存するために使用します。viminfoファイルには履歴（コマンドライン、検索、入力）、レジスタ、マーク、バッファリスト、グローバル変数などが格納されます。デフォルトでviminfoは~/.viminfoに書き込まれるよう設定されています。関連するヘルプ：:h viminfoおよび:h 'viminfo'私のように、上記全てのファイルを同じ場所、例えば~/.vim/filesに格納したい場合は次のとおりです。~/.vim/filesディレクトリは前もって作成する必要があります。作成しておかないとエラーが生じます。頻繁に新しいホストで作業をする場合は、これを自動化した方がいいでしょう。注：共有のシステムで編集をしていて、スワップファイルがすでにあるとVimが知らせてきた場合、他の人がファイルを編集している最中であることを意味します。この”機能”は、スワップファイルをホームディレクトリに保存してしまうと失われてしまいます。


Vimにはリモートファイルの編集を可能にするnetrwプラグインが付いてきます。実際には、リモートファイルをローカルtempファイルにscp経由で移動し、そのファイルを使用してバッファを開き、変更をリモートファイルに書き込み、保存します。これは、ローカル設定で使用したい場合は、サーバにSSHしたり、管理者に指示されたものを使ったりするよりも、遥かに便利です。~/.ssh/configがすでに設定されている場合は、自動的に次のことが実行されます。これが、~/.ssh/configの中にあれば、下も可能です。~/.netrc, see :h netrw-netrcを使用しても同じようなことができます。:h netrw-ssh-hackと:h g:netrw_ssh_cmdは必ず読むようにしてください。また、FUSE を使用するsshfsを使用してリモートファイルシステムをローカルファイルシステムに搭載する方法もあります。

Pathogenは、プラグインを管理するための最初の人気のあるツールです。実際に行っていることは、全てを適したディレクトリの下に含めるようにランタイムパス（:h 'rtp'）を調整する、というものです。プラグインのレポジトリを、自分の手でクローニングしなくてはいけません。実際のプラグインマネージャはVimの中からプラグインをインストールしアップデートするコマンドを提供します。以下に挙げるのは、一般的に使われるマネージャのリストをアルファベット順に並べたものです。私のお気に入りはplugです。でも皆さんの役に立つのは、様々かもしれません。

これは複数の連続した行に、同じテキストを同時に挿入するテクニックです。こちらのデモを見てください。&lt;c-v&gt;でビジュアルブロックモードに切り換えます。その後、数行ほど下へ移動したら、IあるいはAを押して、テキストを入力し始めましょう。最初は少し当惑するかもしれませんが、テキストはいつも現在の行に挿入され、現行の挿入が終わった後にだけ、先のビジュアルセレクションの行すべてに同じテキストが適用されます。簡単な例としては、&lt;c-v&gt;3jItext&lt;esc&gt;になります。もしも異なる長さの行があり、各行の終わりに同じテキストを付け加えたいのなら、次のことを実行しましょう。&lt;c-v&gt;3j$Atext&lt;esc&gt;時には、現在の行の終わりのどこかにカーソルを置く必要があることもあります。これはデフォルトでは行えませんが、オプションのVirtualeditを設定することができます。その後で、行の最後であっても$10l あるいは90|が働きます。さらに情報が欲しい方は、:h blockwise-examplesを参照してください。最初は複雑に思えるかもしれませんが、すぐに習慣づくでしょう。もしも本当に手の込んだものがお望みなら、マルチカーソルを見てみましょう。

免責事項：Vimはシングルスレッドなので、外部のプログラムをフォアグラウンド処理で実行すれば、他のものも全部ブロックされてしまいます。もちろん、LuaなどのVimのプログラミングインターフェースや、そのスレッドのサポートを使うことができます。しかしそれでも、その間Vimのプロセスはブロックされます。Neovimは適したジョブAPIを加えることで、この問題を解決します。（どうやらBramはVimにもジョブコントロールを加えることを検討しているようです。最新のバージョンを持っているなら、:helpgrep startjobを見てください。）ジョブを始めるために、:!を使いましょう。現在稼働しているディレクトリでファイルをリスト化したいのなら、:!lsを使いましょう。通常どおりシェルの中で命令するためには、|を使います。例えば、:!ls -1 | sort | tail -n5のような感じです。範囲がないのなら、:!のアウトプットはスクロールできるウィンドウで見られるでしょう。その一方、範囲が与えられているのなら、これらの行はフィルタにになるでしょう。つまり、フィルタプログラム上で標準入力によって命令されているということです。そして処理はフィルタの標準出力によって置き換えられます。例えば、次の5行のために数字を用意するためには、次を使いましょう。:.,+4!nl -ba -w1 -s' '手動で範囲を加えることはかなり面倒なので、Vimは便利なヘルパーも用意しています。範囲にはよくあることですが、ビジュアルモードで行を選択することもでき、それから：をヒットします。また、動作を行う!オペレータもあります。例えば、!ip!sortは、現在のパラグラフの行をソートします。フィルタリングの良いユースケースとしては、Go programming languageがあります。このインデントは独断的ですが、Goのソースコードを適切にインデントするgofmtと呼ばれるフィルタも付いてきます。ですからGoのためのプラグインは、しばしば:Fmtと呼ばれるヘルパーコマンドを提供します。それは基本的には:%!gofmtを行い、ファイルの全ての行をインデントします。現在の行より下でプログラムのアウトプットを取り出すために、しばしば:r !progが使われます。これはスクリプトには問題ありませんが、実行中の場合には代わりに:r !progを使う方が簡単だと思います。これは現行の行と置き換わるものです。

VimはC言語内で書かれたものなので、多くの特徴はC言語に似た構文と考えられます。デフォルトでは、カーソルが{あるいは#endifにある時、%を使ってそれぞれ対応する}や#ifdefにジャンプすることができます。Vimにはmatchit.vimと呼ばれるプラグインがバンドルされています。デフォルトでは有効になっていません。また、%をHTMLタグに循環させ、VimLなどでifやelse、endifなどを構築し、新しいコマンドをいくつか導入します。プラグインを常に読み込むには、vimrcに以下を追加しましょう。Matchitのドキュメンテーションはかなり広範囲に渡るので、次のものも1回試してみることをお勧めします。これでプラグインを使う準備ができました。サポートされているコマンドは:h matchit-introを、サポートされている言語は:h matchit-languagesを参照してください。対応したペアを定義するのは簡単です。その後で、%（前）やg%（後ろ）を使うことで、Pythonmのどのファイルでもこの3つのステートメントを循環させることができます。関連するヘルプ
