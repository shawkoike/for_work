<p><a href="https://bourgeois.me/rest/" rel="nofollow" title="" class="ext-link">Some REST best practices</a> （2014-11-15） by <a href="https://bourgeois.me/" rel="nofollow" title="" class="ext-link">Pierre-Olivier Bourgeois</a></p><p>現在ではREST APIはとても一般的な話題です。ほとんどすべてのWebアプリケーションの一部分となっています。シンプルで一貫性があり実際的なインターフェースは必須です。これは皆さんのAPIを他の人が使うことをとても容易にします。皆さんにとってはRESTの実践が日常的に感じられるかもしれませんが、RESTをあまり尊重しない人々もよく見かけます。これがRESTについて投稿するきっかけでした。</p><p>この記事にはRESTfulなAPIを設計する時に考慮すべきベストプラクティスがあります。</p><p><em>注意</em>: ここでのベストプラクティスは、私が過去の経験に基づいて良いと考える事例です。もし違う考えをお持ちであれば、お気軽にメールをくだされば意見交換できると思います。</p><p>APIのバージョンは必須であるべきです。これがあると時間が経ってAPIが変わっても影響を受けません。その方法の1つはURLでAPIのバージョンを渡すことです（<code>/api/v1/...</code>）。</p><p>もう1つのうまいトリックは希望するバージョンを渡す<code>Accept</code> HTTPヘッダの利用です。<a href="https://developer.github.com/v3/media/#request-specific-version" rel="nofollow" title="" class="ext-link">Githubはそうしています</a>。</p><p>バージョンを利用すれば古いクライアントとの互換性を損なわずにAPI構造を変更できるようになります。</p><p>私がよく見かけるのはリソース名の中に名詞の代わりに動詞を使っている人々です。以下は悪い例です。</p><p>クリーンで一貫性のある構造のために、常に名詞を使うべきです。さらに、HTTPメソッドをうまく使えばリソース名からアクションを取り除けるようになります。以下はもっとすっきりした例です。</p><p>私の考えでは、単一のリソースを命名する時に、単数形と複数形を混ぜることはあまり良い考えではありません。すぐに混乱して一貫性がなくなる可能性があります。</p><p>表示・削除・更新のアクションであっても、<code>/artist</code>の代わりに<code>/artists</code>を使いましょう。</p><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" rel="nofollow" title="" class="ext-link">RFC2616</a>は<code>HEAD</code>と<code>GET</code>メソッドが常に安全に呼び出されるべきだと明記しています（言い換えれば、この記述は変更されるべきではありません）。</p><p>これは悪い例です。<code>GET /deleteProduct?id=1</code></p><p>もし検索エンジンがそのページをインデックスしたらどうなるでしょうか。</p><p>もしサブコレクション（他のもののコレクション）を取得したいなら、クリーンな設計のためにも入れ子になったルーチンを使いましょう。例えば、あるアーティストの全アルバムのリストを手に入れたいなら、以下のようにします。</p><p>HTTPを使って非常に大きな結果セットを返すのもあまり良い考えではありません。大規模なJSONのシリアライズはすぐにコストがかかるようになるかもしれないので、結局はパフォーマンスの問題にぶつかることになります。</p><p>その回避策は結果のページングでしょう。FacebookやTwitter、Githubなどではそれが行われています。完了までにあまり時間がかからない呼び出しをたくさん行う方が、実行するのが非常に遅い大きな呼び出し1つよりはるかに効率的です。</p><p>また、ページネーションを使用している場合、次と前のページのリンクを示すのにいい方法は<code>Link</code> HTTPヘッダを通して行うことです。<a href="https://developer.github.com/guides/traversing-with-pagination/" rel="nofollow" title="" class="ext-link">Githubではそれも行われています</a>。</p><p>コンテンツを返す際には（リクエストが成功してもしなくても）常に適切なHTTPステータスコードを使用してください。皆さんが自分のアプリケーションで使いたいと思う可能性のある一般的なコードを手短にまとめました。</p><p>ステータスコードのもっと詳しいリストは<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" rel="nofollow" title="" class="ext-link">RFC2616</a>にあります。</p><p>例外が発生した時は、エラーが記述された一貫性のあるペイロードを常に返すべきです。そうすることで、他の人がエラーメッセージをもっと解析しやすくなります（どんなエラーでも構造は常に同じになります）。</p><p>私がWebアプリケーションでよく使っている1つをご紹介します。明確かつ単純で自己記述的なものです。</p>
