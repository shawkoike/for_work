<p><a href="http://jaredonline.svbtle.com/creating-a-php-extension-in-rust" rel="nofollow" title="" class="ext-link">Creating a PHP extension in Rust</a>(2015-04-04)By<a href="http://jaredonline.svbtle.com/" rel="nofollow" title="" class="ext-link">JARED MCFARLAND</a></p><p><em>アップデート</em>：この記事の第一稿を投稿してから数時間後、PHPのベンチマークが機能していないことに気付きました。ですから万全を期すため、PHPとRustの双方のバージョンを更新しました。変更箇所は、GitHub（最後にリンクあり）にまとめて載せてあります。</p><p>昨年10月、私は<a href="https://www.etsy.com/" rel="nofollow" title="" class="ext-link">Etsy</a>の<a href="https://twitter.com/jordanorelli" rel="nofollow" title="" class="ext-link">とある同僚</a>と、どうやったらPHPやRuby、Pythonといったインタプリタ型言語で今よりずっと簡単にエクステンションが書けるかについて議論しました。うまく書けない原因の1つとして、エクステンションは概してCで書かれますが、Cに長けているのでなければ自信を持ってコードを書くのは難しい、といったことなどを話しました。</p><p>あれ以来、私はずっとRustでエクステンションを書く方法を模索し、ここ数日は実際にあれこれ試してみました。そして今朝、ついにうまくいったのです。</p><p>私の基本的なアイデアは、ライブラリ形式にコンパイルしたRustのコードをいくつか書き、そこにCのヘッダをつけ、Cでそれを用いることでPHPから呼び出せるエクステンションを作る、というものでした。世界一簡単な方法というわけではありませんが、面白そうだと感じました。</p><p>私が最初に行ったのは、RustにCと互換性を持たせることができるRust Foreign Function Interface（FFI）をいじることでした。1つだけの引数（Cのchar型、他の言語ではstring型と呼ばれるデータ型のポインタ）を持つ<code>hello_from_rust</code>という1つのメソッドを使って簡単なライブラリを書きました。このメソッドは、入力したものの前に“Hello form Rust,”を加えて出力します。</p><p>このコードの大部分は、<a href="http://mainisusuallyafunction.blogspot.jp/2014/08/calling-rust-library-from-c-or-anything.html" rel="nofollow" title="" class="ext-link">『Calling a Rust library from C (or anything else!)』</a>を参考にしました。ここで起こっていることを、うまく説明しています。</p><p>これをコンパイルすると、<code>.a</code>のファイルである<code>libhello_from_rust.a</code>が得られます。これはスタティックライブラリで、自身の依存関係は全てこの中に含まれています。そして次に行いますが、Cのプログラムをコンパイルする時、そこにリンクすることができます。これをコンパイルすると次のように出力されることに注目してください。</p><p>これはRustのコンパイラで、この依存関係を使う時に他に何とリンクする必要があるかを教えてくれます。</p><p>ライブラリができたので、次はこれをCから呼び出せるようにするために、2つのことを行わなくてはなりません。まずは、Cのヘッダファイル<code>hello_from_rust.h</code>を作り、コンパイルする時にリンクさせる必要があります。</p><p>ヘッダファイルは次のようになります。</p><p>これはかなり基本的なヘッダファイルであり、1つの関数についてのみシグネチャと定義を提供します。そして、次に書く必要があるのはCのプログラムコードです。</p><p>そしてコンパイルを実行します。</p><p>文末に<code>-lSystem -lpthread -lc -lm</code>と付けます。そうやってRustコンパイラでRustのライブラリをコンパイルした際に生じる”ネイティブアーティファクト”に対して、それぞれリンクするようにgccに指示を出しています。</p><p>生成されるバイナリを一度実行してしまえば、<code>hello_c</code>は次のように実行できます。</p><p>素晴らしい！CからRustのライブラリを呼び出せました。そこで次の課題は、これをどうやってPHPエクステンションに組み込むかです。</p><p>この問題を解決するのにはかなり時間を費やしました。というのも、PHPエクステンションについてのマニュアルがあまり優れていないのです。ただ、PHPソースにext_skel（おそらく”エクステンションスケルトン”の意味）というスクリプトが既に入っていることには助かりました。このスクリプトを使えば、必要なボイラープレートコードをほとんど生成することができます。これを実装するために私は<a href="http://php.net/manual/en/internals2.structure.php" rel="nofollow" title="" class="ext-link">PHPマニュアルの『Extension structure』</a>をかなり読み込みました。</p><p>まず手始めにPHPソースをダウンロード、解凍し、そしてPHPディレクトリに移動して実行してみましょう。</p><p>このようにしてPHPエクステンションを作成するために必要になる基本的なスケルトンが生成されます。そしてこのフォルダを、エクステンションを格納したいローカルディレクトリに移し、以下の</p><p>を同じディレクトリに移動させます。そうすることで、最終的にディレクトリの中身はこのようになります。</p><p>これらのほとんどのファイルについては<a href="http://php.net/manual/en/internals2.structure.files.php" rel="nofollow" title="" class="ext-link">PHPマニュアルの『Files which make up an extension』</a>で分かりやすく解説してあります。それでは、<code>config.m4</code>の編集から始めていきます。</p><p>コメントは全て省略していますが、こちらが私の組んだコードになります。</p><p>分かったことは、これらは基本的にマクロだということです。これらのマクロについてのマニュアルはかなりひどかったです（例えば、Googleで”PHP_ADD_LIBRARY_WITH_PATH”と検索してもPHPチームが書いた文章が最初の検索結果ページに出てきません）。私はPHPエクステンションにスタティックライブラリをリンクさせる方法について話している古いスレッドを見つけ、<code>PHP_ADD_LIBRARY_PATH</code>のマクロに辿り着きました。それ以外のマクロについては<code>ext_skel</code>を実行した際に生成されるコメントが勧めていたものを使用しています。</p><p>ビルド設定をセットアップできたので、次はPHPスクリプトを使ってライブラリに呼び出す必要があります。そうするために、自動的に生成される<code>hello_from_rust.c</code>というファイルを修正していきます。まず、<code>hello_from_rust.h</code>というヘッダファイルをインクルードするようにし、<code>confirm_hello_from_rust_compiled</code>というPHPメソッドの定義を修正します。</p><p><code>hello_from_rust("Jared (fromPHP!!)!");</code>をここに挿入しました。</p><p>これで、PHPエクステンションの構築に取り掛かれます。</p><p>たったのこれだけです！この3行のコードで、まずメタコンフィグを生成し、Makeという設定コマンドを実行し、そしてエクステンションをインストールします。私の場合はここでsudoをインストールに使う必要がありました。なぜなら私のユーザは、直接PHPエクステンションをインストールできる権限を持っている訳ではないからです。</p><p>さあ、実行してみましょう！　</p><p>成功です！PHPは確かにCで作ったエクステンションにアクセスし、利用可能なメソッドや呼び出しのリストを確認しています。そしてこのCエクステンションがRustのライブラリにアクセスし、私たちが最初に作った文字列をPHPに出力しました。すばらしいです！しかし最後にセグメンテーション違反が表示されていますが、これはどういうことでしょう？　</p><p>私に分かる限りでは、この問題はRustの<code>println!</code>というマクロを使ったことに関係しているようですが、現時点ではまだ掘り下げて確認していません。でもこのマクロを削除し、代わりにRustライブラリから<code>char*</code>を返すように変更すれば、セグメンテーション違反は無くなります。</p><p>こちらがそのRustのコードです。</p><p>そして、Cヘッダを次のように変更します。</p><p>これに伴い、Cエクステンションも次のように変わります。</p><p>さて、なぜこんな方法を使う必要があるのでしょうか？正直に言いますと私はまだ、実世界でこの方法が必要になるケースに遭遇したことはありません。でも、PHPエクステンションがまさに適切な事例は思い当たります。フィボナッチ数列に関するアルゴリズムです。これは大体の場合、かなり簡潔で分かりやすいアルゴリズムです（以下、Rubyによる例です）。</p><p>性能に関しては、本当にひどいものになりますが、再帰を使わなければパフォーマンスは向上します。</p><p>では1つはPHPだけで、もう1つはRustも使って2つの例文を書き、どちらが速いか比べてみましょう。こちらがPHPだけのバージョンです。</p><p>こちらが実行時間の結果です。</p><p>Rustを使ったバージョンでも試しましょう。こちらがライブラリのソースです。</p><p>コードを軽く確認してみましょう。私は<code>rustc -O rust_lib.rs</code>を使って、このライブラリを最適化できるようにコンパイルしました。（パフォーマンスをベンチマーキングするためにです）。こちらがCエクステンションのソースです。（関連する部分のみ抜粋しました）。</p><p>実行に必要なPHPのスクリプトは以下の通りです。</p><p>そしてこちらが結果です。</p><p>3倍以上も速くなっていることが分かりますね！Rustバージョンにとっての素敵なマイクロベンチマークでした！</p><p>この記事から導くことができる結論といったものはほとんどありません。Rustを使ってPHPエクステンションを書くことが適切な場面が本当にあるのか、正直わかりません。でもまあ、RustとPHPとCに数時間熱中できる楽しい試みでした。</p><p>もし全てのコードを確認してご自身で試してみたければ、<a href="https://github.com/jaredonline/rust-php-c" rel="nofollow" title="" class="ext-link">GitHubにまとめました</a>ので、アクセスしてみてください。</p>
