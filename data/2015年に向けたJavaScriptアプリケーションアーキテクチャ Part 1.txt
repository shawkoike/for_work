<p><a href="https://medium.com/@addyosmani/javascript-application-architecture-on-the-road-to-2015-d8125811101b" rel="nofollow" title="" class="ext-link">JavaScript Application Architecture On The Road To 2015</a> （2014-12-15） by <a href="http://www.addyosmani.com" rel="nofollow" title="" class="ext-link">Addy Osmani</a><br>
Addy Osmani<br>
Googleのエンジニア。ChromeとPolymerチームと共に働く。TodoMVC、<a href="http://twitter.com/Yeoman" rel="nofollow" title="" class="ext-link">@Yeoman</a>、Web Starter Kitその他の作者。Webツールに情熱をかたむけている。</p><p>私はかつて自分はアーキテクトだと名乗ったことがあります。これを裏付けるため、今やウソだらけの複雑な話を設計しなくてはならなくなっているので、ある意味これは本当のことですね。冗談はさておき、2015年を目前としてJavaScriptコミュニティのアプリケーションアーキテクチャの状況について目を向けてみるのは有益なことだと思います。合成、関数型の境界、モジュラリティ、不変データ構造、CSPのチャネルと、その他に関連するいくつかのトピックについて書いてみたいと思います。</p><p>アーキテクチャのレベルでは、JavaScriptで大規模なアプリケーションを作成する方法に関してここ数年で少なくとも一つの根本的な変更がありました。機械の細かい違いにより生み出される単一指向性の<strong>データバインディング、不変データ構造と、仮想DOM</strong>（どれも興味深い問題ですね）などを除けば、多くの開発者が一つのキーコンセプトに自然に収束してきたように見えます。それが<strong>合成</strong>です。合成は非常にパワフルで、再利用可能な機能のパーツをまとめて、より大きなアプリケーションを”合成”することを可能にします。合成は<a href="http://addyosmani.com/first/" rel="nofollow" title="" class="ext-link">モジュール化</a>、小型でテストしやすいなど、よい状態の考え方を導いてくれますから、説得しやすくディストリビューションも楽です。では、合成がNodeに対してどれくらいうまく機能するか見てみましょう。</p><p><img class="graf-image" data-image-id="1*8fuXs-f2LJHYnEfxGKYdLA.png" data-width="2568" data-height="1456" data-action="zoom" data-action-value="1*8fuXs-f2LJHYnEfxGKYdLA.png" src="https://d262ilb51hltx0.cloudfront.net/max/1175/1*8fuXs-f2LJHYnEfxGKYdLA.png"><br>
<em>合成のモデル。アプリケーションは再利用可能なUIの小さな部品からできていて、それらのUIも拡張され再利用された既存のモジュールとライブラリからできています。</em></p><p>私たちは定期的にReact”コンポーネント”について、”Ember.Component”について、Angular Directive、Polymer要素と、もちろんストレートにWebコンポｰネントの要素などについて話すことがありますが、その理由の一つが「合成」について知ってもらいたいからです。これらのさまざまな特性のコンポーネント周りのフレームワークやライブラリについてあれこれ言うことはあるかもしれませんが、合成そのものが悪だという議論をするつもりはありません。注：JSフレームワークのゲーム（Dojo、YUI、ExtJSなど）の初期のプレーヤーたちは随分前から合成を絶賛していましたが、直接、その他大勢の人たちに広くこのモデルの真のパワーをきちんと理解してもらうまでには、しばらく時間がかかりました。</p><p><strong>合成はアプリケーションが複雑化するという問題に対する、一つの解決方法です。</strong>さてWebプラットフォームの言語は、複雑性によって引き起こされたトラブルに直接呼応するように進化しています。複雑性と言ってもさまざまですが、開発者たちが過去数年どのようにWebを構築してきたかということを見通してみると共通のパターンがあり、検討する価値のある解決方法の一つとなります。だからこそ、Webコンポーネントを重視するブラウザベンダによる承認がとても重要なことなのです。もしあなたが”当社の”バージョンを絶対使わないとしても（もちろんとてもパワフルだと反論しますが）、合成が提供する解決法を利用できるくらいまで十分に理解していただければと思います。</p><p>将来、改善が見込まれる部分は、状態同期（コンポーネントDOMとモデル／サーバの状態を同期する）の周辺と、合成の境界の実力の利用についてです。</p><p>Web上の合成について話しておいて <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/" rel="nofollow" title="" class="ext-link">Shadow DOM</a>の境界について話さなければ不公平でしょう（もう少し私の話につきあってくださいね）。この機能については、昔ながらの汎用HTMLで構成したウィジェット間に機能的な境界を提供してくれるものだと考えるのがいいでしょう。この機能は一つのウィジェットツリーがどこで終わって、他のウィジェットツリーがどこで始まるのかを分かりやすくし、ウィジェットがページ上でリークを起こすようなトラブルを防止してくれます。また、深いウィジェット構造がコストのかかるスタイリングルールから要素を隠すのに最適なCSSセレクタはどれかを調べてくれます。</p><p><img class="graf-image" data-image-id="1*8wTmS1mjdJ6EaaFPWkYNhg.png" data-width="2367" data-height="1617" data-action="zoom" data-action-value="1*8wTmS1mjdJ6EaaFPWkYNhg.png" src="https://d262ilb51hltx0.cloudfront.net/max/975/1*8wTmS1mjdJ6EaaFPWkYNhg.png"></p><p><em>Shadowの境界は通常のDOM（”ライトな”DOM）と、Shadow DOMを分けるバリアです。</em></p><p>あなたはまだShadow DOMに馴染みがないかもしれませんね。これは、ブラウザがDOM要素（例えばコンポーネントを表現するものなど）のサブツリーを、該当ページのメイン文書のDOMツリーではなく、文書レンダリングに加えることを許可します。これによりコンポーネント間の<strong>合成の境界</strong>を作成され、iframeに頼らなくても、コンポーネントを小型で独立した固まりだと推論させてくれます。Shadow DOMを備えたブラウザは、簡単にこの境界を越えて動くことができますが、DOM要素のサブツリーの中では、今日使っているのと同じdiv、inputとselectタグを使ってコンポーネントを合成できます。<strong>これによって、Shadow DOM内に隠されたコンポーネントの実装の詳細からページの残りを守ることができます。</strong></p><p>大昔からスコープとスタイリングを分けるために使われてきたものやiframeを使うだけの場合と比べて、Shadow DOMはどうでしょう？　最低なだけでなく、iframeは完全に別々のHTML文書を、別のHTML文書の真ん中に挿入するように設計されています。一つのiframe（完全に分けられたコンテキスト）内にあるDOM要素へのアクセスは、デフォルトで脆く、とても手間がかかるものでした。また、このメカニズムで複数のコンポーネントをページに”挿入すること”を考えてみましょう。扱いにくく意味論的に価値がないiframeタグがマークアップに散乱していますが、いずれの場合にもiframeのホストのコンテンツ用の別のURLが見つかります。合成の境界のためのShadow DOMを使用するコンポーネントは、ネイティブのHTML要素と同じくらい消費や修正が簡単です（または、そうあるべきです）。</p><p>あえて反論してみると、合成はプレゼンテーション層で生じるべきではないと感じる人もいれば（あなたの好みではないかもしれませんね）、生じるべきだと感じる人もいるでしょう。Shadow DOMを使わずにコンポーネントの合成が絶対できると言うことから始めましょう。しかしそうするためには、コンポーネントの境界について、それを実現するために抽象化を追加して、極端に規律を守らなければいけません。Shadow DOMはプラットフォームの抽象化の方法を与えてくれます。</p><p>一方で、これは元々Chromeで可能なことですし、<a href="https://hacks.mozilla.org/2014/12/mozilla-and-web-components/" rel="nofollow" title="" class="ext-link">将来的に</a>他のブラウザでもできるようになります。既存のアプローチがサポートに乗り出すのを見るのはわくわくします。例えばReactはShadow DOM向けのサポートを<a href="https://twitter.com/addyosmani/status/542775855190376448" rel="nofollow" title="" class="ext-link">追加中</a>で、近々このサービスを展開しようとしています。Polymerは既にサポートを開始しており、EmberとAngularもこのエリアについて検討されています。</p><p>コンポーネント間のコミュニケーションはどうなっているでしょう？　分離したモジュラコンポーネントで作業しているなら、いくつかの選択肢があります。</p><p><strong>コンポーネントAPIを経由した直接参照は（非常にシンプルなもので作業しない限り）好ましくありません。他のコンポーネントの特定のバージョンに直接的な依存をするからです。</strong>もしAPIが大きく変更されれば、対価を払ってアップグレードするか破損に対処しなければいけません。また他の方法として、グローバルまたはインコンポーネントな従来型のイベントシステムを使用することもできます。親子関係のないコンポーネント間でコミュニケーションを取る必要があれば、イベント＋サブスクリプションはいまだにポピュラーな方法です。実際に、親子関係のないコンポーネント間で単に<a href="http://facebook.github.io/react/tips/communicate-between-components.html" rel="nofollow" title="" class="ext-link">props</a>を渡すだけの場合には、Reactはこのアプローチを推奨しています。Angularはコンポーネントのコミュニケーションのためにサービスを使用しており、Polymerにはカスタムイベント・ウォッチャの変更・&lt;core-signals&gt;要素といった選択肢があります。</p><p>これが私たちにできる最良の方法でしょうか？　もちろん違います。<strong>イベントのために、ファイア・アンド・フォーゲットを行えば、グローバルなイベントシステムモデルは比較的うまく動作しますが、一度ステートフルなイベントやチェインニングを必要とし始めれば、困難になってしまいます。</strong>複雑性が増せば、イベントがコミュニケーションとフロー制御を織り交ぜていることに気付くでしょう。一方で、イベントシステムを改良するためのたくさんの方法があり（例えば関数型リアクティブプログラミングなど）、イベントが任意で大量のコードを実行していることが分かるでしょう。</p><p><strong>グローバルなイベントシステムよりも優れているものは<a href="http://ja.wikipedia.org/wiki/Communicating_Sequential_Processes" rel="nofollow" title="" class="ext-link">CSP</a>です。</strong>並行システムにおいてコミュニケーションを記述する、形式化された方法です。CSPのチャネルは、ClojureScriptやGoなどで見られ、<a href="https://github.com/clojure/core.async/" rel="nofollow" title="" class="ext-link">core.async</a>プロジェクトで形式化されてきました。CSP（Content Security Policyと間違えないでください）は、メッセージパッシングを利用して、チャネルから消費したり置いたりする際の実行をブロックし、複雑な非同期フローを表現しやすくします。これらが解決する問題は、ある点では二重のチャネルを必要とし、下記のような従来の文字列型の方法に頼ります。</p><p>後でこの二つを合致させます。これで不可逆の最適化されていないイベントチャネルで、関数呼び出しをほとんど再実装しました。タイポのせいでミスマッチが起こるといつも、デバッギングで苦労します。</p><p><img class="graf-image" data-image-id="1*tdy1UQP2PIXjE7GtxHXwRA.png" data-width="1855" data-height="1106" data-action="zoom" data-action-value="1*tdy1UQP2PIXjE7GtxHXwRA.png" src="https://d262ilb51hltx0.cloudfront.net/max/1117/1*tdy1UQP2PIXjE7GtxHXwRA.png"><br>
<strong>CSPから引き出されたメカニズムは、他の動作を制御するための抽象化を提供します。このようなプリミティブを使えば、同時実行する協調的なメカニズムを構築することはもっと簡単です。</strong>CSPは比較的低水準の構成のセットを与えてくれます。関数型リアクティブプログラミングでは、シグナルは時間とともに変化する値を示します。シグナルはプッシュ型のインターフェースを持っており、それで反応がいいのです。FRPは純粋な関数型インターフェースを提供するのでイベントが放出されることはありませんが、制御フロー構造によってベースシグナルの変換が定義できます。FRPのシグナルはCSPのチャネルを使って実装可能です。</p><p><a href="http://jlongster.com/Taming-the-Asynchronous-Beast-with-CSP-in-JavaScript" rel="nofollow" title="" class="ext-link">James Long</a>と<a href="http://phuu.net/2014/08/31/csp-and-transducers.html" rel="nofollow" title="" class="ext-link">Tom Ashworth</a>は、CSPに関する確かな記事をいくつか投稿しています。グローバルなイベントシステム以上のものが欲しいと思っているなら、Transducers（合成可能なアルゴリズム変換）に注目してみるといいでしょう。</p><p>また、<a href="https://github.com/ubolonton/js-csp" rel="nofollow" title="" class="ext-link">js-csp</a>プロジェクトをチェックしてみてください。これは、マクロよりむしろジェネレータ（yield文）を使って制御の反転（IOC）のカプセル化を実装した、ClojureScriptのcore.asyncに近いJavaScriptポートを提供します。</p><p>以前、分離してJavaScript”モジュール”へ健全にアプローチする利点を生かした大規模なシステムの純益について書いたことがあります。私たちは数年前よりはるかにいい状況にいて、もはやAMDやRequireJS、モジュールのパターンで間に合わせるだけではありません。</p><p>信頼性の増した豊富なBrowserify関連ツール一式（Browserifyで使えるnpmモジュールの<a href="http://browserifysearch.org/" rel="nofollow" title="" class="ext-link">1セット全部</a>）や、有り余るほどの<a href="https://github.com/addyosmani/es6-tools#transpilers" rel="nofollow" title="" class="ext-link">トランスパイルに適した</a>ES6機能に感謝しましょう。<a href="http://www.2ality.com/2014/09/es6-modules-final.html" rel="nofollow" title="" class="ext-link">ES6モジュール</a>が最終的にブラウザに実装されるのを待つ間、それらはとても役に立ちます。</p><p><img class="graf-image" data-image-id="1*tNh8NTBrl74k06Id07Wggw.png" data-width="2010" data-height="1428" data-action="zoom" data-action-value="1*tNh8NTBrl74k06Id07Wggw.png" src="https://d262ilb51hltx0.cloudfront.net/max/938/1*tNh8NTBrl74k06Id07Wggw.png"><br>
<em>ソースマップをフルサポートした、ES5とES6で作業するための比較的良いパイプラインをもたらした<a href="http://twitter.com/thlorenz" rel="nofollow" title="" class="ext-link">@thlorenz</a>と<a href="http://twitter.com/domenic" rel="nofollow" title="" class="ext-link">@domenic</a>によるes6ify</em></p><p><strong>ほとんどの場合、これは克服されていて、オーサリングワークフローのビルドステップを使う人に対して嫌な顔をしたのは、もはや過去になりつつあります。</strong>JSライブラリの作者の<a href="https://github.com/sindresorhus/esnext-showcase" rel="nofollow" title="" class="ext-link">多く</a>は、同じように喜んでES6を構築済みソースに使います。</p><p><strong>ES6モジュールによって、私たちが依存とデプロイメントで直面してきた膨大な問題が解決され、私たちはexportsと明示してモジュールを作成し、名前のついたexportsをそのモジュールからインポートし、名前ごとに分けておくことができます。</strong>ES6モジュールは、AMDの非同期の性質（ブラウザで必要）とCommonJSに見られるコードの明快さを組み合わせたようなもので、さらにより良い形で循環依存に対処します。</p><p>ES6モジュール内のdepsが静的なので、静的に分析可能な依存グラフがあり、これは非常に役に立ちます。また、CommonJSを使用するより（Browserifyワークフローのおかげでかなり快適に使用できるのにもかかわらず）すっきりしています。CommonJSをブラウザのコンテキストでサポートするために、モジュールをラップするかXMLHttpRequestに入れるかして、自分自身とevalをラップしてください。これでブラウザで動作できるようになりますが、ES6モジュールは最初からWebとサーバのユースケースをサポートするために設計されたので、この両方を見事にサポートします。</p><p>ネイティブの面では、ES6プリミティブ向けのサポートがV8やChakra、SpiderMonkey、JSCでネイティブに調査され続けるのを見て興奮もしました。恐らく私が最も驚いたのは、IE Technical Previewが<a href="http://kangax.github.io/compat-table/es6/" rel="nofollow" title="" class="ext-link">ES6互換性表</a>で32/44まで急上昇して他を上回ったことでしょう。</p><p><img class="graf-image" data-image-id="1*mWPAXNkZmc5gjGU-rKNung.png" data-width="1024" data-height="657" data-action="zoom" data-action-value="1*mWPAXNkZmc5gjGU-rKNung.png" src="https://d262ilb51hltx0.cloudfront.net/max/682/1*mWPAXNkZmc5gjGU-rKNung.png"><br>
<em>IE Technical Previewは、既にES6のClass、for…of文、Map、Set、型付き配列、Array.prototypeメソッド、その他多くの機能をサポートしています。</em></p><p>私が投稿してきたV8の進歩に関する最新情報を見逃しているといけないので、念のためいくつか挙げておきます。</p><p><strong>テンプレート文字列／リテラルの埋め込み表現で文字列を挿入しやすくなりました。</strong></p><p><img class="graf-image" data-image-id="1*_WC8llYhsfJsfvAAmDAKcg.png" data-width="1260" data-height="996" data-action="zoom" data-action-value="1*_WC8llYhsfJsfvAAmDAKcg.png" src="https://d262ilb51hltx0.cloudfront.net/max/839/1*_WC8llYhsfJsfvAAmDAKcg.png"></p><p><strong>オブジェクトリテラルが拡張され、プロパティやメソッドを簡潔に記述できるようになってキーを打つ数が減りました。</strong></p><p><img class="graf-image" data-image-id="1*tQT637o53hR239FRXkwJvg.png" data-width="1024" data-height="1167" data-action="zoom" data-action-value="1*tQT637o53hR239FRXkwJvg.png" src="https://d262ilb51hltx0.cloudfront.net/max/584/1*tQT637o53hR239FRXkwJvg.png"><br>
<strong>ES6クラスによって現在のオブジェクトとプロトタイプに糖衣構文がもたらされました。</strong></p><p><img class="graf-image" data-image-id="1*HXf8FBnCOaKtURSu6a0oag.png" data-width="1428" data-height="1554" data-action="zoom" data-action-value="1*HXf8FBnCOaKtURSu6a0oag.png" src="https://d262ilb51hltx0.cloudfront.net/max/612/1*HXf8FBnCOaKtURSu6a0oag.png"><br>
ES6の機能だろうとCommonJSモジュールだろうと、プロジェクトを強力に合成するのに十分なツール一式があります。クライアントでもサーバサイドでも、同形でもそうでなくても問題ありません。ちょっとした驚きです。誤解しないでほしいのですが、エコシステムの質を十分に向上させるには長い道のりが待っています。しかし現在、フロントエンドの合成は有力な話です。</p><p>一方、Webコンポーネントについて既に話しましたが、<a href="http://www.html5rocks.com/ja/tutorials/webcomponents/imports/" rel="nofollow" title="" class="ext-link">HTML Imports</a>に関してはここでも言及する価値があります。JavaScriptモジュールは常にコンポーネントとそれに対応するテンプレートに最も適した<strong>コンテナフォーマット</strong>であるとは限りません。多くの人々がコンポーネントをロードして解析するために追加で別のツールもまだ使っています。</p><p>JS開発者として私たちには既存のいくらか発達したスクリプト関連ツールのエコシステムがあるので、HTMLに戻ったり、依存のメカニズムとしてそれをサポートするためにツールを書き換えなければならなかったりするのは後退しているように感じられると言われることがあります。この問題は（importsを平たん化する）<a href="https://www.polymer-project.org/articles/concatenating-web-components.html" rel="nofollow" title="" class="ext-link">Vulcanize</a>のようなツールで一部<strong>解決されていて</strong>、うまくいけばHTTP2では問題がなくなると思います。</p><p>純粋なスクリプトにするかインポートにするか検討すべき機械がどれくらいあるかや、ES6モジュールinteropを検討し始めた時にどこに線が引かれるかについて、私は個人的に葛藤しています。そうは言うものの、HTML importsは両方のパッケージコンポーネントリソースへのいい方法で、パーサをブロックせずにスクリプトを常にロードしています（それでもロードイベントはブロックします）。私はまだ、今後もimportsの利用や、モジュール、両方のシステムのinteropの発展が見られるという希望を抱いています。</p><p>PART2はこちら : <a href="http://postd.cc/javascript-application-architecture-on-the-road-to-2015-2-part-2/">【翻訳】2015年に向けたJavaScriptアプリケーションアーキテクチャ PART 2</a></p>
