<p><a href="http://m1el.github.io/printf-antipattern/" rel="nofollow" title="" class="ext-link">The Most Expensive Anti-Pattern</a> （2015-7-22） by <a href="http://m1el.github.io/about/" rel="nofollow" title="" class="ext-link">Igor Null</a></p><p>本記事では、私の知る最も割高なアンチパターンとなるプログラミングについて述べます。</p><p>それは、<strong>構造化されたデータフォーマットを文字列関数を使って操作すること</strong>です。</p><p>以後これを”<em>printfアンチパターン</em>“と称します。</p><p>私がこれを”最も割高な”アンチパターンと呼ぶのは、根拠のない主張ではありません。</p><p><a href="https://cve.mitre.org/" rel="nofollow" title="" class="ext-link">cve.miter.org</a>のデータを使って<a href="https://gist.github.com/m1el/44e2500910a0dba31cbc" rel="nofollow" title="" class="ext-link">脆弱性をタイプ別にカウントし</a>、下記のように、上位を占める脆弱性のタイプ別リストを作りました。</p><p><em>私の方法に対する批判や良いご提案があれば遠慮なくどうぞ。</em></p><p>上位を見ると、XSSとSQLインジェクションの数が大きく目立っています。</p><p>私が言いたいのは、「ほとんどのXSSとSQLインジェクションはprintfアンチパターンが引き起こしている」ということです。</p><p>HTMLへ手当たりしだいに文字列を入れ込もうというのは、ひどい発想です。SQLについても同様です。</p><p>printfアンチパターンの定義が分かると、それが<em>偏在していること</em>であると気付くでしょう。</p><p>このアンチパターンはHTMLとSQLにおいて極めてありふれており、これがSQLインジェクションやXSS脆弱性が非常に多い理由です。</p><p>以下にいくつか例を挙げます。</p><p>
</p>
<p><em>それでは、文字列関数を使ってHTMLを生成している場合、代わりにどうすればいいのでしょうか？</em></p><p>提案された解決策の全てに共通のテーマがあることが分かるでしょう。基となるデータ構造を操作し、シリアライズするのです。</p><p>シリアライズされたデータ構造を文字列として変更するのは無駄なことです。</p><p>以下はjQueryの例です。</p><p>なぜこうなったのでしょうか。<br>
人々が怠惰なせいで起こったのだと私は疑っています。</p><p>そういうわけで、文字列の連結を用いてHTMLを生成してしまっているのです。</p><p>もちろん、<em>本当に</em>細心の注意を払っていれば、インジェクションが問題になることはなく有効なHTMLやSQLを生成できます。</p><p>しかし、Webサイトを作成する際に、手動のメモリ管理やポインタ演算は使いませんよね？</p><p>安全にプログラミングできるなら、あえて危険な方法を取る必要はありません。</p><p>もちろん、この話にも面白い部分があります。ブラウザです。</p><p>多くのWebサイトが無効なHTMLをブラウザに表示させようとしたため、ブラウザベンダは正しくないHTMLにもパーサを適合させる必要がありました。人々は、自分のお気に入りのWebサイトが表示されるように、ほぼ任意のバイトの塊をHTMLとして処理できるブラウザを選びました。</p><p>Webサイトは、ユーザのリクエストをそのまま直接HTMLに含めてしまうことが多いので、ブラウザベンダはXSSフィルタを実装する必要がありました。XSSフィルタを用いる根拠は簡単です。ブラウザベンダが、ユーザに対するXSS攻撃の90％を<em>防げる</em>なら、ユーザはうれしいですよね。</p><p>しかしXSSフィルタは、すべてのXSS攻撃を単純に防ぐことは<em><a href="http://securitee.tk/files/chrome_xss.php?a=%3Cscript%3E%27&amp;b=%27;alert%281%29%3C/script%3E" rel="nofollow" title="" class="ext-link">できません</a></em>。</p><p>これら2つの例では、ブラウザが問題から引き起こされる症状を扱っていますが、問題そのものに対処していないのです。問題は、文字列を操作して動的なHTMLを生成することが合理的だと思うプログラマの考え方にあります。</p><p>かなり初期段階からHTMLが文字列として操作されるようになったため、HTMLは、構造化されたデータフォーマットとして、ひどい状態です。このように、HTMLフォーマットを誤った方法で扱うことで、多くの問題が発生しています（XSSや無効なHTML、ブラウザのパーサの違いだけでなく、他の問題も含まれます）。</p><p>おそらく、あくまで推測ですが、利用できるツールがHTMLを文字列として生成するように促さなければ、Webの世界はもっとマシな環境だったでしょう。</p><p>おそらく、あくまで推測ですが、Webのドキュメントについて、異なるシリアライズのフォーマットを選んでいたら、HTMLをprintfで書ける文字列として扱うことはなかったでしょう。</p><p>また、もしプログラマが、文字列関数を使って構造化されたデータフォーマットを構築することを許容しなければ、脆弱性は確実に減らせていたでしょう。</p>
