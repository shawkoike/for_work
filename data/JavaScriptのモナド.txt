<p><a href="https://curiosity-driven.org/monads-in-javascript" rel="nofollow" title="" class="ext-link">Monads in JavaScript</a> （2015-06-07） by <a href="https://twitter.com/curiositydrvorg" rel="nofollow" title="" class="ext-link">Curiosity driven</a></p><p><a href="https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%8A%E3%83%89_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)" rel="nofollow" title="" class="ext-link">モナド</a>とは、一連のステップによって実行する計算を記述する際に使用する、1つのデザインパターンです。<a href="https://wiki.haskell.org/Monad" rel="nofollow" title="" class="ext-link">純粋関数型プログラミング言語</a> では、モナドは<a href="https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%8A%E3%83%89_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)#I.2FO.E3.83.A2.E3.83.8A.E3.83.89" rel="nofollow" title="" class="ext-link">副作用を管理する</a>ために広く利用されていますが、<a href="http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx?Redirected=true" rel="nofollow" title="" class="ext-link">マルチパラダイム言語では、モナドで複雑性を制御することもできます</a>。</p><p>モナドはデータ型をラップして、空の値を自動的に伝播したり（<a href="https://curiosity-driven.org/monads-in-javascript#maybe" rel="nofollow" title="" class="ext-link">Maybe</a>モナド）、非同期コードを簡略化したり（<a href="https://curiosity-driven.org/monads-in-javascript#continuation" rel="nofollow" title="" class="ext-link">継続</a>モナド）といった、新たな動作を既存のデータ型に追加します。</p><p>一連のコードをモナドと見なすためには、その構造には次に挙げる3つの要素が含まれていなければなりません。</p><p><a href="http://www.typescriptlang.org/Playground/#src=interface%20M%3CT%3E%20%7B%0A%0A%7D%0A%0Afunction%20unit%3CT%3E(value%3A%20T)%3A%20M%3CT%3E%20%7B%0A%20%20%20%20return%20null%3B%0A%7D%0A%0Afunction%20bind%3CT%2C%20U%3E(instance%3A%20M%3CT%3E%2C%20transform%3A%20(value%3A%20T)%20%3D%3E%20M%3CU%3E)%3A" rel="nofollow" title="" class="ext-link">次に示すTypeScript上のコード</a>は、一般的な関数のシグネチャを表しています。ここで<code>M</code>は、モナド型を表しています。</p><p><strong>注：</strong> この<code>bind</code>関数は、<code>Function.prototype.bind</code>関数と同じものでは<em>ありません</em>。後者は<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow" title="" class="ext-link">ES5ネイティブの関数</a>です。部分的に適用する関数や、<code>this</code>値に束縛する関数を作成する場合に使います。</p><p>JavaScriptのようなオブジェクト指向の言語では、<code>unit</code>関数をコンストラクタ、<code>bind</code>関数をインスタンスメソッドとして表現できます。</p><p>次に示す3つの<a href="http://www.youtube.com/watch?v=dkZFtimgAcM&amp;t=14m39s" rel="nofollow" title="" class="ext-link">モナド則</a>には必ず従わなければなりません。 <br>
<em><br>
1. bind(unit(x), f) ≡ f(x)<br>
2. bind(m, unit) ≡ m<br>
3. bind(bind(m, f), g) ≡ bind(m, x ⇒ bind(f(x), g))</em></p><p>上の2つの規則は、<code>unit</code>がニュートラルな要素であることを示しています。3番目の規則は、<code>bind</code>は結合型であることを表しています。結合の順序は問いません。これは、次に示す2つの加算の結果が同じになることと共通しています。<code>(8 + 4) + 2</code>と<code>8 + (4 + 2)</code>では、どちらも結果は同じです。</p><p>以下で示すコーディング例は、<a href="http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax" rel="nofollow" title="" class="ext-link">アロー関数の構文</a>をサポートしていることを前提としています。Firefox（バージョン31）はアロー関数をネイティブでサポートしていますが、<a href="https://code.google.com/p/v8/issues/detail?id=2700" rel="nofollow" title="" class="ext-link">Google Chrome（バージョン36）はこの関数をサポートしていません</a>。</p><p>
</p>
<p>恒等モナドは、最も単純なモナドです。値を単にラップするだけです。<code>Identity</code>コンストラクタが、<code>unit</code>関数の働きをします。</p><p>恒等モナドを使った加算処理の例を次に示します。</p><p>
</p>
<p>
</p>
<p>Maybeモナドは恒等モナドと似ていますが、値を格納するだけでなく、値が存在しない状態を表すこともできます。</p><p><code>Just</code>コンストラクタは、値をラップする際に使います。</p><p>また、<code>Nothing</code>は空の値を示します。</p><p>基本的な使い方は、恒等モナドと同じです。</p><p>
</p>
<p>恒等モナドとの主な違いは、Maybeモナドは空の値を伝播することです。あるステップで<code>Nothing</code>を返すと、モナドはそれ以降の演算をスキップして、<code>Nothing</code>を返します。</p><p>次に示すコーディング例では、<code>alert</code>関数は実行されません。その前のステップで空の値が返されるからです。</p><p>
</p>
<p>この振る舞いは、特殊な値である<code>NaN</code>（Not-a-Number）が数式の中に含まれている場合に似ています。演算の中間結果に<code>NaN</code>が含まれていると、<code>NaN</code>が演算結果として伝播されます。</p><p><em>Maybe</em>モナドは、<code>null </code>値によって発生するエラーを防ぎたいときに使用します。次のコーディング例は、ログインしたユーザのアバターを返します。</p><p>メソッド呼び出しの長いチェーンの中に空の値が含まれていないかどうかをチェックしないと、返されたオブジェクトが<code>null</code>だった場合に、<code> TypeError</code>が発生します。</p><p>この問題の対策としては、もちろん<code>null</code>値のチェックを組み込めばいいのですが、そうするとコードが冗長になりがちです。コードは正しくても、1行追加するとそれを何度も実行することになるからです。</p><p>Maybeモナドはこんな場面の新たな解決策となります。空の値を検出すると、演算処理を中止します。</p><p>
</p>
<p>
</p>
<p>リストモナドは、非決定計算の値のリストを表します。</p><p>このモナドの<code>unit</code>関数は値を1つ取り、その値を生成するジェネレータを返します。<code>bind</code>関数は全ての要素に対して<code>transform</code>関数を適用し、その結果から<a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators#delegating_yield" rel="nofollow" title="" class="ext-link">すべての要素を生成します</a>。</p><p>配列やジェネレータは、反復可能なオブジェクトのため、<code>bind</code>関数を適用できます。下記の例は、ペアになっている全ての要素の和のLazyListを作成します。</p><p>下記の記事は、JavaScriptジェネレータの幾つかの異なる適応例について書いています。</p><p>
</p>
<p>継続モナドは非同期のタスクに対して使用されます。幸い、このモナドは<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow" title="" class="ext-link">Promise</a>オブジェクトとしてES6に実装されているため、実装する必要はありません。</p><p>
</p>
<p>Promiseは基本的な<a href="http://hackage.haskell.org/package/mtl-1.1.0.2/docs/Control-Monad-Cont.html" rel="nofollow" title="" class="ext-link">継続モナド</a>のいくつかの機能を拡張します。もし、<code>then</code>が(promiseオブジェクトではない)単なる値を返した場合、モナド内で自動的に値をラップして、<a href="http://promises-aplus.github.io/promises-spec/#the_promise_resolution_procedure" rel="nofollow" title="" class="ext-link">与えられた値で成功となる promiseオブジェクトを返します</a>。</p><p>さらに、promiseではエラー伝播も異なります。<a href="http://hackage.haskell.org/package/mtl-1.1.0.2/docs/Control-Monad-Cont.html" rel="nofollow" title="" class="ext-link">継続モナド</a>は、計算処理中は1つの引数しか渡せません。しかし、promiseの場合、処理が成功した時に渡す値とエラーが発生した時に渡す値の2つの値を同時に保持しています。この点は<a href="http://hackage.haskell.org/package/category-extras-0.53.4/docs/Control-Monad-Either.html" rel="nofollow" title="" class="ext-link">Eitherモナド</a>と似ています。エラーは、<code>then</code>メソッドへの2番目のコールバックを使用するか、特別な<a href="https://github.com/kriskowal/q/wiki/API-Reference#wiki-promisecatchonrejected" rel="nofollow" title="" class="ext-link"><code>.catch</code></a>メソッドを使用してキャプチャします。</p><p>下記の記事は、promiseの適用例について書いています。</p><p>
</p>
<p>Haskellには、モナドコードを書く時に利用できる <a href="http://en.wikibooks.org/wiki/Haskell/do_notation" rel="nofollow" title="" class="ext-link">do記法</a>という特別なシンタックスシュガーがあります。<code>do</code>をキーワードに始まるコードブロックを<a href="http://book.realworldhaskell.org/read/monads.html#monads.do" rel="nofollow" title="" class="ext-link">bind関数によって呼び出し可能なオブジェクトに変換します</a>。</p><p>JavaScriptでdo記法を模倣したのが、ES6ジェネレータです。すっきりとした、同期的に見えるコードができます。</p><p>下記のように、<a href="https://curiosity-driven.org/monads-in-javascript#maybe" rel="nofollow" title="" class="ext-link">Maybeモナド</a>で使用したコード例では、bind関数を直接呼び出しています。</p><p>上記と同じコードをジェネレータで表すと下記になります。<code>yield</code>をそれぞれ呼び出すところで、モナドのラップ処理を取り消して、元の値を取得しています。</p><p>この小さなルーチンは、ジェネレータをラップした後、<code>yield</code>に渡される値で<code>bind</code>を呼び出します。</p><p>このルーチンは、他のモナド、例えば<a href="https://curiosity-driven.org/monads-in-javascript#continuation" rel="nofollow" title="" class="ext-link">継続モナド</a>と同時に使用することができます。</p><p>他のモナドとの整合性を保つため、<code>then</code>関数は<code>bind</code>というエイリアスとして記述される場合があります。</p><p>ジェネレータとpromiseを同時に使用する方法についてさらに詳しく知りたい方は、<a href="https://curiosity-driven.org/promises-and-generators" rel="nofollow" title="" class="ext-link">Easy asynchrony with ES6</a>（ES6で簡単に非同期処理）をお読みください。</p><p>
</p>
<p>モナドコードをさらに単純化するもう1つの方法は、プロキシの使用です。</p><p>下記の関数は、モナドのインスタンスをラップして、不明なプロパティのアクセスや関数の起動をモナド内の値へ自動的に転送するプロキシオブジェクトを返します。</p><p>このラッパーは、将来的に空になる可能性のあるオブジェクトの参照に安全にアクセスするために使用することができます。これは、CoffeeScriptの<a href="https://esdiscuss.org/topic/the-existential-operator" rel="nofollow" title="" class="ext-link">存在演算子</a> (<code>?.</code>)と同じような動作をします。</p><p>アバターは存在しませんが、<code>url</code>の呼び出しは成功し、空の値を作成します。</p><p>このラッパーは、通常の関数呼び出しを継続モナドに引き上げる際にも使用できます。下記のコードはある特定のアバターを使用している友達の人数を返します。この例はメモリ内のデータを操作しているように見えますが、実際には非同期データを操作しています。</p><p>プロパティのアクセスや関数の呼び出しは全てモナドに引き上げられたため、このラッパーは常にpromiseを作成し、もはや単純な値は作成しないことに注意してください。</p><p>ES6プロキシについてさらに詳しく知りたい方は<a href="https://curiosity-driven.org/array-slices" rel="nofollow" title="" class="ext-link">Array slices</a>をお読みください。</p>
