<p><a href="https://tech.affirm.com/redux-patterns-and-anti-patterns-7d80ef3d53bc#.kuaoh5bm7" rel="nofollow" title="" class="ext-link">Redux Patterns and Anti-Patterns</a> （2016-09-20） by <a href="http://www.chetcorcos.com/" rel="nofollow" title="" class="ext-link">Chet Corcos</a></p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*GVyqpS_9WUJDeaf2OEiynw.png" src="https://cdn-images-1.medium.com/max/800/1*GVyqpS_9WUJDeaf2OEiynw.png"></p><p><a href="http://redux.js.org/" rel="nofollow" title="" class="ext-link">Redux</a>は、<a href="https://facebook.github.io/flux/" rel="nofollow" title="" class="ext-link">Flux</a>のようなアーキテクチャを使用してアプリケーションの状態を管理できる非常にシンプルなライブラリです。私たち<a href="https://www.affirm.com/" rel="nofollow" title="" class="ext-link">Affirm</a>では今、<a href="https://github.com/gaearon/redux-devtools" rel="nofollow" title="" class="ext-link">Reduxのタイムトラベル機能</a>に注目しています。Affirmの主要事業は、透明性の高い消費者ローンを提供することなので、ローン申し込み時の全過程をユーザ視点で再現できると非常に有用なのです。</p><p>Reduxはフレームワークというよりも、パターンの適用に役立つ関数セットです。よって、適切なパターンを慎重に適用しないと、Reduxを使ったことを後悔する結果になりかねません。この記事では、Affirmで確立したReduxのベストプラクティスや、ミスを犯しやすいポイントについて説明します。</p><p><a href="https://facebook.github.io/immutable-js/" rel="nofollow" title="" class="ext-link">ImmutableJS</a>は、不変の永続データ構造を扱うためのライブラリです。私たちがこのライブラリを好んで使う理由は2つあります。</p><p>1つ目は、不変データの使用に伴うメリットが幾つかあるということです。この件に関しては、<a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch3.html" rel="nofollow" title="" class="ext-link">非常に多く</a>の<a href="%E3%83%AA%E3%83%B3%E3%82%AF%E5%88%87%E3%82%8C">記事</a>で説明されていますが、要点をまとめると<a href="https://ja.wikipedia.org/wiki/%E5%8F%82%E7%85%A7%E9%80%8F%E9%81%8E%E6%80%A7" rel="nofollow" title="" class="ext-link">参照透過性</a>という概念に集約されます。オブジェクトをインプレースで（参照ポインタを変更せずに）変更できる場合、プログラムは論理的に理解しづらくなります。</p><p>よりハイレベルな表現をすると、可変データを使うと、プログラム解析に数学を利用しづらくなるということです。例えば「xは必ずしもxとは限らない」という数学の定理があったらどうでしょう？　実際、不変データの場合は、オブジェクトの変更を確認する際に詳細な比較はせず、厳密等価演算子（===）で済ませてしまうことがよくあります。この方法は、Reactコンポーネントを再描画するケースなどでは非常に便利です。</p><p>ImmutableJSを使う2つ目の理由はパフォーマンスです。不変データを利用して、変更を行うたびに基になるデータ構造を複製し続けると、<a href="https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0" rel="nofollow" title="" class="ext-link">ガベージスラッシング</a>の原因になります。この問題に対処するため、ImmutableJSでは<a href="https://ja.wikipedia.org/wiki/%E6%B0%B8%E7%B6%9A%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0" rel="nofollow" title="" class="ext-link">永続データ構造</a>を採用しています。これによって効率よくイミュータブルな更新を行い、基になるデータを複製することなく新しい参照を返すことができます。</p><p>では、連結リストの仕組みについて考えてみましょう。先頭にアイテムを追加して新しい連結リストを作成するには、単純に古い先頭を指す新しいノードを作成して、その新しいノードへの参照を返すようにします。以前のリストは<em>保持され</em>、基になるデータは新しいリストと<em>共有</em>されます。インプレースの変更がない限りは、この方法で不変データを効率よく扱うことができます。</p><p><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*d_PAkRsFjJZV8tM7OvlFZg.png" src="https://cdn-images-1.medium.com/max/800/1*d_PAkRsFjJZV8tM7OvlFZg.png"></p><p>ただし、ImmutableJSは正しく使わなければ効果がありません。私がよく目にする間違いは2つあります。1つ目は、複数の変更を行う方法です。例として、<strong>Map</strong>内で複数の値を設定する状況を考えてみましょう。以下では<strong>loading</strong>をfalseに指定して、stateの<strong>user</strong>プロパティを更新しています。</p><p><strong>Map</strong>に値をセットする際に、ImmutableJSは内部で（<a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie" rel="nofollow" title="" class="ext-link">Hash Mapped Array Trie</a>を使って）中間状態が維持されるように、ありとあらゆる再編成を行います。これは不要な作業です。というのも、必要なのは最終的な結果だけで、中間段階は必要ないからです。その代わりに、これらの更新処理をバッチで行う際に<strong><a href="https://facebook.github.io/immutable-js/docs/#/List/withMutations" rel="nofollow" title="" class="ext-link">withMutations</a></strong>関数を使って、再編成を一度だけ行えばよいのです。</p><p>その他のアンチパターンとして挙げられるのは、データを処理したい時には常に<strong>.toJS()</strong>を使って、生のJavaScriptオブジェクトへ標準的な変換をしている点です。Affirmで見たことのある、典型的な例があります。</p><p>こうすると、ImmutableJSを利用することによるパフォーマンス上の利点が全く無くなってしまいます。というのも、実際、これを実行するたびにオブジェクトを複製しているからです。その代わりに、データをImmutableJSのオブジェクトのままにしておいて、<strong>.get</strong>や<strong>.getIn</strong>などのImmutableJSのメソッドを使うべきです。</p><p>以下に、ローンの支払いをするReduxのアクションの例を挙げます。</p><p>このコードは問題なく動作します。Reduxの初心者であっても、アクションを作成すると、たぶん全てこのようになります。つまり、上記のコード内には幾つかのアンチパターンがあるということです。それらを1つずつ洗い出していきましょう。</p><p>まず問題となるのは、プログラムのロジックにおけるエラーの使い方です。try-catchをプログラムロジックに使うことにより、コード内の実際のエラーを簡単にマスクして、コンソールに表示されないようにすることは可能です。例えば、<strong>if (reponse.status)</strong>の部分のスペルを間違えていたとしたらどうでなるでしょうか？　その場合、例外エラーにはまってしまって、バグの追跡が非常に難しくなります。ですから、<strong>catch</strong>ステートメントを削除しましょう。</p><p>次にアクションの目的をアクションの実装から切り離します。HTTPのリクエストがどのように設定されて送られるのかについて、このアクションが気にしなければならない理由はありません。ですので、専用のファイルに抜き出しましょう。</p><p>これで、このActionには実装よりも目的が反映されるようになりました。リファクタリングの際に、<a href="https://jakearchibald.com/2014/es7-async-functions/" rel="nofollow" title="" class="ext-link">ES7 async-await構文</a>を使ってこの<a href="http://maangalabs.com/images/posts/8/pyr-1.png" rel="nofollow" title="" class="ext-link">深いネスト構造</a>を処理しましょう（注意：<a href="https://www.npmjs.com/package/babel-polyfill" rel="nofollow" title="" class="ext-link">babel-polyfill</a>と一緒に<a href="https://www.npmjs.com/package/babel-preset-stage-0" rel="nofollow" title="" class="ext-link">Babel <em>stage-0</em>プリセット</a>を使う必要があります）。</p><p>少し改善したようですが、まだ十分ではありません。</p><p>他にも、不要な再描画を引き起こす、過剰なディスパッチをしているという問題があります。アクションをディスパッチするたびに、そのアクションはReducerに渡され、新しいstateがレンダリングされていることに気付く人はほとんどいません。上記の例では、リクエストが戻って来ると、直ちに2つのレンダリングを引き起こします。それは、<strong>closeModal</strong>によって引き起こされるレンダリングと、<strong>makePaymentSuccess</strong>もしくは<strong>makePaymentFailed</strong>のどちらかによって引き起こされるレンダリングです。</p><p><strong>closeModal</strong>アクションをディスパッチすることは、このアクションの意図を台無しにしてしまうことにもなります。<strong>makePayment</strong>は、モーダルウィンドウのクローズに関わるべきではありません。代わりに、成功アクションまたは失敗アクションを受け取ると、reducerでこのロジックを実行する必要があります。</p><p>これは一石二鳥です！　最後に、同期アクションと非同期アクションを別々のファイルにリファクタリングしなければいけません。こうすることにより非同期アクションがよりテストしやすいものになります。なぜなら、同期アクションが呼び出された時に、それらを<strong>spyOn</strong>し、アサーションすることが可能になるからです。</p><p>このテストは、実際には、関数自身の逆関数です。もっとも、この関数をテストする必要があるかどうかという疑問が湧いてきます。私は、コーディングのグッドプラクティスである証だと考えています。</p><p>アクションを整理したので、先ほど定義したreducer関数を見てみましょう。</p><p>幸先よく<strong>withMutations</strong>を適切に使っていますが、実装からロジックを切り離すことができなかったため、幾つかの場所でコードの繰り返しが起きています。ここでは、各更新をその機能ごとに分類し、まとめて組み立てることができます。この様子を見てみましょう。</p><p>ここで<strong>pipe</strong>関数を使用して、<strong>withMutations</strong>の呼び出しと、各更新関数の適用を処理するようにしました。これでｒeducerはずっと読みやすくなります。また、このreducerを試すのも簡単になります。アクションの時と同じように、実際には関数自身の逆関数です。</p><p>ここでも、この関数をテストする価値があるかどうかという問題は残っています。真の目的は、ミューテータがUIで期待されているような方法で状態を更新しているということです。そこで、それらに対して幾つかの単体テストを記述することができます。しかし、UIが他のフォーマットでの状態を期待しているなら、テストはあまり役には立ちません。ですから恐らく、<a href="https://flowtype.org/" rel="nofollow" title="" class="ext-link">FlowType</a>あるいは<a href="https://www.typescriptlang.org/" rel="nofollow" title="" class="ext-link">TypeScript</a>のような静的タイプチェッカーを使用すれば、努力に見合うだけの価値があるかもしれません。これについては、また後日お話ししようと思います。</p><p>Reduxを使えば、非常にクリーンな高性能で分かりやすいコードになるともいわれています。しかし、間違った使い方をしてしまうと、むしろ害になります。こういう類のソフトウェアパターンについてもっと知りたいと思われたら、<a href="https://www.youtube.com/watch?v=WpkDN78P884" rel="nofollow" title="" class="ext-link">この話</a>をチェックすることをお勧めします。私はこの話で、良質のコードを書く方法について、ある程度の高水準概念の考え方の基礎固めをきっちりと行うことができました。もしあなたが仕事を探している最中で、ReactやReduxを使って働くことに興味があれば、<a href="https://www.affirm.com/careers/" rel="nofollow" title="" class="ext-link">採用情報</a>のページをチェックするか、<a href="mailto:chet@affirm.com">私宛にEメールをお送りください</a>。</p>
