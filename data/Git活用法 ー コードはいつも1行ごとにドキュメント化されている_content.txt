Every line of code is always documented (2014-2-7) by Mislav Marohnićコードには1行ごとに隠しドキュメントがあります。次のコードスニペットの4行目を書いた人は、何か理由があってDOMノードのclientLeftプロパティにアクセスしたのでしょうが、結果的に何もしていません。これはかなり不可解です。なぜこうしたのか、あなたは説明できますか？　今後、この呼び出しを変更したり削除したりしても安全でしょうか？私ではなく他の人があなたにこのコードを見せたとして、誰がこの行を記述したのか、どんな理由があったのか、このままの状態にしなければいけないのか、あなたはおそらく説明できないでしょう。ただし、プロジェクトを進めているときは大抵の場合、バージョン管理システムを使ってその履歴にアクセスできます。プロジェクトの履歴は最も有用なドキュメントです。この行について説明している次のコミットメッセージを読むと、謎が解けます。今にしてみると、この行（もっと具体的に言うと、この行について説明した変更）は、なぜこの行が必要だったのか、なぜ以前の方法（コミットSHAで参照する方法）は機能しなかったのか、どのブラウザが影響を受けているのか、そして詳細のためのリンクといった情報がだらだらとドキュメント化されています。そして実は、この不可解な行を書いたのは私です。もっと良いコードを書く方法はありました。例えば、triggerLayout()のような目的が明らかな名前の関数に重要なプロパティアクセスをカプセル化することもできましたし、せめてコードのコメントを追加して、この行はアニメーションを開始するための行だと簡単に説明することくらいはできました。どういうわけか、私はその日、このコードを書くのに失敗したようです。コードを書いても、必ずしも完璧とは限りません。たとえこのコードがもっと理解しやすいものであったとしても、あるいはコードのコメント行が記述されていたとしても、プロジェクトの履歴の方がずっと充実した情報を提供することができます。もちろん、コードの品質はとても重要です。しかし、コーディングをさらにもっと改善することを考えるなら、より良いコミットメッセージを書くことを目指すべきです。これはあなただけが目指すのではなく、あなたのチーム全体そして担当者全員が目指す必要があります。ソフトウェアのストーリーというのは、その最新のチェックアウトと同じくらい重要です。コマンドラインからgit blameを使用する方法は上ですでに説明しました。Gitのローカルリポジトリにアクセスできない場合は、GitHub上で任意のファイルの“blame”ビューを開くこともできます。ファイルの履歴を効率良く調べるには、VimとFugitiveを使用します。詳細については、:help Gblameを参照してください。git blameを使えば、変更内容を説明したコミットSHAを取得できるかもしれません。ただしコミットメッセージは、変更の根本的な理由を説明できるだけの情報やコンテキストを必ずしも伝えるわけではありません。しかし、チームがプロジェクトでGitHub Flowを実践している場合、プルリクエストのやり取りの中でコンテキストが見つかる場合があります。このように、pull request #42による変更だということがコミットSHA 1つだけで分かりました。もうなくなっているもの（例えば、もはやどこからも呼び出されない関数呼び出しなど）を探したい場合もあるでしょう。特定のキーワードが追加されたり削除されたりしたコミットを探す最も良い方法は、git logに‘pickaxe（つるはし）’引数を使うことです。この方法で、特定の関数の呼び出しを削除したコミットや、特定のCSSのクラス名を追加したコミットを発掘することができます。プロジェクトの履歴を利用すると、コミットを個別に確認できるだけでなく、変更のセットを全体的に分析できるので、有益な見解が得られます。例えば、git-churnはシンプルですが、git logをラップして、どのファイルが一番変更されているかについてステータスをまとめる便利なスクリプトです。次のコマンドは、過去6か月間にどのアプリ開発が重点的に行われたかを確認できます。ちなみに、このような分析はプロジェクト内の潜在的な技術上の問題を浮き彫りにすることもあります。特定のファイルがあまりにも頻繁に変更されているのは、ほとんどの場合、危険信号です。そのファイルのコードは頻繁にバグ修正が必要になっているか、もしくはそのファイルで行っている処理が大きすぎるため、もっと小さなユニットに分割する必要がある可能性があります。同様の方法で履歴分析を行えば、コードベースの特定部分を最近開発していた担当者を確認することができます。例えば、アプリケーションのAPI部分に最も関与した人を確認するには、以下のコマンドを実行します。今あなたが作成しているものはすべて、プロジェクトの履歴に登録されて、永遠に残されるということを頭に入れておいてください。一緒に作業している他の人たちにとって親切になるように（たとえ1人のプロジェクトであっても、3ヶ月後のあなた自身も作業者です）、コミットするときは以下の基本ルールに従います。

どうしてこのコーディングスタイルにする必要があるのでしょう？　git blameを使おうとする人のことをいつも考えるようにしてください。このJavaScriptの例で、コミット済みの値"baz"を追加したのがあなただったとしたら、誰かが"bar"を追加した行でblameを使ったときに自分の名前が表示されるのは嫌ですよね。この2つの変数に関連性はないかもしれないからです。ここまで読んでもらったお礼に、おまけのスクリプトをお見せしましょう。私はこれにgit-overwrittenという名前を付けて、任意のブランチで変更または削除した行の元の担当者についてblameの情報を表示しています。これはGitHub Flowでプルリクエストを開くときに便利です。同僚に自分のプルリクエストを確認してほしくても、誰にメッセージを送ればいいか分からない場合があります。git-overwrittenを使えば、あなたが変更した行を書いた元の人たちの名前が分かるので、プルリクエストを開くときに相手先を把握できます。
