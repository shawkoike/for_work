<p><a href="https://blog.felixangell.com/an-introduction-to-llvm-in-go/" rel="nofollow" title="" class="ext-link">An introduction to LLVM in Go</a> （2016-03-12） by <a href="https://felixangell.com/" rel="nofollow" title="" class="ext-link">Felix Angell</a></p><p>Felixです。イギリスのBrighton在住、17歳の学生。趣味でプログラミングをしています。私のプログラミング言語Arkなど、主にオープンソースについて書いています。</p><p>LLVMは、コンパイラを作成するための基盤です。2000年にChris Lattnerによって作成され、2003年にリリースされました。それ以来、LLVMリンカ<code>lld</code>やLLVMデバッガ<code>lldb</code>など幅広いツール群を持つ包括的なプロジェクトに発展してきました。</p><p>LLVMの秀でた特徴は、一般に<code>LLVM IR</code>と呼ばれる、その中間表現です。LLVMの考え方は、まずこのIRにコンパイルし、次にそのIRを、JITコンパイルする、インタープリタで実行する、または実行しているマシンのネイティブアセンブリにコンパイルするといういうものです。このIRの主なターゲットは、コンパイラです。実際LLVMを使用するコンパイラは、世の中に数多くあります。C言語とC++用はそれぞれclangとclang++、D言語用の<code>ldc2</code>、Rust、Swiftなどです。<a href="https://github.com/kripken/emscripten" rel="nofollow" title="" class="ext-link">Emscripten</a>のようなプロジェクトさえあります。これは、LLVM BC (LLVM bitcode)をブラウザで実行されるJavaScriptにコンパイルします。</p><p>一般的にコンパイラの設計では、レジスタ割り当て、いろいろなアーキテクチャのためのコード生成、また十分に最適化された効率の良いコード生成に気を配る必要があります。LLVMの良さは、今述べたことを全て処理してくれるところです。LLVMは、非常に多くの最適化コレクションを備えており、さまざまなアーキテクチャをターゲットにすることができます。GNUコンパイラのコレクションが長年のデファクトスタンダードでしたが、LLVMの実装が大幅にそれを上回る結果が示されており<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>、多くの場合、より優れたエラーメッセージを出力します。</p><p>では、LLVM IRを素早く見てみましょう。標準的なCのプログラムを<code>-emit-llvm</code>と<code>-S</code>フラグを付けて<code>clang</code>でコンパイルすると、<code>.ll</code>ファイルが生成されます。このファイルの拡張子は、LLVM IRだということを表しています。</p><p>LLVM IRに変換するCのコードは次のとおりです。</p><p>何も最適化しないように指定してclangを実行しました。<code>clang test.c -S -emit-llvm -O0</code>。結果は次のとおりです。</p><p>単純化のために余分なコードの多くを省略しました。IRを見てみると、冗長性が増して読みやすいアセンブリ言語のように見えます。気付いたかもしれませんが、IRは型が厳密に定義されています。型の注釈が命令、値、関数など全てに付いています。</p><p>それでは、このIRの中で何が行われているのか、1行ずつ理解していきましょう。まず最初に、中括弧、型、名前、及び引数用の括弧を持つC言語風の関数によく似た構文の関数があります。</p><p>関数内に、値と命令が並んでいます。このIRの中には、5つの命令が含まれています。<code>alloca</code>、<code>store</code>、<code>load</code>、<code>add</code>、そして<code>ret</code>です。</p><p>では、これがどのように動作するのかを理解するためにIRを部分ごとに詳しく見てみましょう。ここでは、アライメントと<code>nsw</code>フラグの説明は省きます。これらの詳細については、LLVMのドキュメントをご覧ください。ここでは、基本的な意味だけを説明します。</p><p>命令に取り掛かる前に、ローカル識別子とは何かを知る必要があります。ローカル識別子は変数のようなもので、記号<code>%</code>で表します。名前のとおり、定義されている関数内に限られていることを示しています。従って、宣言された関数の外からは参照も変更もできません。</p><p>この命令は、スタックフレームにメモリを割り当てます。関数が戻る時に、このメモリは解放されます。この命令は値を返すので、例えば<code>%a</code>などにそれを代入します。戻り値は割り当てられたメモリへのポインタです。例えば次のとおりです。</p><p>この命令は、32ビット符号付き整数のための領域をスタックに割り当てます。ポインタはローカル識別子<code>a</code>に格納されます。</p><p>store命令は、指定されたポインタが指し示す場所の値を与えられた値に書き換えます。簡単に説明できる例を以下に示します。</p><p>この例では、LLVMに<code>i32</code>型の値32を<code>i32*</code>型（i32型へのポインタ）のローカル識別子<code>a</code>に格納するよう指示しています。この命令は、void型を返します。つまり、何も返さないので、ローカル識別子に代入できません。</p><p>最後は、<code>load</code>命令です。この命令は、指定されたメモリアドレスの値を返します。</p><p>上記の例では、メモリアドレス<code>a</code>（i32型へのポインタ）からi32型の値をロードします。この値は、ローカル識別子<code>2</code>に格納されます。参照先の値を取得することはできないので、値をロードする必要があります。</p><p>命令が何を意味しているか分かったので、うまくいけば、上記のIRの半分以上は読んで理解することができるはずです。残りの命令については、比較的分かりやすいはずです。<code>add</code>命令は与えられた値の加算を行い、結果を返します。<code>ret</code>命令は、関数の戻り値を指定します。</p><p>LLVMは、このIRを構築するためのAPIを提供しています。元のAPIは、C++で書かれていますが、Lua、OCaml、C、Goなど様々な言語バインディングがあります。</p><p>この記事では、Goバインディングを使用していきます。IRのビルドを始める前に、詳細を理解しておかなければならない事が幾つかあります。</p><p>モジュールは、定義と宣言の集まりです。これは、コンテナであり、必ず作成する必要があります。通常モジュールはファイルごと作成されますので、最初の例では、C言語のファイルがモジュールです。</p><p>モジュールは次のように作成します。モジュール名として文字列を渡します。これがメインモジュールとなるので、”main”と名付けましょう。</p><p>LLVMは、バイト、整数、浮動小数点などのプリミティブ型から、構造体、配列、関数型のような複雑な型まで多様な型を提供しています。</p><p>組み込み型は、<code>TypeWidthType()</code>の形式になっています。例えば、<code>Int16Type</code>は16ビット幅の整数です。</p><p>任意のビット幅を指定することもできます。</p><p>配列は次のように指定できます。</p><p>これは、要素数が16の32ビット整数型配列です。</p><p>LLVMの値は命令から戻されますが、それは定数、関数、グローバル変数等々である可能性もあります。</p><p>以下に値666を持つ<code>i32</code>型定数整数を作りました。末尾のブーリアンパラメータは符号拡張するかどうかを示します。</p><p>浮動小数点定数も作れます。</p><p>そしてこれらの値を変数に割り当てたり、関数に渡したりすることができます。ここで2つの定数値を足す加算命令を作りましょう。</p><p>これはおそらく予想するものと少々異なります。アセンブリでは、関数にラベルを使ってフローを制御します。関数に明示的な構文を備えているものの、LLVMは非常にそれに似ています。しかし、どのようにプログラムのフローの制御をすればよいのでしょうか。基本ブロックを使うのです。IRは次のようになります。</p><p>main関数があり、その関数内に3つの基本ブロックがあります。entryブロック、それから0と1のブロックです。必要な数だけ基本ブロックを持つことができます。用途は、例えば、ループ、if文などです<br>
。</p><p>LLVMのためのGoバインディングで、基本ブロックを次のように定義しましょう。</p><p>contextにブロックを追加したい関数を指定します。これは関数型ではありません。その点については後で述べます。</p><p>IRビルダはIRを作成するツールです。値、命令などを全てまとめて与える必要があります。ビルダで重要なのは、ビルドする場所を再配置するのに利用できるということと、別の場所に命令を追加できるということです。</p><p>モジュールに命令を追加する際にこのビルダを使ってみましょう。ビルダをセットアップし、関数とentryブロックを作って定数を格納するための単純な命令を追加したのが下記です。</p><p>これは次のようにIRを生成します。</p><p>関数はLLVMにおける1つの型です。関数型を定義するには幾つかの指定が必要です。戻り値の型、パラメータの型、そして関数が可変長引数かどうか、つまり引数の個数が可変かどうかを指定します。</p><p>ここまで見てきたmain関数は次のとおりです。</p><p>最初のパラメータは戻り値の型で、32 ビットの整数です。ここでの関数はパラメータを取りませんので、ただ空の配列を渡します。関数が可変長引数ではないので、falseを最後の引数に渡します。簡単ですね。</p><p>AddFunctionは指定されたモジュールに、指定された名前で関数を追加します。この関数については次のようにして後で参照できます（キーと値のマップで管理されています）。</p><p>これはモジュール内の関数を検索します。</p><p>ここまでで学んできたことをまとめてみましょう。</p><p>うまく行っていますが、<code>alloca</code>がポインタを返すため、まとめて追加することができません。ポインタを「参照しデータを取得する」ためには、幾つかのloadを生成しなければなりません。</p><p>次は計算です。<code>a + b</code>を行うには、単純にadd命令を作ります。</p><p>関数が<code>i32</code>を返しますので、次の内容を返す必要があります。</p><p>これで完成です。しかし、どうすれば実行できるのでしょうか。幾つか方法があります。</p><p>1つ目のオプションは実行ファイルに落とし込む方法としてより簡潔なので、こちらを選びます。2つ目は読者の演習用として残しておきましょう。実行ファイルを作成し、実行後にステータスコードを確認したら、結果は<code>48</code>になるはずです。Bashでこれを行うには、<code>$?</code>環境変数を表示させてください。</p><p>標準出力に表示したい場合は、<code>printf</code>関数や<code>putch</code>または同等のものを定義しなければなりません。このチュートリアルを読めばその作業も十分に可能でしょう。行き詰まった場合は、（手前味噌ですが）私が作っているLLVMベースにGoで記述した言語、Arkをチェックしてください。<a href="https://github.com/ark-lang/ark/blob/master/src/codegen/LLVMCodegen/codegen.go" rel="nofollow" title="" class="ext-link">Arkコードジェネレータはこちら。</a></p><p>そしてLLVMのバインディングに関するドキュメントは<a href="https://blog.felixangell.com/an-introduction-to-llvm-in-go/" rel="nofollow" title="" class="ext-link">こちら</a>です。知っておくべき事項はほぼ掲載されています。</p><p><a href="http://llvm.org/docs/LangRef.html" rel="nofollow" title="" class="ext-link">LLVM仕様書</a>も、同様に全てを詳細に至るまで網羅しており、命令、組み込み関数、属性なども含まれています。</p><p>寄り道はこのくらいにして、早速実行してみます。この章の概要は次のとおりです。</p><p>まず、モジュールが正しいことを確認します。</p><p>このコードはモジュールが無効の場合、エラーを表示します。モジュールが無効になる原因は様々ですが、IRの欠陥による可能性が大きいです。<code>mod.Dump()</code>呼び出しはモジュールIRを標準出力にダンプします。</p><p>では、実行エンジンを初期化しましょう。</p><p>最後に、関数を実行し、結果を標準出力に表示します。関数は引数を取らないので、空のGenericValues配列を渡します。</p><p>LLVMがインストール済みであることが前提です。幸運にもこの作業は非常にシンプルです。</p><p>Windowsを使っているなら、これは少々難しいもしれません。その他のLinuxでは、パッケージマネジャでllvmを検索してください。Macなら、Homebrewが使えます。</p><p>それからGoバインディングもインストールします。releaseの変数は362ですが、例えばllvm 3.7.0を使っているならこれは370になります。LLVMリポジトリをGOPATHにクローンし、バインディングをビルド、インストールする方法は下記のとおりです。</p><p>次に、Goファイルに”llvm.org/llvm/bindings/go/llvm”を必ずインポートしてください。完了すると、Goファイルを実行し、結果を表示させることができます。</p><p><img src="https://blog.felixangell.com/content/images/2016/03/Screenshot-from-2016-03-13-17-42-03.png" alt=""><br>
できました。新しい発見はあったでしょうか。これがプログラミング言語の記述にどのように使えるかが分かっていただけたなら幸いです。次のステップとしてKaleidoscopeチュートリアルをチェックするか、自身のプログラムをいろいろとテスト、実装してみることをおすすめします。</p><p>最後まで読んでいただきありがとうございます :)</p>
