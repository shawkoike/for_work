<p><a href="http://toddmotto.com/walkthrough-to-migrate-an-angular-1-component-to-angular-2/" rel="nofollow" title="" class="ext-link">Walkthrough to upgrade an Angular 1.x component to Angular 2</a> (2015-10-27)　By <a href="http://toddmotto.com/" rel="nofollow" title="" class="ext-link">Todd Motto</a></p><p>この記事では、シンプルなTodoアプリのAngular 1のコンポーネントを、Angular 2のコードにアップグレードする方法を見ていきます。APIの違いや文法のテンプレートを比較することで、それがAngular 2へのアップグレードに何らかのヒントを与え、難しさが軽減すると感じてもらえることを願っています。</p><p><em>注意：Angular 2は、まだ”アルファ”の状態なので、APIやこれまでの技法は変化するかもしれません。しかし、この記事は残し、コードをアップグレードしていくつもりです。</em></p><p>この小さなコンポーネントを、Angular 2で書き換えてみます。まずは、このアプリの機能は以下の通りです。</p><p>これがどのように構築されているのか、何が行われているのかを正確に理解するため、ソースコードを見てみましょう。</p><p>HTMLは非常にシンプルで、<code>&lt;todo&gt;</code>要素だけです。</p><p>そしてJavaScriptのディレクティブは、次のようになります。</p><p>この<code>todo.html</code>は、Todoアイテムに繰り返し適用するUIロジックを持つシンプルなテンプレートで、追加/削除などの全機能を管理しています。これは全て、見慣れていますね。</p><p>
</p>
<p>完成したアプリは、次のとおりです。</p><p><iframe width="100%" height="300" src="//jsfiddle.net/toddmotto/u108fkeq/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe></p><p>私が強く勧めるデザインパターンの1つは、ディレクティブの定義の中で<code>controllerAs</code>構文（<a href="http://toddmotto.com/digging-into-angulars-controller-as-syntax/" rel="nofollow" title="" class="ext-link">私が書いたこちらの記事を参照してください</a>）を使うことです。これにより、Controllerが<code>$scope</code>を自由に注入できるようになり、より”クラスのような”方法でControllerを書くことができるようになります。<code>this</code>というキーワードはPublicメソッドを作るために使われます。このメソッドはAngularのランタイムによって、自動的に<code>$scope</code>内のスコープを持つメソッドになります。</p><p>私の考えでは、<code>controllerAs</code>を使うことは、Angular 1.xコンポーネントをAngular 2へ移行させる準備には必要不可欠のステップです。Angular 2でコンポーネントを書く場合、Publicメソッドにおいてオブジェクトの定義で<code>this</code>キーワードを使うからです。</p><p>含まれるファイルと、アプリケーションのブートストラップです。</p><p>Angular 1.xとAngular 2で行う設定を、アプリのブートストラップからコンポーネントの作成まで、1つずつ見ていきます。しっかりついてきてください。</p><p><code>1.4.7</code>バージョンも含め、Angularには基本的なHTMLページがあり、<code>angular.bootstrap</code>を使って手動でブートストラップします。</p><p>ES5で、実際にAngular 2アプリのコンポーネントを作ってみます。ES6やTypeScriptは使いません。なぜなら、これだと簡単にブラウザ内でAngular 2を書けてしまい、さらには最終的に機能する例はJSFiddle内のES5で実行するからです。</p><p>しかし、1.xからES5に完全に移行させるデモンストレーションでは、最後にTypeScript/ES6の例を出しています。最終的なES6とTypeScriptの解法です。</p><p>まずはAngular 2のインクルードが必要ですが、<code>npm install</code>や依存関係のインストールをちょっとやってみる気はありません。このやり方は<a href="https://angular.io/docs/ts/latest/quickstart.html" rel="nofollow" title="" class="ext-link">angular.io</a>のサイトにあります。それでは、実行してフレームワークの基本を学び、Angular 1.xアプリを移行しましょう。</p><p>まず、<code>&lt;head&gt;</code>の中にAngular 2を含める必要があります。私が<code>2.0.0-alpha.44</code>からは<code>angular2.sfx.dev.js</code>を使っていることに気付いたと思います。この<code>.sfx.</code>はES5をSystemローダーのポリフィルを使わないことに焦点を当てた自動実行型のバンドルのバージョンですから、プロジェクトに<code>System.js</code>を加える必要はありません。</p><p>ここまでは、全ては非常に簡単です。グローバルなnamespaceは、<code>window.angular</code>の代わりに<code>windows.ng</code>になっています。</p><p>ディレクティブをAngular 2のコンポーネントにアップグレードします。</p><p>ディレクティブからJavaScriptのControllerロジックを全て分離すると次のようになります。</p><p>Angular 2では、変数<code>Todo</code>を作成します。変数<code>Todo</code>は、（<code>Component</code>や<code>Class</code>に）ひも付けされた定義と同じように<code>ng</code>モジュールの結果を指定します。これは、Angular 2に新しく追加されました。</p><p><code>.Component()</code>の中で、<code>selector: 'todo'</code>を使用するようAngularに通知します。これは、Angular 1.xの<code>.directive('todo', todo)</code>と全く同じです。さらに、Angular 1.xで<code>templateUrl</code>プロパティを使用してテンプレートの場所を教えるように、Angularにテンプレートがどこにあるか通知します。</p><p>最後に、コンポーネントのロジックを持っているのは<code>.Class()</code>メソッドなので、”コンストラクタ”クラスとして振る舞う<code>constructor</code>プロパティを使用して始めます。今のところいい感じですね。</p><p>次に、ControllerロジックをAngular 1.xからAngular 2の<code>.Class()</code>メソッドへと移行するのがいいでしょう。ReactJSを使ったことがあれば、聞いたことがあると思います。そのため、プロセスが非常に簡単な<code>controllerAs</code>構文の使用をお勧めします。</p><p>ここまでtodoコンポーネントに何が入っているか見てみましょう。publicメソッドはthisコンポーネントを使用して<code>$scope</code>オブジェクトに自動的に結び付けてくれます。DOMで使用されるControllerのインスタンスのnamespaceに<code>controllerAs: 'vm'</code>が使用されます。</p><p>では、Angular 2でControllerを完全になくして、publicメソッドを<code>.Class()</code>の定義に移動します。</p><p>ここで分かるのは、”public”メソッドは<code>.Class()</code>に渡されるオブジェクトのプロパティになり、コードのリファクタリングをする必要が一切ありません。これは、Angular 1.xでは<code>controllerAs</code>構文を<code>this</code>キーワードと共に使用していたからです。スムーズで簡単です。</p><p>この段階で、コンポーネントは動作しますが、テンプレートがまだ完全にAngular 1.xディレクティブベースのため、これをアップデートする必要があります。</p><p>移行させる必要のあるテンプレートの全文は次のとおりです。</p><p><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"todo"</span><span class="nt">&gt;</span><br>
  <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">"vm.onSubmit($event);"</span><span class="nt">&gt;</span><br>
    <span class="nt">&lt;h3&gt;</span>Todo List: ({{ vm.updateIncomplete() }} of {{ vm.todos.length }})<span class="nt">&lt;/h3&gt;</span><br>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"todo__fields"</span><span class="nt">&gt;</span><br>
      <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">"vm.label"</span> <span class="na">class=</span><span class="s">"todo__input"</span><span class="nt">&gt;</span><br>
      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"todo__submit"</span><span class="nt">&gt;</span><br>
        Add <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"fa fa-check-circle"</span><span class="nt">&gt;&lt;/i&gt;</span><br>
      <span class="nt">&lt;/button&gt;</span><br>
    <span class="nt">&lt;/div&gt;</span><br>
  <span class="nt">&lt;/form&gt;</span><br>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"todo__list"</span><span class="nt">&gt;</span><br>
    <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">"item in vm.todos"</span> <span class="na">ng-class=</span><span class="s">"{</span><br>
<span class="s">      'todo__list--complete': item.complete</span><br>
<span class="s">    }"</span><span class="nt">&gt;</span><br>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span> <span class="na">ng-model=</span><span class="s">"item.complete"</span><span class="nt">&gt;</span><br>
      <span class="nt">&lt;p&gt;</span>{{ item.label }}<span class="nt">&lt;/p&gt;</span><br>
      <span class="nt">&lt;span</span> <span class="na">ng-click=</span><span class="s">"vm.deleteItem($index);"</span><span class="nt">&gt;</span><br>
        <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"fa fa-times-circle"</span><span class="nt">&gt;&lt;/i&gt;</span><br>
      <span class="nt">&lt;/span&gt;</span><br>
    <span class="nt">&lt;/li&gt;</span><br>
  <span class="nt">&lt;/ul&gt;</span><br>
<span class="nt">&lt;/div&gt;</span></code></p><p>ここは賢く、必要な機能部分だけを分けて移行していきましょう。まず、<code>&lt;form&gt;</code>から始めます。</p><p>
</p>
<p>まず、主な変更点は新しい<code>(submit)</code>構文です。通常どおり<code>$event</code>で渡す時に、イベントがバインドされる予定であることを示しています。第2の変更点は、Controllerはもう必要ないということです。プレフィックス<code>vm.</code>が外れていることから分かるように<code>controllerAs</code>は機能しません。これはすばらしいことです。</p><p>次は<code>&lt;input&gt;</code>で双方向データバインディングをする方法です。</p><p>
</p>
<p>これで<code>ng-model</code>に双方向データバインディングを設定し、プレフィックス<code>vm.</code>を外します。完全にリファクタリングを行ったコードの部分は次のようになります。</p><p>
</p>
<p>Todoアイテムのリストに移りましょう。ここでは多くのことが起きています。<code>ng-repeat</code>でTodoアイテムの配列を展開し、条件付き<code>ng-class</code>で完了したアイテムに取り消し線を引き、チックボックスで完了アイテムに印を付け、そして、<code>ng-click</code>バインディングでtodoアイテムのリストから特定のアイテムを削除します。</p><p>
</p>
<p>上の2つの違いは、主に<code>ng-repeat</code>構文内と、<code>#item of Array</code>構文を使用する<code>ng-for</code>への置換にあります。面白いことに、Angular 2では、”要求なし”では<code>$index</code>を入手できません。入手するにはリクエストし、変数を指定して<code>(#i = $index)</code>にアクセスする必要があります。すると、<code>deleteItem</code>に特定の配列インデックスを渡すことができるようになります。</p><p>これで、Angular 2コンポーネントのマークアップ移行が完了しました。</p><p>
</p>
<p>Angular 2コンポーネント全体は次のようになります。</p><p>
</p>
<p>さらに覚えておくと便利なのが<code>.Component()</code>メソッド内の他の<code>directives: []</code>プロパティです。これはコンポーネントにどのディレクティブを含めて使用するかを教えてくれます。<code>CORE</code>と<code>FORM</code>ディレクティブモジュール内の“ng-for<code>と</code>ng-model“`を使用したので、配列で依存関係を明確に定義する必要があります。</p><p>これで完了です。正常に動作するはずです。</p><p><iframe width="100%" height="300" src="//jsfiddle.net/toddmotto/mtv8qhw5/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe></p><p>テンプレートをAngular 1.xから2へリファクタリングする時に、<a href="https://angular.io/docs/ts/latest/guide/cheatsheet.html" rel="nofollow" title="" class="ext-link">Angular 2 cheatsheet（虎の巻）</a>が大変役に立つのでぜひ見てみてください。</p><p>どのようにES6の<code>import</code>をTypeScript<code>@</code> decorator (<code>@Component</code>)とES6クラス構文を使用してエクスポートする新しいクラスを定義しているか注意してください。</p><p>すばらしいことにブラウザグローバル(<code>window.ng</code>)ならどれでも良いというわけではありません。<code>directives: []</code>依存関係の配列を含め、必要な依存関係は全て<code>'angular2/angular2'</code>からインポートされます。</p><p>他の情報に関しては、<a href="https://angular.io/" rel="nofollow" title="" class="ext-link">angular.io</a>を参照ください。</p>
