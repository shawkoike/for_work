<p><a href="http://code.hireart.com/2016/02/24/react-native-ios-app/" rel="nofollow" title="" class="ext-link">Developing our first iOS App with React Native</a> （2016-02-24） by <a href="https://twitter.com/nycshibe" rel="nofollow" title="" class="ext-link">Tom Tang</a><br>
Tom TangはHireArtでモバイル開発チームのリーダーをしています。気軽に連絡してください。<a href="tom@hireart.com">tom@hireart.com</a></p><p>候補としてモバイルアプリの作成について話し合いを始めた時、何を用いてモバイルアプリを構築するかについて、私たちには何の考えもありませんでした。クールな仕様で、楽しく使え、さらには洗練されたものでありたいという一般的な方向性は分かっていたのですが、誰もモバイルアプリを構築した経験がなかったのです。</p><p>そこで私たちはReact Nativeを使ってみることにしました。選んでみて良かったと思っています。この記事では、React Nativeを使うと決めた時に考えたことや、構築途中で学んだことを書き綴っています。</p><p>私たちはWeb開発者であって、iOS開発者ではありません。ニューヨークでの集まりで、Swiftがどれだけ性能がいいか、それでいてObjective-Cもまだ存在価値があるということを、少しかじった程度で、一番得意なのはRubyとJavascriptです。私たちのチームは2015年の初頭、FacebookのReactを利用するところから始めました。Reactに対する最初の印象はとてもポジティブなものでした。React Nativeが登場した時、（デバイスをまたがるプラットフォームは問題を起こしがちですから）私たちは当初懐疑的でした。しかし、知れば知るほど、React Nativeの虜になっていったのです。その最たる理由が以下になります。</p><p><strong>1. 一度覚えると、どこでも書ける。</strong>クロスデバイスのプラットフォームは一般的に使えないことが多いものです。通常、最小限のニーズを満たし、結果は常に最善の策とは言えません。React Nativeは同じReact.jsのフレームワークを使いますが、Androidのためにコードを書くのとiOSのために書くのとでは、共有するコードが多少あったとしても、違うプロジェクトになります。つまりそれぞれのデバイスのコードはまったくのネイティブコンポーネント（驚きましたね！）を使って、そのデバイスのためだけに書かれるということです。</p><p><img src="http://code.hireart.com/images/20160224/platform-code-b8f9d64a.png"><br>
<strong>1.宣言型のビュー。</strong>私たちはReactの宣言型ビューにも惚れ込んでいました。WebでReact Nativeを利用したときに、iOSの開発で宣言型ビューができるというのは、コードが予測でき、バグが減らせるという意味で大きなプラス要素でした。<br>
<a href="https://en.wikipedia.org/wiki/Reactive_programming" rel="nofollow" title="" class="ext-link">https://en.wikipedia.org/wiki/Reactive_programming</a></p><p><strong>2.モバイルのためのFlexbox。</strong>制約ソルバがどのようにiOSで機能するのか、よく分かりませんでしたし、そのまま進めていきたいという確証もありませんでした。最近では、<em>ほぼ</em>のブラウザでサポートされ、レイアウトを直観的なものにするFlexboxがReact Nativeで使えたのはラッキーでした（あくまで私見です）。<br>
<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" rel="nofollow" title="" class="ext-link">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p><p><img title="iOS constraint solver" alt="ios constraint" src="//www.techotopia.com/images/3/3d/Ios_8_greater_or_less_constraint.png"><br>
iOSの制約</p><p><img title="flexbox" alt="flexbox" src="https://static.bocoup.com/blog/flex-pack.svg"><br>
Flexbox</p><p><strong>1.Javascript。</strong>これは私たちが知らない（Objective-CとSwiftの）カテゴリに分類されます。分かり切ったことですが、もう1つの言語を学ぶ必要がないというのは、開発時間を大幅に削減してくれます。またReact Nativeが最初からサポートしているES6を使ってみたら、とても興奮しました。私たちはCoffeeScriptのヘビーユーザだったので、ES6に移行することは簡単だったのです。<a href="https://robots.thoughtbot.com/replace-coffeescript-with-es6" rel="nofollow" title="" class="ext-link">https://robots.thoughtbot.com/replace-coffeescript-with-es6</a></p><p>React Nativeを使えば、開発時間が短いというメリットはあっても、React Nativeコンポーネントのカスタマイズ性の低さと、依存性から、後にそれが相殺されることになると分かっていました。下記に述べるのが、React Nativeを使うことをためらっていた理由です。</p><p><strong>1.React Nativeエコシステムに制限される。</strong>私たちが初めてReact Nativeを目にしたのは、2015年9月のことでした。すでに多くのiOSのネイティブ要素が実装され、開発途中であるのを見ました。しかしながら、まだ私たちが必要とする特定のコンポーネントがReact Nativeで使えないということに不安があったのです。その後、特定のSDK（AWSとMixpanel）のための独自のReact Nativeを構築すればいいということが分かりました。</p><p><strong>2.試作段階</strong>React Nativeの更新は早く、その前に構築したコードが（まれですが）使えなくなる場合があります。開発中に何度か、この事態を経験しました。そこで影響をできる限り軽減するため、新機能が必要な時だけ意図的にアップグレードし、そのあとしっかりテストをしました。</p><p><strong>3. Google検索で見つけられない。</strong>新しいシステムのコードを書いていると、かつて誰も経験したことの無いエラーに遭遇することがあります。RubyやRailsの場合に比べて、「Google検索で見つけられない」問題の数は相当に多く、解決方法を見つけるのにはかなりの忍耐を要しました。ドキュメントを参照し、ソースコードを（古き良き時代のように）探らなくてはなりませんでした。しかしReact Nativeチームとそのエコシステムの功績は大きく、予期せぬ挙動に対処するための定期的なアップデートをリリースしてくれました。</p><p>ReactNativeのコンポーネントサポートは非常に優れていて、ActivityIndicator(スピナー)から、アラートスライダまで全てがJavascriptからシームレスに機能しました。Objective-CやSwiftの知識が無くても、ネイティブのiOSアプリを苦労なく開発できたという点について、強調してもし過ぎることはありません。その上、毎日新しいパッケージがnpm経由で入手できるようになっていました。以下にお気に入りをランダムにリストします。</p><p>Web開発の世界から来た私たちにとっては頭を抱えてしまうような難題にもいくつか突き当りました。下記がその例です。</p><p>Styles.js</p><p>Component.js</p><p>標準スタイルは次のようになります。</p><p>カスタムインラインスタイルは次のようになります。</p><p>2つをマージすると次のようになります。</p><p>ハックっぽくってあまりよろしくないですね。恐らく他にいい方法があるのでしょうが、この時点では思いつきませんでした。</p><p>これは絶対やめてください（リカーシブである再帰を除いて、循環は良くありません）。NavigatorIOSを使っていると偶然起きてしまう可能性があります。Webのルーティングはシングルステージで、自分の現在やその前の位置が分かっています。そんなところですよね。iOSでは、ビューはプッシュされ、スタックにポップされます。以前プッシュされたコンポーネントをプッシュしようとすると、エラーになります。単純にコンポーネントをrequireしようとしてカレントコンポーネントをプッシュすると、循環参照され破損してしまうかもしれません。<em>react-native-router-flux</em>を使ってこの問題は解決し、更にスケーラブルな方法でルートを推論することができました。</p><p>React Nativeはモバイルアプリを構築する素晴らしい方法です。SwiftやObjective- Cの知識が無いので、直接比較することはできませんが、とても有意義な経験でした。RNにはきめ細やかさは無いかもしれませんが、真のネイティブアプリを構築できるというメリットがあります。初めてのモバイルアプリを作成するのに、RNを使って良かったと思っています。React Nativeは進化を続けています。私たちのような小さい開発チームにとって、さっとWebからモバイルへと切り替えられるのはすごいことです。</p><p>今後、いくつか記事を投稿して、下記の問題をどのように解決したか詳細を書いてみようと思っています。</p><p>私たちのアプリがApp Storeからダウンロード可能です。</p><p><a href="https://itunes.apple.com/us/app/id1056320926" rel="nofollow" title="" class="ext-link">https://itunes.apple.com/us/app/id1056320926</a></p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/03/unnamed.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/03/unnamed.png" alt="unnamed" width="372" height="171" class="alignnone size-full wp-image-6265"></a><br>
<a href="https://www.linkedin.com/in/tom-tang-65579616" rel="nofollow" title="" class="ext-link">https://www.linkedin.com/in/tom-tang-65579616</a></p>
