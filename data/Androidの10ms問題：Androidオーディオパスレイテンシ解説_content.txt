Android’s 10 Millisecond Problem: The Android Audio Path Latency Explainer  By
Gabor Szanto, founder and CTO of Superpowered
Patrick Vlaskovits, founder and CEO of Superpoweredゲームやシンセサイザー、DAW（デジタルオーディオワークステーション）、インタラクティブなオーディオアプリ、バーチャル楽器アプリ、そして今注目のバーチャルリアリティアプリなど、低レイテンシのオーディオ機能に強く依存する多数のモバイルアプリは、全てAppleのプラットフォーム、App StoreとiOSデバイスで成功し、App StoreとiOS開発者に巨額の利益をもたらしています。こういったアプリはAndroidにはほぼ存在しません。Androidの10ms問題（ほとんど理解されておらず、多大な影響をもたらしうる非常に困難な技術的課題）のために、前述のような利益を生み出すアプリがまともなパフォーマンスを発揮できないどころか、現時点ではAndroid上に公開すらされないのです。スタートアップと開発者は、iOSでは成功しているアプリ（10ms以下のオーディオレイテンシを必要とする）をAndroidに移植、公開したがりません。オーディオパフォーマンスが低下し、批判的な口コミが広まって自分たちのプロとしての評価やブランドに傷がつくのを恐れるからです。消費者は、iOSの売上データに載っているようなアプリをAndroidで買いたいと強く希望しているのに、それができずに損をしています。いわゆる”次の10億人”と呼ばれる”モバイルオンリー”の消費者たちを考慮に入れれば、この問題(機会)のスケールの重大さがわかるでしょう。私たちはこの問題を解決したいのです。本解説では、Google Nexus 9による実際のレイテンシデータを使って、Androidの10ms問題の概観を簡単に説明します。音楽アプリはiOS App Storeの全ダウンロード数のたった3％を占めるのみですが、音楽アプリカテゴリは、ゲーム、ソーシャルネットワーキングに次いで3番目に高い収益を生み出しています。つまり、音楽アプリは低レイテンシを提供するApp Store/iOSデバイスのようなプラットフォームに効率よく利益をもたらしているということです。
Androidでは話は別です。Google Play Storeでは、音楽カテゴリは収益ランキングのトップ5位にすら入らないのです。圧倒的多数のAndroidデバイスは高過ぎるオーディオレイテンシに悩まされており、アプリ開発者はAndroidでは消費者の要求を満たすアプリを作れずにいます。こうしてAndroidの10ms問題のために、GoogleとAndroidのアプリ開発者は数10億ドルをAppleとiOS開発者に譲るままになっているのです。この解説では、往復のオーディオレイテンシは、単に1つのオーディオインプットが1つのモバイルデバイスに入力され、必要なプロセスを経た後、同じデバイスから出力されるまでの時間を指します。よくミュージシャンが言うように、人間は10ms以下のレイテンシを最も快く感じます。それよりもはるかに遅いと気持ちよく聞けないようです。多くのAndroidアプリには100ms以上のオーディオアウトプットレイテンシ、200ms以上の往復（オーディオインプットからオーディオアウトプット）レイテンシがあります。アカデミー賞をとった映画『セッション』で言うなら、半拍遅れでビートを刻むドラマーのようなものです。オーディオ関連のアプリが10msより高い往復オーディオレイテンシによって被る不便について、詳しい例を上げてみます。テクノロジ業界のリーダー、アプリ開発者、技術者、プロダクトマネジャー、エクゼクティブ、ジャーナリスト、起業家、ミュージシャン、ゲーマー、そして投資家にAndroidの10ms問題の範囲と影響を教育、浸透させるために、いかなる利害も絡まない私たちSuperpoweredがこの解説を作りました。Androidオーディオの足かせ、ボトルネックになりうる全ての事項を容易に把握できるようにするためです。目標は、Androidの10ms往復オーディオレイテンシへの挑戦のもとに集結し、協働すること、またそれ以上に、この問題をイノベーション、より良いユーザエクスペリエンスを生み出す機会に変え、Google Playの利用者、Android開発者、Android OEMと全Androidエコシステムに利益をもたらすことです。デジタルオーディオレイテンシの測定には2つの有益な測定単位があります。ここでは、オーディオ信号フローにおける全レイテンシを、ベストケースシナリオに照らして計算します。内蔵マイクのプリアンプなど、さまざまなアナログコンポーネントが存在します。こういったアナログコンポーネントは今回の場合”ゼロレイテンシ”と考えて構いません。実際のレイテンシは一般に1ms以下だからです。レイテンシ：0オーディオチップは、入ってくるオーディオストリームをあらかじめ定義された間隔で計測し、その結果の全てを1つの数値に変換します。この間隔はサンプリングレートと呼ばれ、単位はHzです。モバイルオーディオ調査とレイテンシテストアプリは、Android、iOSデバイスに搭載されたほとんどのオーディオチップのネイティブサンプリングレートが48,000Hzであることを示しています。つまり、オーディオストリームは毎秒48,000回サンプリングされているということです。ADCの実装には内部のオーバーサンプリングフィルタが含まれていることが多いため、ADCのステップをおおまかに1msレイテンシとして考えます。オーディオストリームがデジタル化されたので、この点から先はオーディオストリームはデジタルオーディオになります。デジタルオーディオは1つ1つ伝わることは滅多になく、バッファやピリオドと呼ばれるかたまりで移動します。レイテンシ：1msオーディオチップにはいくつかの役目があります。ADCとDACを制御し、複数のインプット、アウトプット間を切り替えたり、ミックスしたり、ボリュームを適用させたりします。また、離散しているデジタルオーディオサンプルをバッファにグループ化し、これらバッファをオペレーティングシステムに転送したりもします。オーディオチップは、USB、PCI、FireWireなどのバスでCPUに接続されます。各バスには、それぞれの内部バッファサイズとバッファカウント値に応じて、特有のレイテンシがあります。ここでのレイテンシ間は一般に、1ms（内部システムバス上のオーディオチップの場合）から6ms（基本的なUSBバス設定をしたUSBサウンドカードの場合）です。レイテンシ：1～6msオーディオドライバは、ほとんどの場合オーディオチップのネイティブサンプリングレート48,000Hzを使って、リングバッファに入ってくるオーディオを”バスバッファサイズ”ごとに受信します。このリングバッファはバス転送ジッタ（”粗さ”）を滑らかにするのに不可欠な役割を果たしていて、バス転送バッファサイズをオペレーティングシステムのオーディオスタックのバッファサイズに”連結”します。リングバッファからのデータ消費はOSのオーディオスタックのバッファサイズの範囲内で行われるため、当然いくらかレイテンシが追加されます。AndroidはLinuxの”上”で実行され、ほとんどのAndroidデバイスでは最も人気のあるLinuxオーディオドライバシステムALSA（Advanced Linux Sound Architecture）が使用されます。ALSAはリングバッファを次のように取り扱います。例:共通のピリオド数は2ですが、それ以上になるシステムもあるかもしれません。レイテンシ：1以上のピリオドHALはAndroidメディアサーバとLinuxオーディオドライバの間で仲介をします。HALはモバイルデバイスの製造者によって、”移植”Android上でそのデバイスに実装されます。実装はオープンで、ベンダはどんな種類のHALコードでも自由に作成できます。あらかじめ定義された構造を使ってメディアサーバと通信します。メディアサーバはHALをロードし、サンプリングレート、バッファサイズまたはオーディオ効果のような任意の優先パラメータで、インプットまたはアウトプットのストリームを作成するよう要求します。注意：HALは、パラメータに従って動作するかもしれませんし、しないかもしれませんが、メディアサーバはHALに”適応”しなければなりません。一般的にHALは、ALSAオーディオドライバと通信するために使用されるtinyALSAに実装されます。ここにクローズドソースコードを記述して、重要だと思うオーディオ機能を実装するベンダもいます。Androidソースリポジトリにある多くのオープンソースHAL実装のコードを分析したところ、おかしな設定と下手なコーディングのせいで、オーディオパスにかなりの量のレイテンシとCPU負荷が不必要に追加される癖がいくつか見つかりました。うまくHALを実装してレイテンシが追加されないようにするべきです。レイテンシ：0以上のサンプルAndroidメディアサーバは2つのサービスで構成されています。AudioFlingerは、アプリケーションとオーディオドライバの間で仲介をするRecordThreadを作成します。基本的な仕事は以下のとおりです。AudioFlingerには”Fast Mixer”パスがあります。ただし、Androidがそのように設定されている場合です。ユーザアプリケーションがネイティブ（Android NDK）コードを使っていて、ネイティブハードウェアサンプリングレートとピリオドサイズでオーディオバッファキューをセットアップする場合、このステップで、サンプリングをし直したり、追加のバッファリングやミキシング（”MixerThread”）を行ったりすることはありません。RecordThreadは”プッシュ”メソッドで動作し、オーディオドライバと厳密な同期を行いません。起動されて実行される時に”経験に基づく推測”を行おうとしますが、”プッシュ”メソッドはドロップアウトにもっと敏感な方法です。低レイテンシのシステムではいつも”プル”メソッドが使われ、オーディオドライバはオーディオチェーン全体にオーディオのインプット／アウトプットを”命令”します。Android OSの考案、設計、開発当初に、低レイテンシのオーディオが優先されていなかったのは明らかです。レイテンシ：1ピリオド（ベストケースシナリオ）Androidの主要なプロセス間通信システムの共有メモリは、AudioFlingerとユーザアプリケーションの間でオーディオバッファを転送するのに使用されます。それはAndroidの心臓部で、Android内部の至るところに用いられます。レイテンシ：0これはユーザアプリケーションのプロセスです。AudioRecordは、オーディオインプットのアプリケーション側を実装します。これは、OpenSL ESなどを経由してアクセス可能なクライアントライブラリの機能です。AudioRecordは、AudioFlingerから新しいバッファを定期的に得るため、AudioFlingerで”プッシュ”と表現される概念を使いスレッドを実行します。これは、開発者が1つのバッファでのみ機能するように設定してある場合は、オーディオパスにレイテンシを加えません。レイテンシ：0＋サンプルついにオーディオインプットは、折り返し地点となるユーザアプリケーションにたどり着きました。スレッドのインプットとアウトプットは同じではないので、ユーザアプリケーションはスレッド間でリングバッファを実装しなくてはなりません。そのサイズは最低2ピリオド（オーディオインプットに1、オーディオアウトプットに1）ですが、アプリケーションがうまく書かれていないと、しばしば力ずくで処理を行い、CPUの限界を解決するためにより多くのピリオドを使います。ここから、オーディオアウトプットに向かって今までと逆の経路をたどります。レイテンシ：1ピリオド以上、一般的には2ピリオド弱（ベストケースシナリオ）AudioTrackはオーディオアウトプットのユーザアプリケーション側を実装します。これは、OpenSL ESなどを経由してアクセス可能なクライアントライブラリの機能です。AudioFlingerに次のオーディオバッファを送るためのスレッドを実行します。Android4.4.4以降は、AudioTrackは1つのバッファだけを使うように設定されているので、オーディオパスにレイテンシは加えません。レイテンシ：0＋サンプルオーディオインプットと同様。レイテンシ：0PlaybackThreadを作ります。これはオーディオインプットでRecordThreadと呼ばれるものと逆の働きをします。レイテンシ：1ピリオド（ベストケースシナリオ）オーディオインプットと同様。レイテンシ：0以上のサンプルオーディオドライバのオーディオアウトプットは、オーディオインプットと同じ働きをし、リングバッファも使用します。レイテンシ：1ピリオド以上オーディオインプットのバス転送と同様です。ここではレイテンシは1msから6msの間にあるのが普通です。レイテンシ：1～6msADCの逆であり、デジタルオーディオがこの時点でアナログに”変換”されます。ADCと同じ理由で、DACのレイテンシはおおまかに1msと仮定します。レイテンシ：1msDACのアウトプット信号はアナログオーディオになりますが、ヘッドフォンなど接続された機器を作動させるには、追加コンポーネントが必要です。アナログオーディオインプットと同様に、アナログのコンポーネントは”ゼロレイテンシ”とみなすことができます。レイテンシ：0注釈：Google Nexus 9における、実際のレイテンシデータこの画像を埋め込みたい場合は、以下のコードをコピーしてください。&lt;a href=”http://Superpowered.com/AndroidAudioPathLatency”&gt;&lt;img src=”http://bit.ly/1I9MKxo” alt=”Android 5.0 Lollipop Audio Path Latency” title=”Android 5.0 Lollipop Audio Path Latency” /&gt;&lt;/a&gt;&lt;br/&gt;Learn more about &lt;a href=”http://Superpowered.com/AndroidAudioPathLatency”&gt;Android’s 10 Millisecond Problem&lt;/a&gt;.これまで、Androidオーディオの往復レイテンシ計測テストで最も良い結果を出したのは、Google Nexus 9です。ベストの結果はUSBサウンドカード、あるいはヘッドフォンのコネクタのマイクインプットやアウトプットと直接つながる特別なオーディオドングルを使った際の35msです。内蔵マイクロフォンアレイのノイズキャンセリング/フィードバック除去を無効にすることで、それにより生じる13msほどのレイテンシを防いでいます。ですから、上にあるのと同じモデルを使い、Google Nexus 9におけるベストケースの往復オーディオレイテンシ35msを分析してみましょう。私たちの使命は、メーカーの創造力と生産能力を向上させ、ビルダにはSuperpoweredのオーディオテクノロジがなければ不可能なものを大いに実体化してもらうことです。そのために、私たちはテクノロジを作り上げ、Androidの10ms問題を解決するオーディオスタックを検討しています。さしあたり、AndroidとiOS向けのSuperpowered Audio SDKは以下のようになります。お読みいただき、ありがとうございました。
