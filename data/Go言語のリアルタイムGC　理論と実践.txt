<p><a href="https://blog.pusher.com/golangs-real-time-gc-in-theory-and-practice/" rel="nofollow" title="" class="ext-link">Golang’s Realtime GC in Theory and Practice</a>（2016-12-01） by <a href="https://blog.pusher.com/author/will/" rel="nofollow" title="" class="ext-link">Will Sewell</a></p><p><em>(編注：誤訳、意味の分かりづらい訳を修正しました。リクエストありがとうございました。)</em></p><p>毎日、Pusherは数十億のメッセージをリアルタイム、つまり送り元から宛先まで100ms未満で送信しています。どのようにしてそれを可能にしているのでしょうか。重要となる要因はGoの低レイテンシのガベージコレクタです。</p><p>ガベージコレクタはプログラムを一時停止させるものであり、リアルタイムシステムの悩みの種です。そのため、新しいメッセージバスを設計する際には慎重に言語を選びました。Goは<a href="https://blog.golang.org/go15gc" rel="nofollow" title="" class="ext-link">低レイテンシを強調している</a>ものの、私たちは懐疑的でした。「本当にGoを使えば実現できるのか？　もしできるならどうやって？」</p><p>このブログ記事ではGoのガベージコレクタを、どのように機能し（トリコロールアルゴリズム）、なぜ機能し（こんなに短いGCによる一時停止時間の実現）、そして何よりも、それが機能するのかどうか（GCによる一時停止のベンチマークと、他言語との比較）という観点から見ていきます。</p><p>それまでに構築してきたシステムは、送信メッセージをインメモリで処理するPub/Sub方式のメッセージバスでした。Goで作成したバージョンは、最初にHaskellで実装したもののリライトです。5月にHaskellバージョンの開発を止めたのは、GHCのガベージコレクタに根本的なレイテンシの問題を見つけたのが理由でした。</p><p>以前、<a href="https://blog.pusher.com/latency-working-set-ghc-gc-pick-two/" rel="nofollow" title="" class="ext-link">Haskell実装の詳細なポストモーテム（事後検証）</a>を投稿したのですが、根本的な問題はGHCの一時停止時間がワーキングセット（つまり、メモリ内のオブジェクトの数）のサイズに比例することでした。そのケースでは、メモリ内に多数のオブジェクトがあり、結果、数百ミリ秒の一時停止時間が発生しました。コレクションを遂行している間、プログラムを妨げるのが、あらゆるGCについて回る問題です。</p><p>では、Goはどうでしょう。全スレッドが一時停止するようなGHCのコレクタと違い、Goのコレクタはプログラムと並行に走るので、長い一時停止時間を防げます。<a href="https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7?gi=3671756cb40d#.hriyd1pc3" rel="nofollow" title="" class="ext-link">バージョンアップのたびにレイテンシが改善している</a>ことを知って、Goの低レイテンシ重視の姿勢に後押しされました。見込みがあるのが分かったのです。</p><p>いかにしてGoはGCの並行処理を実現しているのでしょうか。その核心は<em>トリコロールマーク＆スイープアルゴリズム</em>です。以下のアニメーションはそのアルゴリズムの機能を示したものです。それがどのようにGCとプログラムの並行処理を可能にしているかに留意してください。つまり、一時停止時間はスケジューリングの問題になるということです。スケジューラはGCコレクタを短い期間で実行するよう設定でき、プログラムを差しはさむこともできます。低レイテンシを求めている私たちには朗報です。<br>
(編注:以下ではアニメーションを画像に切り出しています)</p><p>（スライド1 フェーズ：プログラム）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-01-1024x763.png" alt="golang-gc-01" width="770" height="574" class="aligncenter size-large wp-image-9815"><br>
<strong>しばらく処理が進んでからプロセスに加わります。</strong></p><p>プログラムはリンクリストを操作します。ノード<code>A,B</code>と<code>C</code>を作成しています。赤いオブジェクト<code>A</code>と<code>B</code>は<em>ルートオブジェクト</em>であり、常に到達可能です。ポインタも1つ存在します。<code>B.next = &amp;C</code>です。ガベージコレクタはオブジェクトを黒、グレー、白の3セットに割り当てます。現在、ガベージコレクタはサイクルを回していないため、3つのオブジェクトは白セットの中にあります。</p><p>（スライド2 フェーズ：プログラム）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-02-1024x774.png" alt="golang-gc-02" width="770" height="582" class="aligncenter size-large wp-image-9816"><br>
<strong>プログラムが新規オブジェクト、<code>D</code>を作成します。</strong></p><p>プログラムは<code>D</code>のアドレスを<code>A.next</code>に割り当てます。<code>D</code>は新規オブジェクトなので、グレーセットに配置されたのが分かります。これは一般規則によるもので、<code>D</code>がグレーに色分けされたのは、そのアドレスが<code>A.next</code>に割り当てられたためです。ポインタフィールドが変わると、ポイント対象のオブジェクトが色分けされます。アドレスを持つすべての新規オブジェクトはいずれかに割り当てられたので、それらは即座にグレーになります。</p><p>（スライド3 フェーズ：GC）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-03-1024x773.png" alt="golang-gc-03" width="770" height="581" class="aligncenter size-large wp-image-9826"><br>
<strong>GCサイクルの始まりです。</strong></p><p>GCサイクルの開始時、ルートオブジェクトはグレーセットに移されます。見てください、ルートは<code>A</code>と<code>B</code>で、既にグレーのオブジェクト<code>D</code>に加わっています。あらゆるプロセス段階はプログラムステップ、GCステップのいずれかに当たります。プログラムとコレクタは並行に走るので、プログラムステップとGCステップの差しはさみが見られるでしょう。</p><p>（スライド4 フェーズ：GC）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-04-1024x775.png" alt="golang-gc-04" width="770" height="583" class="aligncenter size-large wp-image-9825"><br>
<strong>GCステップの実行。スキャンのため、GCはオブジェクト<code>A</code>を選びます。</strong></p><p>オブジェクトをスキャンするため、コレクタはそれを黒、その子階層をグレーに色分けします。オブジェクト<code>A</code>は1つの子階層、<code>D</code>を持っており、それは既にグレーセットの中です。どのステージでも、GCがやり残した移動の数を<code>2*|white| + |grey|</code>のようにカウントできます。コレクタは全ステップで少なくとも1つの移動を行い、それがゼロに達すれば終了です。</p><p>（スライド5 フェーズ：プログラム）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-05-1024x775.png" alt="golang-gc-05" width="770" height="583" class="aligncenter size-large wp-image-9824"><br>
<strong>プログラムが新規オブジェクト<code>E</code>を作成します。</strong></p><p>プログラムは<code>E</code>のアドレスを<code>C.next.E</code>に割り当て、グレーセットに配置しました。それにより、プログラムはコレクタに残されたステップを増やしました。たくさんの新規オブジェクトを割り当てることで、プログラムは最終の破棄（スイープ）を遅延させます。ここまでで、サイズが減り、コレクタがヒープを破棄した時に再ロードされているのは白セットだけであることが分かります。</p><p>（スライド6 フェーズ：プログラム）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-06-1024x774.png" alt="golang-gc-06" width="770" height="582" class="aligncenter size-large wp-image-9823"><br>
<strong>プログラムがポインタを動かします。</strong></p><p><code> B.next = *(B.next).next</code>が実行されました。それにより、オブジェクト<code>C</code>は到達不能になります。プログラムは<code>C</code>へのポインタを復旧することはできません。つまり、コレクタは<code>C</code>を白セットに残し、それをGCサイクルの最後に回収することになります。</p><p>（スライド7 フェーズ：GC）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-07-1024x771.png" alt="golang-gc-07" width="770" height="580" class="aligncenter size-large wp-image-9822"><br>
<strong>スキャンのため、GCはオブジェクト<code>D</code>を選びます。</strong></p><p><code>D</code>にはグレーセットに引き入れる下層はありません。</p><p>（スライド8 フェーズ：プログラム）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-08-1024x776.png" alt="golang-gc-08" width="770" height="584" class="aligncenter size-large wp-image-9821"><br>
<strong>プログラムが<code>B.next = nil</code>を設定します。</strong></p><p>オブジェクト<code>E</code>が到達不能になりました。フム。<code>E</code>はグレーセットの中で、これでは回収ができません。メモリリークの心配はないのでしょうか。実際のところ、問題ありません。<code>E</code>は<em>次の</em>GCサイクルで回収されます。トリコロールアルゴリズムは、オブジェクトがGCサイクルの<em>始め</em>に到達不能だった場合、サイクルの<em>終わり</em>にそれを解放することを保証しています。</p><p>（スライド9 フェーズ：GC）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-09-1024x777.png" alt="golang-gc-09" width="770" height="584" class="aligncenter size-large wp-image-9820"><br>
<strong>コレクタがオブジェクト<code>E</code>をスキャンします。</strong></p><p>コレクタは<code>E</code>を黒セットに動かします。<code>C</code>は動いていません。それは<code>E</code>をポイントしますが、<code>E</code>のポイント先ではありません。</p><p>（スライド10 フェーズ：GC）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-10-1024x773.png" alt="golang-gc-10" width="770" height="581" class="aligncenter size-large wp-image-9819"><br>
<strong>コレクタは最後のグレーオブジェクト<code>B</code>をスキャンします。</strong></p><p>グレーセットは空になりました。</p><p>（スライド11 フェーズ：GC）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-11-1024x775.png" alt="golang-gc-11" width="770" height="583" class="aligncenter size-large wp-image-9818"><br>
<strong>コレクタは白セット（ガベージ）を解放します。</strong></p><p>グレーのオブジェクトはゼロになりました。最終的に、白セットの中身はすべて到達不能ということです。ここで、白セットにあったオブジェクト<code>C</code>をコレクタが解放します。到達不能なオブジェクト<code>E</code>は、GCサイクルの最中に到達不能になったため、次のGCサイクルまで残ります。</p><p>（スライド12 フェーズ：GC）<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/04/golang-gc-12-1024x775.png" alt="golang-gc-12" width="770" height="583" class="aligncenter size-large wp-image-9817"><br>
<strong>コレクタがセットカラーを変えます。すべて完了しました。</strong></p><p>実行中、コレクタは一切オブジェクトを移動したり、再度色分けしたりする必要はありません。その代わり、次のGCサイクルに備えて黒を再解釈して白を意味するようにしたり、その逆を行なったりします。よりシンプルで速いやり方です。</p><p>上のアニメーションはマーキングのフェーズの詳細を示しています。GCにはなお2つのストップザワールドフェーズがあります。<br>
ルートオブジェクトに対する初期スタックスキャン、そしてマーキングフェーズの終了です。嬉しいことに、<a href="https://groups.google.com/forum/#!msg/golang-dev/Ab1sFeoZg_8/_DaL0E8fAwAJ" rel="nofollow" title="" class="ext-link">終了フェーズは最近除去されつつあります</a>。この最適化については後で取り上げます。実際に試してみて、これらのフェーズの一時停止時間は非常に大きなヒープで1ms未満であることがわかりました。</p><p>並行GCであれば、複数プロセッサで同時にGCを実行する能力も見込めるということです。</p><p>並行GCで大きなヒープサイズに対しても大幅に低いレイテンシをもたらすなら、なぜストップザワールドコレクタを選ぶのでしょう。Goの並行ガベージコレクタは、GHCのストップザワールドコレクタに比べれば<em>いくらかマシ</em>、という程度に過ぎないのでしょうか。</p><p>そうとも言い切れません。低レイテンシには代償があります。最も重大な代償は<em>スループット低下</em>です。平行処理は、同期と複製に余分の作業を要し、プログラムが有用な処理に使える時間を損ないます。GHCのガベージコレクタはスループットを最適化していますが、Goが最適化しているのはレイテンシです。Pusherにとってはレイテンシのほうが重要なので、これは格好のトレードオフでした。</p><p>並行ガベージコレクションの2つ目の代償は、<em>予測できないヒープ拡張</em>です。プログラムは、GCの実行中に任意のサイズのメモリを割り当てることができます。つまり、ヒープが目標最大サイズに到達する前にGCを実行しなければならないのです。しかし、GCの実行が早過ぎると、必要以上の回収が起こってしまいます。このトレードオフには要注意です（<a href="https://docs.google.com/document/d/1wmjrocXIWTr1JxU-3EQBI6BK6KgtiFArkG47XK73xIQ/edit?usp=sharing" rel="nofollow" title="" class="ext-link">この件に関しては、Austin Clementsの優れた概説があります</a>）。Pusherでは、それを予測できないことは問題ではありませんでした。私たちのプログラムは予測可能な一定の割合でメモリを割り当てる傾向があるからです。</p><p>ここまで見ると、GoのGCはPusherのレイテンシの必要条件に最適に思えます。しかし実際の動きはどうでしょうか。</p><p>今年の初め、Haskellの実装の一時停止時間を検査する時に、一時停止時間を計測するベンチマークを作成しました。ベンチマークプログラムは、サイズの限られたバッファに繰り返しメッセージをプッシュします。古いメッセージの期限は絶えず切れていき、解放されます。ヒープサイズは大きく保つことは重要です。ヒープは参照されているオブジェクトを検知するために行ったり来たりしなければならないからです。これは、GCの実行時間が、その間で有効なオブジェクト、ポインタの数に比例する理由でもあります。</p><p>以下がGoの中のベンチマークで、バッファは配列として表されます。</p><p>James Fisherのブログ記事に続いて、Gabriel Schererが<a href="http://prl.ccs.neu.edu/blog/2016/05/24/measuring-gc-latencies-in-haskell-ocaml-racket/" rel="nofollow" title="" class="ext-link">フォローアップの記事</a>を書きました。そこでは、オリジナルのHaskellベンチマークと、OCaml、Racketの複数バージョンの比較をしています。彼はそれらのベンチマークを含む<a href="https://gitlab.com/gasche/gc-latency-experiment" rel="nofollow" title="" class="ext-link">レポジトリ</a>を作り、Santeri Hiltunenが<a href="https://gitlab.com/gasche/gc-latency-experiment/merge_requests/1" rel="nofollow" title="" class="ext-link">Java用のバージョン</a>を追加しました。ここでは、ベンチマークをGoに移植し、パフォーマンスを比較することにしました。</p><p>ややこしい話はここまでにして、以下が<a href="https://gist.github.com/WillSewell/99e0a726e86c0b4299bcfb8a345f0ff8" rel="nofollow" title="" class="ext-link">当方のシステム</a>におけるベンチマークの結果です。</p><p>ここで2つ驚いたのは、Javaの極度な成績の悪さと、OCamlの突出した優秀さです。OCamlの3ms以下の一時停止時間は、OCamlが旧世代で使っている<a href="https://realworldocaml.org/v1/en/html/understanding-the-garbage-collector.html" rel="nofollow" title="" class="ext-link">増分GCアルゴリズム</a>によるものです（OCamlを選ばない理由は並行処理マルチコア並行処理のサポートの乏しさです）。</p><p>見てのとおり、Goの一時停止時間は約7msと、上々の結果です。もちろん、Pusherが求める条件にかなっています。</p><p>ベンチマークには常に気をつけましょう。様々な実行時間は様々なユースケース、様々なプラットフォームに最適化されます。しかし、ここでははっきりとしたレイテンシの条件があり、このベンチマークは私たちのユースケースを表しているので、私たちにとってGoは役立つ、と言えます。</p><p><strong>マップ vs 配列ベース</strong>　- 元々、私たちのベンチマークはマップでアイテムの挿入、削除を行なう処理をベースにしていました。しかし、GoのGCには、大きなマップの取り扱い方に<a href="https://github.com/golang/go/issues/16293" rel="nofollow" title="" class="ext-link">バグ</a>があるため、結果が曖昧になっていました。そこで、マップを可変配列に切り替えることにしたのです。この詳細は<a href="https://gitlab.com/gasche/gc-latency-experiment/merge_requests/2" rel="nofollow" title="" class="ext-link">マージリクエスト</a>を参照してください。GoのマップのバグはGo 1.8では修正されていますが、すべてのベンチマークが移植されているとは言えないため、私は2つを区別しています。とはいえ、GCの時間がマップによって極度に悪化すると予想するだけの理由はありません（バグや実装の不備を除く）。</p><p><strong>マニュアルタイミング vs RTSタイミング</strong> – 2つ目の注意事項は、ベンチマークはタイミングの設定によって変わるということです。マニュアルタイマーを採用するベンチマークもありますが、その他は実行時間システム統計を用いています。違いが存在するのは、実行時間によってこのシステム統計が使えない場合があるからです（例えばGo）。このプロファイリングを有効にすることで、逆にGCがいくらか影響を受ける可能性も懸念されます。以上の理由から、すべてのベンチマークをマニュアルタイミングに移植します。</p><p>最後の注意事項はベンチマーク実装におけるワーストケースです。ワーストケースで繰り延べされたマップの挿入、削除のオペレーションが逆にタイミングに影響を及ぼす可能性があるのも、シンプルな配列に切り替える理由になります。</p><p>もっと多くの言語を<a href="https://gitlab.com/gasche/gc-latency-experiment" rel="nofollow" title="" class="ext-link">私たちのベンチマーク</a>に提供してください。このシンプルなベンチマークはとても一般的で、言語の選択に重大な役割を果たします。<code>$YOUR_LANGUAGE</code>のGCがどのように働くかを見たい場合は、プルリクエストを送ってください。:) 特に、Javaの一時停止時間がひどい原因を知りたいと思います。理論上はもう少し低くてもいいはずですから。</p><p>マップのバグが修正済みのバージョンのコンパイラか、配列を使った時、一時停止時間は7ms以下でした。極めて良い成績ですが、Goチームの<a href="https://talks.golang.org/2015/go-gc.pdf" rel="nofollow" title="" class="ext-link">プレゼンテーションスライド「1.5 ガベージベンチマークレイテンシ」</a>で見たベンチマーク結果から、200MBのヒープサイズなら1ms前後の一時停止が実現できるのではと思っていました（GCの時間はバイト数よりもポインタの数に比例する傾向がありますが、残念ながらその情報は提供されていません）。Twitchチームも、Go 1.7で<a href="https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#2f2f" rel="nofollow" title="" class="ext-link">1ms以下の一時停止時間が得られたと説明しています</a>(ヒープオブジェクトの数は明らかにしていませんが)。</p><p>この件について、<a href="https://groups.google.com/d/msg/golang-nuts/nOD0fGmRp_g/b_FWITKtBQAJ" rel="nofollow" title="" class="ext-link">golang-nutsメーリングリストに質問を投げてみました</a>。Rhys Hilterの考えは、これらの一時停止時間は現状未修正のバグが原因ではないかということでした。仕事が残っているのにも関わらず、GCの待機中のマークワーカーがプログラムを妨害するバグです。実験して確かめるため、<code>go tool trace</code><sup id="fnref:3"><a href="#fn:3" class="footnote-ref">3</a></sup>を起動しました。これで、プログラム実行における実行時間のふるまいを可視化できます。</p><p><img src="https://blog.pusher.com/wp-content/uploads/2016/11/go-tool-trace-gc-pause-930x300.png" alt="go-tool-trace-gc-pause" width="930" height="300" class="alignnone size-medium wp-image-2564" srcset="https://blog.pusher.com/wp-content/uploads/2016/11/go-tool-trace-gc-pause-930x300.png 930w, https://blog.pusher.com/wp-content/uploads/2016/11/go-tool-trace-gc-pause-1024x330.png 1024w, https://blog.pusher.com/wp-content/uploads/2016/11/go-tool-trace-gc-pause-500x161.png 500w" sizes="(max-width: 930px) 100vw, 930px"></p><p>サンプルから分かるように、12msの区間があり、そこではバックグラウンドのマークワーカーが4つすべてのプロセッサで走ってプログラムを妨害しています。前述のバグのせいではないかという強い疑いが湧いてきました。</p><p>この時まで、私たちのベンチマークが示す既存の一時停止時間に満足していましたが、上述の問題の修正については注視し続けるでしょう。</p><p>先に述べたように、最近、Goチームによる「GCの一時停止時間を1ms以下にする改良」の<a href="https://groups.google.com/forum/#!msg/golang-dev/Ab1sFeoZg_8/_DaL0E8fAwAJ" rel="nofollow" title="" class="ext-link">発表</a>に関していろいろな噂や情報が飛び交いました。束の間、期待が高まりましたが、すぐにこの最適化はGCのストップザワールドフェーズのひとつを取り除いたものであることが分かりました。それであれば、私の使っていたベンチマークでは既に1ms未満を達成していたのです。私たちの一時停止時間の問題は、それがGCの並行処理フェーズが原因で起きていたことでした。</p><p>それでもなお、これは歓迎すべきGCの改良であり、チームがさらにGCのレイテンシの改善に注力し続けていることの証しでもあります。この最適化についての<a href="https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md" rel="nofollow" title="" class="ext-link">技術的な説明</a>はそれ自体が面白い読み物になっています。</p><p>今回の検査で得た最も重要な気づきは、GCは、より低いレイテンシ、より高いスループットのいずれかに最適化されるということです。プログラム（オブジェクトはたくさんありますか？　その寿命は長いですか、短いですか？）のヒープ使用量によって、それらのパフォーマンスは良くも悪くもなります。</p><p>あなたのユースケースに適しているかどうかを決めるには、根本的なGCのアルゴリズムを理解していることが大切です。また、必ずGCの実装を実際にテストしましょう。ベンチマークは、実装しようとしているプログラムと同じヒープ使用量でなければなりません。そうすれば実際にGCを実装した場合の効果をチェックできます。見てきたように、Goの実装には欠陥もありますが、私たちのケースではその問題は許容範囲内でした。同じベンチマークをもっと多くの言語で見たいと思いますので、ぜひ貢献してください。:)</p><p>問題があるとはいえ、GoのGCは他のGC導入言語に比べれば優れています。Goチームはレイテンシの改善に努めており、今もそれは続いているようです。私たちは、理論においても実践においてもGoのGCでハッピーです。</p>
