<p><a href="https://www.mikeash.com/pyblog/friday-qa-2015-11-06-why-is-swifts-string-api-so-hard.html" rel="nofollow" title="" class="ext-link">Why is Swift's String API So Hard?</a> (2015-11-06) by <a href="http://mikeash.com/" rel="nofollow" title="" class="ext-link">Mike Ash</a></p><p><em>(訳注：記事をご覧の環境によって文字列が正しく表示されない場合がございます。)</em></p><p>投稿が遅れたFriday Q&amp;Aにようこそ。Swiftユーザの最大の不満の一つに、<code>String</code> APIがあります。Swiftの文字列APIは難しく鈍いため、多くのユーザが他言語の文字列APIのようであればと感じているのではないでしょうか。今日はなぜSwiftの<code>String</code> APIがこのように設計されているのか（少なくとも私がなぜそう設計されていると思うのか）を説明します。そして、基本的設計の観点から見て、なぜこれが最高の文字列APIなのかを説明します。</p><p>説明に入る前に、まず基本的な概念を構築しましょう。文字列について、漠然とは理解しているものの、あまり深くは考えないものなのではないでしょうか。文字列をじっくり考えることで、どのようなことが起きているのか理解することができます。</p><p>概念としての文字列<em>とは</em>何なのでしょうか。文字列は簡単に言うとテキストです。”<code>Hello, World</code>“も”<code>/Users/mikeash</code>“と”<code>Robert'); DROP TABLE Students;--</code>“同様、文字列です。</p><p>（ちなみに、私は、異なるテキストの概念をたった1つの文字列のタイプにまとめてしまうのは間違っていると思います。人間が読む文章、ファイルパス、SQL命令文など、それぞれ概念が異なります。そのため、言語レベルで異なるタイプのものとして表示されるべきなのです。私は、概念の異なる文字を特徴的なタイプに分類することで、多くのバグを排除できると思います。しかしながら、このようなことを行っている言語も基本的なライブラリも私は知りません。）</p><p>では、機械レベルでは”テキスト”の一般的な概念はどのように表示されているのでしょうか。それは表示によって異なります。表示方法は山ほどあります。</p><p>多くの言語において文字列は、バイトの配列です。これらバイトが何を意味するのかは、プログラムによるのです。例えば、C++の<code>std::string</code>をPython 2やGoなどの多くの言語で使った時の文字列の状態です。</p><p>C言語は中でも特異なケースです。Cでは、文字列は非ゼロのバイトのシーケンスを指すポインタで、null終端します。基本的な効果は同じですが、C配列にはゼロバイトを含むことができず、配列の長さなどを見つけるような操作にはメモリのスキャンが必要になります。</p><p>最近の他の新しい言語では、配列をUCS-2やUTF-16のコードユニットのシーケンスとして定義しています。例えば、JavaやC#、JavaScript、そしてCocoaと<code>NSString</code>を使用するObjective-Cもこのように定義しています。これは歴史的な事件から生まれたものです。Unicodeが初めて1991年に登場した時は、純粋な16ビット固定長のシステムでした。人気のある言語のいくつかもこの時期に設計されていて、Unicodeが文字列の基盤として使用されています。そのため、1996年にUnicodeが16ビットモデルから脱却した後に、これら言語の機能に変更を加えるのは難しくなってしまいました。しかし、UTF-16を使用すれば長い数字を2つの16ビットコードユニットに符号化することができるため、基本的な概念を変更することなく、文字列を16ビットコードユニットのシーケンスで表示することができます。</p><p>この概念から変異したのが、UTF-8が定義する8ビットコードユニットシーケンスの文字列です。UTF-16に似ていますが、ASCII対応の文字列でコンパクトな表示方法を実現しています。このことにより、UTF-8文字列を受け入れるように、Cスタイルの文字列を期待する関数に文字列を渡す時の変換を回避することができます。</p><p>言語によってはUnicodeコードポイントのシーケンスとして文字列を定義しています。Python 3だけでなく、<code>wchar_t</code>型が内蔵された多くのC実装言語が、このように機能します。</p><p>簡単に言うと、文字列は何らかの<em>文字</em>のシーケンスとされています。多くの場合、文字はバイトやUTF-16コードユニットであり、あるいはUnicodeコードポイントなのです。</p><p>文字列を特定の”文字”型のシーケンスとして持つのは便利です。多くの場合、文字列を配列として扱う（多くの場合、実際に配列<em>になっています</em>）ため、コードを1行ずつ取得したり、最初や最後の部分だけを切り取ったり、部分的に削除したり、要素を数えたりすることなどが簡単にできます。</p><p>問題は、Unicodeの世界でプログラミングしているため、Unicodeがいろいろと複雑にしてしまうところです。では、次の例で、文字列がどのように機能するか見てみましょう。</p><p>
</p>
<p>Unicodeコードポイントには数字（U+ nnnnと表記される）が含まれ、人間が読める名前（何らかの理由からすべて大文字のローマ字）が付けられているため、個別のコードポイントについて説明しやすくなっています。文字列は次のようになっています。</p><p>では、文字列から”文字”を取り外し、”文字”をUTF-8バイトやUTF-16コードユニット、またはUnicodeコードポイントとして扱いましょう。</p><p>まず、UTF-8から始めます。UTF-8では、文字列は次のようになります。</p><p>
</p>
<p>では、3番目のバイトとなる3つ目の”文字”を取り外してみると、次のようになります。</p><p>
</p>
<p>これは、UTF-8の文字列として有効ではありません。UTF-8バイトには3つのパターンがあります。先頭のビットがゼロに設定された<code>0xxxxxxx</code>と表示されるバイトは、普通のASCII文字を表した独立型のものです。<code>11xxxxxx</code>と表示されるバイトは、マルチバイトのシーケンスの始まりを表し、長さは最初のゼロビットの位置が示しています。<code>cc</code>で始まるバイトは、合計2バイトの長さのマルチバイトのシーケンスの始まりを形成し、<code>81</code>でシーケンスは終わります。<code>cc</code>を外してしまうと、<code>81</code>は独立した状態になってしまうため、有効なUTF-8リーダーにははじかれてしまいます。このような問題は、3番目以降のバイトを取ってしまうと起こります。</p><p>では2バイト目を削除するとどうなるでしょうか。結果は次のようになります。</p><p>
</p>
<p>これなら、まだUTF-8で有効です。しかし予想していた結果とは異なります。</p><p>
</p>
<p>人間にとって、この文字列の”2文字目”は”é”です。しかし、2バイト目は、アクセント記号の付かない単純な”e”という文字になります。アクセント記号は”結合文字”として別に加えられます。つまり、文字列の2バイト目を削除すると”e”だけを削除することとなり、結合文字のアクセント記号は代わりに”a”に付くこととなります。</p><p>では、1バイト目を削除するとどうなるでしょうか。次のように予想通りの結果を得られます。</p><p>
</p>
<p>それではUTF-16について考えていきましょう。以下はUTF-16の場合の文字列です。</p><p>
</p>
<p>2つ目の”文字”を削除してみましょう。</p><p>
</p>
<p>すると、上で説明したUTF-8の場合と同じ問題が発生します。”e”だけが削除されてアクセント記号が残るため、代わりに”a”にアクセント記号が付いてしまいます。</p><p>では5文字目を削除するとどうなるでしょうか。次のようなシーケンスが得られます。</p><p>
</p>
<p>上で説明した無効なUTF-8と同じような問題が発生します。このシーケンスは、もうUTF-16で有効ではありません。<code>d834 dd1e</code>というシーケンスは<em>サロゲートペア</em>を作っています。これは2つの16ビットで構成されるユニットのことで、16ビットの制限を超えたコードポイントを表すために使われます。このサロゲートペアの片方だけを残しても無効になってしまうのです。このような場合、通常UTF-8のコードでは完全に拒否されますが、UTF-16ではもう少し柔軟であることが多いです。例えばCocoaでは、結果として文字列を以下のように表示します。</p><p>
</p>
<p>では、文字列がUnicodeのコードポイントのシーケンスだと、どうなるでしょうか。結果は次のようになります。</p><p>
</p>
<p>この場合、どの”文字”を消しても文字列の有効性を保つことが可能です。しかし結合文字のアクセント記号に関する問題は<em>まだ</em>残っています。2文字目を削除すると次のようになります。</p><p>
</p>
<p>この方法でも、直感的に正しくない結果を避けることはできません。</p><p>これらは人為的に処理した場合の懸念事項でもあります。英語は純粋なASCIIで書ける数少ない言語の1つです。そのため、”résumé（履歴書）”を”resume”と書いたまま、求人に応募しようと思わない限り問題がついてまわります。ASCIIで表示できる範囲を超えた瞬間に、このようなおかしな表示が現われ始めるのです。</p><p>Unicodeには<em>書記素クラスタ</em>という概念が存在します。これは原則的に、人間が”文字”と認識する最小ユニットを指します。多くのコードポイントにとって、書記素クラスタは単一のコードポイントと同じことを意味します。しかし、結合文字のアクセント記号などを含むように拡張することもできます。例として使用している文字列を書記素クラスタで分割すると、とても理にかなった結果が得られます。</p><p>
</p>
<p>ここから書記素クラスタをどれか1つ削除すると、直感的に筋が通っていると思えるような結果を得ることができます。</p><p>例にしている文字列には、数値に相当する文字を含めていないことに注意してください。UTF-8やUTF-16、または単純なUnicodeのコードポイントと異なり、通常、書記素クラスタでは単一の数字を表示することができません。書記素クラスタは1つ以上のコードポイントの<em>シーケンス</em>なのです。単一の書記素クラスタは、1つか2つのコードポイントであることが多いのですが、<a href="http://www.eeemo.net/" rel="nofollow" title="" class="ext-link">Zalgo</a>のように<em>たくさんの</em>コードポイントを含むことも可能です。例として次の文字列を考えてみましょう。</p><p>
</p>
<p>このめちゃくちゃな文字列は、14のコードポイントで構成されています。</p><p>この全てのコードポイントで1つの書記素クラスタを作ります。</p><p>ここで、興味深い例を挙げましょう。スイスの国旗を含む文字列について考えてみます。</p><p>
</p>
<p>この1つの記号は、実際には<code>U+1F1E8</code>と<code>U+1F1ED</code>という2つのコードポイントでできています。これらのコードポイントは一体何なのでしょうか。</p><p>世界中の全ての国旗にそれぞれ別のコードポイントを割り当てるのではなく、Unicodeではたった26の”REGIONAL INDICATOR SYMBOL”が存在するだけです。そして、識別用の記号であるCとHを組み合わせることでスイスの国旗を表示できるのです。また、MとXを組み合わせればメキシコの国旗となります。それぞれの国旗が1つの書記素クラスタとなりますが、コードポイントは2つとなり、UTF-16のコードユニットは4つ、UTF-8のバイト数は8つとなります。</p><p>文字列にはたくさんの異なる見方があり、”文字”と呼べるものにも数多くの種類があるということを説明してきました。書記素クラスタとしての”文字”は、人間が”文字”として考えるものに最も近いです。しかし、コード内の文字列を扱う際に使う定義はコンテキストに左右されるでしょう。矢印キーに応じて挿入位置を動かす場合は、おそらく書記素クラスタを使いたくなるはずです。ツイートの140文字制限を守るために文字列の長さを知りたい場合はUnicodeのコードポイントが便利です。80文字制限のデータベースのテーブル列に文字列を詰め込みたい場合はUTF-8のバイトを使うことになるでしょう。</p><p>文字列の実装をプログラミングするときや、性能、メモリの消費量、きれいなコードなどの相反する要求のバランスを取るときは、どの表示方法を選択したらいいのでしょうか。</p><p>一般的な答えは、「単一の標準的な表示方法を選び、他の表示方法が必要な場合のために変換できるようにしておく」ということです。例えば、NSStringは標準的な表示方法としてUTF-16を使います。API全体がUTF-16を中心に構築されます。UTF-8やUnicodeのコードポイントを使いたい場合は、UTF-8やUTF-32に変換すれば、扱うことができます。これらは文字列ではなく、データオブジェクトとして提供されるため、使いやすくありません。書記素クラスタを使いたい場合は<code>rangeOfComposedCharacterSequencesForRange:</code>を使って、その境界を見つけることができますが、何か面白いことをするには膨大な作業が必要となります。</p><p>Swiftの文字列型は異なった手法をとります。標準的な表示方法はなく、代わりに多岐に渡る文字列の表示方法による<em>ビュー</em>を提供します。これにより、扱っているタスクに最も適切な表示方法を使うことが可能になります。</p><p>Swiftの旧バージョンでは、<code>String</code>は<code>CollectionType</code>と一致し、それ自体で<code>Character</code>コレクションを表していました。しかしSwift 2では、もはやこの通りではありません。<code>String</code>は大部分がそこにアクセスする最適な方法として様々なビューを表します。</p><p>また完全に正しいとは言えませんが、<code>String</code>は、いまだに<code>Character</code>にある程度有利であり、ちょっとしたコレクションのようなインターフェースを表しています。</p><p>個々の<code>Characters</code>を取得するために、<code>String</code>にインデックスを付けることができますが、それだけです。留意すべきは、標準の<code>for in</code>シンタックスで反復処理を使えないことです。</p><p>ではSwiftの観点でいう”文字”とは何でしょうか？　これまで見てきた通り、多くの可能性があります。Swiftは”文字”の考え方を書記素クラスタに置いています。上述してきたように、文字列で”文字”として人間が考えるものによく当てはまることから、一見すると、適した選択のように見えます。</p><p>さまざまなビューは<code>String</code>上のプロパティであることが分かります。例えば、<code>characters</code>プロパティは以下のようになります。</p><p><code>CharacterView</code>は<code>Characters:</code>のコレクションになります。</p><p>これは<code>String</code>自体のインターフェースとよく似ています。異なる点は、これは<code>CollectionType</code>と一致し、それが提供する切り出しや反復、マッピングやカウントといった全ての機能を持つことです。そのため、以下は機能しません。</p><p>一方、以下は正しく機能します。</p><p>イニシャライザを使って、<code>CharacterView</code>から文字列を得ることができます。</p><p>また、任意の<code>Character</code>のシーケンスから文字列を得ることもできます。</p><p>続いて階層を掘り進めていくと、次はUTF-32ビューになります。UTF-32コードユニットがUnicode コードポイントと完全に一致することから、SwiftはUTF-32コードのユニットを”Unicodeスカラ値”と呼んでいます。</p><p><code>CharacterView</code>のように、<code>UnicodeScalarView</code>のための<code>String</code>イニシャライザがあります。</p><p>残念ながら任意の<code>UnicodeScalars</code>シーケンスのためのイニシャライザがないので、もし、配列を改変したり、文字列に戻したりなどしたい場合は、ひと手間加えることが必要になってきます。任意のシーケンス<code>UnicodeScalars</code>を取る<code>UnicodeScalarView</code>のためのイニシャライザさえありません。しかし変更可能なappend関数があるので、3つの段階を踏んで<code>String</code>を構築することができます。</p><p>次はUTF-16ビューです。他とよく似ています。</p><p>このビューのための<code>String</code>イニシャライザには微妙な差異があります。</p><p>他とは異なり、failableイニシャライザです。どんな<code>Characters</code>シーケンスや<code>UnicodeScalars</code>シーケンスも有効な<code>String</code>です。しかし有効な文字列を形作らないUTF-16コードユニットのシーケンスを持つことも可能です。このイニシャライザは表示された内容が有効ではないとき、<code>nil</code>を生成します。</p><p>任意のUTF-16コードユニットのシーケンスから<code>String</code>に戻るのは、とても分かりづらいです。<code>UTF16View</code>はpublicイニシャライザを持たず、変更可能な機能をわずかばかり持つだけです。解決策としてはグローバル関数<code>transcode</code>を使うことで、<code>UnicodeCodecType</code>プロトコルで機能させます。このプロトコルはUTF8、UTF16、UTF32と3つの実装があります。<code>transcode</code>関数は、UTF8、UTF16、 UTF32の間で<code>String</code>を変換する際に使用される関数ですが、いささか乱暴なやり方です。入力では、入力値を出す<code>GeneratorType</code>を取り、出力では、それぞれのユニットの出力値を呼び出す関数を取ります。<code>UTF32</code>へ変換して、各<code>UTF32</code>を<code>UnicodeScalar</code>に変換し<code>String</code>に付け加えることで、1つずつ文字列を構築するのに使われます。</p><p>ついにUTF-8ビューまでたどり着きました。これまで見てきたことからも、予想通りの結果でしょう。</p><p>これでイニシャライザをfailableイニシャライザすることができます。<code>UTF16View</code>のときのように、UTF-8コードユニットのシーケンスは有効ではないので、イニシャライザはfailableです。</p><p>以前のように、UTF-8コードユニットの任意のシーケンスを<code>String</code>へ変換する便利な方法がありません。変換機能はここでも使うことができます。</p><p>このように<code>transcode</code>で呼び出すのは、とても骨が折れます。そこで、ちょうどいいペアのfailableイニシャライズでラップします。</p><p>これでUTF-16かUTF-8の任意のシーケンスから、<code>String</code>を作り出すことができるようになりました。</p><p>様々なビューは全てインデックス可能なコレクションですが、配列とは異なります。インデックスタイプは奇妙なカスタムの<code>struct</code>です。つまり、ビューを数字でインデックスすることはできないということです。</p><p>代わりに、コレクションの<code>startIndex</code>か<code>endIndex</code>から始め、移動には<code>successor()</code>あるいは<code>advanceBy()</code>といったメソッドを使わねばなりません。</p><p>これは困りました。何が起こっているのでしょうか？</p><p>これらは全て、文字列オブジェクト内に正準形式で格納されている、同一の基本データのビューであることを思い出してください。正準形式に適合しないビューを使う場合は、データのアクセスには変換が必要です。</p><p>上述のとおり、これら数種類のエンコーディングのサイズと長さは様々です。それは、ある1つのビューのあるロケーションを別のビューのロケーションに割り当てる簡単な方法はないということを意味します。マッピングは基本データに依存するからです。例を使って説明します。</p><p>
</p>
<p><code>String</code>の正準表現がUTF-32だとしましょう。その表示は32ビット整数の配列になります。</p><p>
</p>
<p>次に、このデータのUTF-8のビューを取得すると考えてみましょう。概念として、データは8ビット整数のシーケンスです。</p><p>
</p>
<p>このシーケンスを元のUTF-32に割り当てし直すと、以下のようになります。</p><p>UTF-8のビューにインデックス<code>6</code>の値を要求すると、ビューはその値がどこにあり何を含んでいるか把握するため、UTF-32の配列の先頭からスキャンしなければなりません。</p><p>当然、この作業は可能です。Swiftは、シンプルではないものの、そのために必須の関数、<code>string.utf8[string.utf8.startIndex.advancedBy(6)]</code>を備えています。なぜもっと簡潔に、整数でインデックスできるようにしないのでしょうか。これは、Swift的に、そのオペレーションにはコストがかかるという事実を補強しているのです。<code>UTF8View</code>が<code>subscript(Int)</code>を提供するのが当然の世界なら、これら2つのコードは同等だろうと私たちは考えます。</p><p>2つは同じように機能しますが、2つ目は極端に遅くなるでしょう。初めのループは問題のないリニアスキャンですが、次のループは各反復処理においてリニアスキャンを行うので、ループ全体に2乗のランタイムを要します。100万字の文字列のスキャンにかかる時間が10分の1秒か3時間かの違いです（私の2013 MacBook Proで行った場合の概算です）。</p><p>別の例を見てみましょう。単に文字列の最後の文字を取得します。</p><p>1つ目のバージョンは速いです。文字列の末尾から先頭に瞬時にさかのぼってスキャンし、最後の<code>Character</code>の始まりを特定して、それを取得します。2つ目のバージョンは文字列全体をスキャンします… それも<em>2度</em>です。文字列に<code>Character</code>がいくつ含まれているかを数えるため全体をスキャンしてから、特定の数値インデックスの場所を探すために<em>再度</em>スキャンします。</p><p>このようなAPIでできることは、SwiftのAPIでなお可能です。ただ、別のものであり、やや困難であるだけです。これらの違いによって、プログラマは、以上のビューが配列ではなく、配列のように実行されるわけでもないと知るのです。サブスクリプトのインデックス化を見ると、当然、インデックス化のオペレーションは速いものと考えます。<code>String</code>のビューが整数サブスクリプティングに対応している場合は、その仮定は崩れ、非常に遅いコードになってしまいます。</p><p>ここまで見てきたことを考慮すると、実用目的で<code>String</code>を使ってコードを書く場合はどのようにするのがよいでしょうか。</p><p>可能な限り最高レベルのAPIを使うことです。例えば、文字列がある文字から始まっていることを確認する必要がある場合、最初の文字を探し、比較するのに文字列にインデックスしないことです。<code>hasPrefix</code>メソッドを使えば、詳細もカバーされます。Foundationのインポートと<code>NSString</code>メソッドの使用を躊躇しないでください。例を挙げると、<code>String</code>の始まりと終わりの空白を削除したい場合、手動で反復、文字検索を行わず、<code>stringByTrimmingCharactersInSet</code>を使うのです。</p><p>文字レベルの操作を自身で行わなければならない時は、その特定のケースにおいて”文字”が明確に何を意味するのかをよく考慮してください。その解は、Swiftの<code>Character</code>型と<code>characters</code>ビューで表される書記素クラスタだった、ということは往々にしてあります。</p><p>テキストを扱う場合は、先頭または末尾からのリニアスキャンの点からも検討してください。文字数のカウントや検索のようなオペレーションは、いずれにしてもリニアタイムスキャンになる可能性が高いので、明示的にそれを前提としたコードを作成したほうが良いでしょう。適切なビューから先頭あるいは末尾のインデックスを取得し、<code>advancedBy()</code>と類似の関数を利用して、そのインデックスに必要な操作を行いましょう。</p><p>ランダムアクセスが本当に必須である場合や、効率性の低下を鑑みたうえでより単純なコンテナの利便性を求める場合は、ビューを、そのビューが内包する1つの<code>Array</code>に変換することが可能です。例えば、<code>Array(string.characters)</code>は、その文字列内の書記素クラスタの配列を生成します。この表示方法は決して効率的ではなく、いくらか余分にメモリを消費しますが、作業はかなり簡単になります。完了したら、再度<code>String</code>に変換します。</p><p>Swiftの<code>String</code>タイプは、一般とは異なる方法で文字列にアプローチします。他の多くの言語では、文字列に対して1つの正準表現をとっており、他のものを使いたければ何とかできる余地が残されています。それらの言語は、単に「正確には、文字とは何か？」という重要な問いを突き詰めず、コード内で作業しやすい方法を取っていますが、それは文字列のプロセスにおいて固有に遭遇する困難な問題を覆い隠します。Swiftはそのような覆い隠しをせず、代わりに起きている現実をはっきりと表示します。難しいかもしれませんが、無駄に難しいのではなく、筋は通っているのです。</p><p><code>String</code>APIには弱点があるのも確かなので、少しでも問題を減らすために特別な機能を使うことも考えてもよいでしょう。特に、UTF-8やUTF-16から<code>String</code>に変換するのは非常に困難かつわずらわしいものです。コード単位の任意のシーケンスから<code>UTF8View</code>と<code>UTF16View</code>を初期化するファシリティと、これらのビューを直接操作できるよう、自ら変更を加える使いやすい関数があると便利です。</p><p>今日はここまでです。次回もますます多くのトリックとやっかいごとを用意したいと思います。Friday Q&amp;Aは読者のアイデアで作られていますので、何はともあれ<a href="mailto:mike@mikeash.com">取り上げてほしいことをメールでリクエストしてください</a>。</p>
