<p><a href="https://www.paypal-engineering.com/2016/04/11/statistics-for-software/" rel="nofollow" title="" class="ext-link">Statistics for Software</a> （2016-04-11） by <a href="https://twitter.com/mhashemi" rel="nofollow" title="" class="ext-link">Mahmoud Hashemi</a></p><p>Illustrations by <a href="http://twitter.com/archgame" rel="nofollow" title="" class="ext-link">Matthew Conway</a>, CC BY SA</p><p>統計学とエンジニアリングを統合する方法はたくさんあるので、うまく始められるように幾つかご紹介しましょう。</p><p>統計学の基本に焦点を当ててきましたが、そもそも、どうやって関連するデータセットを生成すればいいのでしょうか？　私たちの答えは、コンポーネントの計測ツールを構造化することです。しかるべき所に正しいフックを使用すれば、私たちが問題をデバッグするために残業しても、パフォーマンスを向上させるために予備のサイクルがある時でも、データは必要な時に得られます。</p><p>PayPalのPythonサービスの堅牢性の多くは、信頼性の高いリモートロギング基盤によるものです。そしてこれは<a href="https://en.wikipedia.org/wiki/Rsyslog" rel="nofollow" title="" class="ext-link">rsyslog</a>と似ていますが、より強力なものです。それでも、データを上流に送信する前に、このプロセスは内部の指標を収集する必要があります。メジャーリリースがもう間近なので、2つのオープンソースプロジェクトを活用します。</p><p><a href="https://github.com/mahmoud/lithoxyl" rel="nofollow" title="" class="ext-link">Lithoxyl</a>は、アプリケーションのイントロスペクション用に設計された高レベルのライブラリです。<a href="https://github.com/mahmoud/lithoxyl#lithoxyl" rel="nofollow" title="" class="ext-link">可能な限り最もPythonらしいロギング・フレームワーク</a>であることを目的としています。これには、レザボアサンプリングやP2などを含む構造化されたロギング及び様々なアキュムレータが含まれています。しかし、もっと重要なのは、Lithoxylは出力レベルとフォーマットを計測ポイント自体とは別に管理することができるので、アプリケーション用に独立した計測イメージを作成できることです。</p><p><a href="https://github.com/mahmoud/lithoxyl" rel="nofollow" title="" class="ext-link">Faststat</a>は、より下位のレベルで動作します。その名の通り、Faststatは、ここで説明した指標とさらに多くの指標のためのアキュムレータを実装する、コンパイル済のPythonの拡張機能です。これには、<a href="https://github.com/doublereedkurt/faststat/blob/master/faststat/faststat.py#L112" rel="nofollow" title="" class="ext-link">幾何/調和</a>平均から、統計情報の更新間の時間を追跡するメタメトリックに対するマルコフ過程のような遷移の追跡までの全てが含まれています。Faststatはオーバーヘッドが少ないため、ポイント当たりわずか半マイクロ秒あまりで、私たちのフレームワークコードの最深部まで到達することができます。Faststatは独自の出力メカニズムを持っていないので、私たちの内部フレームワークには、統計情報を閲覧する簡単なWeb APIとUIはもちろん、警告とアーカイブ用のリモート蓄積サービスにfaststatデータを絶えずアップロードするgreenletが含まれています。</p><p>早くから計測ツールへ投資する利点の1つは、データ収集におけるパフォーマンスのオーバーヘッドに対する感覚を得られることです。信頼性や機能は、企業向け分野ではパフォーマンスより、はるかに重要です。私が取り組んできた多くのクリティカルなサービスは、計測ツールがなければ何倍も速いかもしれませんが、この点を除去すると、サービスのメンテナンスができなくなります。それが次のポイントです。</p><p>優れた仕事は、サイクルを要します。ここで説明した方法論は全てパフォーマンス優先ですが、サイクルを取り戻すためにサイクルを消費します。飛行機は、最前部の重い計器類が全くなければ、もっと多くの乗客を運ぶことができるでしょう。ほとんどのサービスにとって、ロギングと指標が機能そのものに次いで重要だという理由を簡単に想像できるはずです。機能と計測ツールのどちらかを選ばなければならないという状況は、アプリケーションや構成の信頼性にとって悪い前兆であることを常に忘れず、理解してください。</p><p>すぐにでも実行に移す必要があり、再利用または購読を望んでいる人には、<a href="http://newrelic.com/" rel="nofollow" title="" class="ext-link">New Relic</a>や<a href="http://prometheus.io/" rel="nofollow" title="" class="ext-link">Prometheus</a>など、幾つか有望な選択肢があります。言うまでもありませんが、私たちには私たち自身のシステムがありますが、こうした製品には<a href="https://blog.newrelic.com/2013/10/23/histograms-percentiles-new-relic-style/" rel="nofollow" title="" class="ext-link">パーセンタイル値</a>と<a href="https://prometheus.io/docs/practices/histograms/" rel="nofollow" title="" class="ext-link">ヒストグラム</a>があります。</p><p>上記のメインコースを損なわない限り、このセクションはデザートとして存在します。存分に味わってください。しかし、上記のコンセプトがPayPalのような企業のSOA環境下における要求の95パーセントを満たしていることを忘れないでください。</p><p>ここでは、記述統計、ノンパラメトリック統計を数値として応用することに焦点を当てます。統計学とは統計以上のものなのです。専用の用語があるということは、適切な回答と無回答の間には違いがあるということです。拡張の余地と業務へ応用されてきたやり方があります。</p><p><strong><a href="https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%B3%E3%83%91%E3%83%A9%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E6%89%8B%E6%B3%95" rel="nofollow" title="" class="ext-link">ノンパラメトリック統計</a></strong>は分位数を出しますが、それ以上のものも提供します。一般的に<em>ノンパラメトリック</em>では、統計的な構造を記述しますが、確率分布（例 正規分布や2項分布）についての仮定を作るものではありません。つまり、記述統計のツールボックスには、最も広範囲に応用が利くツールがあるということです。それは、見慣れた<a href="https://ja.wikipedia.org/wiki/%E3%83%92%E3%82%B9%E3%83%88%E3%82%B0%E3%83%A9%E3%83%A0" rel="nofollow" title="" class="ext-link">ヒストグラム</a>からなめらかな<a href="https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E5%AF%86%E5%BA%A6%E6%8E%A8%E5%AE%9A" rel="nofollow" title="" class="ext-link">カーネル密度推定</a>（KDE）まで、あらゆるものを含んでいます。同時に幅広い各種の<a href="https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%B3%E3%83%91%E3%83%A9%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E6%89%8B%E6%B3%95" rel="nofollow" title="" class="ext-link">ノンパラメトリック手法</a>もあり、数量的に自分のデータの分布を見出したり、パラメトリック手法の世界へ拡張したりすることも視野に入れています。</p><p><strong><a href="https://en.wikipedia.org/wiki/Parametric_statistics" rel="nofollow" title="" class="ext-link">パラメトリック統計</a></strong>は、ノンパラメトリック統計とは対照的に、データが既存の確率分布に従うと仮定されています。自分のデータが<a href="https://en.wikipedia.org/wiki/List_of_probability_distributions" rel="nofollow" title="" class="ext-link">数多くの既存の分布</a>の1つのモデルとすると設定または仮定できれば、一般化に向けた優れたセットを手に入れたも同然で、自分のシステムについて論理的な説明がつきます。Pythonのバックエンドサービスの色々なパーツから想定される確率分布について1つの論文が書き上げられるかもしれません（ヒント：多くの<a href="https://ja.wikipedia.org/wiki/%E3%83%9D%E3%82%A2%E3%82%BD%E3%83%B3%E5%88%86%E5%B8%83" rel="nofollow" title="" class="ext-link">魚</a>と<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%BC%E3%83%A9%E3%83%B3%E5%88%86%E5%B8%83" rel="nofollow" title="" class="ext-link">電話</a>に期待あり）。自分のシステムにある固有のグラフ曲線を解きほぐすのは全く大変な仕事です。しかし、現実の観測から遠く離れるのは禁物です。あらゆる拡張モデルの練習問題と同様、<a href="https://ja.wikipedia.org/wiki/%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E3%83%BB%E3%82%B9%E3%83%AF%E3%83%B3%E7%90%86%E8%AB%96" rel="nofollow" title="" class="ext-link">ブラックスワン</a>の警告の鳴き声に注意しましょう。</p><p><strong><a href="https://ja.wikipedia.org/wiki/%E6%8E%A8%E8%A8%88%E7%B5%B1%E8%A8%88%E5%AD%A6" rel="nofollow" title="" class="ext-link">推測統計</a></strong>は<a href="https://ja.wikipedia.org/wiki/%E8%A6%81%E7%B4%84%E7%B5%B1%E8%A8%88%E9%87%8F" rel="nofollow" title="" class="ext-link">記述的</a>統計とは対照的に、モデルを発展させ、将来のパフォーマンスを予想することが目標です。<a href="https://ja.wikipedia.org/wiki/%E5%9B%9E%E5%B8%B0%E5%88%86%E6%9E%90" rel="nofollow" title="" class="ext-link">回帰分析</a>や<a href="https://en.wikipedia.org/wiki/Distribution_fitting" rel="nofollow" title="" class="ext-link">分布近似</a>のような予測モデルの応用は、十分にデータを集めたのか、あるいはいくつかの指標が不足しているのかを判断するのに役立ちます。信頼できるモデルをサービスに設定し、モニタリングやアラートのシステムへ接続できれば、<a href="https://ja.wikipedia.org/wiki/%E4%BF%A1%E9%A0%BC%E6%80%A7%E5%B7%A5%E5%AD%A6" rel="nofollow" title="" class="ext-link">SRE</a>の境地へ達するでしょう。一方、多くのチームが先週のチャートに上書きして予測をしています。これは、しばしばとても効果的で、数値的な推測の必要性が低くなりますが、常に人の手を介した解析が必要で、長期にわたるトレンドの分析がうまく構築されない上に、前の週が典型的時期ではない場合（つまり、停滞期かピークの時期）にはまともに働きません。</p><p><strong><a href="https://en.wikipedia.org/wiki/Categorical_variable" rel="nofollow" title="" class="ext-link">カテゴリカルな統計</a></strong>は、数値による統計と対照的に、データを数学的に計算できるものではありません。カテゴリカルデータはIPアドレスや電話番号のように大量であるか、またはエンドユーザ言語のように少量であるかです。私たちのキーである非数値的な指標とは、カテゴリカルデータの大体の計算、あるいは<a href="https://ja.wikipedia.org/wiki/%E6%BF%83%E5%BA%A6_(%E6%95%B0%E5%AD%A6)" rel="nofollow" title="" class="ext-link">濃度</a>のことです。ストリーミング配信の濃度の予測のために、いくつかのコンポーネントでは <a href="https://en.wikipedia.org/wiki/HyperLogLog" rel="nofollow" title="" class="ext-link">HyperLogLog</a>と<a href="https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch" rel="nofollow" title="" class="ext-link">Count-Min sketches</a>が使われてきました。レザボアのサンプリングが非常に容易になり、加えてカテゴリカルデータ用にも使えるようになったのです。併せて、HLLとCMSは増大した空間効率性を提供し、さらに重要なことに、エラーの領域を明らかにしました。レザボアのサンプリングを把握した後、ただしさらに深く濃度を掘り下げる前に、PayPalのPythonサービスで広く使われている<a href="http://boltons.readthedocs.io/en/latest/cacheutils.html#threshold-bounded-counting" rel="nofollow" title="" class="ext-link">boltons ThresholdCounter</a>、つまり<a href="https://en.wikipedia.org/wiki/Streaming_algorithm#Heavy_hitters" rel="nofollow" title="" class="ext-link">相当数ヒットする要素のカウンタ</a>を見たくなるかもしれません。しかし、まずは、<a href="https://en.wikipedia.org/wiki/Statistical_data_type#Simple_data_types" rel="nofollow" title="" class="ext-link">この統計の基本的なデータタイプの一覧表</a>を見てください。</p><p><strong><a href="https://ja.wikipedia.org/wiki/%E5%A4%9A%E5%A4%89%E9%87%8F%E8%A7%A3%E6%9E%90" rel="nofollow" title="" class="ext-link">多変量解析</a></strong>を使うと多数の出力変数を一度に分析できます。多次元になるので、突出した次元を探すと必ず見つかるというような具合に、やり過ぎてしまいやすくなります。それにもかかわらず、単純で実践的な<a href="https://en.wikipedia.org/wiki/Correlation_and_dependence" rel="nofollow" title="" class="ext-link">相関</a>を追究すれば、冗長なデータ収集に関して情報を得られるのはもとより、自分のシステムに対するセンスも磨かれます。</p><p><img class="wp-image-1629 size-medium" src="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_multimodal-300x287.png" alt="Measurements are like a silhouette, a blanket over real behavior." width="300" height="287" srcset="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_multimodal-300x287.png 300w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_multimodal-768x735.png 768w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_multimodal-1024x980.png 1024w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_multimodal-624x597.png 624w" sizes="(max-width: 300px) 100vw, 300px"><br>
<em>測定値は現実の行動を覆うブランケットみたい。</em></p><p><strong><a href="https://en.wikipedia.org/wiki/Multimodal_distribution" rel="nofollow" title="" class="ext-link">多峰分析</a></strong>は現実の世界のデータの中にたくさんあります。そこでは、複数のピークや複数の分布が1つのデータセットに組み込まれています。HTTPサービスのレスポンス時間を考えてみましょう。</p><p>ここで想定できるのは、ピークが明らかに3つある、複数の重なり合ったグラフがあるということです。この誇張されたグラフから要約統計量だけを見ていると、データの実際の意味を見誤ってしまうことがはっきりと分かるでしょう。ピークが2つの場合は有効な統計的手法の範囲が狭まり、3つ以上だとピークを見るのが非常に難しくなります。有意義に分析するために、データセットを分離させたり追跡したりしたい時もあれば、あえてこの形を残し、データをいっしょくたに見ることで、より理解が深まる時もあるのです。</p><p><strong><a href="https://ja.wikipedia.org/wiki/%E6%99%82%E7%B3%BB%E5%88%97" rel="nofollow" title="" class="ext-link">時系列の統計データ</a></strong>は、測定値を1つの全体的な傾向、つまり時間間隔に当てはめることによって、測定結果を変換します。PayPalでは、<a href="http://opentsdb.net/" rel="nofollow" title="" class="ext-link">OpenTSDB</a>に送られる1分ごとのトランザクションとエラー率からPythonチームが作った<a href="https://www.google.com/finance?q=NASDAQ:PYPL" rel="nofollow" title="" class="ext-link">$PYPL</a> <a href="http://pandas.pydata.org/pandas-docs/stable/remote_data.html" rel="nofollow" title="" class="ext-link">Pandas株価分析</a>にいたるまで、時系列をあらゆる所で活用しています。全てのデータが時系列で意味をなしているわけではありません。時系列ストリームの上に何かアルゴリズムを実装することは簡単かもしれませんが、適用しすぎることについては気をつけてください。タイムバケットはデータをゆがめ、サンプルを安全に結びつける方法を減らし、誤解を招く恐れのある相関を引き起こしてしまうことにつながります。</p><p><strong><a href="https://ja.wikipedia.org/wiki/%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87" rel="nofollow" title="" class="ext-link">移動指標</a></strong>は、時にローリング指標やウィンドウ指標と呼ばれることもありますが、測定結果と時間を結びつけて計算する、もう1つの効果的な種類です。それには例えば、<a href="https://ja.wikipedia.org/wiki/%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87" rel="nofollow" title="" class="ext-link">指数加重移動平均</a>（EWMA）があり、<a href="https://en.wikipedia.org/wiki/Load_%28computing%29" rel="nofollow" title="" class="ext-link">平均負荷を算出するためにUNIXで使われていることは有名ですね</a>。</p><p>この出力結果には、コンパクトながら多くの情報が詰まっています。そして、追跡する時のコストを抑えられますが、内容を正しく解釈するには、ある程度の知識と理解が必要です。EWMAはおなじみの方法であると同時に繊細でもあります。時系列スタイルの離散するバケットを取るか、移動統計の連続するウィンドウを取るかを考えるのは楽しいものでしょう。例えば、昨日のデータを扱うのか、それとも過去24時間のデータを扱うのかといったものです。または1時間前を見るのか、直前の60分間を見るのかといったこともありますね。PayPalのPythonサービスでは、アプリケーションに人々が投げかける問題を基にして、移動指標はほとんど使わず、通常は時系列の方を多く利用しています。</p><p><img class=" wp-image-1626" src="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_bathtub-300x291.png" alt="Some survival modeling will make you feel clean." width="224" height="217" srcset="https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_bathtub-300x291.png 300w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_bathtub-768x745.png 768w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_bathtub-1024x993.png 1024w, https://www.paypal-engineering.com/wp-content/uploads/2016/04/stats_bathtub-624x605.png 624w" sizes="(max-width: 224px) 100vw, 224px"><br>
<em>生存率モデリングを少し使うだけで、クリーンなコードになる。</em></p><p><strong><a href="https://ja.wikipedia.org/wiki/%E7%94%9F%E5%AD%98%E7%8E%87%E6%9B%B2%E7%B7%9A" rel="nofollow" title="" class="ext-link">生存率分析</a></strong>は、システムコンポーネントの生存期間の分析に使われます。そして信頼性に関するエンジニアリングの論文に登場するべきものです。<a href="https://ja.wikipedia.org/wiki/%E6%95%85%E9%9A%9C%E7%8E%87%E6%9B%B2%E7%B7%9A" rel="nofollow" title="" class="ext-link">故障率曲線</a>の基本的な理解によって、実行しているプロセスの生存期間についての見識を得られます。シミュレーションや事後分析における調査さえも、故障率曲線を使うと非常に有益です。障害は、予測されている生存期間の初めや中間、そして終わりに引き起こされたものに起因します。生存期間が上書きされ、集計された故障率曲線が生成される場合です。ソフトウェア業界がハードウェア業界と同じくらいこの分析を活用するようになる時、技術の世界は、今よりも間違いなくクリーンな場所になるでしょう。</p><p>ここまで来るのに長い説明をしてきましたが、何か新しいことを学んでもらえたとしたらよかったと思います。少なくとも、私たちが取っている方法については分かってもらえたでしょう。以下の3つの教訓については、覚えておいてください。</p><p>統計、特に記述統計学からの分岐について、もっと学びたい場合は、<a href="http://allendowney.blogspot.jp/" rel="nofollow" title="" class="ext-link">Allen Downey</a>の映像による講義『<a href="http://shop.oreilly.com/product/0636920044932.do" rel="nofollow" title="" class="ext-link">Data Exploration in Python</a>』や彼が出している無料の本『<a href="http://greenteapress.com/thinkstats/" rel="nofollow" title="" class="ext-link">Think Stats―プログラマのための統計入門</a>』そして『<a href="http://greenteapress.com/wp/think-bayes/" rel="nofollow" title="" class="ext-link">Think Bayes―プログラマのためのベイズ統計入門</a>』をお勧めします。企業向けソフトウェア開発をもっと学びたい場合やトレーニングが必要な開発者を抱えている場合、私の新たな映像による講義『<a href="http://sedimental.org/esp.html" rel="nofollow" title="" class="ext-link">Enterprise Software with Python</a>』を見てみてください。PayPalのPython開発によるソフトウェアの基本がさらによく解説されており、<a href="http://shop.oreilly.com/product/0636920047346.do" rel="nofollow" title="" class="ext-link">oreilly.com</a>や<a href="http://techbus.safaribooksonline.com/video/programming/python/9781491943755" rel="nofollow" title="" class="ext-link">Safari</a>で視聴できます。</p><p>あなたがこの記事で説明されたテクニックを適用してみたり、紹介したリンク先を活用してみたりすることによって、この記事が時間の節約になるような、十分に使える指針になるとすれば幸いです。実社会で数年働いたあとには、誰もが統計について再度向き合ってみる必要が出てきます。学校で統計を学んだとしても、実社会や実データ、そして実際の問題は、学校で統計の試験をパスした人でさえも、悩ませてしまうものです。相互接続性が増せば、全てのソフトウェアエンジニアリングというボートが、堅牢な測定結果という上げ潮に、うまく乗れることになるでしょう。</p>
