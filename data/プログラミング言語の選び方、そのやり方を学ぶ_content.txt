Choosing a Programming Language （2016-06-06） by Jon Gjengset(編注：2016/7/27、頂いたフィードバックを元に記事を修正いたしました。)プログラムを習得しようとする場合に最初に決めることの1つは、どのプログラミング言語を学ぶかです。誰かが決めてくれたり、その言語を使うクラス、あるいは使う必要のあるフレームワークによって指示されていたりする場合もありますが、少なくとも幾つかの選択肢があることが多いでしょう。1つ目（そして2つ目）の言語を選ぶのは、なかなか難しいものです。というのも、選択肢が多過ぎるのです。ある言語と別の言語がどう違うかは、必ずしも明確ではありません。自分がしたいことを実現するのにどちらが “より適切” かとなると、さらによく分からなくなります。本稿では、選択肢となり得る言語の概要と、各言語を差別化するものについて説明することによって、読者の皆さんが確かな情報に基づいて学ぶ言語を決定できるよう、手助けをしたいと思います。本稿は、言語のレビューでも、 “最善の” プログラミング言語を見つけるヒントでもありません。言語の様々なタイプについて説明し、各タイプに属する言語の例を挙げますが、どのカテゴリの言語にするかや、その中のどの言語にするかという選択は、ご自分で行ってください。本稿を読んで、十分なコンテキストと用語を知り、ご自分で確かな情報に基づいて厳密に言語の調査を続けられるようになれば幸いです。プログラミング言語は、一般に多くの様々なカテゴリに分類されます。これらは、しばしば文献内で “パラダイム” と呼ばれます。本稿でも触れますが、どのパラダイムに属するかの境界線が明確でない場合が珍しくなく、その傾向は、特により新しい言語で顕著です。多くの言語は、非常に似通っていて、違いは、大抵、機能にではなく、構文、エコシステム、コーディング規約といったものにあります。しかしながら、パラダイムは、詳細を見比べる言語の数を絞るのに役立ちます。その中で、比較する言語は、全て同じことができるということを心に留めておくことが重要です。つまり、どの言語でも、画面への表示、計算、ファイルの読み込み、インターネットへの接続などの操作ができるのです。それをどのように実現するかが異なり、差が出るのは、多くの場合、使いやすさです。言語によって、統計的計算により適していたり、Webサイトの構築に向いていたり、ハードウェアとの対話が得意だったりします。これが、まずどのようなことをしたいのかをよく考えてから言語を探し始めることが重要である理由の一つです。プログラミング言語を最も明確に区別できる特徴の1つから説明しましょう。ハードウェアの抽象化のレベルです。コンピュータの内部動作の多くがプログラマから見えにくい言語は、通常 “高水準” 、それに対して、こういった低い水準の詳細がプログラマからよく見える言語は、 “低水準” と呼ばれます。この区別は、カテゴリ分けというよりもレベル分けです。多くの言語は、抽象化レベルにおいては、 “中間水準” と考えることができます。一般に、抽象化には代償が伴い、より高い水準の言語ほど、パフォーマンスが下がります。とは言うものの、高水準言語と呼ばれるものでも、そのパフォーマンスはほとんどのアプリケーションの実行に差し支えないレベルです。従って、アプリケーションの許容範囲のパフォーマンスが出せる “最も高い” 水準の中から言語を見つけるべきです。また、抽象度が増すと、プログラムの内部動作がさらに見えにくくなります。つまり、裏で繰り広げられる “マジック” が増えるということです。プログラマから見えないということは、それによってプログラマの入力が減るため、望ましい機能とみなされる場合も多いですが、プログラムが異常終了したりパフォーマンスが期待値に及ばなかったりして、その原因を探る必要が出てくると、もどかしく思うでしょう。どの程度のマジックが適度かは、個人の好みの問題で、多くの言語で試して初めてどの程度が自分にとって心地良いのか分かるかもしれません。話が複雑になる前に、この水準の複数の異なる “層” と各層に当てはまる言語の例を見ましょう。こうして適切な抽象化レベルを決定しても、学ぶ言語を選定するまでには、大抵の場合、そこからまた長い道のりになります。各層に含まれる言語は、機能面ではかなり似通っているものの、構文はそれぞれ異なっているためです。そこで、同一の層に属する言語をさらに細かく評価するため、新たな水準を持ち込むのが有用かもしれません。この状況で私が言語を比較する際にたびたび使う水準が、 “厳格性” です。厳格性の高い言語は、コードを書く際の難易度も高くなります。その言語のコンパイラが、書いたコードに対して「言語の文法に “正しく” 準拠している」と認識するための基準が厳格になるためです。しかしそのコードは、コンパイルに成功しさえすれば、コードを書く際の苦労は正しいことだったのだと確信できます。逆に、厳格性の低い言語はコードを書く際の制約が少なくなりますが、プログラムの実行中に問題が発生して異常終了する確率も高くなります。厳格性の高低とはどんなものかを示すため、最も低いレベルから順番に、どういう状況を指すのかを以下で説明します。プログラミングを学びたい意欲はあるけれど、具体的に思い描いているユースケースがほとんどない、あるいは全くない場合、上記のどのカテゴリから選べばいいのか、見当が付けにくいかもしれません。こんな状況に置かれている人は、より強く興味を引かれているのがどの分野なのかを自問するといいでしょう。低水準言語を学ぶ場合、必然的にコンピュータのCPUとメモリの動作を中心に学習を進めることになります。その結果、オペレーティングシステム（OS）、デバイスドライバ、リソースを最大限に活用するゲームなどを構築する時、製品のパフォーマンスを向上させるにはどうすればいいのか見当がつけられるほどの、確かな基礎知識を身に着けることができます。一方、高水準言語から学習を始める場合、低水準言語に含まれるハードウェア制御の詳細を気にかけることなく、すぐにアルゴリズムやデータ構造に取り組むことができるという特徴があります。過去に数学またはそれに近い分野の学習経験がある場合や、早く解決したい問題に直面している場合は（例：データアナリティクス、ちょっとした便利ツールを作りたい、Webサイトなど）、こちらが向いているかもしれません。上記の説明で、皆さんがどの言語を選んで学び始めればいいのか、適切な判断が下せると期待しています。ただし避けられないことですが、学習を進めるうちに、選んだ言語が自分のやりたいタスクには不向きと気付いたり、その言語でよく理解できない部分があって学習が進まずイライラしたりすることがあります。こんな事態に直面した時には、迷わず別の言語に切り替えて学習を続けましょう。多くの場合、新しい言語はほとんど、構文については今まで学んでいたものと違う印象を受けるでしょう。特に、同格性や抽象化について同水準の別言語を選んだ場合はなおさらです。“遠く離れた” 言語に切り替える場合は、新しく学ばなければいけない概念が多いので、より多くの困難が伴います。幸い、それまでに学んだことを新しい言語に流用することは簡単にできます。変数、文字列、関数、モジュールなどの概念は、ほとんどの言語に共通するからです。さらに、学んだ言語の数が増えるほど、学習は容易になっていきます。経験豊富な開発者が大抵、幾つもの言語に通じている理由はここにあります。ある言語を一度学んでいれば、別の言語を学ぶのは簡単です。そして新しい言語を学んだことによって、既に使っている言語でプログラミングする際、その作法が変わることは珍しくありません。新しい言語を選ぶ、または別の言語の作法をごっそり流用するのは、プログラマの成長過程において自然なことです。恐れずに挑みましょう。では幸運を祈ります。どの言語を学ぶかで悩み過ぎないようにしてください。特に学習を始めたばかりなら、仮にさらに別の言語を学びたくなったとしても、今学んでいることは後で必ず役立ちます。
