es6-cheatsheet(2016-02-08時点) by David Leonard and contributers日々の仕事の中で役に立つES2015（ES6）のティップス、コツ、ベストプラクティス、プログラムの見本をご紹介します。コントリビューション歓迎です！varの使用例です。しかし、varをletへ置き換えると以下のようになります。上記の挙動の変化で明確になるのは、varを使った過去のプログラムをリファクタリングする際には注意しなければならないということです。やみくもにインスタンスのvarをletに置き換えると、予想外の挙動を引きおこします。（目次へ戻る）

ES6のブロックを使います。（目次へ戻る）

レキシカルスコープからthisのコンテキストを守るために、今まではよく関数をネストしていました。下記のような例です。この問題の一般的な解決法は、thisコンテキストを変数として格納することです。thisの正しいコンテキストを受け渡すこともできます。下記のようにコンテキストを結びつけることもできます。アロー関数を使うと、thisの値を隠さずに上記を書き換えることができます。単純に値を返す関数式として使う場合、アロー関数はもっと簡潔になります。（目次へ戻る）

ES6では、標準ライブラリが膨大に増えました。この変更にともない、.includes()や.repeat()のような、文字列にも使える新たなメソッドも追加されています。文字列が含まれているかどうかを明らかにするために戻り値が&gt; -1か否かを確認する代わりに、ブーリアン値を返す.includes()を使うだけで足ります。ES6では、もっと簡単に実装できます。テンプレートリテラルを使うと、特殊文字を明示的にエスケープしなくても文字列内で使うことができます。また、テンプレートリテラルは補間をサポートしているので、文字列と数値を結びつけるタスクもできます。もっと簡単にします。ES5では、改行を次のように追加していました。あるいは、こんな感じです。テンプレートリテラルでは明示的に改行を示す必要がありません。テンプレートリテラルでは式も同じように扱えます。（目次へ戻る）

デストラクチャリングによって、配列やオブジェクトから（深くネストされていたとしても）値を抽出し、より便利な構文で変数の中に保存することができます。（目次へ戻る）

ES6以前は、クライアント側にモジュールを作るためにはBrowserifyのようなライブラリを、Node.jsではrequireを使っていました。ES6では、全てのタイプのモジュール（AMDとCommonJS）を直接使うことができます。ES6では、いろいろなエクスポートが可能で、名前付きエクスポートを実行することができます。オブジェクトのリストのエクスポートもできます。また、関数やオブジェクト、値（など）も、exportというキーワードを使うだけでエクスポートできます。最後に、デフォルトのバインディングもエクスポートできます。ES6は、様々なインポート機能を提供してくれます。以下に示すように、ファイルを丸ごとインポートすることができます。Pythonと同様に、名前付きインポートがあります。また、名前付きインポートの名前を変更することもできます。それに加え、全てをインポートすることもできます（名前空間インポートと呼ばれることもあります）。最後に、モジュールから値のリストをインポートすることもできます。デフォルトのオブジェクトをインポートする時は、どの機能をインポートするか選択することができます。以下のように、これをさらに簡略化することもできます。（目次へ戻る）

ES5では、デフォルトの値、不定の引数、名前付きパラメータを必要とする関数を扱うために様々な方法をとっていました。ES6を使えば、より簡潔な構文でES5以上のことができます。ES6では、関数の中でパラメータにデフォルトの値を簡単に与えることができます。ES5では、引数の個数が定まっていない場合このように扱いました。restオペレータを使うことで、個数の定まっていない引数を渡すことができます。ES5で名前付きパラメータを扱うパターンの1つには、jQueryから適用された、options objectパターンを使うというものがありました。これと同じ機能性を、関数の正式なパラメータとしてデストラクチャリングを使うことによって成し遂げることができます。全ての値をオプションにしたい場合は、空のオブジェクトをデストラクチャリングすることによってできます。ES5では、以下のようにMath.maxでapplyメソッドを使うことで、配列内の最大値を見つけることができていました。ES6では、関数のパラメータとして使うための値の配列を渡すためにspread演算子を使うことができます。理解しやすい構文を使って、簡単にリテラルの配列を連結することができます。（目次へ戻る）

ES6より前でクラスの実装を行う時は、プロトタイプを拡張してプロパティを追加し、コンストラクタ関数を生成していました。そして下記のように拡張したクラスを生成していました。ES6ではこれを内部で処理してくれる糖衣構文が提供されているため、直接クラスを生成することができます。キーワード extendsを使って拡張できます。（目次へ戻る）

ES6以前もシンボルは存在していましたが、ES6ではシンボルを直接扱えるパブリックインターフェースを備えています。シンボルは変更不可能かつユニークで、どのハッシュにおいてもキーとして使うことができます。Symbol()またはSymbol(description)をコールすれば、グローバルに参照のできないユニークなシンボルを生成できます。Symbol()のユースケースでは、あなたのロジックにサードパーティのオブジェクトや名前空間をパッチすることができますが、ライブラリのアップデートと衝突しないという確信がある場合だけにしてください。例えば、クラスReact.ComponentにメソッドrefreshComponentを追加したい場合、後のアップデートの時にメソッドを侵害しないことを確認してください。Symbol.for(key)も不変でユニークなシンボルを生成しますが、こちらはグローバルに参照できます。Symbol.for(key)を同じように2回コールすると、同じシンボルのインスタンスを返します。注：Symbol(description)の場合は違います。シンボルに共通のユースケース、特にSymbol.for(key)を使うのは相互運用性のためです。これを行うには、既知のインターフェースを含むサードパーティのオブジェクト引数上で、コードにシンボルのメンバを探させます。以下のようになります。他のライブラリでも同様です。（目次へ戻る）

マップはJavaScriptにおいて非常に重要なデータ構造です。ES6以前はオブジェクトを介してハッシュマップを生成していました。しかしこの場合、過って関数をプロパティ名で上書きしてしまう危険性があります。マップを使えば、値のsetやgetそしてsearchが（もっと多くのことも）できます。マップの最も素晴らしい点は文字列以外も使えるということです。キーとしてあらゆる型を、文字列に型変換せずに使えます。.entries()を用いてマップを反復処理させることもできます・（目次へ戻る）

ES6以前のバージョンでプライベートデータを保存するには様々な方法がありましたが、その1つに命名規則を用いる方法がありました。しかし命名規則はコードベースに混乱をきたしかねず、規則の一貫性を保つのも難しいものです。代わりに、WeakMapを使って値を保存しましょう。プライベートデータを保存する時にWeakMapを使う利点は、キーによってプロパティ名が表に出ないところです。プロパティ名はReflect.ownKeys()を使って参照します。WeakMapを使うデータ保存のより実用的な例としては、DOMそのものを汚さずにDOM要素に関連したデータの保存ができるということが挙げられます。ガベージコレクションによってオブジェクトが破棄されたら、WeakMapはそのオブジェクトが指定したキー値のペアを自動的に削除します。（目次へ戻る）

Promiseは下記のような階層の深いコード（コールバック地獄）を解消します。次のような縦型のコードにしてくれます。ES6以前はbluebirdやQを用いていましたが、今はPromiseがネイティブに実装しています。2つのハンドラがあり、resolve（Promiseが解決された時に呼ばれる関数）と、reject（Promiseが拒否された時に呼ばれる関数）です。Promiseを使用した具体例を挙げます。Promise.all()を使えば、Promiseを並列化して非同期処理の配列を扱うこともできます。（目次へ戻る）

Promiseがどのようにしてコールバック地獄を解消するのに役立つかという話とも似ているのですが、ジェネレータはコードをフラット化するのに役立ちます。つまり、非同期コードを同期的に処理できます。ジェネレータは本質的に、実行を一時停止する関数で、結果的に式の値を返します。ジェネレータを利用したシンプルな例を下記に挙げます。nextはジェネレータを更に押し進め、新しい式を評価します。上記の例は非常によく練られていますが、ジェネレータを使えば、同期的な手法で非同期コードを書くことができます。ここではデータを返すジェネレータ関数を書いています。yieldの力によって、entry1がパースに必要なデータを備え、data1に保存されることが保証されます。ジェネレータを用いれば同期的な方法で非同期コードが書けます。しかし、エラー伝搬に対する明確で簡単なパスはありませんから、Promiseでジェネレータを補います。それからnextを使ってジェネレータをたどっていく関数を書きます。この時、今度は上記のメソッドrequestを活用してPromiseを生成します。Promiseでジェネレータを補うことにより、Promiseの.catchとrejectを使ってエラーを伝搬する明確な方法が手に入りました。新しく補強されたジェネレータの使用法は以前と同様に簡単です。以前と同じようにジェネレータを使い、実装を再利用することができ、とても便利ですね。ジェネレータとPromiseを使えば同期的な方法で非同期コードを書くことができ、優れたエラー伝搬の能力を取得できますが、同等のメリットがある、もっとシンプルな構造もご紹介しましょう。async awaitです。（目次へ戻る）

ES2016から搭載予定の機能async awaitを使えば、ジェネレータとPromiseを使って達成したのと同等の内容を、より少ない労力で達成することができます。内部的にはジェネレータと似たような挙動ですが、ジェネレータとPromiseの組み合わせよりもこちらの利用を強くお勧めします。ES7とBabelをすぐ活用したいなら、優れた資料がこちらにあります。（目次へ戻る）
