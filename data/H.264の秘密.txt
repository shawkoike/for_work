<p><a href="https://sidbala.com/h-264-is-magic/" rel="nofollow" title="" class="ext-link">H.264 is Magic</a> by <a href="https://twitter.com/SidBaIa" rel="nofollow" title="" class="ext-link">Sid Bala</a></p><p><small>(2016/12/11、いただきましたフィードバックをもとに翻訳を修正いたしました。)</small></p><p>H.264は、動画圧縮コーデックの標準規格です。ネット上の動画、Blu-ray、スマホ、セキュリティカメラ、ドローンなどなど、今やあらゆるところでH.264が使われています。</p><p>H.264は注目すべき技術のひとつです。たったひとつの目標、つまりフルモーションビデオの送信に要するネットワーク帯域を削減することを目指した30年以上の努力の結晶なのです。</p><p>技術的な面でも、H.264はとても興味深い規格です。この記事では、その一部について概要レベルでの知識を得られることでしょう。あまり複雑だと感じさせないようにするつもりです。今回おはなしする概念の多くは動画圧縮全般にあてはまるものであり、H.264に限ったものではありません。</p><p>未圧縮の動画ファイルは、各フレームのピクセルデータの二次元バッファをまとめた配列になります。つまり、三次元（二次元の空間座標と一次元の時間座標）のバイト配列になるということです。ひとつのピクセルを表すには3バイトが必要になります（光の三原色である赤・緑・青についてそれぞれ1バイトを使います）。</p><p>1080p @ 60 Hz = 1920x1080x60x3 =&gt; 生データのサイズは、<strong>約370MB/秒</strong></p><p>これをそのまま扱うのはまず不可能でしょう。たった2分の動画でも、50GBのブルーレイディスクに収まらなくなってしまいます。ファイルをどこかに移動させるのもたいへんです。こんなデータをRAMからディスクに落とそうとすると、たとえSSDを使っても問題が発生します<a href="#fn01">*1</a>。</p><p>なので、圧縮が必要になるのです。</p><p>その質問にお答えする前に、まずこれを見てください。アップルのホームページです。<br>
<img class="alignnone" src="https://sidbala.com/content/images/2016/11/HomePage.png" alt="" width="1136" height="796"><br>
この画面をキャプチャして、ふたつのファイルを作ってみました。</p><p>いいえ、これで正しいです。300フレームのH.264動画のサイズが175KBで、その動画の1フレームをPNGに切り出すと1015KBになります。</p><p>動画のほうでは300回のキャプチャをしているのに、ファイルサイズは1/5になりました。つまり、H.264はPNGにくらべて1500倍も効率的だということです。</p><p>そりゃもうトリックだらけですよ！H.264は、思いつく限りのあらゆるトリックを使っています（あと、たぶんみなさんが思いもよらないトリックもたくさん使っているでしょうね）。その中でも重要なものについて、これから説明します。</p><p>レーシングカーを作っているとしましょう。少しでも速く走らせる必要があります。まず何をするかといえば、重さを減らすことを考えるでしょう。現在の車両重量は1.36トンです。要らないものはどんどん捨てていきましょう。バックシート？そんなの要りませんね。サブウーファー？さようなら。音楽なんて聴きません。エアコン？外しちゃいましょう。トランスミッション？要らな……ちょっと待った！さすがにこれは外せませんね。</p><p>このように、必要なもの以外はすべて取り外します。</p><p>不要なビットを削除してサイズを減らす考えかたを、非可逆圧縮といいます。H.264は<strong>非可逆</strong>コーデックです。あまり重要でないビットは削除して、重要なビットだけを残します。</p><p>PNGは<strong>可逆</strong>コーデックです。つまり、圧縮しても何も失わないということです。PNG形式の画像からは、元のデータをビット単位で完全に復元できます。</p><p>画像をトリミングする自明な方法なんてありません。たとえば、画像の右上部分は未使用だとみなせる場合もあるかもしれません。そんな場合なら、そこはすべてゼロだということにして、その部分の情報を切り捨てることもできるでしょう。これで、必要なスペースは3/4になります。1トンまで減らせました。あるいは、画像の周辺部分を切り取ってしまう手もあるかもしれません。重要なものがそんな端っこにあることはないでしょうからね。などなど、いろいろな手段が考えられます。しかしH.264が使うのは、そんな方法ではありません。</p><p>H.264は、他の非可逆画像圧縮アルゴリズムと同様に、細かい情報を切り捨てています。元の画像と切り捨てた後の画像を、拡大してみました。<br>
<img class="alignnone" src="https://sidbala.com/content/images/2016/11/CompressedImage-1.jpg" alt="" width="3154" height="1450"><br>
圧縮後の画像では、MacBook Proのスピーカーグリルの穴が見えなくなっていることがわかります。拡大しなければ、その違いにすら気づかなかったのではないでしょうか。右側の画像のサイズは、なんと元画像のたった<strong>7%</strong>です。これはまだ、昔ながらの意味での「圧縮」処理を施してすらいない段階ですよ。車両重量がたったの90kgになったと思うと、すごいことですよね！</p><p>それを説明するには、少し数学の知識が必要になります。</p><p>さあここからが本番ですよ！情報理論の授業を受けたことのある人なら、情報エントロピーのことを覚えているでしょう。情報エントロピーとは、何らかの情報を表すために必要なビット数のことです。何らかのデータセットのサイズそのものを表すものではないことに注意しましょう。そのデータセットに含まれうる情報を表現するために、最低限必要なビット数を表すものです。</p><p>たとえば、コインを1回投げてどちらの面が出たかという結果を表すデータなら、必要な情報エントロピーは1ビットです。2回投げた結果を記録するなら、2ビット必要になるでしょう。ここまでだいじょうぶですか？</p><p>奇跡的に、10回投げて全部オモテが出たとしましょう。それを誰かに伝えるときに、あなたならどう言いますか？「オモテが出てオモテが出てオモテが出てオモテが出てオモテが出てオモテが出てオモテが出てオモテが出てオモテが出てオモテが出ました」なんて言わずに、きっと「10回投げて、ぜんぶオモテが出ました」と言うでしょう。ほら！たった今、あなたもデータを圧縮したわけですよ。これでつまらない講義の時間を省けました。簡単ですね。単純化しすぎていることは認めますが、何らかのデータを別の短い形式に変換して、元と同じ情報を維持したわけです。これを、データの<strong>冗長性</strong>を下げたといいます。このデータセットの情報エントロピーは変わっていません。単に、表現方法を変えただけです。この手のエンコーダーのことを<strong>エントロピー符号器</strong>と呼びます。これは汎用的な可逆符号器で、画像に限らずあらゆる種類のデータで使えます。</p><p>情報エントロピーについて理解できたところで、データ変換に進みましょう。データは、いくつかの基本単位で表現できます。二進表現なら、0と1を使います。十六進なら16種類の文字があります。これらふたつの表現を切り替えることは簡単です。二進形式だろうが十六進形式だろうが、本質的に同じというわけです。ここまでだいじょうぶですか？では続けましょう。</p><p>さて、時間や空間によって変化する任意のデータセット（画像の輝度など）を、別の座標空間に変換できるものとします。ここでは、XY座標のかわりに、周波数座標を使うことにしましょう。X軸とY軸ではなく、freqX軸とfreqY軸を利用する座標空間です。この表現方法を、<strong>周波数領域</strong>表現と呼びます。この表現に関する難しい定理<a href="#fn02">*2</a>があります。それによると、あらゆるデータをこの形式で表現できて、freqXとfreqYが十分高ければ完全な可逆変換ができるとされています。</p><p>freqXとfreqYは単位基準のひとつです。十六進から二進への変換と同様に、おなじみのXY座標からfreqXとfreqYに変換することができます。先ほどの画像を周波数領域で表すと、このようになります。<br>
<img class="alignnone" src="https://sidbala.com/content/images/2016/11/BasicFFT-2.png" alt="" width="1577" height="725"><br>
先ほどの画像におけるMacBook Proのグリル部は、周波数成分の高い情報を持っています。コンテンツが細かく変化する場合は、周波数成分が高くなります。色と明るさが徐々に変化する場合（グラデーションなど）は、周波数成分が低くなります。そして、すべての情報が両者の間のどこかにおさまります。細かく切り替わる場合が高周波数で、グラデーションが低周波数。わかりましたか？</p><p>周波数領域表現において、周波数成分の低い部分は中央に近づきます。逆に、周波数成分が高い部分は画像の周辺部分に近づきます。</p><p>周波数領域に変換してその周辺部分をマスクすれば、周波数成分の高い情報を切り捨てることができます。それを再びx-y座標に戻すと、元の画像に似ているけれども詳細部分が切り捨てられた画像が得られます。しかしこの画像は、元の画像に比べてサイズが小さくなりました。マスクする範囲を調整することで、どの程度の情報を切り捨てるかを細かく調整できるようになりました。</p><p>先ほどのラップトップの拡大図を改めて見てみましょう。今回は、円形のマスクを施しています。<br>
<img class="alignnone" src="https://sidbala.com/content/images/2016/11/QuantizationHorizontalWithMasks-1.jpg" alt="" width="6482" height="3550"><br>
下の数値は、元画像と比較した各画像の情報エントロピーを表します。2%まで落としても、このレベルまで拡大しなければ違いに気づかないでしょう。2%ですよ！車両重量がついに27kgになってしまいました！</p><p>ここまでが、サイズを落とす方法の説明でした。可逆圧縮におけるこの処理のことを<strong>量子化</strong><a href="#fn03">*3</a>と呼びます。</p><p>人間の目や脳のシステムは、細かな色の詳細をあまりうまく識別できません。明暗の細かい差は識別できるのですが、色の識別はそれほど得意ではないのです。これを利用すれば、色の情報を落としてさらにサイズを小さくできるはずです。</p><p>テレビの信号は、R+G+Bの色データをY+Cb+Crに変換しています。Yは輝度（本質的には、白黒データにおける明度）で、CbとCrは色差成分です。RGBとYCbCrの情報エントロピーは同じです。</p><p>カラーテレビがうまれる前の世界には、Y信号しか存在しませんでした。カラーテレビの登場に伴って、エンジニアはY信号とRGB色情報をあわせて送る方法を考える必要に迫られました。ふたつを別々のデータストリームで送るかわりにエンジニアたちが選んだのは、色情報をCbとCrに変換したものをYとあわせて送る方法でした。この方法なら、白黒テレビは単にY成分だけを見ればいいことになります。カラーテレビは、それに加えて色差成分も見たうえで、内部的にRGBに変換しています。</p><p>ここでひとつトリックがあります。Y成分はフル解像度で符号化されているのですが、C成分はどちらも1/4の解像度でしか符号化していません。人間の目が色差の検出を苦手としているので、これで十分やっていけるのです。これで、必要な帯域はさらに半分になりました。見た目の違いはほとんどありません。半分ですよ！車両重量はいよいよ13.5kgにまで減ってしまいました。</p><p>ここでお話した色情報の切り捨て処理のことを、<strong>クロマサブサンプリング</strong><a href="#fn04">*4</a>と呼びます。これはH.264に特有のものではなく何十年も前から存在する技術で、あらゆるところで用いられています。</p><p>ここまでが、非可逆圧縮におけるサイズの削減で大きなウェイトを占める処理でした。細かな変化をほぼ切り捨てた上に、色情報も半分にできたので、動画の各フレームのサイズはかなり小さくなりましたね。</p><p>はい。ここまでの処理は第一段階に過ぎません。ここまは、単一のフレームにおける空間領域だけしか見てきませんでした。次は、時間方向の圧縮について考えます。つまり、ここからは、時間をまたがる複数のフレーム群について考えることになります。</p><p>H.264は、動き補償圧縮の標準規格です。</p><p>テニスの試合を見ているとしましょう。カメラのアングルは固定されているものとします。動いているのは、行き来するボールだけです。さあ、この情報をどうやって符号化すればいいでしょうか？いつもどおりのことをやるだけですよね？二次元の空間情報と一次元の時間情報を持つ、ピクセルデータの三次元配列を扱えばいいのですよね？ほんとうに？</p><p>いや、そんな必要はありませんよね？画像の大半の部分は、変化しません。コートもネットも観客も、どれも動きはありません。実際に動いているものといえば、ボールだけです。だったら、動かない部分だけをまとめた一枚の画像を背景として用意して、ボールだけを動かした動画を用意すればよさそうです。これで、サイズをかなり減らせそうな気がしませんか？なんとなく先が見えてきたでしょう？そう、動き探索です。</p><p>実際にH.264が行っているのは、こんな処理です。H.264は、画像を複数のマクロブロックに分割します。このマクロブロックは通常は16×16ピクセルのブロックで、これを用いて動き探索を行います。まず、<strong>Iフレーム</strong>（イントラフレーム）と呼ばれる静止画像をひとつ作ります。これはフルフレームで、画像をつくるために必要なすべてのビットの情報を含みます。それ以降のフレーム群は、<strong>Pフレーム</strong>（前方向予測フレーム）と<strong>Bフレーム</strong>（双方向予測フレーム）のいずれかになります。Pフレームは、前のフレームからの各マクロブロックの動きベクトルを符号化したフレームです。つまり、Pフレームを復号するには、その前のフレームの情報が必要になります。デコーダは、動画ストリームにおける直近のIフレームまでさかのぼって、それ以降のすべてのフレームを順にたどり、動きベクトルの差分を積み重ねる作業を現在のフレームまで続けます。</p><p>Bフレームはもう少しおもしろいもので、過去と未来の双方向のフレームを用いた予測を行います。これで、アップルのホームページがなぜあれほどまでに圧縮できたのかが想像できるでしょう。あの動画にはたった三つのIフレームしか存在せず、そのマクロブロックをパンしているだけだったのです。</p><p>動きベクトルの差分だけしか符号化していないので、このテクニックはあらゆる動画にうまく適用できます。</p><p>これで、空間と時間の両面での圧縮をカバーできました！ここまでは、まず量子化によってサイズを節約しました。さらに、クロマサブサンプリングを用いて必要なサイズを半減させました。これらに加えて動き補償を用いることで、先ほどの動画の300フレームのうちたった3フレームだけを格納すれば済むようになりました。</p><p>では、最後の仕上げといきましょう。昔ながらの可逆エントロピー符号器を用います。使わない理由がありませんね。</p><p>可逆圧縮処理の後のIフレームには、冗長な情報が含まれています。PフレームやBフレームにおけるマクロブロックの動きベクトルには、まったく同じ値を持つグループがあります。なぜなら、先ほどの動画でパンするときには、複数のマクロブロックが同じ量だけ移動するからです。</p><p>エントロピー符号器が、この冗長性をうまく処理してくれます。これは汎用的な可逆符号器なので、何かとのトレードオフを気にする必要はありません。すべてのデータを元どおりに復号できるのです。</p><p>これでできあがり！これが、H.264の動作原理の核心となるトリックです。</p><p>元の動画は1232×1154というちょっと変な解像度でした。計算してみると、こうなります。</p><p>5 secs @ 60 fps = 1232x1154x60x3x5 =&gt; <strong>1.2 GB</strong><br>
圧縮後の動画 =&gt; <strong>175 KB</strong></p><p>1.36トンの自動車に置き換えてみると、最終的に<strong>0.18kg</strong>まで落とせたことになります。たったの180グラムですね！</p><p><strong>いやあ、ほんとにすごいですね！</strong></p><p>言うまでもありませんが、この記事は、数十年にわたる研究の成果をかなり単純化したものです。もっと知りたくなったら、<a href="https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC" rel="nofollow" title="" class="ext-link">Wikipediaのページ</a>に詳しい説明があるので読んでみましょう。</p><p>「そこ、違うよ！」とか何か言いたいことがあるかたは、<a href="https://news.ycombinator.com/item?id=12871403" rel="nofollow" title="" class="ext-link">HackerNews</a> や <a href="https://www.reddit.com/r/programming/comments/5b31gt/h264_is_magic/" rel="nofollow" title="" class="ext-link">Reddit</a> からぜひコメントをください。</p><p>あるいは <a href="https://twitter.com/SidBaIa" rel="nofollow" title="" class="ext-link">Twitter</a> や <a href="https://www.linkedin.com/in/sidbalasubramanian" rel="nofollow" title="" class="ext-link">LinkedIn</a> からつっついてもらってもかまいません。</p><p class="footnote">[*1] <a class="link ext-link" href="http://www.anandtech.com/show/8747/samsung-ssd-850-evo-review/8" rel="nofollow" title="">SSDのベンチマーク</a></p><p class="footnote">[*2] <a class="link ext-link" href="https://ja.wikipedia.org/wiki/%E6%A8%99%E6%9C%AC%E5%8C%96%E5%AE%9A%E7%90%86" rel="nofollow" title="">ナイキスト・シャノンの標本化定理</a></p><p class="footnote">[*3] <a class="link ext-link" href="https://en.wikipedia.org/wiki/Quantization_(signal_processing)" rel="nofollow" title="">量子化</a></p><p class="footnote">[*4] <a class="link ext-link" href="https://en.wikipedia.org/wiki/Chroma_subsampling" rel="nofollow" title="">クロマサブサンプリング</a></p>
