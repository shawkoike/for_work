<p><a href="https://www.chenhuijing.com/blog/how-well-do-you-know-display/" rel="nofollow" title="" class="ext-link">How well do you know CSS display?</a> （2016-06-18） by <a href="https://twitter.com/hj_chen" rel="nofollow" title="" class="ext-link">Chen Hui Jing</a></p><p>CSSプロパティの1つである<em>display</em>は、CSSレイアウトに用いるプロパティの中でも極めて重要なものです。よく使われているのは、<code>block</code>や<code>inline</code>、<code>none</code>あたりでしょう。<code>table</code>や<code>inline-block</code>も、今ではかなり一般的になってきたと言えます。一方、<code>flex</code>は新たに登場したものです。きっとユーザに気に入られるでしょう。これはレイアウト用に特別に作られたdisplayプロパティです。さらには、この先、<code>grid</code>がまもなく私たちの秘密兵器となるでしょう（現在、盛んに取り組まれています）。これもまた、レイアウトに特化したプロパティです。</p><p>本記事は、当初予定していたよりもずっと長くなりました。ご希望に応じて、自由にサブセクションに飛んでお読みいただければと思います。もし、お時間を割いて全体を読んでいただけるのでしたら、大変嬉しく思います😁</p><p>
</p>
<p>目次</p><p>これまでに様々なレスポンシブウェブデザインを構築してきた経験から、<em>display</em>プロパティや<em>position</em>プロパティはどのように機能するのか、望んだレイアウトにするためにはどのようにメディアクエリと組み合わせたらいいのか、といった多くのことを学んできました。そこで、ここではそれぞれの値について簡単にまとめると同時に、以前私が構築した、<em>display</em>を多数利用したレスポンシブな要素をいくつかご紹介したいと思います。</p><p><em>display</em>についてお話しするならば、ボックスの階層について触れないわけにはいきません。基本的にはブラウザがCSSを解析し、<a href="https://drafts.csswg.org/css-display/#box-tree" rel="nofollow" title="" class="ext-link">ボックスの階層</a>を生成することにより、それをレンダリングします。ボックスの階層は、レンダリングされた文書のフォーマット構造を表すものです。<em>display</em>プロパティは、ボックスの表示タイプを定義します。</p><p>ブラウザが画面上の諸々をどのようにレンダリングするかというトピックは、実に魅力的です。必読文書として強くお勧めしたいのは、<a href="http://taligarsiel.com/" rel="nofollow" title="" class="ext-link">Talia Garsiel氏</a>による<a href="http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/" rel="nofollow" title="" class="ext-link">How Browsers Work: Behind the scenes of modern web browsers（ブラウザはどう動く：モダンなウェブブラウザの舞台裏）</a>です。もう1つ、同じく必読文書のお勧めは、W3CのCSS仕様書にも携わっている<a href="http://fantasai.inkedblade.net/" rel="nofollow" title="" class="ext-link">Fantasai氏</a>による<a href="http://fantasai.inkedblade.net/weblog/2012/css-layout-evolution/" rel="nofollow" title="" class="ext-link">Evolution of CSS Layout: 1990s to the Future（CSSレイアウトの進化：1990年代から将来まで）</a>です。彼女は、<a href="http://2016.phillyemergingtech.com/2012/" rel="nofollow" title="" class="ext-link">Emerging Technologies for the Enterprise（エンタープライズの最新技術）会議</a>でも実際に話をしていますが、動画が見られなければ、フルスクリプトをご覧になるといいでしょう。</p><p>
</p>
<p>楽しい事実があります。実は、いつも使っている<em>display</em>の値はショートハンドで書くことができるのです。例えば、<code>block</code>は<code>block flow</code>でショートハンドになります。詳細は<a href="https://drafts.csswg.org/css-display/#propdef-display" rel="nofollow" title="" class="ext-link">仕様書</a>から一覧表を参照してください。</p><p>全ての要素はデフォルトとして<em>display</em>値を持っています。しかし、<em>display</em>値として明確に何か別の値を設定されることにより、オーバーライドされることがあります。</p><p>
</p>
<p>通常のドキュメントフローから要素とその子要素を削除します。ドキュメントは、要素がそもそも存在しなかったかのように、レンダリングされます。つまり、それが占有するスペースは折りたたまれているのです。要素の内容もスクリーンリーダには読み取られません。</p><p>
</p>
<p><img srcset="https://www.chenhuijing.com/images/posts/display/inline-480.jpg 480w, https://www.chenhuijing.com/images/posts/display/inline-640.jpg 640w, https://www.chenhuijing.com/images/posts/display/inline-960.jpg 960w, https://www.chenhuijing.com/images/posts/display/inline-1280.jpg 1280w" sizes="(max-width: 400px) 100vw, (max-width: 960px) 75vw, 640px" src="https://www.chenhuijing.com/images/posts/display/inline-640.jpg" alt="Inline elements"><br>
この要素は1つ以上のインラインボックスを生成します。インラインレベル要素は、その名前からも察しがつくとおり、行の中にそのタグが定義する分のスペースを取ります。ブロックレベル要素を補完すると考えることができます。</p><p>
</p>
<p><img srcset="https://www.chenhuijing.com/images/posts/display/block-480.jpg 480w, https://www.chenhuijing.com/images/posts/display/block-640.jpg 640w, https://www.chenhuijing.com/images/posts/display/block-960.jpg 960w, https://www.chenhuijing.com/images/posts/display/block-1080.jpg 1080w" sizes="(max-width: 480px) 100vw, (max-width: 960px) 60vw, 25em" src="https://www.chenhuijing.com/images/posts/display/block-640.jpg" alt="Block elements"><br>
この要素はブロックレベルボックスを生成します。特に指定されない限り、ブロックレベル要素は全て新しい行から始まり、コンテナの幅を広げます。</p><p>
</p>
<p>list-itemとしてレンダリングされるこの要素は、正にブロックレベル要素と似たようなふるまいをするのですが、これもマーカとなるボックスを生成します。list-styleプロパティでスタイルを設定することもできます。<code>&lt;li&gt;</code>要素だけには、デフォルト値として<code>list-item</code>が設定されています。通常は、デフォルトのふるまいをする<code>&lt;li&gt;</code>要素をリセットするために使われます。</p><p>
</p>
<p>
</p>
<p data-height="265" data-theme-id="0" data-slug-hash="PNMxXL" data-default-tab="html,result" data-user="huijing" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/huijing/pen/PNMxXL/" rel="nofollow" title="" class="ext-link">CSS display example</a> by Chen Hui Jing (<a href="http://codepen.io/huijing" rel="nofollow" title="" class="ext-link">@huijing</a>) on <a href="http://codepen.io" rel="nofollow" title="" class="ext-link">CodePen</a>.</p><p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></p><p>この要素はブロックレベルボックスを生成しますが、全体のボックスはインライン要素と同じようにふるまいます。上の画像の例を使った<a href="http://codepen.io/huijing/pen/PNMxXL/" rel="nofollow" title="" class="ext-link">CodePen</a>を開き、ウィンドウの幅を調整してみてください。そうすると、動きをより理解しやすいと思います。</p><p>
</p>
<p>これまでに構築しなければならなかったコンポーネントの1つに、乗客の種類（大人／乳幼児／子供）別に数を入力する数値ステッパーがありました。モバイル向けレイアウトとデスクトップ向けレイアウトでそれぞれ1つずつ静的なPhotoshopファイルを用意しました。しかし、レイアウトが “崩れ” なかった中間の幅があったのです。</p><p>その主な原因は、括弧内のテキストがうまく折り返されなかったことでした。そこで、様々な幅に対し、関連する要素の表示や幅を調整するために、たくさんのメディアクエリを投入しなければなりませんでした。ウィンドウ幅を変えたときに、このコンポーネントがどのようなレスポンスをするか、<a href="http://codepen.io/huijing/full/LZPNYo/" rel="nofollow" title="" class="ext-link">フルサイズのCodepen</a>を開いてチェックしてみてください。</p><p>
</p>
<p data-height="265" data-theme-id="0" data-slug-hash="LZPNYo" data-default-tab="css,result" data-user="huijing" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/huijing/pen/LZPNYo/" rel="nofollow" title="" class="ext-link">Responsive numeric stepper</a> by Chen Hui Jing (<a href="http://codepen.io/huijing" rel="nofollow" title="" class="ext-link">@huijing</a>) on <a href="http://codepen.io" rel="nofollow" title="" class="ext-link">CodePen</a>.</p><p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></p><p>
</p>
<p>要素に、単なるHTMLのtableのようなふるまいをさせる<em>display</em>値のセットがあります。私の仲間で、シンガポールを拠点に活動する<a href="https://twitter.com/p0larBoy" rel="nofollow" title="" class="ext-link">Colin Toh氏</a>は、<a href="http://colintoh.com/blog/display-table-anti-hero" rel="nofollow" title="" class="ext-link">display: tableプロパティに関する素晴らしい記事</a>を書いています。ぜひとも読んでみてください。</p><p>もはやtableベースのレイアウトはほとんど使われていませんが、<code>display: table</code>は、ある場合においては今でも非常に便利なのです。例えば、レイアウトの幅が広げられたときにだけtableを入れたいが、幅が狭められたときには典型的なブロックレイアウトのままにしたいという場合です。これは、<em>display</em>（さらに追記する擬似要素で）とメディアクエリを組み合わせて、動き方を見るためにウィンドウサイズを調整するだけで実現できます。</p><p>flexboxならびにgridの仕様書の筆頭著者である<a href="https://www.chenhuijing.com/blog/how-well-do-you-know-display/" rel="nofollow" title="" class="ext-link">Tab Atkins Jr.氏</a>は、こうしたの新しいレイアウト固有のdisplayモードについて、際立つ特徴を示しました。</p><p>これらの新しいCSSレイアウトを取り入れるときや、これらはそれぞれどんな場合に使ったら良いのかと迷ったときのために、ぜひとも覚えておいてください。</p><p>flexboxレイアウトモード、あるいは、CSSフレキシブルボックスの導入によって初めて、ブラウザでのコンテンツのレイアウトに関する仕様書が作られたのです。ウェブでのコンテンツのレイアウトは、初めてHTMLが導入されてから、かなり進化してきました。デザイナーが何かクリエイティブなレイアウトを作ろうと考えたとき、最初に使われたテクニックはHTML tableのネスティング、あるいは、いわゆるtableベースのレイアウトでした。</p><p>CSSが軌道に乗り始めると、私たちはfloatベースのレイアウトに移行していきました。望んだとおりのレイアウトにするため、様々なdiv要素でコンテンツをネスティングし、周囲を回り込むようにしたのです。floatベースのレイアウトは今でもかなり一般的なものですが、本記事執筆時点では、flexboxとgridこそレイアウトにはもってこいの手段だと、広く認識されるようになるまで時間はかからないだろうと感じています。flexboxとgridについては後で取り上げます。</p><p>Scott Vandehey氏による記事、<a href="http://spaceninja.com/2015/08/24/what-is-flexbox/" rel="nofollow" title="" class="ext-link">What IS Flexbox?（Flexboxとは何か）</a>についてお話ししましょう。同記事では、同氏がTab Atkins Jr.氏にflexboxの歴史について尋ねています。それによると、初めて仕様書ドラフト版が発表されたのは<a href="https://www.w3.org/TR/2009/WD-css3-flexbox-20090723/" rel="nofollow" title="" class="ext-link">2009年7月23日</a>となっていますが、議論はその数年前に始まっていたということです。</p><p>しかしながら、正式に体系化されないまま、様々なブラウザベンダーがflexboxを実装しました。しかし実際には、仕様書に則ってはいなかったのです。これがflexboxの構文がかなり厄介になった理由です（古いブラウザでの下位互換性に関して言えば、今でもそうなのです）。</p><p>flexboxモデルは非常に強力で、できることも多くあります。ですから、これがどのように機能し、どのように使ったらいいのか、完全に理解するには努力が必要です。flexbox、gridについてお話しするなら、いずれも徹底的に掘り下げた長編記事でなくては足りません。そのため、ここにflexboxを理解するには大変役立ってくれるウェブサイトをリストアップしておきます。</p><p><img src="https://www.chenhuijing.com/images/posts/display/flex-diagram.svg" alt="Flexbox diagram" title="Flexbox diagram"></p><p>要素で<code>display: flex</code>を宣言することにより、それはflexコンテナになり、その子要素はflexアイテムになります。これはもうカスケードはしません。つまり、flexプロパティは孫要素までは拡張されないということです。flexコンテナとflexアイテムの両方に、それぞれ独自のflexプロパティがあります。</p><p><strong>flexコンテナのプロパティ</strong></p><p><strong>flexアイテムのプロパティ</strong></p><p>繰り返しになりますが、上記に挙げたflexboxに関するウェブサイトのリストをチェックすることを強くお勧めします。このリストには、flexboxをコード内で使う際に役立つ例が満載です。</p><p>gridレイアウトに関してお話しする際、私はいつも、CSS gridの第一人者であると考える<a href="https://rachelandrew.co.uk/" rel="nofollow" title="" class="ext-link">Rachel Andrew氏</a>をご紹介しています。彼女は、この新しいdisplayプロパティへの認知を広めるため、最前線に立って<a href="https://rachelandrew.co.uk/presentations" rel="nofollow" title="" class="ext-link">講演</a>を行ったり、<a href="https://rachelandrew.co.uk/writing" rel="nofollow" title="" class="ext-link">記事やチュートリアル</a>を執筆したり、努力してきました。</p><p>CSS gridは、gridシステムを作成し、gridアイテムの配置をCSSによって純粋にコントロールする方法を提供するものです。HTMLの懸念事項から解放されます。メディアクエリと併せて使う場合、フレキシブルなレイアウトのデザインと構築を強力にサポートしてくれるCSS gridが、お手持ちのツールに仲間入りします。</p><p>gridに関しては現在、<a href="https://drafts.csswg.org/css-grid/" rel="nofollow" title="" class="ext-link">CSS Grid Layout Module Level 1</a>が最新版となっています。この仕様書は、<a href="http://www.w3.org/TR/2011/WD-css3-grid-layout-20110407/" rel="nofollow" title="" class="ext-link">2011年にワーキングドラフト</a>としてスタートしました。flexbox同様、HTMLのセマンティクスを犠牲にすることなく、ウェブ上のコンテンツをレイアウトするための適切な方法を知りたいというニーズが高まったことにより、制定されました。</p><p>Microsoft EdgeとInternet Explorerは、ベンダープレフィックスである<code>-ms-</code>を推奨していた古いバージョンの仕様書をサポートしてはいますが、CSS gridはどのブラウザでも正式には実装されていないことにご注意ください。これは、それほど驚くことではありません。なぜなら、もともとgrid仕様書の編集者の大半がMicrosoft出身者だったからです。</p><p>flexboxの仕様が雑然と実装され、CSS gridの開発は様々なアプローチが取られ始めています。各ブラウザベンダーは、開発者がテストを行えるようにブラウザに実験的な機能を追加するベンダープレフィックスを使えるようにしています。この機能は、仕様書が洗練され、オフィシャルなものになる前に、不備がないかを洗い出すプロセスに大いに役立っているのです。</p><p>その作業に代わり、CSS gridはフラグのおかげで開発されてきました。これは、<a href="https://igalia.github.io/css-grid-layout/enable.html" rel="nofollow" title="" class="ext-link">開発者の手作業によって有効にする</a>必要があります。ChromeとOperaでは、それぞれ<code>chrome://flags</code>と<code>opera://flags</code>に飛び、「試験運用版のウェブプラットフォームの機能」を有効にします。Firefoxの場合は、<code>about:config</code>に飛び、<code>layout.css.grid.enabled</code>と<code>layout.css.grid-template-subgrid-value.enabled</code>の値をtrueに設定します。</p><p><strong>主なCSS grid用語</strong></p><p>この短いサブセクションでgridについて書こうとするのは、仕様書に大きな害を及ぼすようなものです。なぜなら、gridの機能は極めて多くあるからです。そこで、以下にリストアップしたCSS gridに関するウェブサイトや実施例をお読みいただきたいと思います。実際に、今すぐ<a href="http://gridbyexample.com/" rel="nofollow" title="" class="ext-link">Grid by Example</a>に飛べば、あらゆる使用ケースにおけるCSS gridの使い方をデモンストレートしたCodePenのリンクにアクセスすることができます。</p><p>さて、これは、<a href="http://www.w3.org/TR/css-display-3/" rel="nofollow" title="" class="ext-link">CSS Display specification（CSS display仕様書）</a>を読み始めるまでは聞いたこともなかった興味深いものです。<a href="http://chriscoyier.net/" rel="nofollow" title="" class="ext-link">Chris Coyier氏</a>の書いた2010年の記事、<a href="https://css-tricks.com/run-in/" rel="nofollow" title="" class="ext-link">CSS Run-in Display Value</a>も発見しました。残念ながら、ブラウザベンダーはこの仕様を全く好んでいないらしく、全てのブラウザから削除されてしまっているようです。そのため、これについては代わりに実際の仕様を考えればいいと思います<code>¯\_（ツ）_/¯</code></p><p>理論的には、要素の<em>display</em>プロパティに<code>run-in</code>を設定した場合、<strong>run-in box（同行見出しボックス）</strong>としてレンダリングされます。ユースケースは、同行見出しを生成するためのネイティブメソッドです。これは、グラフィックデザイン業界での言い方をすれば、ボディコピーの次の行と同行に入れた見出しだと言えます。</p><p><g fill="none" fill-rule="evenodd"><mask id="b" fill="#fff"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#a"></use></mask>
<path fill="#D8D8D8" stroke="#979797" stroke-width="2" d="M0 0h280v127.17H0z" mask="url(#b)"></path><text fill="#202020" font-family="Helvetica-Bold, Helvetica" font-size="14.682" font-weight="bold"><tspan x="9.803" y="25.058">Sameen Shaw.</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="116.024" y="25.359">Also known as</tspan></text><text fill="#202020" font-family="Helvetica-Bold, Helvetica" font-size="9.788" font-weight="bold"><tspan x="181.955" y="25.359">Indigo Five Alpha</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="263.649" y="25.359">,</tspan></text><text fill="#202020" font-family="Helvetica-Bold, Helvetica" font-size="9.788" font-weight="bold"><tspan x="9.803" y="40.103">Dr. Sameen Shaw</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="94.795" y="40.103">or simply</tspan></text><text fill="#202020" font-family="Helvetica-Bold, Helvetica" font-size="9.788" font-weight="bold"><tspan x="136.736" y="40.103">Shaw</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="162.339" y="40.103">, is a physician and a</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="9.803" y="54.848">former operative for the U.S. Army</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="161.798" y="54.848">Intelligence Support</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="9.803" y="69.592">Activity</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="40.849" y="69.592">. Prior to joining the team Shaw was part of an</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="9.803" y="84.337">operation known as Catalyst Indigo, responsible for acting</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="9.803" y="99.081">on relevant list intelligence delivered by</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="183.089" y="99.081">the Machine</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="236.494" y="99.081">, which</tspan></text><text fill="#202020" font-family="Helvetica" font-size="9.788"><tspan x="9.803" y="113.826">she knew only as “Research”.</tspan></text></g><br>
同様の効果を得るためにfloatを使うこともできますが、それはハック的な方法の一種になります。ボディコピーを持つヘッダのベースラインの整列はかなり難しいものです。ヘッダのフォントサイズやボディコピーの行の高さがうまく合うまで微調整しなければならないからです。しかも、ヘッダが2行以上「キャッチ」してしまうという状況もあるかもしれません。</p><p>代わりにヘッダで<code>display: inline</code>を使いたい場合、ヘッダ要素をボディコピーのパラグラフ要素でネストしない限り、それは機能しません（なぜなら、<code>p</code>はブロック要素だからです）。しかも、それは意味的に正しくありません。ですので、私個人的には、この実装を見るのは好きですが、ブラウザベンダーとしては、現時点で懸念するべき、より優先順位の高い仕様が他にあるのだろうと推測します。</p><p>この特殊なプロパティがどういうものかを理解するには、&lt;ルビ&gt;要素の導入が必要です。簡単に言えば、これは通常、発音の仕方をサポートする要素としてテキストのベースラインに表示される注釈のことなのです。こうしたものは、中国語や日本語など東アジアの言語ではかなり一般的です。研究する中で見つけたものの大半は2010年前後のものでしたから、<a href="https://www.chenhuijing.com/blog/html-ruby/" rel="nofollow" title="" class="ext-link">2016年のHTMLの&lt;ルビ&gt;の状況</a>についても書いてみました。</p><p><code>display: ruby</code>と<code>display: table;</code>の間にはいくつか類似点がありますが、仕様書では、ルビテキストを表示するために、<code>span</code>のような非ルビ要素にルビのdisplay値を適用しないよう強く勧めています。スクリーンリーダや非CSレンダラーがルビ構造を解釈することができるよう、むしろコンテンツをHTMLのルビ要素を使ってマークアップするべきなのです。</p><p>仕様書が言わんとしていることは、次のとおりです。要素に<code>display: contents</code>を設定すると、それはDOMから消えてしまいますが、その子要素は全て残り、それが占有していたスペースを引き受けます。残念ながら、この仕様をサポートしているのは、現在Firefoxのみです。どのように機能するのかを実感していただくために、<a href="http://codepen.io/huijing/full/wWWzmd/" rel="nofollow" title="" class="ext-link">フルサイズのCodePen</a>をFirefoxでリサイズしてみてください。</p><p data-height="265" data-theme-id="0" data-slug-hash="wWWzmd" data-default-tab="html,result" data-user="huijing" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/huijing/pen/wWWzmd/" rel="nofollow" title="" class="ext-link">CSS display: contents</a> by Chen Hui Jing (<a href="http://codepen.io/huijing" rel="nofollow" title="" class="ext-link">@huijing</a>) on <a href="http://codepen.io" rel="nofollow" title="" class="ext-link">CodePen</a>.</p><p><script async src="//assets.codepen.io/assets/embed/ei.js"></script></p><p>これまでに、displayプロパティについて書かれた2つの記事を紐解きました。<a href="https://samrueby.com/" rel="nofollow" title="" class="ext-link">Sam Rueby氏</a>の書いた<a href="https://samrueby.com/2015/02/09/firefox-is-releasing-support-for-css-display-contents/" rel="nofollow" title="" class="ext-link">Firefox is releasing support for CSS display: contents（FirefoxはCSS display: contentsをサポートするためにリリースされている）</a>、<a href="https://rachelandrew.co.uk/" rel="nofollow" title="" class="ext-link">Rachel Andrew氏</a>が書いた<a href="https://rachelandrew.co.uk/archives/2016/01/29/vanishing-boxes-with-display-contents/" rel="nofollow" title="" class="ext-link">Vanishing boxes with display contents（display contentsで消え行くボックス）</a>です。Rachel Andrew氏はflexアイテムを持つこのプロパティの素晴らしいユースケースも提示しています。両方の記事をぜひともチェックしてみてください。</p><p>やれやれ、本記事は私が当初想定していたよりも随分と長くなってしまいました。これほど長い記事を全て読んでくださった方、とても感謝しています。私は、まもなく使えるようになる新たな選択肢を本当に楽しみにしています。ハック的な手段に頼らずに、ユニークなレイアウトを作り出すことができるのです。本記事を読むことで、皆さんがもっとCSSレイアウトについて学びたいと思っていただけたら嬉しいです。</p>
