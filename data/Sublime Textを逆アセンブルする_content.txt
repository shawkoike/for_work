Disassembling Sublime Text （2016-12-03） by Tristan Hume今日の午後、私はHopper Disassemblerのフリートライアル版で、Sublime Text 3のバイナリを見ながら時間を過ごしました。そこでいくつかの興味深い点と文書化されていない設定を見つけたので、ここに記したいと思います。私が見つけた最も有益で興味深いと思われるものは、Sublime Text用の文書化されていない設定です。そのうちのいくつかは一部の人々にとっても有用かもしれません。また、文書化されていないコマンドラインフラグもあります。私はこれらの設定を、Sublime Text.app/Contents/MacOS/Sublime Textバイナリのstringsを実行し、configオプションに見えるもので、大体そこら辺かなと見当を付けた箇所の周りを探して試してみることで発見しました。
Sublime Textがリリースするバイナリでは、シンボル名が削除されていません。恐らくこれはデバッグ上の理由からだと思いますが、私の意見としては、これは非常にクールで感謝しています。アセンブリは、まだ私にはほとんど解読できませんが、それでもいくつかのクールな点を見つけました。関数名から、Sublime Textの作成に使われるライブラリの一部を理解することができます。以下は、その部分的なリストです。一部の一般的なアーキテクチャや、どういう名前が付けられているかも分かります。以下は、ちょっとした雑学です。これらがオープンソースだったらどれだけ素晴らしいでしょうか。実際、上記のどれもが、多くの場面でテキストエディタ以外でも役に立つはずです。skylineやpxのような、スピーディかつスムーズにOSに統合できる独自のカスタムレンダリングUIフレームワークは、他のアプリでも見たことがありません。カスタムの正規表現エンジンも間違いなく便利なライブラリだと思います。ただし、こうした便利なライブラリは、Jon SkinnerがSublime Textで成功しなければ存在しなかった可能性もあるので、あまり贅沢は言えないかもしれません。そのようなわけで、少なくとも、美しくて速いクロスプラットフォームのアプリを手にできたことに感謝するべきでしょう。私はまた、エディタのある部分がどのように機能しているのか、なぜそんなに速いのかについて調べてみましたが、アセンブリから多くを理解することはできませんでした。全ての主要な機能には何百もの基本となるブロックがあり、全てがインライン展開されています。丸1日かければ、あるいは何らかの機能をリバースエンジニアリングできるかもしれませんが、できたとしても大した進展にはならないでしょう。Sublime Textの内部構造について、もし興味があればぜひコメントを残してください。特に、プラグインAPIにはアクセスできないものの、デバッガやFridaのようなものでバイナリにパッチを当てることは可能かもしれない、といったような些細な動作改善のコメントなどは、私自身非常に興味があります。この記事がHacker Newsに掲載され、Sublimeのフォーラムに転載された後、パッケージコントロールの管理者でありSublimeの新たな開発者でもある@wbondから、いくつかの誤りの指摘と新しい情報をいただきました。上記のライブラリリストは、新しい情報で更新したものです。
