<p><a href="https://github.com/mhinz/vim-galore" rel="nofollow" title="" class="ext-link">Everything you need to know about Vim</a> by <a href="https://github.com/mhinz" rel="nofollow" title="" class="ext-link">Marco Hinz</a></p><p><a href="http://postd.cc/wp/wp-content/uploads/2016/02/vim-galore.png"><img src="http://postd.cc/wp/wp-content/uploads/2016/02/vim-galore.png" alt="vim-galore" width="1500" height="278" class="alignnone size-full wp-image-6066"></a></p><p>特定のトピックについての記述をご希望ですか？ <a href="https://github.com/mhinz/vim-galore/issues" rel="nofollow" title="" class="ext-link">Issue</a>を立てるか、<a href="https://twitter.com/_mhinz_" rel="nofollow" title="" class="ext-link">Twitter</a>で私までお知らせください！ありがとう！</p><p>Vimのディストリビューションはある作成者の目線によるVim＋カスタムセッティング＋カスタムプラグインです。そのため、非常に独りよがりなものです。</p><p>このディストリビューションの問題は、初心者によって使われる傾向があることです。（より上級のユーザは、結局、自分自身のプラグインとセッティングの選び方を心得ています）。問題が表面化するまでは全て順調です。さて、問題はどこで起こったのでしょう？　初心者はどうしていいかわからず、インターネットでアドバイスを得ようとします。長い堂々巡りのあと、ディストリビューションにより提供された妙なマッピングが問題だと見当が付きます。でも初心者は、Vimのマッピングはデフォルトのままなのにと思います。時間の無駄でした。うんざりです。</p><p>ディストリビューションそれ自体に問題があるわけではありません。お願いです、何をしているのかを正確に理解できないなら、緊急時に誰かに助けてもらおうとしないでください。</p><p>エディタのカスタマイズに何時間もかけたくはないと考える人が多いことは分かっています（実際、いよいよ夢中になって、vimrcのカスタマイズをやめられません）。しかし長期的には、最初の段階でマニュアル作業の方法を学ぶのは素晴らしいことで、時間効率も良くなります。</p><p>私に続いて繰り返してください。「プログラマーはツールを理解すべし」</p><p>とにかく、何をしているのかが分かっていれば、ディストリビューションを見て、そこから何らかのインスピレーションが得られるかもしれません。</p><p>*　<a href="http://cream.sourceforge.net/" rel="nofollow" title="" class="ext-link">cream</a><br>
*　<a href="https://github.com/carlhuda/janus" rel="nofollow" title="" class="ext-link">janus</a><br>
*　<a href="https://github.com/spf13/spf13-vim" rel="nofollow" title="" class="ext-link">spf13</a></p><p>多くの人が驚くでしょうが、Vimはデフォルトでは、自動的にロードされるようなプラグインをほんのわずかしか搭載していません。すべてのソースファイルを確認するために、Vimを起動した後、<code>:scriptnames</code>をチェックしてください。</p><p>ほとんどが使われていないので、適当に判断し無効にしてください。ソースとして表示はされますが、実際には最初の行だけを読み込んで、Vimはプラグインから抜けていきます。それ以上のコード（マッピング、コマンド、ロジック）は処理されません。</p><p>
</p>
<p>CapsLockはキーボードで一番役に立たないキーのうちの1つですが、<a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/media/homerow.png" rel="nofollow" title="" class="ext-link">ホームポジション</a>と同じ行にあるため、Controlよりも押しやすいのです。大量にプログラミングを行うような場合、CapsLockにControlをマッピングすることは、<a href="https://de.wikipedia.org/wiki/Repetitive-Strain-Injury-Syndrom" rel="nofollow" title="" class="ext-link">RSI</a>を防いだり、少なくとも軽減させたりするのに有効な手段となります。</p><p>留意点：　そのキー配置に慣れてしまうと、それ以外ではもう生きていけないかもしれません。</p><p><strong>OSXの場合</strong>:</p><p><code>System Preferences -&gt; Keyboard -&gt; Keyboard Tab -&gt; Modifier Keys</code></p><p>“CapsLock” を “Control” に変更します。</p><p><strong>Linuxの場合</strong>:</p><p>Xのキーを変更するには、以下を<code>~/.xmodmap</code>に追加します。</p><p>ソースを追加した後、<code>$ xmodmap ~/.xmodmap</code>を実行して有効にします。<br>
他にも<a href="https://github.com/alols/xcape" rel="nofollow" title="" class="ext-link">xcape</a>を使うことがあります。</p><p><strong>Windowsの場合</strong></p><p><a href="http://superuser.com/questions/764782/map-caps-lock-to-control-in-windows-8-1" rel="nofollow" title="" class="ext-link">superuser.comの「Windows 8.1でCaps LockをCtrlに変換する方法」</a>を確認してください。</p><p>
</p>
<p>
</p>
<p><a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%AB%E3%83%BB%E3%82%B8%E3%83%A7%E3%82%A4" rel="nofollow" title="" class="ext-link">Bill Joy</a>がVimの前進である<a href="https://ja.wikipedia.org/wiki/Vi" rel="nofollow" title="" class="ext-link">vi</a>を作った時、カーソルキーのない<a href="https://ja.wikipedia.org/wiki/ADM3A" rel="nofollow" title="" class="ext-link">ADM3A</a>上で開発しました。皆さんお分かりですよね？　代わりにhjklを使ったのです。</p><p>実際のキーボードレイアウトを見るには<a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/media/adm-3a-layout.jpg" rel="nofollow" title="" class="ext-link">クリック</a>して下さい。</p><p>Unixシステムでホームディレクトリを表すのに<code>~</code>を使うのも同様の理由です。</p><p>
</p>
<p>
</p>
<p>パフォーマンスに大きな影響を与える要素は2つあります。</p><p>
</p>
<p>注：本当にパフォーマンスの問題がある時だけ対策をすれば大丈夫です。大抵の場合、上記の対応で事足りるはずです。</p><p>
</p>
<p>大きいファイルの最大の問題点は、Vimがファイル全体を一度に読み込んでしまうという点です。なぜそんなことが行われるのかというと、その理由は内部でバッファを表わす方法に関係しています（<a href="https://groups.google.com/forum/#!topic/vim_dev/oY3i8rqYGD4/discussion" rel="nofollow" title="" class="ext-link">Discussion on vim_dev@</a>）。</p><p>読み取りだけを行いたい場合、<code>tail hugefile | vim -</code>は優れた回避策です。</p><p>差し当たり、構文や設定、プラグインなどがなくても大丈夫なら、下のコードを使ってください。</p><p>これでナビゲーションが格段に速くなります。なぜなら構文をハイライトする負荷の高い正規表現が使われなくなるからです。また、書き込みに時間がかかりすぎないように以下のコードを使って、Vimがswapファイルやviminfoファイルを使わないようにするといいでしょう。</p><p>簡単に言えば、とても大きなファイルを書く場合はVimを避けたほうが賢明です。</p><p>
</p>
<p>ファイル内のNUL文字（<code>\0</code>）は、メモリ内に改行文字（<code>\n</code>）としてメモリ内に保存され、バッファ内で<code>^@</code>と表示されます。</p><p>さらに詳しい情報は<code>man 7 ascii</code>や<code>:h NL-used-for-Nul</code>を確認してください。</p><p>
</p>
<p>括弧付きペーストモードを使うと、ターミナルエミュレータがタイプされたテキストとペーストされたテキストを区別できるようになります。</p><p>Vimにコードをペーストしようとして、全てがめちゃくちゃになってしまった経験はありませんか。</p><p>これは、<code>cmd+v</code>や<code>shift-insert</code>、<code>middle-click</code>などのショートカット機能を使ってペーストした場合にのみ起こります。原因はテキストの塊がターミナルエミュレータに一瞬で書き込まれてしまうことにあります。Vimはテキストがペーストされているだけだということが分からず、ものすごい速さでタイピングされていると思ってしまうのです。そのため、ラインにインデントを付けようとしますが失敗してしまいます。</p><p>もちろん、<code>"+p</code>などのVimレジスタを使えばVimはペースとされていると分かるので、全く問題ありません。</p><p>この問題を回避するために、<code>set paste</code>を使うと、そのままペーストできます。<code>:h 'paste'</code>や<code>:h 'pastetoggle'</code>を試してみてください。</p><p>毎回、<code>paste</code>に切り替えるのが面倒であれば、皆さんの代わりに切り替えてくれる、<a href="https://github.com/ConradIrwin/vim-bracketed-paste" rel="nofollow" title="" class="ext-link">bracketed-paste</a>という便利なプラグインがあります。</p><p>更に興味がありましたら、このプラグインの作者が書いた記事を<a href="http://cirw.in/blog/bracketed-paste" rel="nofollow" title="" class="ext-link">こちら</a>からご覧ください。</p><p><strong>Neovim：</strong>ターミナルエミュレータにサポートされている場合、Neovimはこれら全てをよりシームレスにし、括弧付きペーストモードが自動で設定されるようにします。</p><p>
</p>
<p>コマンドラインに慣れている方の場合、xtermやgnome-terminanal、iTerm2などのいわゆる<em>ターミナルエミュレータ</em>を使うことがあると思います（本来の<a href="https://ja.wikipedia.org/wiki/%E7%AB%AF%E6%9C%AB" rel="nofollow" title="" class="ext-link">ターミナル</a>とは別の物です）。</p><p>ターミナルエミュレータの祖先と同様に、これらはカーソルの移動や文字色を変更するなどの操作をコントロールするために、<a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9" rel="nofollow" title="" class="ext-link">エスケープシーケンス</a>（または<em>制御シーケンス</em>）を使います。これらは、エスケープ文字で始まる単純なASCII文字コードの文字列で（画面では、<code>^[</code>といった<a href="https://en.wikipedia.org/wiki/Caret_notation" rel="nofollow" title="" class="ext-link">キャレット文字</a>で表示されます）、このような文字列が現れると、ターミナルエミュレータは、<a href="https://en.wikipedia.org/wiki/Terminfo" rel="nofollow" title="" class="ext-link">terminfo</a>データベースから付随して生じる動作を探し出します。</p><p>問題を明確にするために、まずマッピングのタイムアウトについて説明しましょう。これは、マッピング間で曖昧な表現が出てきた場合に常に起こります。</p><p>どちらのマッピングも期待通りの反応を示しますが、<code>,a</code>と入力すると、1秒の遅延があります。これは、ユーザが次に<code>b</code>と入力するかどうかをVimが判断しているためです。</p><p>エスケープシーケンスでも同様の問題が起きます。</p><p>実際に試してみてください。<code>vim -u NONE –N</code>、<code>i&lt;c-v&gt;&lt;left&gt;</code>と入力すると、エスケープ文字を意味する<code>^[</code>で始まるシーケンスが挿入されるのが分かると思います。</p><p>ひと言でいうと、Vimは、<code>&lt;esc&gt;</code>文字と適切なエスケープシーケンスが入力された場合の違いを認識するのが困難なのです。</p><p>Vimでは、デフォルトで<code>:set timeout timeoutlen=1000</code>を使用するので、曖昧なマッピングかつキーコードが入力された場合、1秒の遅延が起こります。1秒という時間は、マッピングする上では良識的な値ではありますが、キーコードのタイムアウトを任意で設定することができます。これがこの問題に対する、最も一般的な回避策でしょう。</p><p><code>:h ttimeout</code>の下に小さな表がありますが、これはこれらのオプション間の関係性を示しています。</p><p>Vimとターミナルエミュレータ間でtmuxを使用するのであれば、これを<code>~/.tmux.conf</code>に入れてください。</p><p>以下は、一般的に使用されているカラースキームのリストです。</p>
