<p><a href="http://www.zsoltnagy.eu/are-javascript-comments-useless/" rel="nofollow" title="" class="ext-link">Are JavaScript Comments Useless</a> (2015-09-06) by <a href="https://twitter.com/Z501t" rel="nofollow" title="" class="ext-link">Zsolt Nagy</a></p><p>コード中にコメントを書くべきでしょうか？　是が非でも避けるべきでしょうか？　それとも控えめに書けばいいでしょうか？　開発者たちはそれぞれ、ソフトウェアを開発する際にどのように、そしてどんな時にコメントを書くかについて、独自の考え方を持っています。この記事では私の意見を述べますが、これが誰にも当てはまるというわけではありません。</p><p>なお、関数型プログラミングまたはオブジェクト指向プログラミングの原則に則ってJavaScriptで書かれたソフトウェアに絞った上で、私の意見を述べることにします。</p><p>この記事では、保守性のあるコードを書く場合について考えます。つまり、以下のようなコードです。</p><p>保守性のあるコードには、大量のコメントが必要でしょうか？　明確に書かれたコードであるならば、大量のコメントは不要だと私は考えています。コードを見れば内容が分かるはずだからです。</p><p>そもそも、保守性のあるコードにはコメントが必要なのでしょうか。いくつか例を挙げて、検証してみましょう。</p><p><em>ByTheBook</em>というニックネームを持つ若手の開発者が、以下のようなコードを書いたと想定します。</p><p>このアプローチの問題は何でしょう？</p><p>まず、コードの書き手が責任逃れをするかのようなコメントになっていることが問題ですね。アプリケーションを開発する際、コメントされたコードを残すようなことは決してしないでください。プロにあるまじき行為です。デバッグのために書いているのだとすれば、それはさらに悪いことです。きれいに消してください。手遅れだという場合は、コメント内容はローカルでコミットする習慣を身につけ、インタラクティブなrebaseによってコードをきれいにしていきましょう。</p><p>コメントされたコードを残したままにすることは大きな問題の中の取るに足らない一部分に過ぎません。技術的には、これらコメントのうち90パーセントは、単にノイズを加えているだけのようなものです。何の価値もなく、コードを読む人の気を散らすツールとしてのみ存在しています。例えば、あなたがこのコードを読んだ後、同点トップが2人以上いた場合に関数がどのように動くべきなのかといった問題にまで、気を配ることができましたか？</p><p><em>Flash</em>は、ガッツのある若手開発者です。今度は彼がコメントを加えずに先ほどと同じコードを書いたと想定しましょう。</p><p>技術的に、コードは動いています。それに参加者がいなかった場合に<code>null</code>が戻り値となることも明らかです。しかし、同点トップが存在する場合にどういう動きをするのかについて、コードには何の説明もありません。さらに、関数の内容をすべて読まない限り、<code>participants</code>オブジェクトの型が何かも分かりませんね。<code>participants</code>はオブジェクトの配列で、要素に文字列型の<code>name</code>と整数型の<code>score</code>を含むというような情報を、すべてメソッドから読み解いていかなければならないのです。</p><p><em>Startupper</em>は同点の際に起こる問題に気付きましたが、彼は他にやらなければならないことがたくさんあったので、コードに<code>TODO</code>コメント（やることリスト）を書いておきました。</p><p><code>TODO</code>のようなコメントの問題は、コード内で放っておかれがちだということです。やることリストの上に、さらにやることリストを書く場合も出てくるでしょう。やることリスト同士が矛盾しているかもしれませんし、コメントの説明が悪くて、元々何について書いていたのか誰も理解できないかもしれません。</p><p>上記の例においては、<code>TODO</code>の内容が問題の本質を捉えていますが、解決策は全く与えられていません。</p><p>また、<code>participants</code>引数の型について、さらなる推測が必要だということにも、注意してください。</p><p><em>Declarator</em>は宣言的なヘッダコメントを書く習慣があり、彼のコメントには以下のような内容が含まれています。</p><p>ここでは<code>getWinner</code>が何をするメソッドなのかが、明確に書かれています。コメントの大部分は役立つ内容ですし、コードを読む際も邪魔になりません。インラインでのコメントはなく、同点の場合についてもヘッダコメントで示されています。</p><p><em>PickyPerfectionist</em>は妥協しない開発者です。保守性の高いコードを書くことに誇りを持っており、「コードが十分に機能すればコメントは要らない」というマントラを実践しています。彼にはまた、十分に機能しないコードでは終わらせない、という信念があります。要するに、<em>PickyPerfectionist</em>は決してコメントを書かないのです。</p><p>関数を記述する前に、<em>PickyPerfectionist</em>はまず要件をきっちり確認します。同点の場合には全員の名前を出力し、コンマで切り分けます。</p><p>コードは容易に理解できます。問題が根本的に解決されているので、同点になった場合どうするかなど、わざわざコメントを使って説明する必要がありません。また、ここでは<code>participants</code>オブジェクトの構造は定義されていませんが、<em>PickyPerfectionist</em>はちゃんと先を読んでおり、コードから必要な情報をすべて入手する解決方法そのものを示しています。関数の名前さえも変更されています。問題となる点はどこにも無いようです。</p><p>ここでステークホルダーが仕様を変更し、複数の勝者を容認するのではなく1人だけに絞りたい、と要望してきたとしましょう。この変更によって、同点になった場合どうするか、という問題の原因そのものが無くなりました。その結果、決してコメントを書かないというこのアプローチは、既にアプローチ2で確認した次のコードに戻ってしまうことになります。</p><p>そのうちある開発者が、ちょっとおかしな事象に気が付きます。この関数は、最初に最高得点を獲得した参加者だけを返しているのです。そして、問題を認識した開発者が選択するアプローチによって、<code>TODO</code>コメントを使う方法や、ステークホルダーから要求される仕様にすべて対応するコードを書く方法など、様々な解決法が提案されます。このように考えうるどの解決法にも、共通することが2つあります。</p><p>あなたが開発者であるならば、コメントを使いますか？　それとも、時間を無駄にしない別の方法をお考えですか？　その場合でも、文書を確認することにも時間はかかる、ということを忘れないでください。</p><p>私としては、そのコメントが何らかの価値を加えるものであれば有益であると考えます。どのアプローチが絶対に正しいか、あるいは完全に間違っているか、というものではないと思っています。</p><p>コード内のコメントを禁止することは、カロリー計算を使ったダイエットとよく似ています。カロリー計算は、ある程度までは役に立つでしょう。1日に8000キロカロリーもしくは300キロカロリーの食事をするよりも、2000キロカロリーを食べるほうが間違いなく有効です。とはいえ、全体像を把握することは簡単なことではありません。他のものより有効なカロリーもあります。甘味料や炭酸入りのソフトドリンクを飲むよりも、サラダを食べる方が体に良いはずです。同じように、もしもコード内でのコメントが禁止されたならば、より良いコードを書かざるを得なくなるでしょう。しかし、コードにどうしてもコメントが必要な場合にもコメントを禁止してしまうと、長い目で見たときにかなりの害を及ぼすことになります。混乱を招き、保守性が低下することになりかねません。</p><p>では、どのような場面でコメントは有益なのでしょうか？　最初に考えることは、JavaScriptでは引数リストと戻り値の型が特定できない、ということです。そのため、型の定義に関する情報が必要となります。多くの他の言語では、こうした型の定義はメソッドのシグネチャに記載されています。JavaScriptの開発環境であれば、ホバー上でいくつかの型に関するデータが得られるかもしれません。概要をつかんでいれば時間を節約できるでしょう。<code>= =</code>と<code>= = =</code>の違いを把握しており、その上で<code>= = =</code>を使いたいならば、型を理解しておくことが重要です。そして、これらの型を宣言することも同様に重要です。この宣言をしておかなければ、型の安全性が失われてしまいます。</p><p>シグネチャは、この例のようになっています。</p><p>型ははっきりと特定されています。引数名が型の隣にちゃんと定義されています。3つの引数名はすべて、型の上の1文の中で記述されています。</p><p>戻り値の型を省略するべきかどうかについてははっきりしていません。そのため、コメントの記載事項を少なくするためにこれを省略しても、まったく問題はないでしょう。</p><p>クラスやメソッドを定義する段階では、ヘッダコメントを強くお勧めします。1つの文で1つのクラスとその責任範疇だけを記述します。メソッドについても同様です。ヘッダコメントは、プログラムを関数型のスタイルで書いている時にも有益です。</p><p>多くの開発者は、メソッドを実装する前にヘッダコメントを書いています。要求されている機能を、それ以上でも以下でもなく正確に実装するために、開発者は力を注いでいます。そこに焦点を当ててヘッダコメントを書けば、コードの質も向上します。</p><p>この他にも、ヘッダコメントについては以下の事を付記しておきます。</p><p>必要な情報だけを確定し、その他の部分は削除しましょう。簡潔であることが重要です。週末限定の短期的なプロジェクトであったり、もしくはプロトタイプ的なものであったりする場合と、開発してから5年間の保守を要するWebアプリの場合とでは、コメントに求められる要件も異なります。</p><p>優れたヘッダコメントを書くということは、ひとつの技術です。とはいえ、常識に従えば十分に読みやすいヘッダコメントが書けます。常識を使うだけで、きちんと情報が網羅されたヘッダコメントになります。次の例は悪いヘッダコメントの見本です。</p><p>こちらは、もう少しましな例です。</p><p>きちんと書かれたヘッダコメントがあれば、コード内のコメントの99.99%は不要になります。メソッドの複雑さがどうであれ、コード内のコメントはただノイズを付加するだけであり、開発者を助けるというよりむしろ気を散らせる、という意見に私はほぼ同意します。</p><p>ヘッダコメントを使えば、コードは単体ごとに機能を持つ、という原則にも従うことができます。コードに求めるレベルがどの程度であれ、1つの構成ブロックはそれぞれ1つずつ、しっかり定義された機能を持たなければなりません。そのためには、関数に対するコメントと同じように、クラスにもヘッダコメントを加えることをお勧めします。クラスの定義付けに苦労している場合、それは単体ごとに機能を持つという原則に違反している可能性を示しています。</p><p>コードの保守という観点から見た場合、ヘッダコメントには少なくとも次の2つの目的があり、有益であると言えます。</p><p>こうした情報を伝えるためにも、ヘッダコメントは随時メンテナンスする必要があります。自分が何を行っているか把握している開発者にとっては、それはそんなに難しい作業ではないでしょう。</p><p>コメントを書くか書かないかは、結局開発者次第です。役に立つと思う方法を実践してください。中には、コメントを一切必要としないプロジェクトもあるでしょう。厳密な型分けを必要とする言語とは違い、JavaScriptではコメントを使って、引数や戻り値に関する重要な情報を示すことができます。コンパクトなヘッダコメントを使えば、コードがより分かりやすくなります。コンパクトなヘッダコメントを作成することによって更に、コード自体に対する検討が進み、より保守性の高いコードへと発展させることもできるでしょう。</p><p>今まで書いてきたように私個人では、コメントはすべて役に立たないものとは考えていません。完全に黒、もしくは完全に白、という世界なんてありません。極端な意見は多くの論議を惹きつけます。しかし長い目でみれば、双方の観点から検証されているバランスのとれたアプローチの方が、より有益であるものなのです。</p>
