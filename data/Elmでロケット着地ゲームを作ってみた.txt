<p><a href="https://blog.wearewizards.io/experience-report-rocket-lander-in-elm" rel="nofollow" title="" class="ext-link">Experience report: Rocket lander in Elm</a> （2015-02-15） by <a href="https://www.linkedin.com/pub/thomas-h/a4/518/497" rel="nofollow" title="" class="ext-link">Tom Hunger</a></p><p>読み時間の目安：10分以内</p><p>JavaScriptで強固なコードを書くのは大変なことです。なぜならJavaScriptには、整合性のある強力な型システムなど、昨今のプログラマが期待するような多くのツールがないからです。</p><p>そんなわけで、私たちはJavaScriptにコンパイルするための、いくつもの新しい方法を研究しています。この記事では、<a href="http://elm-lang.org/" rel="nofollow" title="" class="ext-link">Elm</a>に注目したいと思います。この言語の雰囲気をつかむために、簡単なゲームを実装してみました。<a href="https://blog.wearewizards.io/rocket-lander-in-elm-extra/ship.html" rel="nofollow" title="" class="ext-link">デモで遊んでみてください（デスクトップのみです）</a>。</p><p>しかし、なぜJavaScriptは難しいのでしょうか？　次のようなケースを考えてみましょう。</p><p><a href="https://www.destroyallsoftware.com/talks/wat" rel="nofollow" title="" class="ext-link">有名なWatの動画</a>では、Rubyについて簡単に触れた後に、より多くの例を挙げています。</p><p>もちろん問題点に気付いた人々は、これを解決するためにJavaScriptにトランスコンパイルする新しい言語の開発を始めました。その中でよく知られているものは、<a href="http://coffeescript.org/" rel="nofollow" title="" class="ext-link">CoffeScript</a>や<a href="http://www.typescriptlang.org/" rel="nofollow" title="" class="ext-link">TypeScript</a>、それから<a href="https://www.dartlang.org/" rel="nofollow" title="" class="ext-link">Dart</a>などです。</p><p>私は十分な時間をかけ、これら全てを使ってプロダクションコードを書きました。3つともJavaScriptという低い障壁を超える言語だと思いますが、私をワクワクさせるものではありませんでした。</p><p>例えば、TypeScriptを見てみましょう。これはインターフェースの定義の方法が面倒くさく、型安全性は十分な量のコードが型アノテーションされた場合にのみ役に立ちます。まるでフェーズチェンジのようです。特定の閾値以下では、アノテーションはほとんど役に立たないので、全てのアノテーションを省略する人もいるでしょう。ありがたいことに、型アノテーションの大部分は、<a href="https://github.com/borisyankov/DefinitelyTyped/" rel="nofollow" title="" class="ext-link">すでに開発されています</a>。</p><p>次のスニペットは、any型の引数を持つ中間関数が原因で起こったプロダクションバグを簡略化したものです。</p><p>ここ数年で、JavaScriptへのコンパイルの分野に参入するものは、ますます増えてきました。そして新たに加わったものの多くは、純粋関数型のHaskellのような言語に基づいているか、または強く型付けされた言語を直接コンパイルします。<a href="http://www.purescript.org/" rel="nofollow" title="" class="ext-link">PureScript</a>、<a href="http://ocsigen.org/js_of_ocaml/" rel="nofollow" title="" class="ext-link">js_of_ocaml</a>、<a href="http://www.ghcjs.org/" rel="nofollow" title="" class="ext-link">GHCJS</a>、<a href="http://elm-lang.org/" rel="nofollow" title="" class="ext-link">Elm</a>、<a href="https://github.com/faylang/fay/wiki" rel="nofollow" title="" class="ext-link">Fay</a>、<a href="https://github.com/clojure/clojurescript" rel="nofollow" title="" class="ext-link">ClojureScript</a>、<a href="http://www.scala-js.org/" rel="nofollow" title="" class="ext-link">Scala.js</a>などがそうです。</p><p>Elmは、静的に型付けされた関数型の言語であり、不変データ構造を持ち、<a href="http://en.wikipedia.org/wiki/Functional_reactive_programming" rel="nofollow" title="" class="ext-link">関数型リアクティブプログラミング（FRP）</a>への第一級のサポートを誇ります。</p><p>また、Elmには、<a href="http://facebook.github.io/react/" rel="nofollow" title="" class="ext-link">React</a>のスピーディな作成で有名な<a href="https://github.com/Matt-Esch/virtual-dom" rel="nofollow" title="" class="ext-link">仮想DOM</a>の実装などの、役立つツールを含む標準ライブラリがあります。<br>
Haskellと同様に、型アノテーションは関数と同じ行、または関数の上の行に書くことができ、型は必ず大文字で始まります。</p><p>Elmは、mainエントリポイントで実行を開始します。</p><p>コードをもっと見るには、<a href="https://github.com/WeAreWizards/elm-rocket-lander/blob/master/Ship.elm" rel="nofollow" title="" class="ext-link">GitHub</a>で私たちのロケット着地ゲームを参照してください。<br>
まずは、たいていのディストリビューションで入手可能なHaskellの<a href="https://www.haskell.org/cabal/" rel="nofollow" title="" class="ext-link">Cabal-Install</a>からElmをインストールするようお勧めします。</p><p>これはチュートリアルではないので、詳細を学びたい方は<a href="http://elm-lang.org/Learn.elm" rel="nofollow" title="" class="ext-link">Elmのドキュメンテーション</a>を参照してください。</p><p>Elmの関数型リアクティブプログラミング（FRP）は、入力（”信号”）を、その信号の種類に依ってコードに結びつけ、有向グラフをプロセス内で形成します。<br>
Elmでは、DOMイベントを生成するものは何でも信号とすることができます。例えば、マウスの動作やキー操作などです。またElmには、一定間隔、例えば30fps（フレーム/秒）で刻まれる信号があり、これはゲームのプログラミングに役立ちます。改訂：Jason Merrillが<a href="https://blog.wearewizards.io/experience-report-rocket-lander-in-elm#comment-1863077473" rel="nofollow" title="" class="ext-link">コメント</a>で指摘したように、fpsWhenを使えばfps更新のスイッチングが可能になります。Jasonに感謝します。</p><p>Elmの中の信号はどれも、その信号に依存するすべてのコードに伝播します。その流れは、通常、（入力→アプリケーション状態の更新→アプリケーションの再描画）というようになります。</p><p>Elmでは、アプリケーションが起動する前に、信号グラフ全体をセットアップする必要があります。これにより、コードを通して流入する入力について推測することが容易になりますが、欠点もあります。</p><p>例えば、<a href="https://blog.wearewizards.io/rocket-lander-in-elm-extra/ship.html" rel="nofollow" title="" class="ext-link">ロケット着地のデモ</a>では、ゲームをアニメーションするために30fpsが必要です。これを、ゲームの開始時にセットアップしなければならず、オフに切り替えることはできません。つまり、最初のヘルプ画面は、何も表示は変わらないのに、1秒間に30回レンダリングしているということです。</p><p>手軽なゲームを作成するのなら、それでも問題ないでしょう。ただ、考えてみてください。ユーザの入力を扱うアプリでは、何も起こらない長いポーズのあるイベントが1秒に数回起こることになるでしょう。もし30fpsでフェードアウトするアニメーションを追加する場合、アプリはその間ずっと30fpsで動作している必要があります。こうしたケースでは、Elmの（<a href="http://elm-lang.org/learn/Ports.elm" rel="nofollow" title="" class="ext-link">ポート</a>）経由でJavaScriptを使うのが一番良い方法です。</p><p>なぜFRPのグラフがあらかじめ固定されているかについては<a href="https://www.youtube.com/watch?v=Agu6jipKfYw" rel="nofollow" title="" class="ext-link">Strange Loop 2014のこの映像</a>をご覧ください。</p><p>Elmは新しい言語で、注目されています。ライブラリはほとんどありません。さらに、バグも存在します。私はエラーのないJavaScriptを作れると見込んでいたのですが、コンパイルは可能でも破綻しているようなプログラムを何とか作り出しただけでした。例えば、以下のようなコードをコンパイルします。</p><p>しかし、コンパイルすると”ship is undefined（shipが定義されていません）”というエラーがJavaScriptで発生します。最後のラインで間違ってgame.shipではなくShipを使ってしまったのです。</p><p>WebSocketとHTTPを通した外部との相互作用は機能していますが、まだ十分に練られていません。例を挙げると、ElmにはWebSocket用のエラー処理がありません。Elmの中心的な開発者であるEvan Czaplickiは<a href="https://github.com/elm-lang/core/blob/promises/src/Promise.elm" rel="nofollow" title="" class="ext-link">promise-API</a>を使った改善策をいくつか用意しているので、こうした課題は近いうちに解決されると思います。</p><p>批判的に聞こえたかもしれませんが、実際のところElmの体験は実に順調でした。Elmでは、状態に関して明確なコードが求められるので、適当にごまかすのは<em>とても難しい</em>のです。数時間ほど使って慣れてくると、すぐに動かすことができるゲームという形に、使い勝手の良さを感じるようになりました。</p><p>Elmは将来的に、ゲーム以外のプログラミングにも使用できるようになると信じています。しかし今はまだ、前述のpromise-APIなど足りない点がいくつかあります。</p><p>ちょうどこの記事を書き終えたところで、Evanが<a href="https://github.com/evancz/elm-architecture-tutorial#the-elm-architecture" rel="nofollow" title="" class="ext-link">Elmでアプリを構築する方法に関する素晴らしいチュートリアル</a>をリリースしました。</p>
