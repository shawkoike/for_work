<p><a href="http://va.lent.in/optimize-for-readability-first/" rel="nofollow" title="" class="ext-link">Optimize for readability first</a>（2014-7-8）by <a href="https://twitter.com/valyard" rel="nofollow" title="" class="ext-link">Valentin Simonov</a></p><p>ソフトウエアエンジニア。興味があるエリアは対話式インストールとゲーム開発、そしてWeb開発。知識をシェアするのが好きで、学生に教えたり、カンファレンスやHackathonでスピーチしたりする。</p><p>最近では<b>最適化</b>という言葉を使う場合、GPUメモリ消費やネットワークトラフィックの最適化、などと明示的に言わない限りは、<b>実行時間の最適化</b>という意味で使われるケースがほとんどです。</p><p>私がプログラムを始めた頃、プロセッサの処理能力は遅く、メモリサイズもとても限られていて、キロバイト単位で計算されていました。ですからメモリ容量をよく考え、メモリ消費を上手に最適化しなくてはなりませんでした。大学では最適化について2つの極論を教わりました。</p><p>最近では誰もメモリについては大して気にしていません（デモシーン製作者、組み込みシステムのエンジニア、一部の携帯電話ゲームのディベロッパなどは別です）。RAMだけでなく、ハードディスクの容量についても同様です。<i>Watch Dogをインストールするとなんと25GBもディスク容量を使用します。ついでに言うと私は今この記事をChromeのタブを使って書いているのですが、130MBのRAMを使用しています。</i></p><p>最適化にはもっといろいろな種類があります。</p><p>一度に全てを最適化できないということを理解しておかなければなりません。例えば、パフォーマンスの最適化に取り組んでいる時、アプリケーションはより多くメモリを消費し、コードは読みづらいものになる傾向があります。</p><p>コードを読みながら、ディベロッパは本質的には（大して有能でもない）通訳のような仕事をしています。つまり、現在の実行状況を踏まえつつ、脳内でコードを実行させています。だからプログラマというのは作業中に邪魔をされると特に不機嫌になるんです。</p><p>よく理解しておく必要がある一番大切なことは、あなたと、あなたの同僚の作業時間にはお金がかかっているということです。どんなにディベロッパが必死で働いたとしても、こんな風に時間を浪費してしまうことが考えられます。</p><p>ディベロッパが経験を積んでいて、効率的なアルゴリズムやすっきりしたコードを書けるということを想定してもこういうことが考えられます。そうでなければこのリストはとても長くなってしまうでしょう。</p><p>Donald Knuthによる有名な言葉があります。あなたも幾度となく聞いたことがあるかもしれません。</p><p>この言葉を暗記していながら、本来の意味を理解していない人は多くいます。最も多い間違いは次のような感じです。</p><p>思うに、<em>「時期尚早な最適化」</em>という言葉がきちんと定義されていないからこんなことになるのではないでしょうか。だから上述の例で出てくる彼は<em>「時期尚早な最適化」</em>をしているなどとは思いもよらないのです。この言葉をどう定義しましょうか。</p><p>つまり可読性以外の全てですね。ですから、<em>やるべきじゃない</em>ことではなく、<em>やるべき</em>ことについて話しましょう。上の引用はこんな風に書き換えられます。</p><p>さて、コードを読みやすくして、それにかける時間を少なくし、お金を無駄にしない、ということに異論はないですよね。でも具体的にこれは何を意味するのでしょうか。</p><p>ディベロッパがコードを読んでいる時、作業を大幅に遅らせる2つの根本的な要因があります。</p><p>ソフトウェアの解釈プログラム（インタプリタ）であれば、2つの数値を加算して関数を呼び出す（もちろん、その間にコンパイルする）ためのコードを解析するのは、造作もないことでしょうが、残念ながら私たちは人間です。</p><p>思った通りに動かない場合、プログラマはソースファイルに入力されたコードがどういう目的でどんな動きをするかを確実に把握しなければなりません。</p><p>ここからは、記述されたコードの言語やアプリケーション・ドメインに使われているアルゴリズムに詳しい（<em>すなわち、このコードを十分に理解している</em>）ベテランのディベロッパを想定してお話しします。</p><p>最初の2つに関してはスキップします。コードの出来が悪ければ、いずれにしても読む気はしませんからね。社内の誰かがそれを書いたとしたら、正しい書き方を教えてやるか、あるいはクビにでもした方が賢明です。それから、これはもちろんのことですが、コード全体にわたり、しっかりとしたコーディングスタイルを維持するようにしましょう。</p><p>あるいは行数の最適化とでも言いましょうか。長い1行に入れ子された関数呼び出しや条件演算子（?:)などは、非常にパースしにくいですよね。もちろん、これをある程度、主観的な問題だという人もいると思います。ただ、可読性を犠牲にしても、ソースコードをできるだけ少ない行数にしなければならないと感じている人がいるのも事実です。</p><p>以前は、コードの可読性も高く、動作も順調だったとしましょう。でも、ある時点で、誰かがコードの最適化を決行したとします。手間をかけたプロファイリングで、その直後は結果も上々でしたが、最近では、ただの配列、ビット演算子、摩訶不思議な数字の集まりにしか見えなくなりました。なぜコードがそう見えるようになったのか、誰も知りませんし、どうすればそれを解決できるのかも分かりません。なぜなら、最適化の担当者が何1つコメントを残していなかったからです。</p><p>優れたコードにはコメントは必要ない、ということを聞いたことがある人もいるかと思いますが、コートが最適化された時には（<strike>例えそれが優れていても</strike>優れている場合はなおさら）、コメントは必要です。</p><p>こうした最適化でも、コードベースの<a href="http://jacksondunstan.com/articles/983" rel="nofollow" title="" class="ext-link">このようなコメントなしの行</a>は、さほど差し障りはありません。</p><p>私たちはソフトウェアのディベロッパとして、より<em>アカデミックで理論的な</em>技を、日々学んでいます。そうなると、その技を現場で試してみたくなるものです。詰まるところ私たちは、ただのプログラマではなく、<em>コンピュータ科学者</em>なのですからね。</p><p>一部の言語は、ディベロッパに最先端の技術の使用を要求するため、コードはより複雑に、より<em>アカデミック（理論優先的）</em>になります。コードを使って、堅固で完璧なシステムを作り上げる達成感は、学識者の99.997％が理解できないような方法を使って、数学の難解な定理を証明してみせるのと同じようなものでしょう。</p><p>ただし、例えそのコードがモジュール／クラス／関数にうまくまとめられており、それぞれのブロックが完全に可読性の高い命令型のコードで構成されていたとしても、他の人がこれを読むのは一苦労でしょう。コード全体の構造を把握していなければなりませんし、使われているテクニックやパターンについても知っている必要があるからです。</p><p>私の知人でScalaを使っている人が2人しかいないというのは、このことと関係があると思います。個人的には、Scalaは大好きです。<em>私にとっては、真空中でガラスの城だって作ることができる、学究的な遊び場のようなものだからです。</em>でも、Scalaを知れば知るほど、その機能を使いこなせばこなすほど、それが<em>本質的には書き込むだけの言語</em>（うのみにはしないように！）であることが理解できるようになりました。ただ、Perlほどには書き込み専用ではなく、どれだけ美しいコードベースでも変更や更新は必要になります。</p><p><em>Perl</em>ほどには書き込み専用ではなく、どれだけ美しいコードベースでも変更や更新は必要になります。そしてここで、誰がこの<em>美しいコード</em>を理解できるかという問題に直面するわけです。</p><p>クリーンで賢いコードほど読みづらいというのは、にわかに信じられませんね。</p><p>コードを読む時、ディベロッパはあるメソッドやクラスから別のメソッドやクラスに、頻繁に目を移す（ジャンプする）ものです。この時、お手持ちのIDEを使いこなせると、時間を節約することができます。IDE（例えばVisual Studio）の<b>Go to Declaration</b>、<b>Find Usages</b>、<b>Navigate to</b>、<b>Inspect</b>、あるいはその他の機能を使うことによって、コードを<b>連結グラフ</b>として考えることができるようになるのです。</p><p>ところで、<b>連結グラフ</b>とは具体的な何なのでしょうか？</p><p><img src="http://va.lent.in/content/images/2014/Jul/graph.png" class="aligncenter"></p><p>言い換えると、<em>「連結」</em>コードでは、コードの役割モデルを頭に描きながら、あるメソッドから別のメソッドを追うことが簡単にできるということです。</p><p>もしコードのどこかで連結が切れていれば（IDEがメソッド間の移動をうまくできない時は）、その連結部分は、自分でじっくり見る必要が出てきます。つまり、コード内の非連結部が多い→より追いかけづらい→より読みづらい、という図式が出来上がります。</p><p>では、なぜコードのグラフは切断されるのでしょうか？それには多くの理由が考えられますが、よく見るものをここに挙げてみたいと思います。</p><p>一部のフレームワークはこれをしがちです。<em>「コールバック」</em>を文字列として渡し、必要に応じてリフレクションを使います。この場合、古き良きCMD+Fを使いましょう。</p><p>最悪なフレームワークは、動的言語で、これらの文字列を動的にします。<em>JavaScriptやActionScript 3.0がそうです。</em></p><p>例えばコードの半分がC#で記述されており、残りの半分がビジュアルなノードエディタに組み込まれている場合、双方の行き来は大変かと思われます。</p><p>これは、<em>依存性注入フレームワーク</em>やXML構成のものも同様です。あまり言われることはありませんが、XML構成を記述することもコーディングで、宣言型プログラミングと呼ばれます（<em>ちなみにXML上に命令型言語を構築するようなバカげた所業のことではありませんよ</em>）。</p><p>20のリンクから1000行に連なるメソッドにジャンプ？　これは痛いですね…　このようなノードを含んだグラフに使い道はありません。</p><p><b>Go to Declaration</b>により、インターフェイスや抽象クラスにジャンプすると、どの実装かを把握しなければなりません。依存性注入、<em>Abstract Factory</em>、その他、依存性に抵抗するメソッドなどの場合、状況はさらにひどくなります。コード内のノード連結が抽象的になりすぎるのです。</p><p><b>DI</b>と<b>XML</b>を私が嫌っているような印象を与えているかもしれませんね。DIは<em>スパゲティコード</em>を回避するのに優れたツールで、基本設計をよりモジュラー化し検証可能なものにすることができます。ただ、他の多くの優れたツール同様、誤って使うと大変な目に遭うでしょう。</p><p><em>XML構成</em>については、私は確かに嫌いです。</p><p>可読性のまとめとして、以下に覚えておくべき点を挙げました。</p><p>シンプルなコードを書くように努めることは時間がかかりますし、時期尚早な最適化に抵抗することは間違いなく難しいと思います。</p><p><b>でも、納期の2時間前、例えば48時間寝ていないような状況下で、コードがデバッグ可能な状態であったなら、あなたは半分眠った脳みそで、きっと過去のあなた自身に感謝することになるでしょう。</b></p><p><a href="http://www.reddit.com/r/programming/comments/2a5sqp/optimize_for_readability_first_what_slows_down/" rel="nofollow" title="" class="ext-link">reddit</a>や<a href="https://news.ycombinator.com/item?id=8008634" rel="nofollow" title="" class="ext-link">hackernews</a>で、ぜひディスカッションに参加してください。<br>
多くのグラマーエラーを修正してくれた<a href="http://www.reddit.com/user/Arandur" rel="nofollow" title="" class="ext-link">/u/Arandur</a>に感謝します。</p>
