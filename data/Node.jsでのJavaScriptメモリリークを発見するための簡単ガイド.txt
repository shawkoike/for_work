<p><a href="http://www.alexkras.com/simple-guide-to-finding-a-javascript-memory-leak-in-node-js/" rel="nofollow" title="" class="ext-link">Simple Guide to Finding a JavaScript Memory Leak in Node.js</a> （2015-12-24） by <a href="https://twitter.com/akras14" rel="nofollow" title="" class="ext-link">Alex Kras</a></p><p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p><p><em>注釈：お気に入りに登録してください。<br>
Simple Guide to Finding a JavaScript Memory Leak in Node.js （Node.jsでのJavaScriptメモリリーク発見簡単ガイド）</em><br>
<a href="https://twitter.com/akras14" rel="nofollow" title="" class="ext-link">@akras14</a> <a href="http://www.alexkras.com/simple-guide-to-finding-a-javascript-memory-leak-in-node-js/" rel="nofollow" title="" class="ext-link">http://www.alexkras.com/simple-guide-t…</a></p><p>数カ月前、私は、Node.jsでメモリリークのデバッグをしなければなりませんでした。このテーマに役立つ数多くの記事を見つけましたが、その一部をじっくり読み終えた後でさえ、問題のデバッグのために具体的に何をすれば良いのかまだよく分かりませんでした。</p><p>この記事の目的は、Node.jsでメモリリークを発見するための簡単ガイドを提供することです。分かりやすい方法を1つに絞って説明することが、（私が思うに）Node.jsでのあらゆるメモリリークデバッグの第一歩となるはずです。場合によっては、この方法は十分ではないかもしれません。参考になるかもしれない他のリソースへのリンクも張っておきます。</p><p>JavaScriptは、ガベージコレクションを行う言語です。従って、Node.jsのプロセスで使われるメモリの全ては、V8 JavaScriptエンジンによって、自動的に割り当てられたり、割り当てを解除されたりします。</p><p>V8は、どのようにしてメモリの割り当てを解除すべきタイミングを知るのでしょうか？V8は、プログラムの中のルートノードから始まる全ての変数について、変数のグラフを保持します。JavaScriptには、論理値（Boolean）、文字列（String）、数値（Number）、オブジェクト（Object）という4つのデータ型があります。最初の3つは基本型で、割り当てられたデータを持ち続けるだけですが（例えばテキストの文字列）、オブジェクト（Object）とJavaScriptにあるその他全てのものは、オブジェクトで（例えば配列も）、他のオブジェクトへの参照（ポインタ）を保持できます。</p><p><img src="http://www.alexkras.com/wp-content/uploads/memory-graph.png" alt="memory-graph" width="693" height="421" class="aligncenter size-full wp-image-1009" scale="0"><br>
<em>注釈：（左から）ルートノード、回収可能</em></p><p>定期的に、V8はメモリグラフを確認し、ルートノードから到達できないデータグループを特定しようとします。ルートノードから到達できなければ、V8はそのデータはもう使われることがないと判断し、メモリを解放します。このプロセスが<strong>ガベージコレクション</strong>と呼ばれるものです。</p><p>JavaScriptでメモリリークが発生するのは、既に必要とされていないデータがまだルートノードから到達可能な場合です。この状態では、V8はそのデータがまだ使われていると判断し、メモリを解放しないのです。<strong>メモリリークをデバッグするためには、誤って保持されているデータを特定し、V8がクリーンアップできるようにする必要があります。</strong></p><p>また、ガベージコレクションは、常に稼働しているものではないことに注意しなければなりません。通常、V8は、適切な時期にガベージコレクションを開始します。例えば、定期的に、あるいは、空きメモリが減ってきたことを検知した時に、ガベージコレクションを開始します。Node.jsでは、各プロセスに使えるメモリ量が限られているため、V8は、メモリを効率的に使う必要があるのです。</p><p><img src="http://www.alexkras.com/wp-content/uploads/node-error.png" alt="node-error" width="199" height="150" class="aligncenter size-full wp-image-1011" scale="0"><br>
<em>注釈：Node.jsは、メモリ不足です。<br>
alexkras.comにアクセスして、メモリリークを確認してください。</em></p><p>後者の<strong>緊急ガベージコレクションは、重大なパフォーマンス低下の原因</strong>になり得ます。</p><p>多くのメモリリークを起こしているアプリケーションがあるとしましょう。すぐに、Node.jsのプロセスは、メモリが不足し始めます。これにより、V8は、緊急ガベージコレクションを開始します。しかし、ほとんどのデータはまだルートノードから到達できる状態で、メモリ解放できる余地が少なく、ほぼそのままとなります。</p><p>遅かれ早かれ、Node.jsのプロセスは再びメモリ不足に陥り、再度ガベージコレクションを開始します。気付かないうちに、アプリケーションは、連続ガベージコレクションサイクルに入り、何とかプロセスを機能させようとし続けます。V8は、多くの時間をガベージコレクションに費やし、実際のプログラム実行に使われるリソースがほとんど残りません。</p><p>前述したように、V8 JavaScriptエンジンは、ガベージコレクション実行のタイミングを決定する複雑なロジックを持っています。その点を考慮すると、たとえNode.jsのプロセスでメモリの使用量が増加し続けるのを目にしたとしても、<strong>それがメモリリークのせいだと分かるのは、ガベージコレクションが実行されて、</strong>使われていないメモリが解放された後です。</p><p>ありがたいことに、Node.jsでは、手動でもガベージコレクションを開始することができますので、メモリリークを確認する際には、まずこれを実行します。<code>--expose-gc</code>フラグを付けてNode.js を実行するだけです。例えば、<code>node --expose-gc index.js</code>です。Node.jsがこのモードで実行されていれば、プログラムから<code>global.gc()</code>を呼び出すことによって、いつでもガベージコレクションをプログラムで開始することができます。</p><p>また、<code>process.memoryUsage().heapUsed</code>を呼び出すことによって、プロセスで使われているメモリ量をチェックすることもできます。</p><p><strong>手動でガベージコレクションを開始し、使用中のヒープを確認することによって、実際にプログラム内でメモリリークが起こっているかどうかを判断することができるのです。</strong></p><p>簡単なメモリリークプログラムを作りました。こちらでご覧いただけます。<br>
<a href="https://github.com/akras14/memory-leak-example" rel="nofollow" title="" class="ext-link">https://github.com/akras14/memory-leak-example</a></p><p>これをcloneして、<code>npm install</code>を実行してから、<code>node--expose-gc index.js</code>を実行すると、実際の動作を確認することができます。</p><p>このプログラムは、以下のような動きをします。</p><p><code>node --expose-gc index.js</code>（または<code>npm start</code>）でプログラムを実行すると、メモリに関するデータの出力が始まります。1-2分実行して、<code>Ctr + c</code>で止めましょう。</p><p>メモリが急速に増加しているのが分かるでしょう。2秒ごと、それもメモリの状態を得る直前にガベージコレクションをしているにもかかわらずです。</p><p>このデータの出力は、このような感じです。</p><p>このデータをプロットすると、メモリの使用量の増大はもっと明確になります。</p><p><img src="http://www.alexkras.com/wp-content/uploads/with-memory-leak.png" alt="with-memory-leak" width="800" height="600" class="aligncenter size-full wp-image-1015" scale="0"><br>
<em>注意：データプロットの方法を知りたい場合は、このまま読み進めてください。不要の場合は、次のセクションに進んでください。</em></p><p>出力されたデータは、JSONファイルに保存し、それを読み込んでPythonの数行のプログラムでプロットしています。混乱を避けるために別のブランチに入れていますが、ここで確認していただけます。<br>
<a href="https://github.com/akras14/memory-leak-example/tree/plot" rel="nofollow" title="" class="ext-link">https://github.com/akras14/memory-leak-example/tree/plot</a></p><p>関連する箇所は、こちらです。</p><p>そして</p><p><a href="https://github.com/akras14/memory-leak-example/tree/plot" rel="nofollow" title="" class="ext-link">plot</a>ブランチは、チェックアウトして、通常通りにプログラムを実行することもできます。プログラムが終わったら、<code>python plot.py</code>を実行して、プロットを生成してください。また実行の前にはコンピュータに、<a href="http://matplotlib.org/" rel="nofollow" title="" class="ext-link">Matplotlib</a>ライブラリをインストールしておく必要があります。</p><p>他にも、エクセルを使ってデータをプロットすることができます。</p><p>
</p>
<p>さあ、これで問題が再現できました。次は何をするのでしょうか。今度は、問題がどこにあるのかを突き止め、手直ししなければいけません。</p><p>前出のサンプルプログラムの以下の部分にお気付きかもしれませんね。</p><p>ここでは以下のサイトにあるnode-heapdump モジュールを使っています。<br>
<a href="https://github.com/bnoordhuis/node-heapdump" rel="nofollow" title="" class="ext-link">https://github.com/bnoordhuis/node-heapdump</a></p><p>node-heapdumpを使用するための準備は以下の通りです。<br>
1. モジュールをインストールする<br>
2.プログラムの先頭に配置する<br>
3.Unix系プラットホーム上で<code>kill -USR2 {{pid}}</code>を呼び出す</p><p>もし<code>kill</code>という要素を初めて見たのであれば、これはUNIXのコマンドで、あらゆる実行プロセスに対し、（特に）カスタムシグナル（ユーザ定義シグナルともいう）を送ることができるものです。Node.jsのheapdumpは、<strong>ユーザシグナル2</strong>、すなわち<code>-USR2</code>とプロセスIDを受け取ると、そのプロセスのヒープダンプを採取するように設定されています。</p><p>サンプルプログラムの中では、<code>process.kill(process.pid, 'SIGUSR2');</code>を実行させることにより、<code>kill -USR2 {{pid}}</code>コマンドを自動化しています。ここで<code>process.kill</code>は<code>kill</code>コマンドのためのNodeラッパーです。また<code>SIGUSR2</code>はNode.jsでの<code>-USR2</code>の呼び方で、<code>process.pid</code>は現在のNode.jsのプロセスIDを得ます。完璧なヒープダンプを採取するために、ガベージコレクションの後、その都度このコマンドを実行します。</p><p><code>process.kill(process.pid, 'SIGUSR2');</code>はWindows系プラットホーム上で動きませんので、代わりに<code>heapdump.writeSnapshot()</code>を実行してください。</p><p>この例は<code>heapdump.writeSnapshot()</code>があれば、少しばかり簡単なのかもしれません。しかし、Unix系プラットホーム上で<code>kill -USR2 {{pid}}</code>シグナルを使えば、ヒープダンプを開始することができ、役に立つということをお伝えしたかったのです。</p><p>次のセクションでは、メモリリークを分離するために、生成されたヒープダンプを活用する方法についてお話しします。</p><p>
</p>
<p>ステップ2では、頻繁にヒープダンプを生成しましたが、<strong>必要なのは少なくとも3カ所です</strong>。理由はすぐに分かるでしょう。</p><p>ヒープダンブを入手したら、次はGoogle Chromeを使って、Chromeの開発者ツールを開いてください（Windowsの場合はF12キー、Macの場合はCommand + Option + iキーで開きます）。</p><p>開発者ツールのナビゲータの”Profiles”タブを選び、画面の一番下にある”Load”ボタンを押します。そして、採取した最初のヒープダンプを探して、選択します。以下の手順に従って、ヒープダンプをChromeのビューにロードします。</p><p><img style="-webkit-user-select: none; cursor: zoom-in;" src="http://www.alexkras.com/wp-content/uploads/1st-Heap-Dump.png" width="712" height="530"></p><p>続けて、残りの2つのファイルもビューにロードします。例えば、採取したヒープダンプの最後の2つを使っても構いません。最も重要なのは、採取した順番通りにヒープダンプをロードすることです。”Profiles”タブは以下のようになっていると思います。</p><p><img src="http://www.alexkras.com/wp-content/uploads/3-Heap-Dumps.png" alt="3-Heap-Dumps" width="908" height="676" class="aligncenter size-full wp-image-1018" scale="0"><br>
ヒープの容量が時間の経過とともに少しずつ増えていることが、上の図からお分かりになるでしょう。</p><p>ヒープダンプをロードしたら、”Profiles”タブにサブビューがたくさん増えているのを目にして、途方に暮れてしまうでしょう。しかし、その中で特に役立つと思ったビューが1つあります。</p><p>最後に採取したヒープダンプをクリックするとすぐに、”Summary”ビューに移動します。”Summary”ドロップダウンの左側に、”All”と書かれた別のドロップダウンがあるのに気付くはずです。そのドロップダウンをクリックします。また、下の図を参考にして、“Objects allocated between heapdump-(最初のヒープマップ) and heapdump-(最後から2番目のヒープマップ)”を選んでください。</p><p><img src="http://www.alexkras.com/wp-content/uploads/3-Heap-Dump-View.png" alt="3-Heap-Dump-View" width="1071" height="624" class="aligncenter size-full wp-image-1019" scale="0"></p><p>これで、最初のヒープダンプと最後から2番目のヒープダンプの間のどこかで割り当てられた全てのオブジェクトが表示されます。ガベージコレクションによって収集されているべきオブジェクトが、最後のヒープダンプの中にいまだに留まっているというこの事実は、問題の原因であり、調査しなければなりません。</p><p>実際はなかなか見事な機能ですが、あまり直感的な見つけ方ではないし、いとも簡単に見落としてしまいます。</p><p>サンプルアプリケーションのアウトラインステップが完了した後は、以下のようなビューが作られて終了です。</p><p><strong>shallow size</strong>がオブジェクト自体の大きさを表し、<strong>retained size</strong>サイズがオブジェクトとその子オブジェクト全体の大きさを表すことにご注意ください。</p><p><img src="http://www.alexkras.com/wp-content/uploads/memory-leak.png" alt="memory-leak" width="1092" height="842" class="aligncenter size-full wp-image-1020" scale="0"></p><p>どうやら、あるべきではない5つのエントリが、私の最新のスナップショットに保たれているようです。その5つとは、(array)、(compiled code)、(string)、(system)、そしてSimpleClassです。</p><p>この5つの中で、<strong>SimpleClass</strong>だけは見覚えがあるでしょう。サンプルアプリケーションの、以下のコードから発生したものだからです。</p><p>最初に(array)や(string)のエントリを調べたいという誘惑にかられるかもしれません。Summaryにある全てのオブジェクトは、コンストラクタの名前でグループ化されています。配列や文字列の場合はJavaScriptエンジン内部のコンストラクタです。あなたのプログラムが、明らかにこれらのコンストラクタで作られたデータを保持し続けていますが、そこに踏み込んで調査しようとすると多くのノイズも得てしまうため、メモリリークの原因を見つけるのがさらに難しくなってしまうのです。</p><p>ですから、まずは飛ばしてしまう方が賢明です。その代わり、サンプルアプリケーションの<strong>SimpleClass</strong>のコンストラクタのように、明らかに怪しいものがないか調べてみましょう。</p><p>SimpleClassコンストラクタのドロップダウンアローをクリックし、結果リストから作られたオブジェクトをどれか選んでみます。するとウィンドウの下の方に保持のためのパスが現れます（上の図を見てください）。そこから、leakyData配列がデータを離さないことがとても簡単に検出できます。</p><p>もしもあなたの使っているアプリケーションが、サンプルほど恵まれていなかったら、内部のコンストラクタ（例えば文字列）を調べ、そこからメモリリークの原因を明らかにする必要があるかもしれません。その場合のコツは、しばしばいくつかの内部のコンストラクタグループに現れる値のグループを特定し、メモリリークの疑いを示す手がかりとして使うことです。</p><p>例えば、サンプルアプリケーションの場合は、ランダムな数字を文字列にしただけに見えるような文字列をいくつも目にするでしょう。それらの保持用のパスを調べれば、Chromeの開発者ツールがleakyData配列を示してくれるでしょう。</p><p>
</p>
<p>怪しいメモリリークを特定し、それを修正したら、ヒープの使い方に大きな違いが感じられるはずです。</p><p>例えば、サンプルアプリケーションで、次の行のコメント化を解除したとします。</p><p>そしてステップ1で説明したアプリケーションをもう一度実行すると、以下のような結果が出力されます。</p><p>もしもこのデータをプロットしたら、以下のようになります。</p><p><img src="http://www.alexkras.com/wp-content/uploads/without-memory-leak.png" alt="without-memory-leak" width="800" height="600" class="aligncenter size-full wp-image-1021" scale="0"></p><p>やりました！メモリリークはなくなりました。</p><p><em>メモリ使用の最初のスパイクが残っていることに注意してください。これは、プログラムが安定するのを待つ間は普通のことです。分析の際に、このスパイクをメモリリークと解釈しないように注意してください。</em></p><p>
</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/L3ugr9BJqIs" frameborder="0" allowfullscreen></iframe><br>
この記事に書いたことのほとんどは、上のビデオから引用しました。この記事が存在する唯一の理由は、私がこのビデオを2週間のコースの間3回繰り返し見て、キーポイント（だと私が信じているもの）を特定しなくてはならなかったからで、他の人たちにはこの発見のプロセスを簡単にしてもらいたいと思ったからです。</p><p>この記事の補足として、上のビデオを見ることをお勧めします。</p><p>これは、また別のステキなツールで、ここで挙げておく価値があると思います。このための論法は、<a href="https://hacks.mozilla.org/2012/11/tracking-down-memory-leaks-in-node-js-a-node-js-holiday-season/" rel="nofollow" title="" class="ext-link">こちら</a>で読むことができます（短い記事ですし、時間を割く価値はあります）。</p><p>あるいは、直接こちらのリポジトリをご覧ください。<a href="https://github.com/marcominetti/node-memwatch" rel="nofollow" title="" class="ext-link">https://github.com/marcominetti/node-memwatch</a></p><p>クリックを省略するために、<code>npm install memwatch-next</code>を使ってインストールすることができます。</p><p>そして、2つのイベントと一緒に使います。</p><p>最後のコンソールログは次のようなものを出力し、どんなタイプのオブジェクトがメモリの中で増えたのかを知らせてくれます。</p><p>すばらしいですね。</p><p><a href="https://developer.chrome.com/devtools/docs/javascript-memory-profiling" rel="nofollow" title="" class="ext-link">https://developer.chrome.com/devtools/docs/javascript-memory-profiling</a></p><p>これは必読です。ここで触れた全てのテーマとそれ以上のものをカバーしていますし、より詳しく、より正確に書かれています。</p><p>下に挙げた、Addy Osmaniによるトークをお見逃しなく。デバッグのコツやリソースをたくさん紹介しています。</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/LaxbdIyBkL0" frameborder="0" allowfullscreen></iframe></p><p>スライドは、<a href="https://speakerdeck.com/addyosmani/javascript-memory-management-masterclass" rel="nofollow" title="" class="ext-link">こちら</a>から入手できます。サンプルコードは、<a href="https://github.com/addyosmani/memory-mysteries" rel="nofollow" title="" class="ext-link">こちら</a>です。</p>
