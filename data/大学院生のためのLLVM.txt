<p><a href="http://adriansampson.net/blog/llvm.html" rel="nofollow" title="" class="ext-link">LLVM for Grad Students</a> （2015-08-03） by <a href="http://adriansampson.net/" rel="nofollow" title="" class="ext-link">Adrian Sampson</a></p><p>この記事は、<a href="http://llvm.org/" rel="nofollow" title="" class="ext-link">LLVM</a>コンパイラ基盤を使ってリサーチをする人のための入門書です。これを読めば、コンパイラに全く興味のない大学院生も、楽しみながらLLVMを使って優れた功績をあげられるようになるでしょう。</p><p>LLVMは非常に優れていて、ハックしやすく、C言語やC++のような”ネイティブ”言語向けの、時代の先端を行くコンパイラです。</p><p>LLVMの素晴らしさに関しては他にも様々な話を聞くのではないでしょうか（JITコンパイラとしても使えるとか、C言語系列以外の様々な言語を強化できるとか、<a href="https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2" rel="nofollow" title="" class="ext-link">App Storeからの新しい配信形態</a>であるとか、などなど)。もちろん全部本当のことですが、今回の記事の目的としては、上述の定義が重要です。</p><p>LLVMが他のコンパイラと差別化される理由には、いくつかの大きな特徴があります。</p><p>LLVMは素晴らしいコンパイラですが、コンパイラの研究をしていない人にとっては興味がないですよね。</p><p>コンパイラ基盤とは、プログラムを使って何かをする時に役立つものです。私の経験からすれば、大変大きな役割を果たします。プログラムを分析し、何らかの処理の頻度を調べたり、システムとの整合性を向上させるための変更を行ったりできます。また、新しいアーキテクチャやOSを仮想的に使用するための変更を行えるので、実際に新しいチップを組み入れ、カーネルモジュールを記述する必要もありません。多くの人が支持するツールよりも、大学院生にとってはコンパイラ基盤が適切なツールであると言えます。他に正当な理由がない限り、下記のようなツールをハックするのではなく、最初からLLVMを試してみることをお勧めします。</p><p>あるコンパイラがあなたのタスクにぴったりだとは思えなくても、例えば、ソースからソースに変換をするよりはるかに簡単に、やりたいことの90%を達成できるでしょう。</p><p>それほどコンパイル的ではない研究プロジェクトにLLVMを用いた、効果的な事例を以下にいくつか挙げます。</p><p>もう一度強調します。LLVMは、ただ新しいコンパイラの最適化を実装しただけのものではないのですよ。</p><p>ここに描いたのは、LLVMのアーキテクチャの主要な構成要素です（モダンなコンパイラのアーキテクチャでもあります）。<br>
<img src="http://adriansampson.net/media/llvm/compiler-arch.svg" alt="Front End, Passes, Back End" class="img-responsive"><br>
各要素の説明は以下の通りです。<br>
* フロントエンドがソースコードを中間表現（またはIR）に変換します。この変換によって、これ以降のコンパイラの作業が単純化され、C++の複雑なソースコードと格闘しなくても済むようになります。果敢な大学院生のあなたは恐らく、この部分をハックしなくてもいいでしょう。修正無しで<a href="http://clang.llvm.org/" rel="nofollow" title="" class="ext-link">Clang</a>が使えます。<br>
* PassがIRをIRへと変換します。通常の状況では、passはコードを最適化します。つまり、passは入力されたIRと同じことをするIRプログラムを出力するのですが、より速くなるよう最適化するのです。ここがハックのしどころです。あなたの研究ツールはIRがコンパイルのプロセスを通過している間、それを参照し変更しながら作業できるでしょう。<br>
* バックエンドは、実際の機械語を生成します。この箇所についてはほぼノータッチで構いません。</p><p>このアーキテクチャは、昨今のほとんどのコンパイラに当てはまりますが、LLVMには注目すべき点が1つあります。それは、全プロセスを通じてプログラムが同じIRを使うということです。他のコンパイラでは、pass毎に独自のコードが生成されることがありますが、LLVMはこれとは逆のアプローチをとっています。私たちハッカーにとっては素晴らしいことで、プロセスがフロントエンドとバックエンドの間である限り、どこでコードが実行されるか心配しなくても済むからです。</p><p>ではハックしてみましょう。</p><p>まずLLVMをインストールします。通常、Linuxのディストリビューションから、LLVMとClangのパッケージがすぐ使える形で入手可能です。注意しなければいけない点は、ハックするために必要なヘッダを含んだバージョンを入手するということです。例えば、 <a href="https://developer.apple.com/xcode/" rel="nofollow" title="" class="ext-link">Xcode</a>に付属してくるOS Xのビルドは完全版ではありません。幸い、CMakeを使えば<a href="http://llvm.org/docs/CMake.html" rel="nofollow" title="" class="ext-link">ソースからLLVMをビルドするのは</a>そう難しくありません。通常はLLVMだけをビルドすればいいのです。バージョンさえ合っていれば、システムに付属してきたClangでも十分使えます（ただし、<a href="http://clang.llvm.org/get_started.html" rel="nofollow" title="" class="ext-link">Clangをビルドするための指示書</a>もありますから確認してくださいね）。</p><p>特にOS Xに関しては、<a href="http://homes.cs.washington.edu/~bholt/" rel="nofollow" title="" class="ext-link">Brandon Holt</a>による<a href="http://homes.cs.washington.edu/~bholt/posts/building-llvm.html" rel="nofollow" title="" class="ext-link">作業を正しく行うための優れた指示書</a>を公開していますし、<a href="https://github.com/Homebrew/homebrew/blob/master/Library/Formula/llvm.rb" rel="nofollow" title="" class="ext-link">Homebrew formula</a>も提供されています。</p><p>ドキュメントをよく読み込みましょう。下記に挙げるリンクは繰り返し参照する価値のあるものです。</p><p>LLVMを使って生産的な研究をするには、カスタムのpassを作成したほうがいいでしょう。この項では、臨機応変にプログラムを変換することのできるシンプルなpassをビルドし、実行するまでを解説します。</p><p>実用的ではないLLVM passを格納した<a href="https://github.com/sampsyo/llvm-pass-skeleton" rel="nofollow" title="" class="ext-link">テンプレート用のリポジトリ</a>を作ったので、このテンプレートから着手してみてください。一から作ると、ビルドコンフィギュレーションの設定に手間がかかるかもしれません。</p><p>GitHubから<code>llvm-pass-skeleton</code><a href="https://github.com/sampsyo/llvm-pass-skeleton" rel="nofollow" title="" class="ext-link">リポジトリ</a>をクローンします。</p><p>実際の作業は<code>skeleton/Skeleton.cpp</code>上で行われるので、ファイルを開きましょう。ここで作業が行われます。</p><p>LLVMのpassが何種類かありますが、私たちが使うのは<a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-functionpass-class" rel="nofollow" title="" class="ext-link">function pass</a>と呼ばれるものです（最初に手を着けるのに適しています）。予想通り、LLVMは、コンパイルをかけているプログラムの中に見つけた全ての関数に対して上記のメソッドを呼び出します。今のところは、名称の出力しかしていません。</p><p>詳細は以下の通りです。</p><p><a href="http://www.cmake.org/" rel="nofollow" title="" class="ext-link">CMake</a>でpassをビルドします。</p><p>LLVMがグローバルにインストールされていない場合は、CMakeに対して場所を指示する必要があります。<code>LLVM_DIR</code>環境変数の中にLLVMがある<code>share/llvm/cmake/</code>ディレクトリならどこのパスを指定しても大丈夫です。Homebrewのパスの例は下記のようになります。</p><p>Passをビルドすると共有ライブラリが生成されます。<code>build/skeleton/libSkeletonPass.so</code>または、プラットフォームに応じて似たような名称で見つけられます。次は、このライブラリを読み込んで、実際のコード上でこのpassを実行してみます。</p><p>新しいpassを実行するには、Cのプログラムで<code>clang</code>を呼び出し、今コンパイルした共有ライブラリを指す変なフラグを使います。</p><p>この<code>-Xclang -load -Xclang path/to/lib.so</code>を使えば、<a href="http://adriansampson.net/blog/clangpass.html" rel="nofollow" title="" class="ext-link">Clang上であなたのpassを読み込み、アクティベートできます</a>。より大きなプロジェクトを処理する必要があるなら、Makefileの<code>CFLAGS</code>か、あなたのビルドシステム上の同等なものに対して、これらの引数を付加すればいいのです。</p><p>（<code>clang</code>から呼び出すのとは別に、passを一度に実行することもできます。これは、LLVMの<code>opt</code>コマンドを用いるやり方で、<a href="http://llvm.org/docs/WritingAnLLVMPass.html#running-a-pass-with-opt" rel="nofollow" title="" class="ext-link">公式のドキュメントで記述されている方法です</a>が、この記事では触れません）。</p><p>おめでとうございます。コンパイラのハックができました。次は、この演習passを拡張して、プログラムに対して何か面白いことをしてみましょう。</p><p><img src="http://adriansampson.net/media/llvm/llvm-containers.svg" alt="Module, Function, BasicBlock, Instruction"><br>
<a href="http://llvm.org/docs/doxygen/html/classllvm_1_1Module.html" rel="nofollow" title="" class="ext-link">モジュール</a>は、<a href="http://llvm.org/docs/doxygen/html/classllvm_1_1Function.html" rel="nofollow" title="" class="ext-link">関数</a>で構成され、関数は<a href="http://llvm.org/docs/doxygen/html/classllvm_1_1BasicBlock.html" rel="nofollow" title="" class="ext-link">基本ブロック</a>で、基本ブロックは<a href="http://www.llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html" rel="nofollow" title="" class="ext-link">命令</a>で構成されています。モジュール以外の全ては、<a href="http://www.llvm.org/docs/doxygen/html/classllvm_1_1Value.html" rel="nofollow" title="" class="ext-link">値</a>から枝分かれします。</p><p>LLVMでプログラムを扱うには、多少なりともIRの構造を知っておく必要があります。</p><p>以下はLLVMプログラムで最も重要な構成要素の概要です。</p><p>関数や基本ブロック、命令を含むLLVMのほとんどが、<a href="http://www.llvm.org/docs/doxygen/html/classllvm_1_1Value.html" rel="nofollow" title="" class="ext-link">値</a>と呼ばれる多岐にわたる基底クラスから継承しているC++のクラスです。値は、数字やコードのアドレスなど、計算に使える値であれば何でも構いません。グローバル変数や定数（リテラル、即値とも呼ばれる。例えば数字の5など）もまた値になります。</p><p>以下は、人間が理解することができる形式で記述されたLLVM IRの命令の一例です。</p><p>この命令は、2つの32ビット整数（<code>i32</code>型と表示）を加算することを意味しています。つまり、レジスタ4（<code>%4</code>）の整数とリテラル2（<code>2</code>）を加算し、その結果をレジスタ5に表示させるということです。先程、私がLLVM IRは理想のRISCの機械語に似ていると言ったのは、これが理由です。レジスタといった同様の専門用語を使っていますが、たくさんのレジスタが無限に存在します。</p><p>同様の命令は、C++クラスの<a href="http://www.llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html" rel="nofollow" title="" class="ext-link">命令</a>のインスタンスとしてコンパイラの内部で表現されています。オブジェクトには命令コードがあり、加算であること、型であること、そして他の値のオブジェクトのポインタであるオペランドのリストであることを示しています。この例の場合、<a href="http://www.llvm.org/docs/doxygen/html/classllvm_1_1Constant.html" rel="nofollow" title="" class="ext-link">定数</a>のオブジェクトは数字の2であり、他の<a href="http://www.llvm.org/docs/doxygen/html/classllvm_1_1Instruction.html" rel="nofollow" title="" class="ext-link">命令</a>はレジスタ4となります。（LLVM IRは<a href="https://ja.wikipedia.org/wiki/%E9%9D%99%E7%9A%84%E5%8D%98%E4%B8%80%E4%BB%A3%E5%85%A5" rel="nofollow" title="" class="ext-link">静的単一代入</a>であることから、レジスタと命令は1つずつで、それらは同じものになります。レジスタの数値は、文字表現の中間生成物です。）</p><p>もし、あなたのプログラムでLLVM IRを出力してみたいのであれば、Clangを使ってみてください。</p><p>では、LLVM passの話に戻りましょう。全ての重要なIRオブジェクトを調査するには、<code>dump()</code>という、誰もが知っている便利なメソッドを使います。これはIR内にある、人間が理解することができるオブジェクトの表現を出力してくれます。Passは関数に渡されているので、これを各関数の基本ブロック、そして各基本ブロックの命令セットに繰り返し適用するために使いましょう。</p><p>以下がそのコードです。このコードは、<a href="https://github.com/sampsyo/llvm-pass-skeleton/tree/containers" rel="nofollow" title="" class="ext-link">“<code>containers</code>（構成）”ブランチ</a>内にある<code>llvm-pass-skeleton</code>というgitリポジトリから入手が可能です。</p><p><a href="https://ja.wikipedia.org/wiki/C%2B%2B11" rel="nofollow" title="" class="ext-link">C++11</a>の<code>auto</code>型やforeachシンタックスを使えば、LLVM IRの階層間の移動が容易になります。</p><p>再度passを構築し、それを通してプログラムを起動させると、パーツ間を行き来するたびに、IRの様々なパーツが分散されていくのが分かると思います。</p><p>プログラムのパターンを探し、それが見つかったら、そのコードを変えてみてください。驚くことが起こります。簡単な例を挙げましょう。例えば、全ての関数の最初の二項演算子(<code>+</code>, <code>-</code> など)を乗算に変換したいとします。なんだか役立ちそうですよね？</p><p>コードはこんな感じになります。このバージョンは、実際に試せるプログラムの例と併せて、<a href="https://github.com/sampsyo/llvm-pass-skeleton/tree/mutate" rel="nofollow" title="" class="ext-link">“<code>mutate</code>（変換）”ブランチ</a>内にある<code>llvm-pass-skeleton</code>というgitリポジトリから入手が可能です。</p><p>詳細は以下の通りです。</p><p>では、下記のプログラムをコンパイルすると、どうなるでしょう（コードはリポジトリにある<a href="https://github.com/sampsyo/llvm-pass-skeleton/blob/mutate/example.c" rel="nofollow" title="" class="ext-link"><code>example.c</code></a>です）。</p><p>通常のコンパイラでコンパイルをするとコードに記述された通りの結果となりますが、私たちのプラグインでは、2を追加するのではなく、値を倍にする結果となります。</p><p>素晴らしい！</p><p>重要な作業をするために、コードをインストルメントしなくてはならない時、<a href="http://llvm.org/docs/doxygen/html/classllvm_1_1IRBuilder.html" rel="nofollow" title="" class="ext-link">IRBuilder</a>を使ってLLVMの命令を生成するのは手間がかかるので、C言語にランタイムの振る舞いを記述し、コンパイルしているプログラムにリンクさせたいと思うかもしれません。ここでは、二項演算子の結果をログするランタイムライブラリの記述方法を紹介します。</p><p>以下は、LLVMのpassコードです。このコードは、<a href="https://github.com/sampsyo/llvm-pass-skeleton/tree/rtlib" rel="nofollow" title="" class="ext-link">“<code>rtlib</code>“ブランチ</a>内の<code>llvm-pass-skeleton</code>リポジトリから入手できます。</p><p>必要なツールは、<a href="http://llvm.org/docs/doxygen/html/classllvm_1_1Module.html#a66057011b4f824c8a8d04de9697c194a" rel="nofollow" title="" class="ext-link">Module::getOrInsertFunctio</a>と<a href="http://llvm.org/docs/doxygen/html/classllvm_1_1IRBuilder.html#aa6912a2a8a62dbd8706ec00df02c4b8a" rel="nofollow" title="" class="ext-link">IRBuilder::CreateCall</a>です。前者は、ランタイム関数<code>logop</code>に対する宣言を定義します。これは、関数本体を持たないC言語のソースのプログラムにある<code>void logop(int i);</code>の宣言と類似しています。インストルメント化されたコードは、<code>logop</code>関数を定義するランタイムライブラリ（リポジトリにある<a href="https://github.com/sampsyo/llvm-pass-skeleton/blob/rtlib/rtlib.c" rel="nofollow" title="" class="ext-link"><code>rtlib.c</code></a>）と組み合わされます。</p><p>インストルメント化されたプログラムを起動するには、ランタイムライブラリとリンクさせます。</p><p>また、機械語にコンパイルする前に、プログラムとランタイムライブラリをまとめることも可能です。<a href="http://llvm.org/docs/CommandGuide/llvm-link.html" rel="nofollow" title="" class="ext-link">llvm-link</a>ユーティリティ（<a href="https://sourceware.org/binutils/docs/ld/" rel="nofollow" title="" class="ext-link">ld</a>と同等レベルの大まかなIRと思われるかもしれませんが）が活用できます。</p><p>ほとんどのプロジェクトは、最終的にプログラマと連携しなくてはなりません。そして、プログラムからLLVM passに追加情報を渡す方法である、アノテーションの必要性を感じるでしょう。ここで、アノテーションシステムを構築するいくつかの方法をご紹介します。</p><p>これらのテクニックに関して更なる記事を投稿していきたいと思います。</p><p>LLVMは膨大な範囲に及びます。今回、触れることができなかったトピックについて、いくつか挙げておきます。</p><p>あなたが素晴らしい何かを作り出すのに、少しでも助けになることを願っています。研究して、作成して、これが役に立ったか<a href="asompson@carnell.edu">教えてください</a>！</p><p>ワシントン大学の<a href="http://sampa.cs.washington.edu/" rel="nofollow" title="" class="ext-link">アーキテクチャ</a>グループと<a href="http://syslab.cs.washington.edu/" rel="nofollow" title="" class="ext-link">システム</a>グループに感謝します。この記事で取り扱ったトピックに対し活発に議論し、刺激になるいい質問をしてくれました。</p><p><em>親切な読者による補遺。</em></p><p>コメントや質問があれば、<a href="asompson@carnell.edu">メール</a>していただくか<a href="https://twitter.com/samps" rel="nofollow" title="" class="ext-link">@samps</a>宛てにツイートしてください。</p>
