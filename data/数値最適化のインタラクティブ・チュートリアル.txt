<p><a href="http://www.benfrederickson.com/numerical-optimization/" rel="nofollow" title="" class="ext-link">An Interactive Tutorial on Numerical Optimization</a> （2016-11-25） by <a href="http://twitter.com/benfrederickson" rel="nofollow" title="" class="ext-link">Ben Frederickson</a></p><p>「数値最適化」は機械学習における中心的手法の1つです。多くの問題では、最適解を直接突き止めることは難しいものですが、ある解がどれほど適しているかを測定する損失関数を設定し、解を見つけるためにその関数のパラメータを最小化することは比較的容易です。</p><p><a href="http://www.benfrederickson.com/venn-diagrams-with-d3.js/" rel="nofollow" title="" class="ext-link">かつてJavaScriptを初めて学ぼうとしていた時</a>、結果的に数値最適化ルーチンを多数書きました。そのコードを特に使うこともなく置いていたので、それらのアルゴリズムの動作をインタラクティブな形で可視化したら面白いのではないかと考えました。</p><p>本記事の良い点は、コードが全てブラウザで実行できることです。つまり、アルゴリズムの動作をより把握するために、各アルゴリズムのハイパーパラメータをインタラクティブにセットしたり、初期位置を変更したり、どの関数が呼び出されるかを変更したりすることができるのです。<br>
<em>(編注：本記事ではスクリーンショットのみ公開しております。上記機能については<a href="http://www.benfrederickson.com/numerical-optimization/" rel="nofollow" title="" class="ext-link">元記事</a>で動作をお試しください。)</em></p><p>本記事のコードは全て、<a href="https://github.com/benfred/fmin" rel="nofollow" title="" class="ext-link">GitHub</a>にアップしていますので、関心のある方はご覧ください。可視化例の全てはもちろん、最小化関数も含まれています。</p><p>少しの間、微積分や基礎的な代数学さえも思い出せない振りをしてください。ある関数を与えられて、その最小値を見つけるよう指示されたとしましょう。</p><p>1つ簡単に試せるのは、比較的近い2点を抽出して、最大値から離すステップを単に繰り返していくことでしょう。<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/02/numerical-optimization1-1024x685.png" alt="numerical-optimization1" width="770" height="515" class="alignnone size-large wp-image-9283"></p><p>このアプローチの明らかな問題点は、固定のステップサイズを使っているということです。それでは真の最小値にそのステップサイズでしか近づけないので、収束しません。また、ステップサイズを大きくすべきだということが明らかな場合、最小値に少しずつ近づくのでは時間がかかりすぎます。</p><p>こうした問題を克服するため、<a href="https://ja.wikipedia.org/wiki/%E3%83%8D%E3%83%AB%E3%83%80%E3%83%BC%E2%80%93%E3%83%9F%E3%83%BC%E3%83%89%E6%B3%95" rel="nofollow" title="" class="ext-link">ネルダーミード</a>法では、新しい点の損失に基づいてステップサイズを動的に調整します。新しい点の値が以前の値より良ければ、最小値により早く達するようステップサイズを拡張します。同様に、新しい点の値が前の値より悪ければ、最小値周辺に収束するようステップ幅を収縮します。</p><p>通常の設定では、収縮時はステップサイズを半分に、拡張時はステップサイズを倍にします。上に挙げた1次元の例では、最小値の範囲が定まるまではギャロッピング探索のようにサイズを倍にし、収縮に転じたら二分探索を実行します。</p><p>この手法は高次元の例にも容易に適用できます。必要なことは次元数より1つ多い数の点を用意することと、ステップダウンするために残りの点の最も悪い点を反映させることだけです。こちらの<a href="http://github.com/benfred/contour_plot" rel="nofollow" title="" class="ext-link">等高線図</a>で、2次元での動作を見てみましょう。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2017/02/numerical-optimization2-1024x748.png" alt="numerical-optimization2" width="770" height="562" class="alignnone size-large wp-image-9284"></p><p>グラフのどこかをクリックすると、新しい初期位置からやり直します。その位置に三角形を生成し、設定に応じて必要であれば拡張または収縮を行いながら、最小点に向かって反転を繰り返します。<br>
<em>(編注：上記機能については<a href="http://www.benfrederickson.com/numerical-optimization/" rel="nofollow" title="" class="ext-link">元記事</a>で動作をお試しください。)</em></p><p>この方法は非常に単純ですが、実際のところ低次元関数では結構うまく動作します。<span class="MathJax" id="MathJax-Element-14-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-201" style="width: 9.289em; display: inline-block;"><span style="display: inline-block; position: relative; width: 7.741em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1007.62em 2.682em -999.997em); top: -2.259em; left: 0em;"><span class="mrow" id="MathJax-Span-202"><span class="mi" id="MathJax-Span-203" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.063em;"></span></span><span class="mrow" id="MathJax-Span-204" style="padding-left: 0.182em;"><span class="mo" id="MathJax-Span-205" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-206" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-207" style="font-family: MathJax_Main;">)</span></span><span class="mo" id="MathJax-Span-208" style="font-family: MathJax_Main; padding-left: 0.301em;">=</span><span class="mrow" id="MathJax-Span-209" style="padding-left: 0.301em;"><span class="mo" id="MathJax-Span-210" style="vertical-align: 0em;"><span style="font-family: MathJax_Main;">|</span></span><span class="mrow" id="MathJax-Span-211"><span class="mrow" id="MathJax-Span-212"><span class="mo" id="MathJax-Span-213" style="font-family: MathJax_Main;">⌊</span><span class="mi" id="MathJax-Span-214" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-215" style="font-family: MathJax_Main;">⌋</span></span><span class="mo" id="MathJax-Span-216" style="font-family: MathJax_Main; padding-left: 0.241em;">−</span><span class="mn" id="MathJax-Span-217" style="font-family: MathJax_Main; padding-left: 0.241em;">50</span></span><span class="mo" id="MathJax-Span-218" style="vertical-align: 0em;"><span style="font-family: MathJax_Main;">|</span></span></span></span><span style="display: inline-block; width: 0px; height: 2.265em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.354em; border-left: 0px solid; width: 0px; height: 1.361em;"></span></span></nobr></span>のように微分不可能な関数さえも最小化することが可能です。以降でご説明する他の方法ではいずれも、微分不可能な関数を最小化することはできません。</p><p>こういった直接探索法に共通する最大の欠点は、関数の次元が高くなるにつれて動作が遅くなるということです。上述したような1次元と2次元の例ではネルダーミード法はうまく動作するのですが、機械学習モデルのパラメータは何十億個まではいかなくても何百万個に増加する可能性はあります。しかしネルダーミード法は、パラメータが十数個程度の単純な問題でもうまくいきません。</p><p>進行方向の求め方も問題の1つです。2次元空間ではそれほど難しくないのですが、次元数が増えるにつれて加速度的に難しくなるのです。</p><p>進行方向として1つ考えられるのは、現在の点における勾配<span class="MathJax" id="MathJax-Element-15-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-219" style="width: 4.467em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.693em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1003.57em 2.682em -999.997em); top: -2.259em; left: 0em;"><span class="mrow" id="MathJax-Span-220"><span class="mi" id="MathJax-Span-221" style="font-family: MathJax_Main;">∇</span><span class="mi" id="MathJax-Span-222" style="font-family: MathJax_Math-italic;">F<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.122em;"></span></span><span class="mo" id="MathJax-Span-223" style="font-family: MathJax_Main;">(</span><span class="msubsup" id="MathJax-Span-224"><span style="display: inline-block; position: relative; width: 1.313em; height: 0px;"><span style="position: absolute; clip: rect(3.158em 1000.84em 4.17em -999.997em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-225" style="font-family: MathJax_Math-italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span><span style="position: absolute; top: -3.807em; left: 0.836em;"><span class="mi" id="MathJax-Span-226" style="font-size: 70.7%; font-family: MathJax_Math-italic;">n</span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span></span></span><span class="mo" id="MathJax-Span-227" style="font-family: MathJax_Main;">)</span></span><span style="display: inline-block; width: 0px; height: 2.265em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.354em; border-left: 0px solid; width: 0px; height: 1.361em;"></span></span></nobr></span>を求め、そのに最小値に向かって勾配をステップダウンすることです。勾配は損失関数を記号微分するか、<a href="http://torch.ch/" rel="nofollow" title="" class="ext-link">Torch</a>や<a href="https://www.tensorflow.org/" rel="nofollow" title="" class="ext-link">TensorFlow</a>と同様に<a href="https://ja.wikipedia.org/wiki/%E8%87%AA%E5%8B%95%E5%BE%AE%E5%88%86" rel="nofollow" title="" class="ext-link">自動微分</a>を使うことで計算できます。つまり、固定のステップサイズ<span class="MathJax" id="MathJax-Element-16-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-228" style="width: 0.836em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.658em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.551em 1000.6em 2.324em -999.997em); top: -2.14em; left: 0em;"><span class="mrow" id="MathJax-Span-229"><span class="mi" id="MathJax-Span-230" style="font-family: MathJax_Math-italic;">α</span></span><span style="display: inline-block; width: 0px; height: 2.146em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr></span>を使って、現在の点<span class="MathJax" id="MathJax-Element-17-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-231" style="width: 1.61em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.313em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1001.31em 2.503em -999.997em); top: -2.14em; left: 0em;"><span class="mrow" id="MathJax-Span-232"><span class="msubsup" id="MathJax-Span-233"><span style="display: inline-block; position: relative; width: 1.313em; height: 0px;"><span style="position: absolute; clip: rect(3.158em 1000.84em 4.17em -999.997em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-234" style="font-family: MathJax_Math-italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span><span style="position: absolute; top: -3.807em; left: 0.836em;"><span class="mi" id="MathJax-Span-235" style="font-size: 70.7%; font-family: MathJax_Math-italic;">n</span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.146em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.282em; border-left: 0px solid; width: 0px; height: 1.146em;"></span></span></nobr></span>を下記で更新するのです。</p><p>これによって勾配降下の経路を選択することになります。大まかにいえば、局所的最小値の1つに向かって坂を転がり落ちるボールのような感じです。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2017/02/numerical-optimization3-1024x865.png" alt="numerical-optimization3" width="770" height="650" class="alignnone size-large wp-image-9286"></p><p>この方法では学習係数の設定が問題となります。学習係数を低くしすぎると、なかなか解にたどり着かず、解に向かう小さなステップを何回も繰り返します。学習係数を高くしすぎると、収束することなく、最小値周辺を激しく変動します。さらに悪いことに、最適な学習係数は関数によって異なるため、これという適切な初期値がないのです。</p><p><a href="https://ja.wikipedia.org/wiki/%E7%9B%B4%E7%B7%9A%E6%8E%A2%E7%B4%A2" rel="nofollow" title="" class="ext-link">直線探索</a>を使うと、反復の度に学習係数を修正することができます。これは、最小値を通過しないよう損失を常に減らすと共に、小さなステップを繰り返しすぎないよう勾配を平坦化するためです。上図で直線探索を有効にすると、反復の度に余分なサンプル点が必要になるかもしれないという欠点はあるものの、反復回数が減少します。<br>
<em>(編注：上記機能については<a href="http://www.benfrederickson.com/numerical-optimization/" rel="nofollow" title="" class="ext-link">元記事</a>で動作をお試しください。)</em></p><p>直線探索を使う時でも、勾配降下法はRosenbrock関数のような関数を扱うにはやはり苦労します。問題点は、最適な進行方向が勾配に沿わない場合があるので、関数の曲率も考慮する必要があるということです。</p><p>共役勾配法では、より良い新たな探索方向を見つけるため、現在の勾配に前回の探索方向を含めて最小化を行い、関数の曲率を推定します。</p><p>Jonathan Shewchukは、「<a href="http://www.cs.cmu.edu/~./quake-papers/painless-conjugate-gradient.pdf" rel="nofollow" title="" class="ext-link">An Introduction to the Conjugate Gradient Method Without the Agonizing Pain</a>」（苦しまない共役勾配法入門）と題した素晴らしい論文を書き、共役勾配法の仕組みを詳細に解説しています。唯一問題なのは、この論文が本記事全体よりはるかに長いということで、42ページ目からやっと非線形共役勾配法の説明が始まっています（彼が学んだ際の”苦しさ”を思うとゾッとします）。</p><p>共役勾配法の背後にある理論は少し複雑ですが、数学的にはかなりシンプルです。初期探索方向<span class="math" id="MathJax-Span-377" style="width: 1.253em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.015em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1001.01em 2.562em -999.997em); top: -2.199em; left: 0em;"><span class="mrow" id="MathJax-Span-378"><span class="msubsup" id="MathJax-Span-379"><span style="display: inline-block; position: relative; width: 1.015em; height: 0px;"><span style="position: absolute; clip: rect(3.098em 1000.66em 4.17em -999.997em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-380" style="font-family: MathJax_Math-italic;">S<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.063em;"></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span><span style="position: absolute; top: -3.807em; left: 0.598em;"><span class="mn" id="MathJax-Span-381" style="font-size: 70.7%; font-family: MathJax_Main;">0</span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.205em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.282em; border-left: 0px solid; width: 0px; height: 1.218em;"></span></span>は勾配降下法の場合と同じです。それ以降の探索方向<span class="MathJax" id="MathJax-Element-28-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-382" style="width: 1.372em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.134em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1001.13em 2.562em -999.997em); top: -2.199em; left: 0em;"><span class="mrow" id="MathJax-Span-383"><span class="msubsup" id="MathJax-Span-384"><span style="display: inline-block; position: relative; width: 1.134em; height: 0px;"><span style="position: absolute; clip: rect(3.098em 1000.66em 4.17em -999.997em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-385" style="font-family: MathJax_Math-italic;">S<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.063em;"></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span><span style="position: absolute; top: -3.807em; left: 0.598em;"><span class="mi" id="MathJax-Span-386" style="font-size: 70.7%; font-family: MathJax_Math-italic;">n</span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.205em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.282em; border-left: 0px solid; width: 0px; height: 1.146em;"></span></span></nobr></span>は下記で計算します。</p><p>現在位置<span class="MathJax" id="MathJax-Element-31-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-450" style="width: 1.61em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.313em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1001.31em 2.503em -999.997em); top: -2.14em; left: 0em;"><span class="mrow" id="MathJax-Span-451"><span class="msubsup" id="MathJax-Span-452"><span style="display: inline-block; position: relative; width: 1.313em; height: 0px;"><span style="position: absolute; clip: rect(3.158em 1000.84em 4.17em -999.997em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-453" style="font-family: MathJax_Math-italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span><span style="position: absolute; top: -3.807em; left: 0.836em;"><span class="mi" id="MathJax-Span-454" style="font-size: 70.7%; font-family: MathJax_Math-italic;">n</span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.146em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.282em; border-left: 0px solid; width: 0px; height: 1.146em;"></span></span></nobr></span>は、この探索方向と、直線探索で計算されるステップサイズ<span class="MathJax" id="MathJax-Element-32-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-455" style="width: 0.836em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.658em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.551em 1000.6em 2.324em -999.997em); top: -2.14em; left: 0em;"><span class="mrow" id="MathJax-Span-456"><span class="mi" id="MathJax-Span-457" style="font-family: MathJax_Math-italic;">α</span></span><span style="display: inline-block; width: 0px; height: 2.146em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.068em; border-left: 0px solid; width: 0px; height: 0.718em;"></span></span></nobr></span>を使って更新されます。</p><p>共役勾配法の経路は下図で確認できます。実際に進んだ方向は赤色で、各反復での勾配は黄色の矢印で示されます。中には、使われている探索方向が勾配に対してほぼ90度の場合もあり、下記の関数では勾配降下法を使うと大きな問題があることが分かります。</p><p><img src="http://postd.cc/wp/wp-content/uploads/2017/02/numerical-optimization4-1024x746.png" alt="numerical-optimization4" width="770" height="561" class="alignnone size-large wp-image-9287"></p><p>ここまでの例で登場したのは1次元関数か2次元関数のみで、最適化対象としてはあまり面白くありません。また、実際のデータも使ってきませんでしたが、大抵の機械学習の問題では実データを扱うのが普通です。そこで最後の例として、こうしたアルゴリズムが<a href="http://www.benfrederickson.com/multidimensional-scaling/" rel="nofollow" title="" class="ext-link">多次元尺度構成法</a>の問題でどう動作するかを見ると面白そうです。</p><p>ここでの課題は、点間の距離行列を必要な距離に最も近い各点の座標に変換することです。それを実行する方法の1つは、以下のような関数を最小化することです。</p><p><span class="MathJax" id="MathJax-Element-42-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-640" style="width: 1.372em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.134em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1001.13em 2.503em -999.997em); top: -2.14em; left: 0em;"><span class="mrow" id="MathJax-Span-641"><span class="msubsup" id="MathJax-Span-642"><span style="display: inline-block; position: relative; width: 1.134em; height: 0px;"><span style="position: absolute; clip: rect(3.158em 1000.84em 4.17em -999.997em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-643" style="font-family: MathJax_Math-italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span><span style="position: absolute; top: -3.807em; left: 0.836em;"><span class="texatom" id="MathJax-Span-644"><span class="mrow" id="MathJax-Span-645"><span class="mi" id="MathJax-Span-646" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.146em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.282em; border-left: 0px solid; width: 0px; height: 1.146em;"></span></span></nobr></span>は最小化の対象とする各点の座標、<span class="MathJax" id="MathJax-Element-43-Frame" tabindex="0"><nobr><span class="math" id="MathJax-Span-647" style="width: 1.729em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.432em; height: 0px; font-size: 120%;"><span style="position: absolute; clip: rect(1.313em 1001.43em 2.622em -999.997em); top: -2.14em; left: 0em;"><span class="mrow" id="MathJax-Span-648"><span class="msubsup" id="MathJax-Span-649"><span style="display: inline-block; position: relative; width: 1.432em; height: 0px;"><span style="position: absolute; clip: rect(3.158em 1000.78em 4.17em -999.997em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-650" style="font-family: MathJax_Math-italic;">D</span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span><span style="position: absolute; top: -3.807em; left: 0.836em;"><span class="texatom" id="MathJax-Span-651"><span class="mrow" id="MathJax-Span-652"><span class="mi" id="MathJax-Span-653" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span class="mi" id="MathJax-Span-654" style="font-size: 70.7%; font-family: MathJax_Math-italic;">j</span></span></span><span style="display: inline-block; width: 0px; height: 3.991em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.146em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.425em; border-left: 0px solid; width: 0px; height: 1.289em;"></span></span></nobr></span>は各点間の望ましい距離です。</p><p>使用しているデータは北米の主要都市間の距離で、このデータを使って各都市のマップを作成することが目標です。20都市間の距離を渡すということは、40個のパラメータで最小化する関数が必要になるということです。<br>
<img src="http://postd.cc/wp/wp-content/uploads/2017/02/numerical-optimization5-1024x802.png" alt="numerical-optimization5" width="770" height="603" class="alignnone size-large wp-image-9288"></p><p>この可視化例は以下のことをかなり明確に示しています。</p><p>ここまで読み通した方は恐らく、本記事が言語を学ぶための誤った試みの一部で、いくつかのJavaScriptコードを使いこなすための言い訳に過ぎないことにお気付きでしょう。今回ご紹介したことは全て既知の情報で、その多くについては、この記事よりはるかにうまく説明している資料があります。</p><p>NocedalとWrightが執筆した<a href="https://www.amazon.ca/Numerical-Optimization-Jorge-Nocedal/dp/0387303030" rel="nofollow" title="" class="ext-link">数値最適化に関する優れた書籍</a>は、本記事の大部分で参考にしました。これは素晴らしい参考資料ですが、同書で扱われていないいくつかの手法をお伝えしておきたかったのです。</p><p>Sebastian Ruderの記事は、<a href="http://sebastianruder.com/optimizing-gradient-descent/" rel="nofollow" title="" class="ext-link">勾配降下法</a>（翻訳記事「<a href="http://postd.cc/optimizing-gradient-descent/">勾配降下法の最適化アルゴリズムを概観する</a>」）を見事に概観しています。特に、ディープニューラルネットワークの訓練で使われるような大規模でまばらなモデルで確率的勾配降下法を用いるケースについて、詳しく論じています。</p><p>導関数を使わない優れた最適化手法の1つにベイズ最適化があります。Eric Brochu、Mike Vlad Cora、Nando de Freitasは、<a href="http://haikufactory.com/files/bayopt.pdf" rel="nofollow" title="" class="ext-link">ベイズ最適化に関する素晴らしい概論</a>を執筆しました。ベイズ最適化の応用例として1つ興味深いのはハイパーパラメータの調整で、そのためにベイズ最適化をサービスとして提供している<a href="http://sigopt.com/" rel="nofollow" title="" class="ext-link">SigOpt</a>という企業さえ存在します。</p>
