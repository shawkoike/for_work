<p><a href="http://blog.bitovi.com/longevity-or-lack-thereof-in-javascript-frameworks/" rel="nofollow" title="" class="ext-link">Longevity (or Lack Thereof) in JavaScript Frameworks</a> （2015-08-11） by <a href="https://twitter.com/brianmoschel" rel="nofollow" title="" class="ext-link">Brian Moschel</a></p><p><small>(注記：9/13、いただいた翻訳フィードバックを元に記事を修正いたしました。)</small></p><p>半年ごとに”今一番ホットな”フレームワークが新たに登場しては、私たちは興奮に沸き返ります。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/07/react.jpg.001.jpg" alt=""><br>
誇大広告を信じてはいけません。</p><p><em>フレームワークの寿命</em>はプロジェクトの成功を左右するほど重要な要素です。フレームワークを選ぶ際、テクノロジにおける多くの意思決定者は納得のいく選択をするために、コミュニティの大きさ、人気、大企業によるサポートの有無などを基準にしています。しかし実際は、こうした要素によって寿命が決まるわけではありません。</p><p>最初は勢いがあったのに、徐々に弱まり、最終的には線香花火のごとく儚く消えてしまうようなフレームワークを選んでしまうと、書き直しに無駄な時間を費やしたり、チームの士気を下げたりする原因となります。本記事は、そうした残念な結果を回避するヒントをまとめたものです。</p><p>本記事では以下のことを示したいと思います：</p><p>コンテンツ</p><p>なぜフレームワークの寿命が重要なのかを説明する前に、なぜアプリケーションの寿命が重要なのかを先にお話しする必要があります。</p><p>SPA開発の際の典型的なライフサイクルに関しては、正確な調査があるわけではありませんが、これまでがどうだったかというところをソフトサイエンス的見地から得た私の見解を具体的な数字と共に挙げてみたいと思います。この推測は、Bitoviでの10年にわたる経験で得た知識に基づいています。</p><p>主張：</p><p>初期の頃は、「このプロジェクトは成功するか？」という壁が立ちはだかりますが、多くのアプリケーションは以下の期間ならば生き残れると言えます：</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-22-03.03.49.png" alt=""></p><p>私たちはテクノロジにおける意思決定者として、プロジェクトが難関を越えられると仮定して計画を立てていかなくてはなりません。</p><p><strong>私たちは1年ではなく、5年以上のタイムスケールで考える必要があるのです。</strong></p><p>プロジェクトの開始時は、希望に満ちた目を輝かせて、5年先までを見据えます。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-22-14.55.55.png" alt=""><br>
<em>注釈：<br>
縦軸：チームの作業速度<br>
横軸：プロジェクト開始からの経過年数<br>
左から：開始はここ/最終的に到達したいのはここ</em></p><p>最初にして最も重要な意思決定：どのテクノロジ・スタックを使用するか？</p><p>限られた時間の中でテクノロジに関する意思決定を行う場合、良いフレームワークと悪いフレームワークを見極められるかどうかが非常に重要なポイントになると言えます。プロジェクトが成功するか、失敗するかを決めてしまう可能性があるのです。</p><p>JavaScriptのフレームワークは数年先まで生き残れるのかと言うと、これまでの実績はひどいものです。生き残れないもの、つまり失敗に至るフレームワークは2つの種類のいずれかに該当する傾向があります。ここでは、それらを爆弾（すぐに爆発する）と線香花火（勢いが徐々になくなっていく）と呼ぶことにしましょう。</p><p>では、爆弾と線香花火について説明する前に、このコンテキストにおける寿命とは何かを定義しましょう。</p><p>寿命とは…</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/07/Screenshot-2015-07-08-04.18.461.png" alt="From the best scene in Team America."><br>
<em>『チーム★アメリカ ワールドポリス』の<a href="https://www.youtube.com/watch?v=8yaTCXcvTGY" rel="nofollow" title="" class="ext-link">ベストシーン</a>より引用。</em></p><p>JSフレームワークのコンテキストでは、寿命は以下を意味します：</p><p>爆弾とは、チームの作業速度を突然の失速へと導くフレームワークのことです。プロジェクトは完全に失敗するか、あるいは後方互換性のない新しいバージョンをリリースすることになるか、どちらかです。いずれにせよ、実用には書き直しを余儀なくされることでしょう。</p><p><a href="http://www.infoq.com/news/2014/10/angular-2-atscript" rel="nofollow" title="" class="ext-link">Angular 2.0</a>に賭けている方なら、私が言わんとすることがお分かりいただけることでしょう。<a href="http://www.infoworld.com/article/2874861/application-development/google-web-toolkit-major-upgrades-no-backward-compatibility.html" rel="nofollow" title="" class="ext-link">GWT</a>や、<a href="http://batmanjs.org/" rel="nofollow" title="" class="ext-link">batman.js</a>でもいいですよ。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-22-15.19.12.png" alt=""><br>
<em>注釈：<br>
縦軸：チームの作業速度<br>
横軸：プロジェクト開始からの経過年数<br>
左から：スタート時の学習曲線/プロジェクト失敗、あるいは後方互換性のないバージョンをリリース/書き直し/新しい学習曲線</em></p><p>線香花火ならば、プロジェクトの突然の失速までの期間がもっと長くなります。このようなフレームワークは、長い間よく分からない中途半端な状態で放置されることになります。コミットレベルやニュースでの表明が減少していくに伴い、じわじわと勢いを失っていきます。そして、このフレームワークはまだ使えるのかしらと悩んでいるユーザを置いてきぼりにするのです。かつてはSPAを構築するためのモダンなアプローチに見えていたフレームワークも、そのイノベーションはゆっくりと止まってしまうのです。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-22-15.19.37.png" alt=""><br>
<em>注釈：<br>
縦軸：チームの作業速度<br>
横軸：プロジェクト開始からの経過年数<br>
左から：スタート時の学習曲線/安定版、変更なし/待機中、なぜまだアップデートされないのか？/モダンなスタックと比べるとアプリが古くなった印象、チームの士気も低下/深刻に待機中、アップデートはどこへ？/ああもう、もっとモダンな新しいスタックを選ばなくては</em></p><p>最終的に、良いフレームワークに賭けることになれば、目先の間だけではなく構築したSPAのその先5年以上という長い間、恩恵を受けることができます。作業速度は継続的に上向き傾向となり、開発チームのみんなはハッピー、生産性も高まり、仕事は淡々と済ませていけばいいという状態が続きます。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-22-14.07.11.png" alt=""><br>
<em>注釈：<br>
縦軸：チームの作業速度<br>
横軸：プロジェクト開始からの経過年数<br>
左から：スタート時の学習曲線/新バージョンがアップグレード/新しいメジャーバージョンがリリース/マイナーバージョンの後の学習曲線、速度はツールとチームが良くなるに伴い上がり続ける</em></p><p>フレームワークの寿命に関する見解については、これまで述べてきたような事態が実際すぐにはっきりと表れるわけではありません。しかし、グラフの下の面積（値＝速度×時間）として値（つまり、成し遂げた仕事量）で考えてみましょう。1年目はほぼ変わらず、2年目も多少の違いが生じた程度なのに対し、5年目になるとかなり差が出てくるのが分かります。</p><p>なお、線香花火や爆弾を選択して初期にささやかな利点があったとしても（人気があってエキサイティングな新しいテクノロジというだけで、最初はチームの士気を高めてくれるでしょう）、そうしたものはすぐに廃れてしまいます。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-23-00.03.36.png" alt=""></p><p><strong>多くの時間とお金、それにデベロッパの士気を無駄にするはめになってしまうので、寿命が重要というわけです。</strong></p><p>SPA開発の歴史は短いですが、これらの失敗を避けるためのサインが出ている場合でさえ、爆弾や線香花火に賭けてしまうというパターンを度々見てきました。</p><p>寿命をはっきりと示すフレームワークを求める際、確かな指標になるものが1つだけあります。それは過去のパフォーマンスです。フレームワークのサインには、次のようなものがあります。</p><p><strong>良いサイン</strong></p><p><strong>悪いサイン</strong></p><p>これはJavaScriptフレームワークの寿命を独自に視覚化したものです。この図の中には、あなたが避けたいであろう多くのフレームワークの例（ここにないものも多くあります）が出ていますが、賢い賭けの区分に入るものはそれほど多くありません。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/07/Screenshot-2015-07-08-02.49.41.png" alt=""><br>
<em>注釈：<br>
縦軸：イノベーションの継続性<br>
横軸：リリースからの時間<br>
左上：新しい流行<br>
(AngularJSの次のバージョンには後方互換性がない)<br>
右上：賢い賭け<br>
(ExtJSは有料のみ)<br>
左下：ウィークエンドプロジェクト<br>
右上：停滞<br>
(GWTの次のバージョンには後方互換性がない)<br>
</em></p><p>フレームワークの選定は、いくつかの一般的な基準に基づきます。次の図は典型的な選定基準を表しています。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-23-00.57.47.png" alt=""></p><p>実際のところ、非常に短期間においては、この中のどれもがそれほど重要ではありません。私たちは5年以上のタイムスケールで考えていることを思い出してください。</p><p>これらの選定基準の大部分はまやかしで、フレームワークの寿命を探るという真の目的から選定する者の意識をそらします。作り上げられた神話を一掃してみましょう。</p><p>オープンソースのプロジェクトの特徴は、驚くほどコピーが簡単なことです。</p><p>Reactの仮想DOMはすばらしいアイデアでした。とても優秀なので、CanJSにこのアイデアが導入され、<a href="https://github.com/canjs/can-vdom" rel="nofollow" title="" class="ext-link">仮想DOM</a>と<a href="https://github.com/canjs/can-ssr" rel="nofollow" title="" class="ext-link">サーバサイドレンダリング</a>が追加されました。</p><p>フレームワークがイノベーションを続ける限り、フレームワーク間で機能が等価になるタイムラグは比較的短い期間になります。</p><p>継続するイノベーションは現行の機能セットよりも重要です。</p><p>オープンソースのプロジェクトのコミュニティは気まぐれなことで有名で、新しく話題になるフレームワークにすぐに飛びつきます。ここ数年JavaScriptのコミュニティは、BackboneからAngularへ、そしてReactへと、すぐさま群がりました。</p><p>人気のテクノロジを選ぶことは、名声をつかんだからといってMiley Cyrusと結婚するようなものです。あなたは3年後、自分の決断を後悔することになるでしょう。</p><p>熱心なコアチーム（たとえ小さくても）は、継続的な改良は神話よりも重要であることを証明してきました。</p><p>大企業に維持されることはテクノロジ選択において大きなアドバンテージになると、多くの人が言うのを聞きました。これは根拠のない話です。</p><p>大企業にサポートされれば、フレームワークがお払い箱にならないというわけではありません。信頼されている大企業が、多くのデベロッパたちがかなりの時間を費やしたプラットフォームを駄目にしてしまうという明確な例がたくさんあります。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/07/Screenshot-2015-07-08-04.00.10.png" alt=""></p><p>大企業は、多くの競争目標を掲げています。企業独自のテクノロジのプラットフォームでの儲けがないので、プロジェクトが彼らの目的と連携しないと分かると、すぐにプラットフォームは用済みになってしまいます。</p><p>その良い例がGoogleです。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/07/Screenshot-2015-07-08-03.48.44.png" alt=""></p><p>「Googleの優先事項が変更されて、あるプロジェクトがもはや優先されなくなる」と知りつつも、テクノロジ・マネージャとしてこれらのプラットフォームの1つに賭けるという厳しいこともありました。</p><p>マネージャの多くは、個人が選んだフレームワークをリストにした履歴書を持参したデベロッパを雇うべきだという間違った思い込みをしています。そうでなければ、会社に効果的に貢献してくれる人材ではないというのです。</p><p>これはまったく根拠のない話で、フロントエンドのスキルがどのように求められているかが誤解されていることを示しています。コンピュータサイエンスがアイスのコーンの部分で、JavaScriptがひとすくいのアイスクリームだとしたら、フレームワークの知識はトッピングです。</p><p>APIは週末に学べます。モダンなフレームワークでのアプリケーションの作成方法を知れば、デベロッパは別のモダンなフレームワークへの切り替えが簡単にできるようになり、すぐにハイレベルな貢献が可能になります。</p><p>デベロッパの履歴書には、その時に流行しているフレームワークが書かれているものですが、それにはあまり意味がありません。</p><p>2007年に<a href="http://www.javascriptmvc.com/" rel="nofollow" title="" class="ext-link">JavaScriptMVC</a>はリリースされました。</p><p>2012年に、5つのサブプロジェクトに分割されました。その1つが<a href="http://canjs.com/" rel="nofollow" title="" class="ext-link">CanJs</a>です。</p><p>2015年7月には、新しい<a href="http://donejs.com/" rel="nofollow" title="" class="ext-link">DoneJS</a>がリリースされました。次世代のJavaScriptMVCです（もうこの名称は適切ではありませんね）。これはCanJSとStealJS、それといくつかの他のテクノロジの組み合わせで、複雑なJavaScriptアプリケーションを作成するための包括的なフレームワークの構築と結び付きます。</p><p>そう、私たちは新たな名前を付け直すエキスパートなのです。</p><p>名称は変更されてきましたが、DoneJS、CanJSなどは全てJavaScriptフレームワークの1本の線でつながっており、同じコードベースから出来ています。これらは最近主流のSPAフレームワークの中でも最大の寿命を誇ります。人気コンテストでは決して優勝できませんが、2007年以来、一貫性のある安定した改良で、毎年その寿命の長さを証明しています。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/06/Timeline-Frameworks-v1.png" alt=""></p><p>これはハイライトの一部です。</p><p><iframe src="https://cdn.knightlab.com/libs/timeline/latest/embed/index.html?source=1lBdurIQbbJkTZ8_kCQaXZtFaD06ulMFAlkqyEmXH4k0&amp;font=Bevan-PotanoSans&amp;maptype=toner&amp;lang=en&amp;start_at_slide=3&amp;height=650&amp;start_zoom_adjust=-2" width="100%" height="650" frameborder="0"></iframe></p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-23-00.39.03-1200x677.png" alt=""></p><p><em>訳注：<span id="show_TL"><a>クリックして表示</a></span></em></p><p><script>
jQuery("#show_TL").on("click",function(){jQuery("#TL_translation").toggle();})
</script></p><p>2007年に、あなたが携わるプロジェクトがJavaScriptMVCを選んでいたとしたら、それは賢い選択だったと言えます。過去8年半の間、あなたのチームはモダンなアプリケーションのアップグレード・パスを手に入れてきたでしょう。</p><p>なぜBitoviのスタックがこのように長い寿命を手に入れたのか、疑問に思うかもしれません。これは今後の記事のトピックなのですが、主な理由は以下のとおりです。</p><p>2015年にテクノロジを選択するなら、DoneJS、CanJSを選ぶのが賢いでしょう。Webの様相はこの8年半で変化したので、一貫性があって安定した改良を期待し続けることができます。</p><p>レースに勝つのは、ゆっくりとした堅実さです。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-07-22-15.16.28.png" alt=""></p><p>ソフトウェアのプロジェクトは数年存続するということを忘れないでください。数カ月ではありません。長続きするテクノロジを選んでください。</p><p>2015年にプロジェクトのためのテクノロジを選ぶなら、<strong>寿命を一番重要な要素として考慮すること</strong>をお勧めします。</p><p><img src="http://blog.bitovi.com/wp-content/uploads/2015/10/Screenshot-2015-08-11-00.22.35.png" alt=""></p>
