<p><a href="https://codewords.hackerschool.com/issues/one/an-introduction-to-functional-programming" rel="nofollow" title="" class="ext-link">An introduction to functional programming</a> （2014-12） by <a href="https://codewords.hackerschool.com/about#Mary+Rose+Cook" rel="nofollow" title="" class="ext-link">Mary Rose Cook</a></p><p>多くの関数型プログラミングに関する記事が教えてくれるのは、抽象的な関数型のテクニックです。つまり関数合成やパイプライン、高階関数などです。この記事では違います。ここでは、プログラマが毎日書く、命令型で非関数型のコードの例を示し、それを関数型の形式へ書き換えます。</p><p>最初のセクションでは、短いデータ変換のループを取り上げ、map関数やreduce関数に書き換えていきます。2つ目のセクションではより長いループを取り上げ、ユニットに分解し、それぞれのユニットを関数型に書き換えます。3つ目のセクションでは、連続した長いデータ変換のループを関数型のパイプラインに分解します。</p><p>ここではPythonでの例を取り扱います。というのも多くのプログラマはPythonを読むのは簡単だと思っているからです。多くの例では、mapやreduce、パイプラインなどの多くの言語に共通する機能を例示するため、Python的なものは避けます。</p><p>プログラマが関数型プログラミングについて語るとき、めまいを起こしそうな数の“関数型”的な特徴について言及します。彼らは変更不能なデータ<sup id="fnref:1"><a href="#fn:1" class="footnote-ref">1</a></sup>や第一級関数<sup id="fnref:2"><a href="#fn:2" class="footnote-ref">2</a></sup>や末尾呼び出し最適化<sup id="fnref:3"><a href="#fn:3" class="footnote-ref">3</a></sup>について述べます。これらは関数型プログラミングを助ける言語の特徴です。そして彼らはマッピング、リデューシング、パイプライン化、再帰法、カリー化<sup id="fnref:4"><a href="#fn:4" class="footnote-ref">4</a></sup>、そして高階関数の使用法についての話に移ります。これらは関数型のコードを書くのに使われるプログラミングテクニックです。それからさらに並列化<sup id="fnref:5"><a href="#fn:5" class="footnote-ref">5</a></sup>や遅延評価<sup id="fnref:6"><a href="#fn:6" class="footnote-ref">6</a></sup>、決定性<sup id="fnref:7"><a href="#fn:7" class="footnote-ref">7</a></sup>について言及するでしょう。これらは、関数型プログラムの長所です。</p><p>これらを全て忘れてください。関数型コードを特徴づけるのは、「副作用がない」という1点です。関数型のコードは現在の関数の外部に存在するデータに頼りません。そして現在の関数の外部に存在するデータを変更しません。<br>
その他の“関数型”なものは、全てこの特性から派生しています。このことを学習の手がかりにしてください。</p><p>これは非関数型の関数です。</p><p>これは関数型の関数です。</p><p>Mapは、関数とアイテムのコレクションを引数にとります。mapは新しい空のコレクションを生成し、オリジナルのコレクションの各アイテムに関数を実行します。<br>
そして各々の戻り値を新しいコレクションに挿入し、新しいコレクションを返します。</p><p>これは、名前のリストを受け取り、それらの名前の長さのリストを返すシンプルなmapです。</p><p>これは、渡されたコレクションの中での全ての数を二乗するmapです。</p><p>このmapは、名前付き関数を引数にとりません。その代わり、ラムダで定義される無名のインライン関数をとります。ラムダのパラメータは、コロンの左に定義されます。関数の本体は、コロンの右に定義されます。関数の本体を実行させた結果は（暗黙的に）返されます。</p><p>下記の非関数型のコードは、本名のリストを受け取って、ランダムに割り当てられたコードネームと入れ替えます。</p><p>（見てわかるとおり、このアルゴリズムは同じ秘密のコードネームを複数の諜報員に割り当てる可能性があります。秘密の任務に混乱をもたらさなければよいのですが）。</p><p>これはmapとして書き換えることができます。</p><p><strong>演習1.</strong> 以下のコードをmapとして書き換えてみましょう。このコードは本当の名前のリストを受け取り、より強力な戦略を用いて生み出されるコードネームと入れ替えます。</p><p>（諜報員達が抜群の記憶力で、任務中にお互いのコードネームを忘れずにいられることを祈ります）。</p><p>私の答え：</p><p>Reduceは関数とアイテムのコレクションを引数にとります。そしてアイテム同士を組み合わせて生成される戻り値を返します。</p><p>これはシンプルなreduceです。コレクションの全てのアイテムの合計を返します。</p><p><code>x</code>は、イテレートされていく現在のアイテムです。<code>a</code>は累計値です。前のアイテムに対するラムダの処理の戻り値です。<code>reduce()</code>はアイテムを渡り歩きます。それぞれのアイテムについて、現在の<code>a</code>と<code>x</code>にラムダを実行し、結果を次の<code>a</code>として返します。<br>
それでは最初の値としての<code>a</code>は、なんなのでしょうか？　前の繰り返しの結果がありません。<code>reduce()</code>は1回目の繰り返しではコレクションの最初のアイテムを<code>a</code>として使い、2番目のアイテムから繰り返しを開始します。つまり最初の<code>x</code>は2つ目のアイテムなのです。<br>
このコードは‘Sam’という単語が文字列のリストで何度現れるかカウントします。</p><p>同じコードをreduceを使って書くとこうなります。</p><p>このコードでは最初の<code>a</code>はどのように判断するのでしょう？　‘Sam’の出現回数の初期値が、‘Maryは、SamとIslaに物語を読んで聞かせました’という文であるはずはありません。最初の累積値は<code>reduce()</code>の3番目の引数で指定されます。ここでは、コレクションのアイテムと異なる型の値を使用することが可能です。</p><p>1つは、どちらも1行で完結することが多いからです。</p><p>2つ目は繰り返しの重要な部分であるコレクション、操作、そして戻り値が、同じ場所にあるからです。</p><p>3つ目に、ループのコードは、それ以前に定められる変数または実行後のコードに影響を及ぼすことがあるからです。習慣的に、mapとreduceは関数型です。</p><p>4つ目にmapとreduceは基礎的な操作だからです。どのプログラマもループを読むときには、1行1行ロジックを辿っていかなければなりません。彼らがコードを理解するための足がかりにできるような構造的な規則性は、ほぼありません。対照的にmapとreduceは、複雑なアルゴリズムを組み上げるための建築用ブロックとして使用することができ、コードの読み手がすぐに理解し、要約することができる要素となります。「なるほど、このコードは、このコレクションの各々のアイテムを変換していて、そのうちいくつかは削除している。そして残りを結合して1つの出力にしているのだな」。</p><p>5つ目に、mapとreduceは彼らの基本的なふるまいをより便利に、精細にしたバージョンを提供する多くの仲間を持っていることです。例えばfilterやall、any、findなどです。</p><p>演習2. 以下のコードをmap、reduce、filterを用いて書き直してみてください。filterは関数とコレクションを引数にとり、関数が<code>True</code>を返した全てのアイテムのコレクションを返します。</p><p>複雑に見えるようであるならば、データに対する操作については考えないでください。人のディクショナリから平均身長までのデータの移り変わりについて考えてみてください。複数の変換をまとめて考えないようにしてください。各々を別個に考えて、結果を名前通りの変数に割り当ててください。コードが機能したら、それを短縮してください。<br>
私の答え：</p><p>下記のプログラムでは、3台の車のレースを行います。各々の時間ステップで、各々の車は前に動くか停止します。各々の時間ステップで、プログラムはここまでの車の進路を表示します。5回のステップの後、レースは終わります。<br>
これは出力の例です。</p><p>これがプログラムです。</p><p>このコードは命令型で書かれています。関数型バージョンは宣言的でなければなりません。どうやってやるかよりもなにをすべきかを書きましょう。</p><p>プログラムはコードを関数で束ねることによって、より宣言的になります。</p><p>このプログラムを理解するには、メインのループを読めば事足ります。“残り時間があるならば、レースのステップを実行して、結果を描け。絵を描いてください。そしてもう一度時間をチェックしろ” もし読み手が「レースを1ステップ進める」とか、「描画する」というのがどういうことなのか詳しく知りたければ、それぞれの関数のコードを読めばよいのです。</p><p>もうコメントは必要ありません。コード自身が語ってくれます。</p><p>コードを関数で分割するのは素晴らしいことです。コードの可読性を上げるために頭を悩ませる必要もありません。しかしこのテクニックでは関数を使用していますが、あたかもそれらをサブルーチンのようにして使っています。関数群によってコードが切り分けられていますが、このコードは、ガイドロープで書いたような意味での関数型のものではありません。このコードの関数では、引数として渡された以外の状態を使用しているからです。関数は値を返すのではなく、外部の変数を書き換えて、周辺のコードに影響を与えてしまっています。関数が実際に何をしているのかを確認するためには、読み手は各行を慎重に読まなければなりません。そこでもし外部の変数を見つけたら、その変数の出所を探す必要があります。他の関数がその変数を書き換えているのを発見するに違いありません。</p><p>こちらは関数型バージョンの車レースのコードです。</p><p>コードはやはり関数で分割されていますが、使われている関数は関数型になっています。その証拠が3つあります。1つは、共有されている変数がないということです。 <code>time</code> や <code>car_position</code> は順番に渡されていき、 <code>race()</code> で使用されます。次に、関数が引数を持っていることです。そして3つ目は、関数の内部で生成される変数がないということです。全てのデータの書き換えはreturn文で済んでいます。 <code>race()</code> は <code>run_step_of_race()</code> の結果を使って再帰的に呼び出されます。各ステップの結果は即座に次のステップへと渡されます。<br>
さて、ここに2つの関数 <code>zero()</code> と <code>one()</code> があります。</p><p><code>zero()</code>は文字列 <code>s</code> を受け取り、最初の文字が <code>'0'</code> だった場合に、残りの文字列を返します。そうでない場合はPythonの関数のデフォルトの戻り値である <code>None</code>を返します。 <code>one()</code> も、最初の文字が <code>'1'</code> かどうかをみて、同様の動作をします。</p><p><code>rule_sequence()</code>という関数を想像してみてください。これは文字列と <code>zero()</code> あるいは <code>one()</code> の形をしたルール関数のリストを受け取ります。それから最初のルールを文字列に対して実行します。 <code>None</code> が返らなければ、戻り値を受け取ってそれに2番目のルールを適用し、 <code>None</code> が返らなければ、戻り値を受け取って3番目のルールを適用し、というように続けていきます。もしいずれかのルールが <code>None</code> を返した場合には、 <code>rule_sequence()</code> は停止して <code>None</code> を返します。そうでなければ、最後のルールの戻り値を返します。<br>
これはインプットとアウトプットの例です。</p><p>これは <code>rule_sequence()</code> の命令型バージョンです。</p><p><strong>演習3.</strong> 上記のコードではループが使われています。これを再帰呼び出しに変えて、宣言型のコードに書き換えてください。</p><p>私の答え:</p><p>前のセクションでは命令型のループを、補助関数を呼び出す再帰処理に書き換えました。このセクションでは、異なったタイプの命令型のループを、パイプラインと呼ばれるテクニックを使って書き換えていきます。<br>
以下のループはいくつかのバンドの名前と誤った出身地と活動状況を持つディクショナリを変換します。</p><p>関数の名前を見ると心配になります。“format”というのがとても曖昧だからです。コードをよく見ると、この心配が現実のものとなります。1つのループの中で3つのことが行われています。 <code>'country</code>‘ キーの値に <code>'Canada</code>‘ がセットされ、バンド名からピリオドが取り除かれ、バンド名が大文字に変換されています。このコードの意図は理解し難く、見た通りのことをしているのかも分かりません。再利用は難しいですし、テストするのも並列化するのも困難です。</p><p>こちらのコードと比較してみてください。</p><p>このコードは簡単に理解できます。補助関数が一連の処理になっていて、関数型なのだろうという印象を与えます。前の関数からの出力が次の関数の入力になっています。<br>
これらの補助関数が関数型ならば、簡単に理解することができます。再利用やテスト、並列化も簡単です。<br>
<code>pipeline_each()</code> の働きは、バンドを1つずつ <code>set_canada_as_counrty()</code>のような変換関数にかけていくことです。全てのバンドに関数が適用されたら、<code>pipeline_each()</code>は変換済みのバンドをひとまとめにし、次の関数に渡します。<br>
変換関数を見てみましょう。</p><p>それぞれの関数は、バンドのあるキーの値を新しい値と関連付けています。元のバンドのディクショナリを変更することなくこれを行うのは簡単ではありません。この問題は、 <code>assoc()</code> が <code>deepcopy()</code> を使い、渡されたディクショナリのコピーを生成することで解決しています。それぞれの変換関数は変換をコピーに対して実行し、コピーを戻り値として返します。<br>
何も問題はなさそうです。元のバンドのディクショナリは、あるキーの値に新しい値が関連付けられた時も、変更から守られています。しかしこのコードには実は、他に2つの潜在的な変更が潜んでいるのです。<br>
<code>strip_punctuation_from_name()</code> において、ピリオドをはずされた名前は<code>replace()</code>を元の名前に対して呼び出すことで生成されています。<br>
<code>capitalize_names()</code> では、元の名前に <code>title()</code>を適用することで大文字の名前が生成されています。 <code>replace()</code>や <code>title()</code>は関数型ではありません。従って、 <code>strip_punctuation_from_name()</code>も<code>capitalize_names()</code>も関数型とは言えないのです。<br>
運の良いことに、 <code>replace()</code> も <code>title()</code> も取り扱う文字列を変更しません。これはPythonでは文字列が変更不能だからです。例えば <code>replace()</code> がバンド名を操作するとき、元のバンド名がコピーされ、 <code>replace()</code> はコピーに対して実行されます。良かったですね。</p><p>Pythonにおける文字列とディクショナリとの変更に関する差異は、Clojureのような言語の魅力を実現したものです。プログラマはデータを変更してしまうかどうか考える必要は全くありません。データは変更されないからです。</p><p><strong>演習4:</strong> <code>pipeline_each</code> 関数を書いてみましょう。操作の順序を考えてください。順番に並んだバンドが1つずつ、最初の変換関数に渡されます。変換が終わったバンドは1つずつ次の変換関数へ渡されます。これを繰り返します。</p><p>私の答え:</p><p>これら3つの変換関数は渡されたバンドの特定のフィールドを変更するために必須なものです。<code>call()</code> を使うことでこのことを抽象化することができます。<code>call()</code> は適用する関数と、キー値を受け取ります。</p><p>あるいは可読性を犠牲にして簡略化するなら、単に次のようにすることもできます。</p><p>　<code>call()</code> のコードは以下のようになります。</p><p>まず1つ、 <code>call()</code> は高階関数です。高階関数は関数を引数にとったり、関数を返したりします。あるいは <code>call()</code> のように両方行うこともあります。<br>
そして2つ目に、 <code>apply_fn()</code> は3つの変換関数にとてもよく似ています。レコード(ここではバンド)を受け取り、 <code>record[key]</code> で値を参照します。そして <code>fn</code>をその値に対して呼び出します。結果はレコードのコピーに対して反映し、コピーを返します。<br>
3つ目、 <code>call()</code> は実際には何の働きもしません。 <code>apply_fn()</code> が呼び出されて実際の処理を行います。上で示した <code>pipeline_each()</code> の使用例では、 <code>apply_fn()</code> のインスタンスが渡されたバンドの <code>'country</code>‘ に <code>'Canada</code>‘ をセットしています。他のインスタンスは渡されたバンドの名前を大文字に変換します。<br>
4つ目です。 <code>apply_fn()</code> のインスタンスが動作する時、 <code>fn</code> と <code>key</code> はスコープ内にありません。これらはどちらも <code>apply_fn()</code> の引数でも、ローカル変数でもありません。<br>
しかしそれでもこれらにアクセスすることができます。関数が定義される時に、関数は使用する変数への参照を保持します。つまり関数のスコープの外側で定義され、関数の内側で使用されるような変数への参照を記憶するのです。関数が動作し、変数を参照する時には、Pythonはローカル変数と引数を参照しようとします。そしてもし変数が見つからなければ、保存された参照を見にいきます。こうして<code>fn</code> と <code>key</code> が見つかるのです。<br>
次に5つ目、 <code>call()</code> のコードの中では、バンドについての記述がありません。なぜなら <code>call()</code> は、トピックに関わらず、あらゆるプログラムのパイプライン関数の生成に使用されるからです。関数型プログラミングは、一般的で、再利用可能な、コンポーザブルな関数によって構築するものだと言うこともできます。<br>
お疲れ様です。クロージャ、高階関数、そして変数のスコープについて数パラグラフで学びました。美味しいレモネードでも飲んでください。</p><p>バンドの変換プロセスであと1つやることがあります。名前と国名を除く全てを取り除くことです。 <code>extract_name_and_country()</code> によってこの情報を引き出すことができます。</p><p>　<code>extract_name_and_country()</code> は <code>pluck()</code> と呼ばれる一般的な関数で書くことができます。<br>
　<code>pluck()</code> は以下のようになります。</p><p><strong>演習5.</strong> <code>pluck()</code> は各レコードから抽出するキーのリストを受け取ります。書いてみてください。これは高階関数である必要があるでしょう。</p><p>私の答え:</p><p>関数型のコードは他の形式で書かれたコードと非常にうまく共存することができます。この記事で扱った変換のプロセスは、あらゆる言語のあらゆるコードベースに適用することができます。あなた自身のコードに当てはめてみてください。<br>
MaryとIslaとSamを思い出してください。リストの繰り返し処理を、mapとreduceで置き換えました。<br>
レースはどうでしたか。コードを関数で分割しました。そしてそれらの関数を関数型にしました。繰り返しは再帰呼び出しに書き換えました。<br>
そしてバンドです。連続した操作をパイプラインで置き換えましたね。</p>
