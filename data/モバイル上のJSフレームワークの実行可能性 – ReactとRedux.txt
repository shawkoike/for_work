<p><a href="https://joreteg.com/blog/viability-of-js-frameworks-on-mobile" rel="nofollow" title="" class="ext-link">The viability of JS frameworks on mobile</a> （2015-10-12） by <a href="henrik@joreteg.com">Henrik Joreteg</a></p><p>私が好むと好まざるとに関わらず、誰もが私のWebアプリをiOS9の搭載されたiPhone 6SやNexus 6Pで、超高速Wifiに接続して使っているわけではありません。</p><p>現実は甘くありません。3Gでの接続や、古いハードウェアも珍しくありません。Googleのレポートによれば、<a href="http://www.wsj.com/articles/google-says-android-has-1-4-billion-active-users-1443546856" rel="nofollow" title="" class="ext-link">Androidのアクティブユーザは14億人</a>だそうです。彼らの多くは間違いなく、最先端ではないハードウェアを使っていることでしょう。</p><p>Androidのパフォーマンスについての<a href="https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889" rel="nofollow" title="" class="ext-link">Jeff Atwood氏の最近の記事</a>などを読んだことがあるなら、モバイルWebには希望がないように感じるかもしれませんね。</p><p>その記事からいくつか注目すべき文を引用します。</p><p>“重くて複雑”というところが問題なのでしょうか？</p><p>まだ続きます。</p><p>Atwood氏のモバイルWebエコシステムについての意見がありましたね。</p><p>彼はこう締めくくっています。</p><p>がっかりですよね。もうこの話はやめましょうか。少なくともReact Nativeがあるので、実際にはネイティブアプリを開発しながらWebアプリをビルドしているフリをすればいいですよね。</p><p>アプリにとってモバイルWebはもう将来性がないのでしょうか？</p><p>気づかなかったかもしれませんが、”Discourse”アプリとAtwood氏が言っていたのは、彼がDiscourseに<em>ついて</em>の記事を投稿するのに使ったアプリのことです。これはフォーラムアプリのようなものですが、メタな話ですね。</p><p>とにかく、これに気づいた時、dev toolsのネットワークパネルを開いてDiscourseのページを見てみました。そこにあったのは659KB（gzipされたサイズです）の、有線接続で送信されたJSでした。</p><p>私に言わせれば、最初からモバイル上で使うのを放棄しているのと同じことです。</p><p>モバイル上で実行可能にするためにはもっといい方法が<em>ある</em>はずです。</p><p>Atwood氏やDiscourseを責めたり、批判したりしているわけではありません。非常に多くのモバイルWebアプリが同じようにビルドされているので、このような問題はあらゆるサイトで起こり得ることなのです。</p><p>私の疑問は単純です。こういった重いツールやフレームワークは、モバイルデバイス上で実行可能なのでしょうか。</p><p>すべてが実行可能だとは思いませんが。</p><p>Filament Groupのステキな皆さんが<a href="https://www.filamentgroup.com/lab/mv-initial-load-times.html" rel="nofollow" title="" class="ext-link">昨年の12月に研究結果を発表しました</a>。5種類の広く普及しているWebフレームワーク上で、TodoMVCアプリの起動時間のパフォーマンスを調べたものです。明らかに、TodoMVCはやや人為的な例で、現実のアプリとは違うかもしれませんが、この手のリサーチにはうってつけです。一定のフレームワークについて、すべてのベースとなるアセットを備えており、少なくとも希望的にはベストプラクティスであるはずだからです。</p><p>あなたはこう思うかもしれません。<em>「これは起動時間のパフォーマンスだろう？　Atwood氏が言っていたのはランタイムのパフォーマンスのことじゃないか」</em>と。</p><p>そうですね。Atwood氏はランタイムのパフォーマンスについて書いていました。これはまた後で触れますが、<em>ともかく、ユーザにとっては何を待っていようが問題ではなく、</em>起動時間も明らかにパフォーマンスの重要なパートなのです。</p><p>投稿全体も読む価値がありますが、このリサーチ結果のサマリーをグラフにまとめたものがあります。</p><p><img src="https://cldup.com/jjiqPZLLEK-2000x2000.png" alt="load time screenshots"><br>
私の意見では、AngularとEmber（Atwood氏が言及した2つのオプション）のデータはモバイルの使用には完全に不適格です。</p><p>私がAmbersandの開発者の1人だと知っている人は、私が他のフレームワークを批判してAmbersandを売りつけようとしていると考えるかもしれません。</p><p>それは違います。</p><p>私がビルドした最新の2つのアプリには、Ampersandのコードはまったく入っていませんでした。私の<a href="https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux" rel="nofollow" title="" class="ext-link">Reduxに夢中になっている旨の記事</a>を読んでいたら驚かないと思いますが。</p><p><strong>あなたが何を使おうと、私がユーザとしてそのアプリを使う時に受ける影響以外については、まったく気にしません。</strong></p><p>ツールとは目的のための手段でしかないのです。</p><p>いえ、それはウソでした。もちろんあなたが何を選ぶか<em>ちょっと</em>気にはなります。でもそれは例えばあなたが開発リーダーだとして、メガバイト単位のJSを送信するとアプリが遅くなるからという理由だけで、モバイルWebは実行可能ではないと結論づけてほしくはないからです。</p><p>モバイルWebはもしかしたら十分高速なのかもしれません。デスクトップ機では感じない非効率性から、逃れられるフリをするのをやめるべきなのかもしれません。</p><p>もっと最初からミニマリストになるべきなのです。</p><p>才気あふれるDominic Tarr氏が以前こう言いました。</p><p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p><p><em>訳</em></p><p>アプリを開発する時、ローカルで携帯電話でテストしないWeb開発者が今日に至るまで、どのくらいいるでしょうか？　ただ画面が小さいだけでなく、性能が低く遅いコンピュータ向けに開発しているのだと想定する必要があります。最終段階のリリース前チェックだけではなく、開発のワークフローの過程でモバイルを考慮に入れる必要があります。参考までに、私は開発の時に<a href="https://github.com/henrikjoreteg/hjs-webpack#developing-on-multiple-devices-at-once" rel="nofollow" title="" class="ext-link">このような手順で行っています</a>。</p><p>携帯電話の通信速度はどんどん速くなっていくかもしれません。でも高速なハードウェアによってこれらの問題が解決されると希望を持ち、現在のスピード問題を無視できると考えるのは近視眼的だと思います。もちろん、携帯電話の性能は向上するでしょうが、携帯電話だけがランタイムの目標ではありません。</p><p>モノのインターネット(Internet of Things)が…モノになってくると（おっと、この文は詩的にはイマイチですね #leavingitanyway）もっと他の携帯電話<em>以外の</em>プラットフォームで開発するニーズが出てくるでしょう。例えば腕時計、テレビ、VR、そして大画面ディスプレイに接続された小さなコンピュータなど。</p><p>まず、<a href="https://blog.andyet.com/2015/05/18/lazymorphic-apps-bringing-back-static-web" rel="nofollow" title="" class="ext-link">以前もこんな記事を書きましたが</a>、URLだけから推測できるHTMLはすべてビルド時に静的なHTMLファイルにレンダリングされるべきです。ブラウザは、たとえ”遅い”モバイルのものでも、サーバから送信されたHTMLをレンダリングするのはかなり高速だということが分かったからです。</p><p>次に、私はもっと少ないもので多くのことをするべきだと思います。説明しますね。</p><p>Backbone、Ampersand、EmberそしてAngularにおける困難なことの大部分は、UIへ状態を適切にバインドしているかどうかに関係しています。もちろんそれ以上のことはしていますが、よく見てみれば、データの機能の多くでさえバインディングの機能をサポートすることに関連があるのです。結果として、それらは何らかのイベントシステムとともにリリースされ、ほとんどは監視可能な派生した／計算されたプロパティを作成する方法を備えています。</p><p>もちろんReactをこれらのビューレイヤとして使ってもいいのですが、Reactの大きな長所は、コストの安い再レンダリングをする際に、システムを複雑にする多くの機能の必要性を排除してくれることなのです。</p><p>シンプルな例を挙げます。モデルつきの<code>Backbone.Collection</code>で、Backboneのパラダイムを使ってどのようにコレクション長をUIにレンダリングしますか？　まずテンプレートの値を取得するのが確かに簡単な方法です。ただし、いつ最初にレンダリングされたかというポイントを知ってさえいればですが。どうやって値をバインドすれば、コレクションを変更した時、あなたがDOMにレンダリングした長さもアップデートしてくれるのでしょうか？</p><p>追加/削除/変更のイベントの全てで再レンダリングするようにセットアップすることができます。また、同じ動作をして、他のプロパティの動作も一緒に追跡する、監視可能なプロパティを作成することもできます。こうして、どんな変更があっても全て更新し、ビューにバインドすることができます。</p><p>ただしこれは全て、少しバカげた感じがします。<code>Backbone.Collection</code> のインスタンスを調べたことがあれば、 <code>collection.models</code> コレクションは単純に<code>Backbone.Model</code>の配列であることはご存じでしょう。 <em>初めから</em>データ長の値を含む配列、その名も<code>.length</code>が含まれています（ため息）。</p><p>これをReactなど、CPUにあまり負荷をかけずに、アプリ全体を好きな時に再レンダリングできるものと比べてみましょう（低負荷はReactの原則です）。そういうものが仮にあれば、レンダリングを担当する個々のコンポーネント内の<code>render</code>メソッドで直接、そういう<code>length</code>プロパティを使えばいい、ということになります。これで、アプリ内の任意のステートに変更が加わり次第、再レンダリングする処理が実現できます。</p><p>コードもこんなに単純な形になります。</p><p>あるいは、React 0.14の<a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components" rel="nofollow" title="" class="ext-link">新しいステートレス関数コンポーネント</a>を使い、ES6の分割代入を利用し、<code>species</code>として上記に示したオブジェクトの配列を使うと仮定すると、脚光を浴びる結果が得られるでしょう。コンポーネント全体のコードは、以下のようになります。</p><p>ここで美的な観点は脇に置いて、どれだけのものを減らさなければならないかを考えてみましょう。</p><p><strong>従来の重いフレームワークに備わっていた機能の多くは、もはや必要ありません。</strong></p><p>そこでReactが、すごく受け入れがたいけれども他に選択の余地がない選択肢となります。手元でReactの簡単なテストを実行したところ、React-DOM 0.14をwebpackでビルドしてgzipすると、サイズは約37KBになりました。</p><p>比較としてjQuery 2.xは、min+gzipの組み合わせを使った場合29KBになります。従って、この方法はかなり有用です。私としてはjQueryと同様に、ゆくゆくはReactのコア機能の大部分が、ブラウザのAPIとして実装されることを期待しています。</p><p>とにかくもうそろそろ、監視可能なモデル、監視可能なコレクション、派生プロパティ上で変更を受信する機能とか何とかを求めるところから脱却して、以下のような動作のアーキテクチャに移行するべきでしょう。</p><p>少々単純過ぎる表現ですが、これがRedux本来の動作です。Reduxの概要は、<a href="https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux" rel="nofollow" title="" class="ext-link">Reduxに関する私のブログ投稿記事</a>に詳しく書いたので、そちらを参照してください。Redux自体の実装を、上記のような単純なものにしようと努力する必要はありません。そうそう、比較のために申し上げておくと、Reduxのサイズは実質的には大したことはなく、約2KBです。</p><p>肝心なのは、<strong>ReactをDOMの同期に利用すると、捨てられるものが山ほどあるという点です。</strong></p><p>コードがどれだけ減らせるか、オブジェクトと配列の単純なセットやスマートなレンダリングの呼び出しの処理のためにブラウザで実行しなければならない演算がどれだけ減らせるかを想像してください。</p><p>クラスシステム、イベントシステム、テンプレート作成システム、監視可能なデータ型のカスタムセット、jQuery風のDOMライブラリ(上述のものの中で必要)と、モデルとコレクションとそれらのプロパティを表す、アプリ固有の追加コード……これらすべてを送信することと相対します。モデルのインスタンス化と、機能を有効化するためのモデルが使用する内部ステートとキャッシュの保持には、より多くのメモリと演算が必要になります。<code>change</code>をトリガーする必要があるかどうかを判断するための、値の比較（いわゆる「ダーティチェック」）にも、演算とメモリが必要です。</p><p><strong>アプリの状態がほんの少し変わっただけで実行される必要があるコードが、何層も存在します。</strong></p><p><em>自由に</em>再レンダリングする機能を実現すれば、画期的に処理を軽くすることができます。</p><p>残念ながら私は、Atwood氏がリンクで提示している、Emberランタイムのパフォーマンステスト結果と突き合わせて比べられるような、完全なランタイムのデータを取っていませんが、上記の単純化によって必要な演算の回数が激減し、ランタイムパフォーマンスが大幅に向上するというのは、容易に想像できます。</p><p>また、誤解のないように説明しますが、読み込み時間とランタイムのパフォーマンスが良好であれば、ファイルサイズの合計にさほど神経をとがらせる必要はありません。</p><p>モバイル端末上のWebブラウザは二流扱いを受けていますが、この現状に甘んじたくなければ、このパフォーマンスの問題に向き合わなければならないと、私は考えます。最先端ではないハードウェア上でも、Webの動作はもっと速くなるし、同時に開発者にも快適な体験を提供できると思います。ところで、開発者の体験についての私の話はあやしいぞと思われた方は、どうぞ <a href="https://www.youtube.com/watch?v=xsSnOQynTHs" rel="nofollow" title="" class="ext-link">Dan Abramovの「React Europe」でのプレゼンを見てください</a>。</p><p>もちろん、皆さんがお持ちの疑問に私が全て答えることはできませんし、この記事も、React+Reduxがある意味で万能のソリューションだと主張したくて書いたのではありません。ただ私は、この組み合わせに大きな可能性を感じています。</p><p>当面はここで述べたように、既知のHTMLをプリレンダリングすることで動作を軽くするアプローチが有効だと思います。私はこれからも、もっといろいろなものをビルドして、それについて考えたことを発信していきたいと思っています。皆さんもこんな活動に加わってくださるとうれしいです。</p><p>何かあれば、私のTwitterアカウントまでご連絡ください。 <a href="http://twitter.com/henrikjoreteg" rel="nofollow" title="" class="ext-link">@HenrikJoreteg</a> です。欲を言えば、皆さんがご自分のブログに、この記事に対する感想を書いてくださると、よりうれしいです。ガジェットWebをどんどん盛り上げていきましょう。</p><p>最後まで読んでくださってありがとうございました。以下もよろしくお願いします。</p>
