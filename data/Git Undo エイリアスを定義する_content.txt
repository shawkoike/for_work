Git Undo （2016-08-25） by Enrico Campidoglioこのような経験はありませんか？「ローカルのコミットをし過ぎてしまったことに急に気づいてローカルコミットを書き直している最中、rebaseしすぎてしまい、自分が思い描くような履歴になっていなかった」。どうですか？　私はあります。そのような時、「ただCTRL + Zで開始時に戻れればいいのに……」と思います。もちろん、決してそんなに単純ではありません。GUIでさえもです。そんな絶望的な瞬間を経験することがあったので、git undoコマンドを独自に作成する決心をしました。以下に私のアイデアと、そこに行き着くまでの過程を紹介したいと思います。Gitのundo操作を行うために私が最初に目を付けたのは、reflogです。「reflogとは何だろう？」と思うかもしれませんね。Gitでは、ブランチの参照が移動する度に1、いわばローカルジャーナルと言われる場所に、移動する前の値が記録されます。このジャーナルのことをリファレンスログ、またはreflogと呼びます。リポジトリには、各ブランチに対するreflogが1つずつと、それらとは別にHEAD参照に対するreflogが1つあります。ブランチのreflog内のエントリのリストを入手する方法は、git reflog (ブランチ名)と入力するだけの簡単なものです。これにより、masterブランチのreflog内のエントリが出力されます。HEAD自体のreflogを参照したい場合は、引数を省けばいいだけです。これでHEAD参照のみに対する同出力が得られます。ぱっと見ただけでは分かりませんが、reflog内のエントリは新しいものが順に上から記録されています。逆にすぐに分かることは、各エントリにはそれぞれインデックスが付いていることです。このインデックスを使うことで、特定のreflogのエントリに関連するコミットを直接参照することができるため、実はこれは非常に有用です。ここでは、reflogのエントリを参照するには以下の構文を用いる、ということだけ言っておきましょう。@マークの両側には以下を入力します。例えば、HEADが2つ前に参照していたコミットを確認したいとしましょう。その場合は、git showコマンドの後にHEAD@{2}と入力します。また、masterが直前に参照していたコミットを確認したい場合は、以下のようになります。重要なことは、reflogは、ブランチによって参照されたコミットの履歴を追跡するということです。これはWebブラウザがアクセスしたURLの履歴を追跡するのと同じことです。つまり、@{1}によって参照されたコミットは、常に現在の値の1つ前に参照したコミットであるということです。refloをgit resetコマンドと合わせて使う場合の構文は、以下のようになります。これによって、インデックスと作業ディレクトリであるHEADを、ブランチによって参照された直前のコミットに移動することができます。これは、Webブラウザで「戻る」ボタンをクリックするのと同じことなのです！この時点で、独自のgit undoコマンドを実装するのに必要な全てが揃いました。実装する際のエイリアスは以下の通りです。これではあまりにも長ったらしくて分からりづらいので、1つずつ区切って見ていきましょう。このようなオプションのパラメータを使うことの利点は、任意の回数の操作を取り消すことができるということです。何も指定しない場合は、直前の操作を取り消すことができます。以下のような履歴があったとします。3
この履歴にはコミットCで分岐するmasterとfeatureの2つのブランチがあります。この例では、masterブランチにある最新のコミット、つまりコミットFを取り除きfeatureブランチとマージしたいものとします。この時点で、以下のような履歴が出来上がります。
ご覧のように、うまくいきました。ですが、まだ満足いく結果ではありません。ある理由で前の履歴に戻りたいとします。つまり実際には、直前の2つの操作、mergeとresetを取り消すということです。ここでundoエイリアスの出番です。これによってmaster@{2}で参照されたコミットがHEADに移動します。このコミットは、masterブランチが2つ前のreflogエントリで差していたコミットです。それではさらに履歴をチェックしてみましょう。全てが元通りになりました。\o/ではundoををundoしたい場合は？　簡単ですよ。git undoそのものは、undo操作を1回行うということなので、次のように入力すれば十分です。つまり、引数なしで、git undo 1と入力したのと同じ意味になるのです。どうです、この記事は役に立ちましたか？　もしこの記事で紹介したのと同じような、別のテクニックも学びたいようであれば、他にもPluralsightのAdvanced Git Tips and Tricks（さらに進んだGitのコツとテクニック）コースでいくつか記事を書き溜めているので読んでみてください。
