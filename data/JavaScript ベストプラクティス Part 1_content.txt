Javascript BEST PRACTICES PART 1 (2015-1-9) by Thinkfulベストプラクティス パート12つのパートに分けてお届けする「ベストプラクティス」のパート1では、MozillaのWebエバンジェリストであるChristian Heilmannが提供する人気のスライドショーから内容を抜粋しています。JavaScriptにはひどく扱いにくい特徴がいくつかありますが、それはこれまで以上にソフトウェア開発において重要になっています。この「ベストプラクティス」ではより読みやすく、効率の良いコードを書く手助けとなるサンプルコードやその使用例を紹介していきます。もしWeb開発についてもっと学びたいと思うのであれば、私たちが提供しているフロントエンドWeb開発コース、もしくはAngularJSコースを覗いてみてください。変数名や関数名は簡単で理解しやすく短いものにしましょう。悪い変数名1：悪い変数名2：変数名や関数名で値を説明しないようにしましょう。国によっては理解されない変数名：どこの国でも理解される変数名：コードは物語です。簡単についていける筋書きを書きましょう。グローバル変数の使用はあまり好ましくありません。理由： 自分が書いたページの後に別のJavaScriptが追加されることで、コードが上書きされる危険がある。回避策： クロージャやモジュールパターンを使用する。発生する問題： 全ての変数をグローバル変数とすることでどこからでもアクセス可能になる。そのためアクセスが抑制されず、ページ内に書いたあらゆるコードが上書き可能になる。オブジェクトリテラル： 全てが抑制され、オブジェクト名を通してのみアクセスすることができる。発生する問題： モジュール名が繰り返されるので、長くてうんざりするようなコードになる。モジュールパターン： グローバル変数とそうでない変数を明確にする必要があり、それらの構文の切り替えを行う。発生する問題： モジュール名が繰り返されるので、違う構文を内部の関数で使用することになる。リビーリングモジュールパターン： 矛盾のない構文を保ち、グローバル変数とうまく組み合わせて使用する。ブラウザはJavaScriptパーサに対して、とても適応性が高いものになっています。しかし、あいまいなコーディングスタイルでは別の環境に変更したり、別の開発者に渡したりする際に痛い目を見ることでしょう。正確なコードは安全なコードです。コードが正確であるか確認： http://www.jslint.com/必要だと思われるコメントだけを書き、経緯を全て伝える必要はありません。コメントを入れる際に//は使わないようにしましょう。/**/を使用した方が、改行を削除した場合でもエラーが発生しないので、より安全です。コメントを使ってデバッグをする際のちょっとした技を紹介します。コメントはHTMLであってもJavaScriptであっても、エンドユーザが見るものではありません。
開発に使用するコードは開発者のみが必要とするものと知りましょう。JavaScriptは、計算、変換、外部ソース（Ajax）へのアクセス、そしてインターフェイス（イベントハンドラ）の振る舞いを定義するのに効率の良いスクリプト言語です。これら以外の機能を使用する場合は、それに特化した技術を使用するべきです。例：フィールドが空欄の場合はクラスを“mandatory”と定義し、そのフィールド全体を赤枠で囲う。2か月もすると、すべてのスタイルは、会社の新しいスタイルガイドに沿わなければならなくなります。例えば、ボーダーは使用しない、エラーは要素の横にアイコンとしてアラートを表示するなどです。見た目の感じでJavaScriptのコードを変更すべきではありません。CSSのインヘリタンスを使うことで、たくさんの要素を繰り返さなくてもよくなります。ショートカット記号を使わない場合ショートカット記号を使った場合ショートカット記号を使わない場合ショートカット記号を使った場合ショートカット記号を使わない場合ショートカット記号を使った場合1つの関数であらゆることができれば、こんなに簡単なことはないですし、魅力的でもあります。しかし、機能を拡張しようとした場合、いくつかの関数に同じ作業をしなくてはならないことに気付くことでしょう。これを防ぐには、あらゆる状況に対応できる関数を書くのではなく、特定のタスクを実行するヘルパー関数を小分けにして書く事です。そうすることで、後から主要機能を拡張するAPIを作成するためにリビーリングモジュールパターンを使う際、これらの関数を提示することもできるのです。良いコードというのは、主要部分を書き換えることなく簡単に構築できるコードです。DOMの生成は遅いうえに高額でもあります。JavaScriptには依存しているが、JavaScriptが無効の時に得ることができる要素は、ユーザにとって役に立ちません。このコードには、ラベルやCSSクラス、ID、プリセットが含まれます。これらをコンフィギュレーションオブジェクトに置いたり、パブリックしたりすることによって、管理がたやすくなり、カスタマイズが可能となります。例：このセクションでは、最良な変数名の付け方やコメントの仕方、そしてコード管理に関するヒントを紹介してきました。パート2では、ループやネスティングなどの有効的な使い方を紹介していきます。JavaScript ベストプラクティス パート2このガイドを気に入っていただけたようであれば、jQuery入門ガイドもご覧になってみてください。また、Web開発についてもっと学びたいようであれば、フロントエンドWeb開発コースやAngularJS コースのオンラインコースを受講されることをお勧めします。
