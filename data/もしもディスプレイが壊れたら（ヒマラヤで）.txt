<p><a href="http://tombh.co.uk/when-your-screen-breaks-in-the-himalayas" rel="nofollow" title="" class="ext-link">When Your Screen Breaks (In The Himalayas)</a> by <a href="https://twitter.com/twombh" rel="nofollow" title="" class="ext-link">Tom Buckley-Houston</a></p><p><img class="alignnone" src="http://tombh.co.uk/images/india/laptop.jpg" alt="" width="900" height="608"></p><p>もしラップトップのディスプレイが壊れたら、文句を言いつつもお金を出して修理してもらうのが普通でしょう。修理用のパーツが届くまでの間は、外付けディスプレイでしのぐのでしょう。面倒ではあるけれど、それで作業が止まってしまうわけではありません。でも、いちばん近い町までバスで2日かかるうえに、貴重品を安心して送れるサービスも整っていない場所にいるとしたらどうでしょう？私の置かれた状況がまさにそれでした。インド北部のラダック、ヒマラヤに囲まれたところでそんな目にあったのです。私がここに来たのは、日々の仕事から離れて執筆に専念するためでした。執筆にはコンピュータが欠かせません。でも、日々の生活はそれほどコンピュータに依存していなかったので、ハッカーらしい解決策をゆっくり考えてみました。</p><p>私のハックのポイントは、スマホを「モニター」として使ったことです。VNCやXのポートフォワーディングで映像出力を直接流すという意味ではありません。もちろん、時にはそれらの手法を使うこともありましたけどね。スマホをVNCなどのインターフェイスとして使うというよりは、ラップトップのキーボードでスマホ側のアプリ操作することのほうが多かったと思います。Termuxを使ってラップトップにSSHで入ったり、ChromeやGmailやWhatsappを使ったりしたのです。すべてを完全に掌握するまでには数日かかりました。でも、執筆を無事再開できたうえにGithubに<a href="https://github.com/jart/hiptext/pull/43/files" rel="nofollow" title="" class="ext-link">Pull Requestを送る</a>こともできました。あなたが現時点で何も不自由していなかったとしても、私のハックから何かを得られるのではないでしょうか。</p><p>また、きわめて貧弱なインターネット環境での私の執筆スタイルについても説明します。これはディスプレイが壊れた件とはまったく無関係ですが、これらのハックを私が日々どんなふうに使っているかを紹介できるでしょう。</p><p>私はLinuxとAndroidを使っているので、ここで紹介する内容の中にはWindowsやMacやiOSでは使えないものもあるかもしれません。しかし、全体的な考え方はどこでもあてはまるものです。私の環境について説明しておきましょう。スマートフォンはSonyのZ3 Compact、そしてラップトップはDellのXPS 13（2015年モデル）です。Z3 Compactはroot化していますがROMは書き換えていません。XPS 13にはArch Linuxを入れています。</p><p>映画『オデッセイ』のマット・デイモンもそうでしたが、最初は右も左もわからない状態です。はじめの一歩を踏み出すにはとても時間がかかり、痛みを伴う可能性があります。</p><p>スマホ側からラップトップにSSHで接続できれば理想的なのですが、あらかじめそんな設定をしている人はまずいないでしょう。幸い、自動化されているところもあります。たとえば、スマホのテザリング機能をオンにしたら、ラップトップが自動的に接続するようになっているかもしれません。仮にそうしていなかったとしても、USB経由でのテザリングを使えば、ラップトップ側のOSのDHCPクライアントが自動接続してくれるはずです。それでも、<em>大きな</em>障害が二つ残ります。ラップトップにSSHデーモンをインストールすることと、ラップトップのIPアドレスを取得することです。</p><p>ここでは、OSのブートプロセスについての記憶だけが頼りになります。皆さんもきっと、デスクトップが真っ黒になってしまったことが一度はありますよね？Grubのブートメニューで上矢印キーを押し、ちょっと待ってからユーザー名とパスワードを入力すれば、デスクトップにたどり着けるということを私は知っていました。さらに幸運なことに、画面上部の2行ぶんくらいだけはディスプレイが生き残っていたのです。生き残っているとはいっても、表示が自動的に更新されるわけではありません。物理的に力を加えてディスプレイをひねってやらないと、表示は更新されませんでした。私は次に、Alt+スペースを押しました。ターミナルを立ち上げるショートカットです。マウスカーソルやコマンドプロンプトは見えませんでしたが、Enterキーを何度か押してプロンプトを表示させ、何が起こっているのかを隙間から確認できるようにしました。</p><p>USB経由のテザリングの自動接続でインターネットにはつながっていたので、次に<code>sudo pacman -S openssh</code>（もちろん、最初のsudoのときにはパスワードを入力しないといけません）とタイプしてから<code>sudo systemctl enable sshd &amp;&amp; sudo systemctl start sshd</code>としました。成功です。他に何も問題は出ませんでした。これらのコマンドは、システムによって異なるかもしれません。</p><p><em>ちょっとしたヒント：Linuxの場合なら、画面が真っ暗になったときには（Ctrl+Alt+F1などの）VTを使うほうがいいでしょう。これなら、ログインしたらすぐにプロンプトが現れます。つまり、デスクトップが読み込まれるのを待たずに、すぐopensshなどのインストールを始められるということです（Hacker Newsで<a href="https://news.ycombinator.com/user?id=kbaker" rel="nofollow" title="" class="ext-link">kbaker</a>からいただいた案です）。あるいは、OSに用意されているであろうコマンド実行用ショートカットも使えます。たいていのLinuxはAlt+F2でテキスト入力欄が現れて、たとえば<code>xterm</code>などとタイプすればそれを起動できます。OS XならAlt+スペースです。ターミナルアプリを起動した直後には、コマンドプロンプト上にフォーカスがあるものと推測できます。私の知る限り、OS XにはSSHデーモンが標準でインストールされています。<code>sudo systemsetup -setremotelogin on</code>とタイプするだけで起動できるでしょう（<a href="https://twitter.com/notpeter" rel="nofollow" title="" class="ext-link">@notpeter</a>から教わりました）。</em></p><p>こういうこともあるので、新しいラップトップを手に入れたらまずはSSHデーモンを入れて、強力なパスワードを設定しておくことを強くお勧めします。Webサーバーにはまず間違いなくSSHデーモンがはいっているでしょう。ラップトップよりもよっぽどインターネット上にさらされているWebサーバーでもそうなのですから、ラップトップにSSHデーモンを入れてもセキュリティ上のリスクはそんなに大きくなりません。ただし、強力な認証方式を使うのが前提です。鍵交換方式の認証がベストでしょう。</p><p>さあ、次はラップトップのIPアドレスを調べる番です。<code>ifconfig</code>とタイプしてEnterキーを押し続けることで、<code>inet 192.168.42.177 netmask 255.255.255.0 broadcast 192.168.42.255</code>という行を読み取ることができました（最初のアドレスがこのラップトップのIPアドレスで、私の場合は192.168.42.177でした）。後から気づいたのですが、root化したAndroid機があるのだから、こんなことをしなくても単に<code>/data/misc/dhcp/dnsmasq.leases</code>を見るだけでよかったのです。Androidをroot化するのは簡単で、よっぽどのことがない限りは<a href="https://kingroot.net/" rel="nofollow" title="" class="ext-link">King Root</a>というアプリでroot化できます。さらに別の方法もあります（Hacker Newsで<a href="https://news.ycombinator.com/user?id=sujay_m" rel="nofollow" title="" class="ext-link">sujay_m</a>からいただいた案です）。この方法はクロスプラットフォームであるというメリットがあります。IPアドレスは使わずに、<a href="https://github.com/lathiat/avahi" rel="nofollow" title="" class="ext-link">Avahi</a>でローカルネットワークドメインを作るのです。これをラップトップにインストールすれば、<code>HOSTNAME.local</code>でアクセスできるようになります（HOSTNAMEの部分は、ラップトップの<code>hostname</code>で置き換えます）。</p><p>ここまでが重要です。SSHサーバーを実行してIPアドレスを取得することができなければ、おそらくディスプレイを修理する以外に手はないでしょう。あとは、SSHクライアントに接続情報を教えてやるだけです。デフォルトのポートは<code>22</code>なので、私の場合は<code>ssh://192.168.42.177:22</code>でした。</p><p>SSHははじめの一歩に欠かせないものですが、現時点で私が最も多用するアプリでもあります。後でお話しますが、私の作業時間の大半は<a href="https://neovim.io/" rel="nofollow" title="" class="ext-link">neovim</a>を使った執筆だし、リモートサーバー上でのWebブラウズには<a href="http://elinks.or.cz/" rel="nofollow" title="" class="ext-link">elinks</a>を使っています。Androidで動くSSHクライアントならどれでも、ラップトップ上でのsudo作業くらいなら問題なくこなせるでしょう。でも、長い目で見て日常作業に使うことを考えると、その使い勝手はアプリによって大きく異なります。</p><p>少なくとも二種類のSSHクライアントを入れておくことをお勧めします。後でお話しますが、ラップトップのキーボードをスマホの入力に使おうと試行錯誤していたときに、標準入力がフリーズしてしまうことが何度かありました。そんなときにプロセスを殺すには、別のSSHクライアントでラップトップにログインするしかありません。</p><p>AndroidのSSHクライアントをいろいろ試してみましたが、完璧なものは見つかりませんでした。いま私が常用しているのはTermuxで、ときどきConnectbotを使うこともあります。それ以外も含めて注目すべきSSHクライアントをまとめました。私の使用経験が少ないものから順に並べています。</p><p>ディスプレイが壊れた当時に私が知っていたアプリがこれでした。リモートのクラウドサーバーにアクセスするために使っていたのです。使い勝手がよくて特に不満はなかったのですが、常用するとなると大きな弱点がありました。環境変数XTERMを設定できないのです。つまり、ターミナルの色数が制限されてしまうということです。<code>XTERM=xterm-256color</code>や<code>XTERM=screen-256color</code>よりも劣る環境なんて我慢できません。</p><p>後述しますが、今の私のお気に入りであるTermuxと同じく、Juice SSHも<a href="https://mosh.org/" rel="nofollow" title="" class="ext-link">mosh</a>に対応しています。これはSSHを改良したプロトコルで、ネットワーク接続が不安定な場合に使えるものです。</p><p>モダンな見た目でUIも洗練されており、使いやすくなっています。すばらしいアプリです。ただ、重大な問題がひとつあります。Altキーと他のキーの組み合わせに対応していないのです。これは、<code>neovim</code>や<a href="https://tmux.github.io/" rel="nofollow" title="" class="ext-link">tmux</a>（ひとつのターミナル内で複数のターミナルを扱うソフトウェア）などを使う場合に致命的です。</p><p>さらに、UTF-8文字の文字幅を正しく伝えてくれないのです（不思議なことに、ここで挙げたSSHクライアントの大半が同じ問題を抱えています）。まあこれはそんなに問題にはならないでしょう。<a href="https://github.com/powerline/powerline" rel="nofollow" title="" class="ext-link">powerline</a>や<a href="https://github.com/vim-airline/vim-airline" rel="nofollow" title="" class="ext-link">vim-airline</a>などを使えばいいのです。</p><p>ターミナル上で長い時間をすごす人にとって、ステータスラインはとても便利です。現在時刻やバッテリーの残量だけでなく、tmuxなら実行中のプロセスやターミナルも表示できます。でも、たとえば「⚡」などの特殊文字を使ってしまうと、ステータスラインの末尾が新しい行に押し出されてしまいます。時刻が変わったりなどの理由でステータスラインが再描画されるたびに、ステータスラインがどんどん上にあがってしまい、最後にはターミナルの内容が何も見えなくなってしまうのです。</p><p>これを何とかするのは簡単で、要するにそういった文字を使わないようにに設定すればいいのです。私の場合は<code>powerline</code>を使うようにしましたが、それ以外のステータスラインもあります。面白いことに、私が<code>neovim</code>上で使っている<code>vim-airline</code>にはこの問題がないようです。なので、こちらは何もいじっていません。おそらく、<code>iutf8</code>フラグを設定していないSSHクライアント（<code>stty</code>とタイプすると、設定されているフラグを確認できます）と<code>tmux</code>の<code>powerline</code>統合機能を組み合わせたときに発生する問題だとは思うのですが、なぜかConnectbot（後述します）は<code>powerline</code>を完璧に描画します。</p><p>このアプリの注目すべき点は、Termux（後述します）と同様に実際のシェルを提供してくれ、マウスのエスケープシーケンスにも対応しているところです。ここでいうシェルとはAndroidの実際のシェルであり、デフォルトのAndroidに付属するコマンドなら何でも（たとえば<code>ssh</code>なども）使えます。<a href="https://play.google.com/store/apps/details?id=com.jrummy.busybox.installer" rel="nofollow" title="" class="ext-link">busybox</a>をインストールすれば、<code>cat</code>や<code>find</code>、<code>grep</code>、<code>ping</code>、<code>sed</code>などといったおなじみのコマンドたちも使えるようになります。</p><p>マウスのエスケープシーケンスはとても興味深いものです。タッチジェスチャーがマウスのイベントに変換されるのです。つまり、スワイプすれば画面をスクロールできるし、タップした場所にカーソルが移動するということです。これは、コマンドラインだけではなく他のアプリ上でもとても便利です。たとえば、テキストベースのWebブラウザである<code>elinks</code>でも使えます。詳しくは後述しますが、貧弱なインターネット環境で過ごすすべての旅行者にとって、タッチベースの<code>elinks</code>は注目に値するものです。</p><p>このクライアントにもちょっとした問題があって、日常的な使用には難があります。<code>screen-256color</code>はサポートしているようなのですが、実際には16色しか使っていないように見えるのです。また、Alt+HomeやAlt+Endといった組み合わせに対応していません。</p><p>私が日々の作業で多用しているクライアントのひとつす。これとTermuxを切り替えて使っています。大きな利点は、画面描画を更新する際のFPSが最大であることと、フォントを完璧にレンダリングすることです。高いFPSを実感できるのは、私がTTYへのグラフィックレンダラ（<a href="https://github.com/jart/hiptext" rel="nofollow" title="" class="ext-link">hiptext</a>や<a href="https://github.com/tombh/texttop" rel="nofollow" title="" class="ext-link">texttop</a>）に関する作業をしているときだけです。フォントのレンダリングは純粋に美的感覚の問題です。大半の時間をテキストベースで過ごす以上は、UTF-8文字などのあらゆるグラフィックが気になるのです。また、<code>powerline</code>ではフォントへのパッチを管理しており、トライアングルセパレーター（シェブロン記号&lt;&gt;を塗りつぶしたような文字）のような文字を追加できるようになっています。これらの文字を完璧にレンダリングしてくれるクライアントはConnectbotだけなのです。いったいなぜでしょうね。</p><p>しかし、他の多くのクライアントと同様に、Connectbotも外部のカスタムフォントには対応していません。そこで、ちょっとしたハックが必要になります。スマホのrootを取っているのなら話は簡単で、<code>/system/fonts/DejavuSansMono.ttf</code>をお気に入りのフォントで上書きしてから再起動するだけのことです。</p><p>私はそれ以外にもちょっとしたハックをしています。<a href="https://play.google.com/store/apps/details?id=com.gmd.hidesoftkeys" rel="nofollow" title="" class="ext-link">Auto Hide Soft Keys</a>のインストールです。というのもConnectbotは、Back、Home、Menuなどの「ソフトキー」を隠してくれないのです。スマホをラップトップの画面代わりに使うなら、できる限り画面全体を活用したいですよね！</p><p>ConnectbotはAndroid用のSSHクライアントとしては最も古くからあるもので、機能的にも成熟しています。さらに<a href="https://github.com/connectbot/connectbot" rel="nofollow" title="" class="ext-link">Githubリポジトリ</a>の動きも活発です。私がこれをメインアプリとして使わない理由は、CtrlキーやAltキーとの組み合わせがうまく動かないことが多すぎるからです。この件については<a href="https://github.com/vx/connectbot/pull/123" rel="nofollow" title="" class="ext-link">GithubにPull Request</a>が登録されています。</p><p>私が最終的にたどりついたのが、このクライアントです。いろいろ優れたところがありますが、私がこれを常用する最大の理由は、あらゆるキーコンビネーションに完全に対応しているからです。<code>neovim</code>にAltキーとの組み合わせを認識させるところでちょっとした問題はありますが、それはまた別の話。気になる点があるとすれば、<code>powerline</code>上の特殊文字をきちんと配置してくれないというUTF-8の文字幅問題を抱えていることと、画面描画を更新する際のFPSが低いことあたりですね。あとは、Termuxでのパッチ済み<code>powerline</code>のフォントの配置がおかしく見えるところくらいでしょう。</p><p><em>ちょっと脱線しますが、予期せず見つけた重要な発見についてここで説明しておきましょう。Termuxには、<code>mosh</code>とマウスのエスケープシーケンスの組み合わせによるすばらしい機能があります。どういうことかというと、リモートのサーバーに<code>mosh</code>を入れると、リモートの<code>elinks</code>を指で操作できるようになるのです。リンクをクリックしたり画面をスクロールさせたりといった操作で、いちいちソフトキーボードを操作する必要はありません。最初に発見したときには別になんとも思わなかったのですが、不安定な2G接続や検閲されたインターネット接続などの状況下でのことを考えてみましょう。<code>mosh</code>には、<code>ssh</code>に比べて大きく優れている点が二つあります。接続が途切れたときにも対応できるという点と、画面上で更新された箇所だけしか送信しないのでネットワーク帯域にやさしいという点です。接続が途切れると、<code>mosh</code>は画面の上部に青いバーを表示して、接続の再開を待ち続けます。<code>ssh</code>のようにフリーズしてしまうことはありません。サーバー上で<code>tmux</code>を使っているなら、クッキーやタブを使ったブラウザのセッションも、インターネットパイプを用いて信頼性の高い状態で維持できます。</em></p><p><em>中国の片田舎でバスに乗って移動しているときのことを考えてみましょう。GmailをチェックしたりGoogle検索したりするために必要なネットワーク帯域は、毎分ほんの数キロバイト程度で済むのです。そのためだけにでもTermuxを使う価値があると思います。</em></p><p>Termuxには、他のクライアントと比べて優れた点がたくさんあります。</p><p>指になじんだラップトップのキーボードを活用しない手はないでしょう。そのためのAndroidアプリもいくつかありますが、どれもこれも、wifiやtelnetによる拙いハックを使うものばかりです。その動きは、スマホとラップトップを同じネットワークにおいてからスマホ側のアプリを立ち上げて、ラップトップのブラウザやシェルから特定のIPアドレスとポートに接続するといった感じです。複雑極まりないし、すべてのキーやキーコンビネーションを送信できるわけでもありません。</p><p>そのときふと思いついたのです。このラップトップをBluetoothキーボードとして使えるんじゃないかって。それは実現できました。ただ、必要なソフトウェアが（少なくともLinux版は）アクティブにメンテナンスされていないというところは気になります。私が見つけたソフトウェアを、使い勝手の悪い順に紹介します。</p><p>pythonでBluetoothキーボードを作ろうという試みがいくつかあるようです。中には成功した人もいるようですが、私はどれひとつとして使いこなせませんでした。よく使われているのは<a href="https://github.com/Rensselaer-Hackathon/Hackathon-Sorting-Hat/blob/master/pyTooth.py" rel="nofollow" title="" class="ext-link">pyTooth.py</a>と<a href="https://github.com/gh4ck3r/hid2bt" rel="nofollow" title="" class="ext-link">hid2bt</a>のふたつです。</p><p>このソフトウェアの利点は、iPhoneとMacやWindowsでも動くと謳っているところです。Bluetoothキーボードと物理キーボードを切り替えるためのショートカットを提供するツールも用意されています。このツールがなければ、押したキーの情報がラップトップとスマホの<em>両方に</em>送られてしまいます。残念ながら、両方のバイナリを取得してコンパイルしてみたところ、キーが押されたという情報はログに残っているものの、その情報をスマホ側に送ることはできませんでした。</p><p>数年前の代物ですが、なんと今でも動きます。しかし、Bluetooth環境の設定には苦労しました。今まではそんなことをする必要がなかったものです。ラップトップ用のドライバは適切なものが用意されていたので、ドライバはインストールせずに済みました。systemdの設定で<code>rfkill</code>をいくつか無効にする必要がありました。また、<code>bluetoothctl</code>でBluetoothを<code>power on</code>しなければいけませんでした。しかし、一番時間を費やした問題は、<code>/etc/bluetooth/main.conf</code>に<code>DisablePlugin=input</code>を追加せよというアドバイスがBluez4にしか当てはまらないということでした。確かに、<code>hidclient</code>などが広く使われていた四年以上前なら、これは適切なアドバイスだったのでしょう。でも今や、ほとんどの人はBluez5を使っています。Bluez5の場合は、<code>/etc/systemd/system/dbus-org.bluez.service</code>の中で<code>bluetoothhd</code>の引数として<code>--noplugin=input</code>を追加する必要があったのです。</p><p>キーを押したときにデスクトップが乱れることを避けてうまくスマホ側にタイプできるようにするお手軽な方法は、Ctrl+Alt+F2などで別のVTに切り替えることです。私はよくこれを忘れてしまって大変なことになります。デスクトップに戻ってみると、開いていたアプリケーションにわけのわからない文字が書き込まれているのです。</p><p>でも、ディスプレイが壊れてしまったというのにどうやってデスクトップを見ればいいのでしょう？ごくまれにではありますが、私はスマホからVNCで入ることがあります。ラップトップ側には<code>x11vnc</code>をインストールしました。これはとてもシンプルで、セットアップも不要です。インストールして実行すればIPアドレスとポートを知らせてくれるので、それをVNCクライアントに設定すればいいのです。bVNCは、私が二番目に試したVNCクライアントです。最初が何だったかは忘れてしまいましたが、最初に試したクライアントではマウスカーソルが表示できませんでした。理屈のうえでは、やりたいことは何でもVNC経由でできるはずです。しかし私にとっては、画面の描画を更新するときのFPSが遅すぎるし、いちいちピンチしてズームしないと何もできないという残念な環境でした。デスクトップの解像度をスマホにあわせればいいのかもしれませんね。まあ、私は<code>ssh</code>と<code>tmux</code>があれば十分幸せです。しかし、Gimpで画像編集をするときだけはVNCに戻ってきます。</p><p>さて、これで準備は整いました。rootもとったしグラフィカルにアクセスできるようにもなったし、物理キーボードも手に入れました。できないことなど何もないでしょう。しかし、もう少し使い勝手をあげる手がまだあります。</p><p>書籍の執筆経験がないかたもいらっしゃるでしょうが、私のやりかたを簡単に説明しておきます。<code>neovim</code>とmarkdownと<a href="http://pandoc.org/" rel="nofollow" title="" class="ext-link">pandoc</a>があれば、いとも簡単に実現できる方法です。章ごとに<code>1.md</code>や<code>2.md</code>といったファイルを用意します。そして、以下のようなスクリプトでそれらをひとまとめにしたPDFを作ります。</p><p><code>#!/bin/bash<br>
echo "building..."<br>
mkdir -p build<br>
rm -f build/book.md<br>
cp -rf <em>.md build<br>
for chapter in $(ls build/</em>.md); do<br>
  echo &gt;&gt; $chapter<br>
  echo '\pagebreak' &gt;&gt; $chapter<br>
  echo &gt;&gt; $chapter<br>
done<br>
cat build/*.md &gt; build/book.md<br>
pandoc -f markdown -o book.pdf build/book.md<br>
echo "built"<br>
</code><br>
私のブログでは、静的サイトジェネレータである<a href="https://jekyllrb.com/" rel="nofollow" title="" class="ext-link">Jekyll</a>を使っています。こちらも同じくmarkdownを使っているので、ここでも<code>neovim</code>が使えます。ブログはGithubに置いているので、<code>git push</code>するだけで記事を公開できます。記事の執筆時には<code>jekyll serve</code>を使って<code>host: 0.0.0.0</code>を設定しているので、スマホのブラウザから<code>192.168.42.177</code>（ラップトップのIPアドレス）にアクセスすれば、公開前の投稿を確認できます。</p><p>この地でのインターネット環境は、ダイアルアップ時代よりもひどいものです。一日の半分はまったくつながらない状態だし、残りの半分だって10kbpsにも満たない断続的な接続しかありません。pingの結果はだいたいこんな感じです。</p><p>そこで私が活用しているのが、ビジュアルなpingを実行し続けることです。そうすれば、ネットワークの現状をすぐに把握できます。たとえば図のようになります。</p><p><img class="alignnone" src="http://tombh.co.uk/images/mtr.jpg" alt="" width="900" height="506"></p><p>赤が多ければ、今はGoogle検索は控えておこうと判断できます。しかし、もしほんの少しでも色がついていれば、少なくとも<code>elinks</code>上で「r」（デフォルトのCtrl+Rから変更しています）を押して再読み込みをかけることはできます。まあ数分後には、新着メールが届いているかどうかを確認できるでしょう。</p><p>ちょっとした<a href="https://gist.github.com/fa670cdfb5bbbf9a00f3b4da6b813217" rel="nofollow" title="" class="ext-link">スクリプト</a>を書いて、ネットワークの現状を音で把握できるようにしました。部屋で他の作業をしながら、インターネット接続が使えるようになるまで待つことができるのです。接続が切れているときは何も音が鳴りません。ビープ音のピッチが高くなればなるほど、pingの応答時間が短くなっていることを意味します。</p><p>ひとつはっきりさせておきたいのは、<code>elinks</code>はリモートサーバー上で動かすべきだということです。リモートサーバー上のほうが、ネットワーク帯域も広いし接続の信頼性も高いでしょう。テキストベースのブラウザであるとはいえ、ページ全体をダウンロードする必要があることは変わりません。<code>elinks</code>の利点は、ネットワーク上に流す必要があるのがテキストのページだけだということです。<code>mosh</code>の差分アルゴリズムを使えば、ほんの数バイト程度になります。<code>elinks</code>を使う際のヒントを三つ紹介します。</p><p><code>elinks</code>には大きな弱点がふたつあります。ひとつは、SNI SSLページに対応していない点です。つまり、最近のHTTPSサイトの大半を読み込めないということです。<a href="https://www.hadrons.org/~guillem/patches/elinks/" rel="nofollow" title="" class="ext-link">SNIを有効にするパッチ</a>もありますが、今まで試そうと思ったことはありません。もうひとつは、JSの対応が不完全だという点です。最近話題のSPAが出てきたらお手上げです。</p><p><code>elinks</code>がSNIやJSをサポートしていないことがきっかけで私が開発したのがtexttopです。これは、Firefoxブラウザをターミナルにテキストベースで表示させて、インタラクティブに操作できる仕組みです。</p><p><img class="alignnone" src="http://i3.ytimg.com/vi/TE_D_fx_ut8/hqdefault.jpg" alt="" width="480" height="360"></p><p><a href="https://github.com/jart/hiptext" rel="nofollow" title="" class="ext-link">hiptext</a>を使って、GUIをテキストとしてレンダリングしています。ASCIIアートと似ていますが、もう少し優れたものです。また、マウスのエスケープシーケンスにも対応していて、スクロールやクリックやズームができます。実際にこれを使わざるを得なくなったのはたった一度だけで、Digital OceanのアカウントからAPIキーを取得するときのことでした。でも、必要とあらば、ダイヤルアップ環境上でどんなサイトにもアクセスできるということを知っておくだけでも安心できます。</p>
