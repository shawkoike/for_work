<p><a href="http://kevinlondon.com/2015/05/05/code-review-best-practices.html" rel="nofollow" title="" class="ext-link">Code Review Best Practices</a> （2015-05-5） by <a href="http://kevinlondon.com/about/" rel="nofollow" title="" class="ext-link">Kevin London</a></p><p><a href="http://www.wiredrive.com/?utm_source=kevinlondon.com&amp;utm_medium=blog&amp;utm_campaign=code-review" rel="nofollow" title="" class="ext-link">Wiredrive</a>では、私たちはかなりの数のコードレビューを行います。しかし、ここで働き始める前には私はコードレビューなどしたことがありませんでした。今回は、私がコードレビューをする時に何に注目するようにしているかや、私の考え出したベストなコードレビューのやり方をお話したいと思います。</p><p>コードレビューとは、簡単に言うと2人以上の開発者で問題を引き起こしそうなコードの修正について話し合うことです。コードレビューをすることのメリットについては多くの記事で語られており、知識を共有できること、コードのクオリティが上がること、開発者が成長できることなどが挙げられています。しかし、レビューを行う上で、どのように進めていくかという具体的なことについてはあまり多く語られてないように私は思いました。</p><p>コードを提出する前に、私はよく更新対象のファイルやディレクトリに対して<code>git add</code>を行い、続いて<code>git diff --staged</code>を実行します。まだコミットしていない変更について調べるためです。通常、以下のようなことをチェックします。</p><p>私は人にレビューしてもらう前に、自分でコードレビューを行い問題がないことを確認したいのです。人から指摘されるより自分で気づいた方が気持ち的にも楽ですからね。</p><p>コードレビューの中でも人間が行う部分は、毎回全てが試練だと感じます。このパートをどのように行うのがよいのか、私も未だ勉強中です。これまでコードについて議論する際にうまくいったアプローチを以下にご紹介します。</p><p>開発者として、私たちはコードの動作とメンテナンス性の両方に責任があります。動くコードを納品するための圧力によって、メンテナンス性が後回しになってしまうことは起こりがちです。リファクタリングは機能を設計レベルで変えてしまうことはありません。ですから、勧められた変更にがっかりする必要はないのです。コードのメンテナンス性を高めることは、バグを引き起こしているコードを修正するのと同じぐらい重要です。</p><p>さらに、コードのレビューを行っている間は、広い視野を持つようにしてください。これこそが、誰もが悪戦苦闘するところなのです。誰かに自分の書いたコードをもっとよくすることができると指摘された時、個人的に批判されたと感じ、身構えてしまうことがあるからです。</p><p>もしレビューする人が提案してきた時に、その提案を否定する理由が自分ではっきりと分からない場合、大抵はその提案通りに修正を実行します。レビューした人がコードの一部について質問してきた場合、それは今後、他の人にも混乱を引き起こす可能性があるでしょう。加えて、変更を行うことはより広い範囲でのアーキテクチャの問題やバグを明らかにしてくれることもあります。</p><p>（このセクションを付け加えるよう勧めてくれたZach Schiponoに感謝します）</p><p>私たちは大抵の場合、コードの背景について考えながら、行単位ベースでコメントを残しています。通常、私たちはStashでレビューを見ますが、同時に提案された変更を実行するためにコードをpullします。すぐさま処理をしないと、対処すべきはずのものが何だったのか忘れてしまうことがあります。</p><p>明瞭なコードを書くための技術について書かれた本は多くあります。読みたい本は数あれど、通して読めた本はそのうちのほんの僅かです（それを変えるため頑張っていますが）。以下がそのリストです。</p><p>私は講演の動画が大好きです。この記事を書く間に参考にした、<strong>ちょっとした役に立つ、関連した講演</strong>を以下にリンクしておきます。</p>
