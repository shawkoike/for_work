<p>Original article: <a href="http://passy.svbtle.com/partial-application-in-javascript-using-bind" rel="nofollow" title="" class="ext-link">Partial Application in JavaScript using bind()</a> by Pascal Hartig</p><p>JavaScriptの中にはコードをもっとシンプルで見やすくできるパターンがあるのに、あまり使われていないものがあります。皆さんも<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" rel="nofollow" title="" class="ext-link">Function.prototype.bind</a>はご存じでしょう。頻繁に使われていた<code>var that = this</code>や<code>var self = this</code>の代わりになる関数です。よくあるのが以下のような例です。</p><p>第1引数が<code>bind</code>（束縛）され、返される関数内で<code>this</code>として働きます。あまり知られていませんが<code>bind</code>は複数の仮引数を取ることができ、<code>bind</code>された関数が呼び出されると<code>bind</code>される後続のすべての仮引数は、その仮引数リストの前に付加されます。</p><p>つまり以下のように、関数を部分適用することができるのです。</p><p>すごいでしょう。冒頭に例として挙げたイベント処理コードを拡張する場合など、この利点がよく分かります。他にもイベント処理の一般的なパターンとしては、ハンドラを呼び出す時にコンテンツを指定するというのがあります。</p><p>仮に<code>tweet</code>と<code>retweet</code>のイベントハンドラが似かよった論理構造の場合、このようにコードを書くのもいいでしょう。ただし欠点は一目瞭然で、ボイラープレートコード（似ているのに省略できないお決まりのコード断片）だらけです。両方に無名関数を用意しなければなりませんし、それぞれ内部でイベントハンドラを呼び出して引数を受け渡し、関数を<code>bind</code>して<code>this</code>コンテキストをきちんと設定しないといけません。</p><p>もう少しシンプルにできないものでしょうか？　もちろんできますよ。</p><p>これならスッキリしますね。無名関数内で関数を呼び出す代わりに部分適用された関数を2つ用意し、thisコンテキストとそれぞれ異なる第1仮引数を両方に指定しました。もちろん<code>e</code>や<code>data</code>も問題なく渡されます。</p><p>もし皆さんが数カ月前の私と同じなら、ショックで自分の書いたコードから似たような箇所を探してきてはクリーンアップしたくなることでしょう。その作業が終わったら、このことを友達にも教えてあげてください。</p>
