Scaling to 100M: MySQL is a Better NoSQL （2015-12-10） by Yoav Abrahami
posted on Wix engineering blogMySQLはNoSQLよりも優れています。Key-ValueストアといったNoSQLのユースケースを考えてみると、パフォーマンスや使いやすさ、安定性の点でMySQLの方が合理的です。MySQLには、オペレーションや障害に関することからレプリケーションや異なる使用パターンまでと、多くのオンラインマテリアルが用意されおり、堅実なエンジンです。こういった理由から、比較するまでもなく、MySQLは最近のNoSQLエンジンよりも優れていると言えます。ここ最近では、NoSQLエンジンが主流になってきています。多くの開発者が、MongoDBやCassandra、Redis、HadoopといったNoSQLエンジンをアプリケーション構築の第一候補としており、それらが全て昔からのSQLエンジンを上回る物と考えています。NoSQLデータベースが選択される理由には、誇大広告であったり、「リレーショナルデータベースがNoSQLのように機能しない」という間違った憶測が要因にありますが、技術者はしばしば、オペレーション費用や安定性、成熟度といった懸念点を見落としがちです。制約や異なるNoSQL(そしてSQL)エンジンの欠陥に関する詳細については、Aphyrに掲載されているJepsenシリーズの記事をご覧ください。この記事では、なぜ私たちが「Key-Valueユースケースで、ほとんどの専用のNoSQLエンジンよりMySQLを使用する方が良い」と考えているかを説明すると共に、ガイドラインも提示していきます。誰かがWixサイトへのリンクをクリックすると、ブラウザはWixのサーバにサイトアドレスと一緒にHTTPリクエストを送信します。これは、アドレスがWixプレミアムサイトのカスタムドメイン（例えばdomain.com）であっても、Wixドメインのサブドメインにあるフリーサイト（例えばuser.wix.com/site）であっても起こります。このサーバは、送信されたサイトアドレスをもとにKey-Valueの検索を行うことで、サイトのURLを解決しなければなりません。以下の説明ではURLをルートとし表します。ルーティングテーブルは、サイトアドレスをサイトオブジェクトに転換するのに使われます。なぜなら、サイトは複数のルートに露出することがあり、リレーションは多対一だからです。サイトが一度発見されると、アプリケーションがそれを読み込みます。サイトオブジェクトそのものは、サイトが利用する異なるサービスである子オブジェクトの2つのリストを含む複雑な構造になっています。以下は、スタンダードなSQLと正規化されたスキーマを想定した、私たちのオブジェクトのサンプルモデルです。従来の正規化されたモデルでサイトを更新する場合、データの整合性が保たれることを保証するために、複数のテーブルを更新するトランザクションを行う必要があります（トランザクションは、影響を受けるテーブルへの同時書き込み/読み込みを防止するためにDBロックを使っていることに留意してください）。このモデルでは、各テーブルにシリアルキー、外部キー、そしてルートテーブル内のURLフィールドにおけるインデックスを持つことになります。しかし、正規化されたスキーマでのモデリングにはいくつかの問題があります。これらの問題は結果的にMySQL（もしくは他のSQLエンジン）から得られるスループットや並行性に制限を与えることになります。このような欠点や、ユースケースが実際はkey-valueであるという事実から、多くの開発者は安定性や整合性や有用性などを犠牲にしてでも、より良いスループットや並行性を提供するNoSQLを選択しているのです。Wixの場合では、私たちはMySQLをKey-Valueストアとして独創的に使用したとき、これがほとんどのNoSQLエンジンやMySQLの正規化されたデータモデル（上記のようなケース）よりも良い働きをすることを発見しました。簡単にMySQLをNoSQLエンジンとして使ってみます。我々の現在のシステムにはスケーリング、スループット、並行性、レイテンシ形態があり、どのNoSQLエンジンに対しても優れています。以下がいくつかのデータです。留意しておいていただきたいのは、1.0ミリ秒程度のレイテンシは、オープンソース、クライドベースどちらの場合でも、ほとんどのKey-Valueエンジンよりも優れていると考えられています。そして、（ベーシックSQLエンジンであると思われている）MySQLでこれを実現しています。以下が、私たちが使用している実際のスキーマです。クエリでの条件として使われていないフィールドは、単一のBLOBフィールドに入れられます（site_dataテキストフィールド）。これには、sub-objテーブルやオブジェクトテーブル自体のあらゆるフィールドも含まれます。また、私たちはシリアルキーを使わずにクライアントで生成されたGUID値であるvarchar(50)を使っていることに注目してください。これについては次のセクションで詳しく説明します。以下は私たちが使っているクエリで、ハイスループットと低いレイテンシを持っています。これは、まずルートテーブル上でユニークインデックスによってクエリを実行します。このクエリは1つの結果だけを返します。そして、プライマリキーでサイトを探します。そして再度、1つのレコードを探します。このネストされたクエリシンタックスは両方のSQLクエリを実行するために、データベースを一度だけ往復することを保証します。上記にあるように、高トラフィック・高更新レートの条件下において、平均1ミリ秒以下で安定したパフォーマンスを発揮しています。更新は、トランザクションを使用しなくてもおよそトランザクション的に動作します。これは、1つのinsertステートメントにサイト全てを入力していて、ルートが入力されるまでクエリに登場しないからです。ですから、最初にサイトを入力して、次にルートを入力すれば、サイトテーブル内にオーファンデータがあるエッジケースであったとしても整合性が保たれることになります。上記の例（そしてWixでの他のケース）から得られた経験を利用して、NoSQLエンジンとしてMySQLを使用するためのガイドラインのリストを簡単に作成しました。NoSQLエンジンとしてMySQLを使用するときに覚えておいてほしいのは、データベースのロックや複雑なクエリの使用を避けるということです。読み込みに最適化なスキーマを設定する際は、以下の追加のガイドラインに沿ってください。データをクエリする時は以下を意識してください。ライブマイグレーションや実用的トランザクションについての詳しい説明は、別のブログで紹介する予定です。この記事で覚えておいていただきたい最も重要なことは、別の考え方もできるということです。NoSQLエンジンとしてMySQLを使うことは素晴らしいことですが、これは本来デザインされた使用方法ではありません。ここで実演したように、この例はあくまでもKey-Valueアクセスのために構築された専用のNoSQLエンジンの代わりにMySQLを使うということです。Wixでは、Key-Valueケース（その他にも共通）の選択の1つとしてMySQLエンジンを挙げています。なぜなら、使いやすく操作が簡単であり、素晴らしいエコシステムだからです。更に、ほとんどのNoSQLエンジンに勝るとも劣らないレイテンシやスループット、並行性メトリクスを提供しているのです。
