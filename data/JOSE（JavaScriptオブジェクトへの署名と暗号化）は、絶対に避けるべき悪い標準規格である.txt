<p><a href="https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid" rel="nofollow" title="" class="ext-link">JOSE (Javascript Object Signing and Encryption) is a Bad Standard That Everyone Should Avoid</a> （2017-03-14） by <a href="https://github.com/paragonie-scott" rel="nofollow" title="" class="ext-link">Scott Arciszewski</a></p><p>注：　本稿は元はJSON Web Tokens（JWT）について書いたものですが、JWTはJavascript Object Signing and Encryption（JOSE）のサブセットであるため、以下の批評はどちらかというとJOSE全体に焦点を当てています。</p><p>もし既にJavascript Object Signing and Encryption（JOSE）を実装することを決めているなら、それがJSON Web Tokens、JSON Web Encryption（JWE）、JSON Web Signatures（JWS）のいずれであっても、その決断に疑問を持つべきです。間違いを犯そうとしている可能性があります。</p><p>この投稿に書いたことはすべて、RFC 7519、RFC 7515、そしてRFC 7516に則っています。将来、新規のRFCでは以下に挙げるような欠陥はなくなっている可能性はあります。</p><p>暗号化の基本的な用語と概念について知る必要がある場合は、<a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded" rel="nofollow" title="" class="ext-link">先にこの記事を読んでください</a>。記事全体を通して、詳細を補足し、本文を簡潔にするため、適宜外部リンクを張っています。</p><p>JOSE標準規格群には複数の問題があります。それは特定の実装に限定された欠陥ではなく、現実に多数のライブラリがこの欠損を抱えた標準規格の上で動いています。</p><p>多くの開発者たちが、セッションのサーバサイド保存を避けるためにJWTを用いようとします。これが<a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" rel="nofollow" title="" class="ext-link">ほぼ例外なく大きな間違い</a>であり、開発者に、<a href="http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/" rel="nofollow" title="" class="ext-link">注意深いエンジニアリングではなく、小賢しい言い訳とその場しのぎの対策</a>をさせる原因になります。</p><p>上記でリンクした2つの記事は、それが悪手である理由を簡潔に説明していますので、システムアーキテクチャの問題についてここで詳細は述べません。それよりも、より切迫した問題があります。<strong>標準規格そのものが不良品であり、セキュアでない状態を誘導してしまうのです。</strong></p><p>JSON Web Signatures （JWS）は<a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded#mac" rel="nofollow" title="" class="ext-link">メッセージ認証</a>や<a href="https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded#digital-signatures" rel="nofollow" title="" class="ext-link">デジタル署名</a>を提供する標準規格です。</p><p>一般的に言えば、暗号化プロトコルにデジタル署名やメッセージ認証が含まれている場合、攻撃者が無作為のメッセージの偽造に低コストで成功すると、プロトコルが完全に壊れていると考えられます。</p><p><a href="https://tools.ietf.org/html/rfc7515#section-4.1.1" rel="nofollow" title="" class="ext-link">RFC 7515、 セクション 4.1.1</a>の引用：</p><p>以前これが、<a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/" rel="nofollow" title="" class="ext-link">ほとんどのJWTライブラリにおいて重大な脆弱性という形で</a>、JWSユーザに危害を与えたのを見てきました。</p><p>標準準拠のJWSライブラリを攻撃し、トークン偽造を達成するには2つの方法がありました。</p><p>これは単なる実装のバグではなく、欠陥を持った標準規格の結果です。セキュリティのためにそのような標準規格を信頼すべきではありません。標準規格を忠実に守ると、ヘッダを処理し、”解釈”<strong>しなければならない</strong>ことになります。攻撃者が書き込んだヘッダを破棄することさえ、標準によって明示的に禁止されているのです。</p><p>JSONとJOSE RFCで何度も繰り返されるフレーズですが、その正式な定義は示されていません。</p><p>現在、ライブラリの多くは”ホワイトリストに照らして<code>alg</code>ヘッダを承認”することを、”処理済みである”という条件を満たしたと解釈します。<a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/" rel="nofollow" title="" class="ext-link"><code>alg</code>ヘッダの変更によって起きる以前のトークン偽造の脆弱性</a>のことを考慮すると、それが常に当てはまるようには見えません。</p><p>実装のセキュリティを高めるためにセキュリティプロトコルの曖昧さを活用した開発者を賞賛したくもなりますが、それで標準規格を修正できるわけではありません。</p><p>暗号化には、<a href="https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly" rel="nofollow" title="" class="ext-link">実行エラーの起こる余地</a>がたくさん残っています。特に<a href="https://paragonie.com/blog/2016/12/everything-you-know-about-public-key-encryption-in-php-is-wrong" rel="nofollow" title="" class="ext-link">非対称（いわゆる公開鍵）の暗号化</a>が関わる場合はその可能性が高いです。</p><p>JWEの認める暗号化アルゴリズムは<a href="https://tools.ietf.org/html/rfc7518#page-2" rel="nofollow" title="" class="ext-link">RFC 7518</a>の2つのセクションに記載されています。</p><p>鍵暗号の選択肢について少し考えましょう。メッセージ暗号については考えなくても大丈夫です（GCMの実装が確実で、適切なハードウェアサポートがあるとすれば）。</p><p>暗号化技術をよく知らない人は、鍵暗号の選択とは、弾倉の6室中5室に弾が装填された銃を足に向けて、弾が当たらないと期待するようなものだと思ってください。どれを選んだとしても、多かれ少なかれセキュリティの問題はあります。</p><p>PKCS #1v1.5パディング付きRSAは、パディングオラクルと呼ばれる一種の選択暗号文攻撃に対して脆弱です。RSA攻撃についての議論が<a href="https://paragonie.com/blog/2016/12/everything-you-know-about-public-key-encryption-in-php-is-wrong" rel="nofollow" title="" class="ext-link">ここ</a>にあります。</p><p>OAEPパディング付きRSAは、おそらくセキュアです。<a href="https://eprint.iacr.org/2000/060.pdf" rel="nofollow" title="" class="ext-link">OAEPのセキュリティ証明は偽</a>ですが、RSA自体がセキュアだと仮定すれば、他の点ではセキュアです。しかし、RSAの長期的なセキュリティには深刻な疑念があります。</p><p>ほとんどの暗号専門家は、RSAから移行するように勧めています。</p><p>JWTでは、NIST曲線（ワイエルシュトラス曲線。攻撃者が秘密鍵を盗む<a href="https://blogs.adobe.com/security/2017/03/critical-vulnerability-uncovered-in-json-encryption.html" rel="nofollow" title="" class="ext-link">invalid-curve攻撃</a>の危険がある）の1つについて楕円曲線ディフィー・ヘルマン（ECDH)鍵共有のみが許可されます。</p><p><a href="https://tools.ietf.org/html/rfc7748" rel="nofollow" title="" class="ext-link">セキュリティのための楕円曲線の1つ</a>を使ってinvalid curve攻撃の回避を試みるとしたら、それはすでにJWT標準に準拠していません。</p><p>疑わしい公開鍵暗号モードのリストは、共有鍵暗号モードを使用しないと完成できないので、JOSE標準規格では、AES-GCM鍵を交換するためにAES-GCMの使用が許可されます。</p><p>暗号化アルゴリズムの選択は、開発者ではなく、暗号の専門家によって行われるべきです。開発者に任せておくとプロトコルとアルゴリズムのミスマッチを招き、間違いなく、<a href="http://bristolcrypto.blogspot.com/2015/01/real-world-crypto-2015-error-prone.html" rel="nofollow" title="" class="ext-link">エラーを起こしやすい暗号化設計</a>ができあがるでしょう。</p><p>余談：このセクションで触れている<a href="https://blogs.adobe.com/security/2017/03/critical-vulnerability-uncovered-in-json-encryption.html" rel="nofollow" title="" class="ext-link">JOSEでの最近のinvalid curve攻撃</a>は、まだお読みになっていないなら、一読の価値があります。</p><p>JOSEより優れた標準規格では、選ぶべきパラメータは2つだけです。</p><p>可能なら、公開鍵の暗号化は避けるべきです。</p><p>よりよい標準規格に最も近いのは、<a href="https://github.com/fernet/spec" rel="nofollow" title="" class="ext-link">Fernet</a>です。</p><p>以上をまとめると、</p><p>前述したように、ほとんどのJWT適用例では、<a href="https://github.com/fernet/spec" rel="nofollow" title="" class="ext-link">Fernet</a>が1つの選択肢になります。次のように言われています。</p><p>私たちは既に、JSON Webトークンの必要性を完全になくす、<a href="https://paragonie.com/blog/2017/02/split-tokens-token-based-authentication-protocols-without-side-channels" rel="nofollow" title="" class="ext-link">トークンベースのセキュアな認証</a>と<a href="https://paragonie.com/blog/2016/02/one-login-rule-them-all-seamless-and-secure-cross-domain-authentication" rel="nofollow" title="" class="ext-link">クロスドメインユーザ認証</a>に関する資料を公表しています。</p><p>確かに、私たちは2015年に<a href="https://paragonie.com/audit/UGCwpFmaIkQ085l7" rel="nofollow" title="" class="ext-link">JWTライブラリの無料監査</a>を行い、合格としました（ただし、例えばPHPECCの不使用などの、いくつかの警告付きでした）。JOSEがよくないからといって、単純にすべての実装やライブラリがセキュアでないとは言えません。</p><p>しかし、監査が行われた後にライブラリに次の変更が加えられたことには留意すべきです。</p><p>この種の危険な決定は、脆弱性が起こりうる可能性を高めるものでしかありません。なぜなら、この標準規格はエラーを呼ぶ暗号設計であり、実装者とユーザにかかる負担が大きすぎるからです。より良い標準規格が必要なのです。</p>
