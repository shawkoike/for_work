<p><a href="http://blog.siftscience.com/blog/2015/best-practices-for-building-large-react-applications" rel="nofollow" title="" class="ext-link">Best practices for building large React applications</a> （2015-05-07） by <a href="https://github.com/lopatin" rel="nofollow" title="" class="ext-link">Alex Lopatin</a></p><p>Sift Scienceで製作にReactを使い始めてからほぼ1年になりました。その間、Backbone+Reactという<del>フランケンシュタインのような</del>複合アプリケーションを、Reactコンポーネントからなる、かなり大きな1つの階層に育て上げました。この記事では、UI不和を最小限にしながら、コードベースをスケーリングするために役立った技法とベストプラクティスを紹介します。また、一般的なコンポーネントのデザインパターンについて、いくつか説明します。</p><p>この記事が皆さんの時間の節約と精神衛生の維持に役立ち、UIが複雑になってもReactコードベースの保全性を維持する（破綻するのではなく）ための新しいツールを提供できれば幸いです。</p><p>Reactの本質は、DOMの更新というタスクを命令的なものから宣言的なものに変えるということです。他のタイプの命令的な動作をプロパティと状態の関数として宣言することもまた、有益かもしれません。次に、例を示します。</p><p><img class="thumb-image loaded" data-src="http://static1.squarespace.com/static/54056f5de4b0f888a3536667/t/554b19a5e4b08492a20a76d4/1430985130143/" data-image="http://static1.squarespace.com/static/54056f5de4b0f888a3536667/t/554b19a5e4b08492a20a76d4/1430985130143/" data-image-dimensions="1026x674" data-image-focal-point="0.5,0.5" data-load="false" data-image-id="554b19a5e4b08492a20a76d4" data-type="image" src="http://static1.squarespace.com/static/54056f5de4b0f888a3536667/t/554b19a5e4b08492a20a76d4/1430985130143/?format=750w" data-image-resolution="750w" id="yui_3_17_2_1_1432783701271_668"></p><p>連絡先の一覧を表示・編集するインタフェースを構築するとしましょう。右のスクリーンショットでは、Contact #3（連絡先3）の変更内容は保存されていません。ユーザが別の連絡先に移動したら、自動的に変更内容を保存するようなフォームにしたいと思います。ここでは、Contact #2に移動するとします。</p><p>この機能を実装する合理的な方法の1つは、メインコンポーネントに次のようなメソッドを設けることです。</p><p>しかし、このセットアップは、破綻しやすいのです。サイドバーの項目Contact #2と下の&lt;prev contact（前の連絡先）の両方のクリックハンドラが確実に、<em>currentContactId</em>の状態を直接設定せずに<em>navigateToContact</em>メソッドを使うようにしなければなりません。</p><p>これを、<em>componentDidUpdate</em>を使って宣言的に実装すると、次のようになります。</p><p><strong>このバージョンでは、新しい連絡先に移動したときに前の連絡先を保存する機能は、コンポーネントのライフサイクルに埋め込まれます。</strong>すべてのイベントハンドラが、特別なメソッドの使用方法を知る必要なく、<em>this.setState({currentContactId: ‘contact2’}</em>)を直接呼び出すことができるので、ほとんど破綻することはなくなります。</p><p>この例は、もちろん、極端に簡素化されています。この場合は、両方のイベントハンドラで<em>navigateToContact</em>を呼び出しても、それほど悪くないように思われます。しかし、コンポーネントが複雑になってくると、問題が顕著になります。プロパティと状態の変化に基づいて呼び出される宣言アクションを使用すると、コンポーネントがより自立的で信頼性の高いものになります。この技法は、特に、多くの状態を扱うコンポーネントで役に立ち、リファクタリング作業が好ましいものになりました。</p><p>堅牢で保守性が高く、組み立てやすいコンポーネントのライブラリを構築すると、コントローラコンポーネントの構築が容易になります。<a href="http://facebook.github.io/react/docs/thinking-in-react.html#step-1-break-the-ui-into-a-component-hierarchy" rel="nofollow" title="" class="ext-link">Thinking in React</a>チュートリアルでは、コンポーネントをどのようなものにするか決めるための基準として、単一責務の原則を使用するよう推奨されています。</p><p>私たちのコードベースでの一例は、<a href="http://i.imgur.com/3BZCiIu.gif" rel="nofollow" title="" class="ext-link">Slidable component</a>で、子をスライドして表示したり隠したりするだけのものです。単一責務の原則に走り過ぎているように見えるかもしれませんが、内容をスライドさせるのが実に巧みなので、実際に時間を大幅に節約できます。どの方向からも要素をスライドさせることができ、また、どのエッジもアンカーとして使用できます。親が必要とするなら、デフォルトのCSSの代わりにJS transitionを使用することもできます。また、各種ブラウザ間で互換性があり、ユニットテストされています（このため、単に<em>CSSTransitionGroup</em>を使うよりも、この実装の方がよいのです）。この構成要素があれば、<em>Accordion</em>や、うなり声のような私たちの通知システム<em>NotificationCenter</em>のようなコンポーネントの内容をスライドさせることについて詳細を憂慮する必要が全くなくなります。</p><p>コンポーネントを、もっと再利用しやすいように分割すれば、チームの生産性が向上し、アプリケーションの外観と操作の一貫性が向上し、最先端ではないチームの人々がUI作品の作成に参入するための壁が低くなります。次のセクションには、組み立てやすさを念頭においてコンポーネントを構築するためのヒントがあります。</p><p><a href="https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-components-should-have-state" rel="nofollow" title="" class="ext-link">ここ</a>にReact docsで読んでおくべきセクションがあります。ここでは、コンポーネントをstateless（状態を持たない）コンポーネントにすることを推奨しています。親子のコンポーネントのstateが重複または同期している場合、子コンポーネントから完全に状態を外します。親コンポーネントが状態を管理し、子コンポーネントにプロパティとして渡すようにします。</p><p>HTML <code>&lt;select&gt;</code>タグのカスタム実装である<em>Select </em>コンポーネントを考えてみましょう。”現在選択されている選択肢”の状態はどこにあるべきでしょうか。<em>Select</em> コンポーネントは、モデル内の特定の値など、外部データを表示します。<em>Select</em> コンポーネント内に<em>selectedOption</em> という状態を作成する場合、ユーザが新しいオプションを選択した時に、モデルと<em>selectedOption</em> 状態の両方をアップデートしなければなりません。<em>Select </em>コンポーネントに状態を管理させるのではなく、親から<em>selectedOption</em> というプロパティを受け取れるようにすることで、この様な状態の重複を避けることができます。</p><p>コンポーネントが、外部データをモデル内の特定の値として表しているため、この状態がモデルに属することは直観的に理解できます。<em>Select</em> コンポーネントは、(ほとんど)statelessなUIコントロールで、モデルはバックエンドです。<em>Select</em> が「ほとんどstateless」といえる理由は、メニューが開閉しているかという状態を含んでいるからです。この状態はUIの詳細で親コンポーネントが関心を持つ情報ではないために、<em>Select</em> に直接書かれています。次のセクションでは、単一責務の原則に反しないため、<em>isCurrentlyExpanded </em>状態をどの様に低レベルコンポーネントにデリゲートするか説明します。</p><p>上位のstateful（状態を持つ）コンポーネントと下位のstatelessコンポーネントの組み合わせを使っています。statelessコンポーネントはUIレンダリングの詳細やスタイル、マークアップを再利用させてくれます。statefulラッパーコンポーネントはインタラクションロジックを再利用させてくれます。このパターンは、コンポーネントを組み立てやすくするための、唯一かつ重要なルールとなります。<em>Select</em> コンポーネントをどの様に構築していくのか、tooltip（<em>TooltipToggle</em>)コンポーネントでもあるUIコードをどの様に再利用するのか、下記に内訳があります。</p><p>Select コンポーネントはHTML タグの<code>&lt;select&gt;</code>に類似しています。選択可能な選択肢リストや選択された選択肢などのプロパティを受け取りますが、状態は管理しません。ドロップダウンメニューの開閉状態を一切表示しません。Select コンポーネントはドロップダウンメニューの開閉をするDropdownToggleで構成されています。</p><p>このコンポーネントは、トリガー要素と、トリガーがクリックされた時にドロップダウンの<em>HoverCard</em>に表示される子要素を含んでいます。<em>Select</em> は下方向きの矢印のアイコンのボタンをトリガとして<em>DropdownToggle</em>に渡します。さらに、選択可能な選択肢のリストを子コンポーネントとして<em>DropdownToggle</em>に渡します。</p><p><em>TooltipToggle</em> は<em>DropdownToggle</em>に性質が似ていて、<em>トリガー</em>コンポーネントを受け入れ、<em>HoverCard</em>内に子コンポーネントを表示するか決めるために状態を管理します。そのため、違う点は<em>HoverCard</em>の表示の決定方法とインタラクションロジックです。<em>DropdownToggle</em>はトリガ要素のクリックを監視し、<em>TooltipToggle</em>はマウスのホバーイベントを監視します。さらに、<em>TooltipToggle</em>はESCキーを押しても閉じることはできませんが、<em>DropdownToggle</em>は閉じることができます。</p><p><em>HoverCard</em>が主役です。UIマークアップやスタイル、tooltipやドロップダウンメニューに関連するイベントハンドラの動力となっています。状態を管理せず、開閉の状態も把握しません。<em>HoverCard</em>、存在すれば表示されますし、アンマウントされることで閉じられます。</p><p><em>HoverCard</em>はプロパティとしてアンカー要素を受け取り、フロートしている<em>HoverCard</em>はそのアンカーの周辺位置に固定されます。<em>HoverCard</em>は様々な外観と操作性、つまり”フレーバー”を持っています。フレーバーの1つは”tooltip”で、背景色が黒で文字色が白になっています。別のフレーバーは<em>Select </em>コンポーネントで使われる”ドロップダウン”で、文字色が白でボックスが影付きになっています。</p><p><em>HoverCard </em>は様々なプロパティを利用してカスタマイズが可能です。例えば三角形のキャレットを表示するかどうか（<em>TooltipToggle</em>において利用可能）や、アンカーのどの位置に<em>HoverCard</em>を表示するか（<em>TooltipToggleuses</em>では上部で、<em>DropdownToggle</em>では下部に表示）などです。また、<em>HoverCard</em>は<em>HoverCard</em>の外部で発生するある種のイベント（クリックなど）やESCキーが押されたことを監視することもできます。イベントが発生すると、<em>HoverCard</em>は <a href="http://facebook.github.io/react/docs/tutorial.html#callbacks-as-props" rel="nofollow" title="" class="ext-link">プロパティのコールバック</a>を経て親コンポーネントに通知し、それによって親コンポーネントは<em>HoverCard</em>を閉じるかどうかを決定します。また、<em>HoverCard</em> のもうひとつの役割として、ウィンドウの外側にあふれた部分がないかどうかを検知し、あふれてしまっている場合は位置を修正することができます（プロパティを使用して、この機能を無効にすることも可能です）。</p><p>全てのUIの実装コードを<em>HoverCard</em> に抽出すると、<em>DropdownToggle</em>や<em>TooltipToggle</em>などの上位のコンポーネントを状態管理やインタラクションロジックのみに適用させることができるようになります。UI上をマウスでホバーした際に、共通で位置やスタイルを指定するDOMの基本的なコードを実装する必要はありません。</p><p>これはインタラクションロジックからUIの詳細部分を切り離したひとつの例にすぎません。全てのコンポーネントでこの原則に従い、新しい状態になっている部分を注意深く判断することで、コードを再利用する可能性が広がります。</p><p><a href="https://facebook.github.io/flux/docs/overview.html#content" rel="nofollow" title="" class="ext-link">Flux</a>は、アプリケーションの保持する状態のうち、論理上ある1つの特定のコンポーネントに属さなかったり、アンマウントが起こった後にも残存したりするものを保持するのに優れています。一般的な注意点として、this.stateは絶対に使わず、全てをFluxの記憶領域に格納するべきだと言われていますが、これは必ずしも正しくはありません。何かをアンマウントした後に無関係になるコンポーネントの状態に対しては、this.stateを自由に使うべきです。例として<em>DropdownToggle</em>の<em>isCurrentlyOpen</em>の状態などが挙げられます。</p><p>また、Fluxは非常に記述が長くなるので、サーバに残って消えないデータ状態に対しては不便です。近頃ではグローバルBackboneモデルのキャッシュを使って、データのフェッチやセーブを行っていますが、<a href="https://facebook.github.io/react/blog/2015/02/20/introducing-relay-and-graphql.html" rel="nofollow" title="" class="ext-link">Relay</a>のようなシステムも実験的にREST APIに用いています（このトピックには更に注目してください）。</p><p>他の全ての状態に対し、徐々にコードベースにFluxを導入することが可能です。リライトの必要がなく、使いたい部分にだけ適用できるので便利です。また、ユニットテストやスケーリングが簡単で、コアモジュールの循環参照を解決するなどの優れた利点もあります。そして、汚い<a href="https://jsfiddle.net/69z2wepo/7764/" rel="nofollow" title="" class="ext-link">シングルトンのコンポーネント</a>も取り除かれています。</p><p>この投稿で皆さんにご紹介したい、スケーリングで役立つ最後のヒントは、必ずReactコンポーネントを再利用の最小単位にするということです。ReactコンポーネントのひとつひとつはCSSファイルに紐付いています。コンポーネントの中には、JSの相互作用や機能性すら持ち合わせていないものもあります。これらには単純にマークアップやスタイルがまとめられています。</p><p>Bootstrapを使って、クラス名でグローバルスタイルを指定することは避けてきました。Bootstrapを使うことは全く問題ありませんが、<a href="http://getbootstrap.com/components/" rel="nofollow" title="" class="ext-link">Bootstrapのコンポーネント</a>をReactコンポーネントにラップしてしまえば長期的に見て時間の節約になります。例えば、マークアップをカプセル化し、アイコン名をプロパティとして許容するIcon Reactコンポーネントを使う方が、マークアップとクラス名を正確に覚えてアイコンを使うよりも便利で、更にリファクタリングも簡単です。また、後からコンポーネントに機能を加えることも容易です。</p><p>アンカーや見出しなど、いくつかの要素のグローバルスタイルと多くのグローバルSCSS変数を定義しましたが、グローバルCSSクラスについてはちゃんと定義していません。UIが主にReactコンポーネントを通じて再利用されるよう注意を払うと、チームの生産性が向上します。なぜなら、コードの一貫性が増し、予測が可能になるからです。</p><p>以上が今回の記事でお伝えしたかった内容となります。エンジニアリングチームの規模とアプリケーションの複雑さに合致した堅牢なReactアーキテクチャを構築するための原則をご紹介しました。この記事に関する皆さんのご意見や経験談を気軽にコメント欄に投稿してください。</p><p>また、更に詳細が気になる方は「<a href="http://aeflash.com/2015-02/react-tips-and-best-practices.html" rel="nofollow" title="" class="ext-link">React Tips and Best Practices</a>」のページをご覧ください。</p>
