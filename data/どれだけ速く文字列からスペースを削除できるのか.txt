<p><a href="http://lemire.me/blog/2017/01/20/how-quickly-can-you-remove-spaces-from-a-string/" rel="nofollow" title="" class="ext-link">How quickly can you remove spaces from a string?</a> (2017-01-20) by <a href="http://lemire.me/blog/about-me/" rel="nofollow" title="" class="ext-link">Daniel Lemire</a></p><p>時によってプログラマは文字列から不要な文字を取り除きたい場合があります。例えば、テキストの一部からすべての行の末尾文字を削除したいとします。</p><p>その時、全スペース(‘ ‘)や改行コード(‘\n’および‘\r’)を削除する問題を考えてみましょう。</p><p>効率的に実行するにはどのような方法がいいのでしょうか。</p><p>上記のコードはUTF-8でエンコードされた文字列で動作します。UTF-8がASCIIのスーパーセットであることを考えるとインターネット上で見る文字列の大半はUTF-8になります。</p><p>このコードは簡単で高速なはずです。このコードを様々なコンパイラが処理するところはとても面白いです。最終的に処理された1バイトあたりの命令の数が少なくなります。</p><p>しかし、プロセッサは64ビットアーキテクチャを持っていますが、バイト単位で処理しています。 64ビットワード単位でデータを処理できるのでしょうか。</p><p>ワードにゼロバイトが含まれている場合は必ずtrueの値を返す、ちょっと神秘的なビット遊びの表現があります。</p><p>機能することだけが分かっていれば十分です。このツールを使用すれば、さらに処理の速い関数をプログラミングできます。</p><p>8文字単位のブロックに空白がなければ、処理は速くなります。<br>
この時何が起きているかというと、ある程度コストのかかるチェックに対し、スーパースカラプロセッサで高速に処理ができるため、基本的には64ビットのワードを1つ1つコピーするだけになります。</p><p>結局、64ビットのワードを使用しなくても良いのです。</p><p>上記はRobin Leffmannによって提案された、とても巧妙な方法です。<br>
分岐誤予測ミスによるペナルティを回避できるため、非常に速いアプローチとなります。</p><p>さらに改善はできるのでしょうか。もちろんできます。Pentium 4（2001年）以降128ビット(SIMD)命令が存在します。</p><p>Intelの(醜い？) intrinsicを使って、この128バイトのSSEによる素早い命令で同じ問題を解決してみましょう。</p><p>IntelプロセッサのSIMDの命令に馴染みがあるならば、このコードは極めて理解しやすいでしょう。私はこのコードを最適化する努力は何もしていません。ですから、より速く実行させられる可能性が高いのです。私のオリジナルのSIMDコードには分岐がありましたが、Nathan Kurzはコードを単純化して分岐を削除することが一番良いと気付きました。</p><p>では、どれだけ速く実行するか見てみましょう。</p><p>ほんの少しの空白ががあるテキスト入力に関して、新しいIntelプロセッサ（Skylake）を使ってベンチマークを設計しました。</p><p>つまり、ベクトル化されたコードは標準コードの14倍近く速いことになります。これはなかなかの結果でしょう。</p><p>それでも、いくつかのスペースを削除するには、<code>memcpy</code>でデータをコピーするよりも5倍の時間がかかります。従って、さらに速くすることが可能かもしれません。どこまで速められるでしょうか。</p><p>ヒント：私たちのIntelプロセッサは256ビットのレジスタを（AVX/AVX2の命令によって）実際に処理することができます。つまり、2倍の速さを実現することが可能ということです。悲しいことに、x64プロセッサ上における256ビットのSIMDの命令は、2つの128ビットの独立型のlane上で動作し、アルゴリズムの設計をより一層大変にします。</p><p>LeffmannのアプローチはSIMDの命令と同じほど速くはありませんが、より一般的で可搬性のあるものです。そしてさらに、標準コードの3倍もの速さです。</p><p><a href="https://github.com/lemire/despacer" rel="nofollow" title="" class="ext-link">私のCコードはこちらのリンクから入手できます</a></p><p><strong>関連した投稿：</strong><br>
* <a href="http://lemire.me/blog/2016/10/05/variable-length-strings-can-be-expensive/" rel="nofollow" title="" class="ext-link">Variable-length strings can be expensive（可変長の文字列は高くつくことがある）</a><br>
* <a href="http://lemire.me/blog/2016/10/14/intel-will-add-deep-learning-instructions-to-its-processors/" rel="nofollow" title="" class="ext-link">Intel will add deep-learning instructions to its processors<br>
（Intelはプロセッサに深層学習の命令を追加するだろう）</a><br>
* <a href="http://lemire.me/blog/2016/06/15/how-fast-is-tabulation-based-hashing-or-the-downsides-of-zobrist/" rel="nofollow" title="" class="ext-link">How fast is tabulation-based hashing? The downsides of…<br>
（集計ベースのハッシングはどのくらい速いのか。ｚobristの欠点）</a></p>
