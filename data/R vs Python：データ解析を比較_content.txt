R vs Python: head to head data analysis （2015-10-07） by Vik Paruchuri主観的な観点からPythonとRの比較した記事は山ほどあります。それらに私たちの意見を追加する形でこの記事を書きますが、今回はこの2つの言語をより客観的な目線で見ていきたいと思います。PythonとRを比較をしていき、同じ結果を引き出すためにはそれぞれどんなコードが必要なのかを提示していきます。こうすることで、推測ではなく、それぞれの言語の強みと弱みの両者をしっかりと理解できます。Dataquestでは、PythonとRの両方の言語のレッスンを行っていますが、データサイエンスのツールキットの中では両者ともそれぞれに適所があります。この記事では、NBA選手の2013/2014年シーズンの活躍を分析したデータセットを解析していきます。ファイルはここからダウンロードしてください。解析はまずPythonとRのコードを示してから、その後に2つの異なるアプローチを解説し議論していきます。つまらない説明はこれくらいにして、データ解析の比較を早速スタートさせていきましょう！RPythonこのコードを実行すると、NBA選手の2013/2014年シーズンのデータの入ったcsvファイルnba_2013.csvがそれぞれの言語で変数nbaに読み込まれます。1つだけ違うのは、Pythonではデータフレームにアクセスできるようにするためpandasライブラリをインポートしなければいけないことです。DataFrameはRとPythonの両者に使える2次元の配列（マトリックス）で、それぞれのカラムは別のデータ型にすることができます。最終段階では、csvファイルは両者の言語によってデータフレームに読み込まれます。R↓Python↓このコードで選手の数とそれぞれのカラムの数が出力されます。上記によると481個の行、つまり選手の数と、選手のデータを含んだ31個のカラムがあるということになります。R↓Python↓この2つはほぼ同じですね。2つとも最初の行を出力していて、構文がよく似ています。Pythonはよりオブジェクト指向で、headはデータフレームオブジェクトのメソッドです。Rでは単独のhead関数になります。これは、RとPythonで解析をするときに初めに直面する典型的なテーマです。Pythonはよりオブジェクト指向で、Rはより関数的なのです。それぞれの統計量から平均値を割り出してみましょう。ご覧のように、カラムにはfg（フィールドゴール成功数）やast（アシスト数）などの名前がついています。これらは選手たちのシーズンの統計量です。統計量のより詳細なデータはこちらをご覧ください。R↓Python↓今回はアプローチに大きな違いがいくつか出ました。両者ともデータフレームのカラムに関数を適用させました。Pythonでは、データフレーム上のmeanメソッドがデフォルトで各カラムの平均を割り出してくれます。Rでは、文字列の値の平均はNA（値なし）という結果になっています。しかし、平均を求める時にはNAの値は無視しなければいけません（na.rm=TRUEをmean関数に渡す必要があります）。そうしないと、x3p.のようなカラムの平均は結局、NAになってしまいます。このカラムはスリーポイントシュート率を表しています。スリーポイントを一度も決めてない選手の欄には数字が入っていません。Rでmean関数を試してみると、NAが返されます。なので、平均を取るときはNA値を無視するna.rm=TRUEを記述しましょう。Pythonでのmean()メソッドは、デフォルトでNA値を無視するようになっています。データセットを調べる一般的な方法は、それぞれのカラムが他のカラムとどのような相互関係にあるかを調べることです。
astとfg、trbのカラムを比べてみましょう。R↓Python比べるとかなり似た図になっています。これは、Rのデータサイエンスのエコシステムが多くのより小さなパッケージ（GGallyはggplot2のヘルパーパッケージで、Rでプロットする際に最も使われるパッケージ）やより視覚的なパッケージを持っていることを一般的に示しています。Pythonでは、matplotlibが一番重要なプロットのパッケージで、seabornはmatplotlibよりも広く使われるレイヤです。Pythonの可視化では、何かやるときの主な方法は通常1つですが、Rでは異なる方法をサポートするたくさんのパッケージがあります（例えば、対になるプロットを作るのに少なくとも6つくらいのパッケージがあります）。このようなデータを探すのにいい方法は、クラスタプロットを生成することです。これで、どの選手が一番類似しているかが分かります。RPython正しくクラスタリングをさせるには、数字ではないカラム、もしくは値のない（NA、Nanなど）カラムは排除します。Rでは、それぞれのカラムに関数を適用し、値がない、数字ではないものがあれば排除するようにします。そして、k-means法を実行するのにclusterパッケージを使い、データ上で5個のクラスタを割り出します。
set.seedを使ってランダムなシード値を設定し、結果を求められるようにします。Pythonでは、メインのPython機械学習パッケージのscikit-learnを使って、モデルをクラスタリングするk-means法に適合させ、クラスタのラベルを取得します。Rで使うデータを準備するためには、非常に類似したメソッドを実行します。数字ではないカラムと値のないカラムを排除するためには、get_numeric_dataやdropnaのメソッドを使います。では、選手をクラスタごとにプロットしてパターンを見つけましょう。これをやるには、まずPCA（主成分分析）をして2次元データを作成し、プロットします。そして、クラスタの関係に従ってそれぞれの印に影をつけましょう。R↓
訳：これらの2つの成分はばらつきを100%説明しているPython↓今回のデータから散布図を作成して、クラスタに従ってデータのアイコンに影をつけるか、もしくは変更します。Rでは、クラスタのライブラリの一部であるclusplot関数が使われています。Rのビルトインのpccomp関数を用いて、PCAを実行します。Pythonではscikit-learnライブラリのPCAクラスを使っていて、matplotlibを用いて図を作成しています。教師ありの機械学習を行いたければ、訓練データセットとテストデータセットに分割して過剰適合しないようにするのがいいでしょう。RPythonRには、floorやsample、set.seedなど、データ解析にフォーカスしたビルトイン関数がより多くあるのがお分かりでしょうか。一方で、Pythonではパッケージを用いています（math.floorやrandom.sample、random.seed）。Pythonでは、最新バージョンのpandasにsampleメソッドがあります。これは、ソースのデータフレームからある割合の数の行をサンプルとして抽出して返します。これでコードはより簡単になります。Rでは、サンプリングを単純にするパッケージがありますが、ビルトインのsample関数を使ったほうが簡単です。どちらにしろ、ランダムなシード値を設定して、結果を再現可能にします。次は、選手ごとのフィールドゴールからアシストの数を予測してみます。RPythonScikit-learnは、予測を適合させて生成することのできる単回帰モデルを持っています。Rではビルトインのlm関数とpredict関数を用います。predictは、渡された適合モデルの種類によって違う振る舞いをします。つまり、適合したいさまざまなモデルに使えます。R↓Python↓R Square（決定係数）のように、適合に関して要約統計量を出したいのであれば、RよりPythonのほうがやることが少し多くなります。Rではビルトインのsummary関数を使うことで、モデル上の情報を引き出せます。Pythonでは、Pythonで使われる多くの統計メソッドを実行可能にしてくれるstatsmodelsパッケージを使う必要があります。どちらもほぼ同じ結果が得られますが、大抵の場合Pythonで統計分析をするほうが少しだけ複雑になり、Rに存在する統計メソッドのいくつかはPythonには存在しません。線形回帰は変数が1つの場合に効果的ですが、ここで私たちはデータに非線形があるか探ってみます。ということで、ランダムフォレストモデルを適合させます。RPython2つの大きな違いは、アルゴリズムを使うためにRではランダムフォレストのライブラリを使う必要があるということです。一方で、Pythonではscikit-learnにビルトインされています。scikit-learnはPythonのさまざまな種類の機械学習アルゴリズムと一緒に使える統合インタフェースを持っていて、通常はPythonの各アルゴリズムの主要な実装が1つあるだけです。Rでは、個々のアルゴリズムを含んだ小さなパッケージが多くあり、アクセスするのに一貫性を持たないこともあります。これによってアルゴリズムに多様性が出てきますが（多くはいくつかの実装があり、研究所から出たばかりです）、使い勝手は良くありません。では、2つのモデルが適合したところで、次は誤差を計算しましょう。MSE（平均平方誤差）を使います。R↓Python↓Pythonでは、scikit-learnライブラリには、使用できるさまざま誤差のメトリックスがあります。RではMSEを計算するより、小さないくつかのライブラリを持つ傾向があります。しかし、どちらの言語にしても手動で行うほうが断然簡単です。誤差には小さな相違がありますが、これは明らかにパラメータチューニングが原因です。でもこれは大きな問題ではありません。2013/2014シーズンのNBA選手のデータが手元にありますが、次はこのデータを補う追加のデータを取得してみましょう。時間を節約するために、ここにあるNBA決勝戦のボックススコアを１つ使うことにしましょう。RPythonPythonでは、全てのリクエストの種類に対して一貫性のあるAPIを使用することでRequestsパッケージがWebページをダウンロードするのを簡単にしてくれます。Rでも同じようにRCurlがリクエストの作成を容易にしてくれます。どちらもWebページを文字列のデータ型にダウンロードします。注釈：このステップは、次のRのステップに必要がありませんが、比較のために提示しました。Webページがダウンロードできたので、次に選手のスコアを抽出するためにこれをパースする必要があります。RPythonこのコードは、2つのリストを含んだリストを作成します。1つ目のリストは、CLEのボックススコア、2つ目のリストは、GSWのボックススコアとなります。どちらのリストにもヘッダー、選手名、そして彼らのゲームでの統計量が含まれています。ここでは、訓練データに変換することはしませんが、簡単にnbaデータフレームに落とし込める形式に変換することができます。RのコードはPythonのコードに比べて、より複雑になっています。これは、項目を選択する際の正規表現の使用において、便利な方法がないからです。よって、HTMLからチーム名を取得するために追加のパースが必要となります。またRでは、ベクトルに従って関数を適用するのに有利なforループを使っていません。代わりにlapplyを使っていますが、その行がヘッダーなのかどうかに応じて各行を取り扱う必要があるので、必要な項目のインデックスを渡し、rowsリスト全体を関数に入れ込みました。また、最新かつ広く使われているRのWebスクレイピングパッケージ、rvestを使っています。このコードで、必要なデータを抽出することが可能です。Pythonでは、最も良く使われているWebスクレイピングパッケージ、BeautifulSoupを使いました。これにより、容易にタグを通してループしたり、リストのリストを構成したりすることが可能になります。これまでRとPythonを比較して、それぞれのデータセットをどう解析するかを見てきました。ここでは深く掘り下げなかった多くのタスクがまだあります。例えば、解析結果を主張したり、他の人と共有したり、テストや本番準備を行ったり、また、より視覚化したりするなどです。これらについては追って対応していきたいと思います。そうすることで、より確実な結論を打ち出すことができるでしょう。ひとまず、ここで話した内容いついて結論を記述しておきます。lmやpredict、その他の関数を見てきましたが、Rではほとんどの処理で関数を使用しているのに対し、PythonではLinearRegressionクラスやデータフレームのsampleメソッドを使用しています。統計データの概要を見てみると、Rではsummaryというビルトイン関数を使用していますが、Pythonでは、statsmodelsというパッケージをインポートしています。Rの場合、データフレームはビルトインされていますが、Pythonの場合は、pandasパッケージからインポートしなければなりません。Pythonでは、線形回帰やランダムフォレスト、scikit-learnパッケージを使ったより多くの対応が可能です。一貫性のあるAPIが提供されており、よく管理されています。Rには、多様なパッケージがより多くあるのですが、Pythonに比べるとフラグメンテーションが起こりやすく、一貫性も劣っています（線形回帰はビルトイン、lmやrandomForestは別のパッケージである、など）。Rは、統計を目的とした言語であり、実際にそれを体現しています。Pythonのstatsmodelsや他のパッケージでは、統計メソッド向けの十分な適用を提供していますが、Rのエコシステムは、これらよりもはるかに大規模です。PythonのBeautifulSoupといった十分に管理されたライブラリやリクエスト、Webスクレイピングは、Rよりもはるかに単純です。今回、この記事で述べていないようなタスクにも同じことが言えます。例えば、データベースへの保存やWebサーバーのデプロイ、また複雑なワークフローの実行などが挙げられます。R、Pythonのどちらも相互的に刺激しあっている点があります（pandasのデータフレームはRのデータフレームの影響を受けていますし、rvestパッケージはBeatufiulSoupの影響を受けています）。そして、それぞれのエコシステムもより強力になってきています。シンタックスやアプローチ方法など、多くの類似した共通タスクが両者の言語にあるというのは、注目するに値します。Dataquestでは、元々、Pythonのレッスンだけを行っていましたが、最近はRも行っています。両者の言語は、お互いに補い合う関係だと思っています。Pythonの方が、多くの領域で強力だと感じてはいますが、Rも有効な言語です。データ調査や解析、または単独のデータ解析ツールなど、Pythonを補う言語としても使用できるかもしれません。今回の検証で証明されたように、両者の言語には、シンタックスやアプローチ方法といった共通点が多くあることが分かりました。これについては、どちらの言語においても疑う余地のない事実です。
