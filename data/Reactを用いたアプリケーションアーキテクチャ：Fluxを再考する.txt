<p><a href="http://dialelo.github.io/application-architecture-with-react-rethinking-flux.html" rel="nofollow" title="" class="ext-link">Application Architecture with React: rethinking Flux</a> （2015-7-13）By <a href="https://github.com/dialelo" rel="nofollow" title="" class="ext-link">Alejandro Gòmez</a></p><p>他のフレームワークやライブラリから<a href="http://facebook.github.io/react/" rel="nofollow" title="" class="ext-link">React</a>に乗り換える人たちは、「ReactはUIのレンダリングに関する問題しか解決しておらず、状態管理とアプリケーションアーキテクチャの選択は開発者に委ねられているのだから、どうやってアプリケーションの状態を管理したらいいのか？」 と疑問に思う傾向があります。FacebookはReactのレンダリングモデルに適している、<a href="http://facebook.github.io/flux/" rel="nofollow" title="" class="ext-link">Flux</a>と呼ばれるアーキテクチャを勧めています。</p><p>この記事では、UIレイヤとしてReactを用いてJavaScriptのアプリケーションの状態を管理する方法を探り、<a href="https://github.com/omcljs/om" rel="nofollow" title="" class="ext-link">Om</a>のような<a href="https://github.com/clojure/clojurescript" rel="nofollow" title="" class="ext-link">ClojureScript</a>ライブラリのアイデアを用いてFacebookのFluxの抽象的なフレームワークを作り変えてみたいと思います。</p><p>Fluxの核となる考えは、<a href="http://facebook.github.io/flux/docs/overview.html#structure-and-data-flow" rel="nofollow" title="" class="ext-link">データは一方通行で流れるべき</a>というものです。これによってアプリケーションの論証が簡単になり、システムコンポーネント間の依存性は明確になり、全ての状態の変更は”真のシングルソース”由来になります。</p><p><a href="http://postd.cc/wp/wp-content/uploads/2015/11/flux-simple-f8-diagram-explained-1300w.png"><img src="http://postd.cc/wp/wp-content/uploads/2015/11/flux-simple-f8-diagram-explained-1300w.png" alt="flux-simple-f8-diagram-explained-1300w" width="1300" height="708" class="alignnone size-full wp-image-5260"></a><br>
<em>画像訳：<br>
Action creatorはヘルパーメソッドで、ライブラリの中に集められます。メソッドのパラメータからアクションを作り、タイプを割り当て、Dispatcherに渡します。</em></p><p>全てのActionはコールバックを経由して全てのStoreに送られます。このコールバックはStoreがDispatcherと共に登録したものです。</p><p>StoreがActionに応じて自らをアップデートした後、changeイベントを出します。Controller-Viewと呼ばれる特殊なViewはChangeイベントを検知し、Storeから新しいデータを取り出し、子のViewのツリー全体に新しいデータを提供します。</p><p>要約すると、<a href="http://facebook.github.io/flux/docs/overview.html#views-and-controller-views" rel="nofollow" title="" class="ext-link">View</a>は<a href="http://facebook.github.io/flux/docs/overview.html#actions" rel="nofollow" title="" class="ext-link">Action</a>のトリガーとなります。Actionが発生させたイベントは<a href="http://facebook.github.io/flux/docs/dispatcher.html#content" rel="nofollow" title="" class="ext-link">Dispatcher</a>によって<a href="http://facebook.github.io/flux/docs/overview.html#stores" rel="nofollow" title="" class="ext-link">Store</a>に知らされます。Storeは状態を修正するactionに反応します。ViewはデータをStoreから取り入れて表示するので、Storeは必要に応じてUIの中でトリガーをアップデートし再表示します。</p><p>私が、Fluxについて気に入らない点がいくつかあります。それは、以下になります。</p><p>複数のStoreを持つ代わりに、私は「不変のデータ構造に対してグローバルで可変なリファレンスを持つ」というOmのアプローチをお勧めします。この方法により、データを逐一修正することなく、あるいは継時的に値を異なる値と再バインドすることなく、アプリケーションの状態を不変の値の子孫として作ることができます。</p><p>これは<a href="https://github.com/dialelo/atomo" rel="nofollow" title="" class="ext-link">atomo</a>のライブラリやFacebookの<a href="https://github.com/facebook/immutable-js" rel="nofollow" title="" class="ext-link">immutable-js</a>を使えば容易に達成できます。グローバルなatomに含まれるデータ構造はマップになり、これによってキーを使ってデータを論理ドメインに分割できるようになります。</p><p>このアプローチは、分離した論理ドメインはお互いに参照し合う傾向があるという事実を隠そうとするものではありません。以下に、設計した音楽アプリケーションの状態の例を挙げてみます。</p><p>不変のデータ構造から、グローバルで可変なatomを非常に簡単に作ることができます。</p><p>atomはobserveできること、atomからある値を変更した新しいatomを作成するときも参照される不変の値は構造を共有することから、私たちはメモリの効率が良い方法で、アプリケーションの状態をシリアライズできます。</p><p>これにより自由にタイムトラベルができるようになりますし、この状態管理戦略に加えて、Undo/Redo機能を実装するのも些細なことです。もしも私たちがActionの子孫やシステムのペイロードをシリアライズすれば、アプリケーションを使ってユーザインタラクションを再度行うことが非常に簡単になり、回帰テストも「前述のアクションをシステムに与え、ある決まった状態で終わるとassertする」といったシンプルなものなります。</p><p>各Viewに、全ての状態を渡して回るのは避けたいことです。ほとんどの場合、Viewはグローバル状態のサブセットを表示するので、Viewをモジュラー化するためには、グローバルな不変の状態の内部のパスに焦点を当てる機能が必要です。</p><p>Omは<a href="https://github.com/omcljs/om/wiki/Cursors" rel="nofollow" title="" class="ext-link">Cursor</a>と呼ばれる抽象化によってこの問題を解決します。グローバルatomのパスに絞り、atomと同様のAPIを提供します。Viewでサブストラクチャをデータソースとして扱えるようにし、さらにatomと同じ操作で修正することさえ可能です。atomと不変データを用いて使うために、この概念の<a href="https://github.com/dialelo/kurtsore" rel="nofollow" title="" class="ext-link">シンプルな実装</a>を書きました。</p><p>atomや別のcursorからcursorを1つ取り出し、cursorをポイントするパスをリファインすることができます。</p><p>cursorは、最上位コンポーネントへのパスがなくても作ることができ、それをサブコンポーネントに渡すときにリファインできます。この方法で、全体の状態を把握しなくとも、グローバル不変状態の一部を表すモジュラーViewが得られます。</p><p>cursorは作成時にそれらがポイントしている状態のスナップショットを保存し、また不変データが同等であるかのチェックは参照確認のみのため瞬く間に行われます。よって、コンポーネントが最も効率的な<code>shouldComponentUpdate</code>を更新、実行したかが判断できるのです。私の<a href="https://github.com/dialelo/react-kurtsore" rel="nofollow" title="" class="ext-link">react-kurtsore</a>ライブラリや<a href="https://github.com/omniscientjs/omniscient" rel="nofollow" title="" class="ext-link">Omniscient</a>などのオープンソースライブラリなどの例を参考にしてください。</p><p>これはグローバル状態のサブコンポーネントを表示し、リファインしたcursorを子に渡すコンポーネントの例です。</p><p>Fluxと同様、actionはユニークかつ一定の値で区別されます。このため、ストリングかES6シンボルを使います。</p><p>ここではactionを不変レコードとして、<code>type</code>と<code>payload</code>属性で表します。タイプは識別子であり、ペイロードは任意の不変値です。</p><p>Fluxは、状態遷移のトリガーのために、Storeに結合したSingletonのDispatcherを提示しています。これはStore間に従属性を与え、それぞれが互いの存在と、action実行の順序を知らせるようにします。Dispatcherとパブリッシュ・サブスクライブ方式は、各Storeがトリガーとなる全てのactionを逐一出力する点で異なります。</p><p>私は、パブリッシュ・サブスクライブ方式のactionに<a href="https://ja.wikipedia.org/wiki/Communicating_Sequential_Processes" rel="nofollow" title="" class="ext-link">CSP</a>チャネルを代わりに使うことを勧めます。<a href="https://github.com/ubolonton/js-csp" rel="nofollow" title="" class="ext-link">js-csp</a>ライブラリで取得できます。</p><p>パブリッシュ・サブスクライブ方式は、actionをパブリッシュするチャネルを持っており、そこからパブリケーションを引き出すことができます。パブリケーションはソースチャネルと、ソースチャネルに置かれたメッセージの”topic”を抽出する関数によります。テストを簡素化するため、ソースチャネルをatomで設定できるようにします。</p><p>パブリケーションによって、システムの他のコンポーネントはトピックをサブスクライブすることができます。そして、与えられたトピックをシェアする値をおくチャネルを生成します。actionにサブスクライブする方法は下記のとおりです。</p><p>上記の<code>userChan</code>は、システム上に出力されたログインとログアウトのactionを受け取るチャネルです。<code>go</code>に渡されたジェネレータは無期限に実行され、<code>userChan</code>のaction受信を待ち受け、これらのイベントをコンソールに蓄積していきます。<code>go</code>に渡されたジェネレータは<code>userChan</code>が利用可能な値を持っているときだけ動くため、内部でwhile文を使うのが安全だということを覚えておいてください。</p><p>いくつかのactionは、必要なデータを取得するのに非同期処理を必要とします。また、Viewをactionとディスパッチメカニズムから分離するため、Viewが消費し得る、ハイレベルAPI内のactionをカプセル化します。FluxはこのハイレベルAPIをaction creatorと呼びます。</p><p>View自体からactionをパブリッシュするよりも、関数内の全てのactionパブリケーションをカプセル化することをお勧めします。なぜなら、そうすることで、Viewをシステム内のコミュニケーションシステムから分離できるからです。また、Viewを隔離してテストすれば、Viewと対話し、ハイレベルAPIを想定どおりに消費していることを確認できるという利点もあります。</p><p>適切ななパブリッシュ・サブスクライブメカニズムを持つと、状態遷移を小さな部品にカプセル化できます。これらはパブリッシュ・サブスクライブのaction（またはactionの組み合わせ）を待ち受け、適宜に状態に影響を与え、ビジネスロジックをモジュラーかつテスト可能なユニットに分離します。これを私は<em>effects</em>と呼んでいます。</p><p>パブリケーションとatomを挟むことで、<code>logIn</code>と<code>logOut</code>のeffectを別でテストすることができます。<code>logIn</code>と<code>logOut</code>のeffectは呼び出し時に開始し、待ち受けるチャネルを返すので、それによりチャネルを遮断できるようになることに留意してください。effectのセットをグループ化すると、思いどおりに開始したり停止したりできるステートフルオブジェクトを作ることもできます。</p><p>上記全てを統合した、アプリケーションのエントリポイントの例は以下のようになります。</p>
