How I built a Slack bot to help me find an apartment in San Francisco （2016-07-21） by Vik Paruchuri私は、BostonからBay Areaに数カ月前に引っ越してきました。Priya（彼女です）と私は、賃貸市場についてありとあらゆる怖い話を聞いていました。「San Franciscoでアパートを探す方法」をGoogleで検索すると、たくさんのアドバイスがヒットすることからも、アパート探しの大変さがよく分かります。
Bostonは寒いです。でも、San Franciscoのアパート探しは怖いです。大家さんが見学会を開くと、そこに必要な書類を全て持って行き、検討するだけでも自分から進んですぐに保証金を支払わなければならないと書いてありました。私たちが賃貸契約に関するプロセスを徹底的に調べてみると、アパート探しの多くはタイミングがカギだということが分かりました。何が何でも見学会を開きたいと考えている大家さんもいますが、そうでない人の場合、最初にアパートを見に来た人に貸す場合が多いです。成功のカギは、物件を見つけ、それが自分の条件に合うかを素早く判断し、大家さんに連絡してその部屋を見せてもらう約束を取り付けることです。インターネットの口コミで評価の高かったPadmapperやLiveLovelyといったいくつかの賃貸アパートサイトを見てみましたが、どのサイトも掲載している情報がリアルタイムではなく、実際に見学して検討できるような物件は1つもありませんでした。また、地域を限定したり、駅に近いなどの追加条件を指定したりできるサイトもありませんでした。Bay Areaのアパートの物件情報のほとんどは、最初にCraigslistに掲載され、その後他のサイトがその情報を収集していくので、恐らく全ての物件が転載されているわけではないでしょうし、リアルタイムの情報が確認できるほどすぐに転載されるとは思えません。私たちは、以下のような方法があれば便利なのにと思いました。これらについて考え、4つのステップで実現できると気付きました。ここからは、各ステップをどのように構築したか、また、最終的なSlackのbotをアパート探しにどのように使ったかについて見ていきます。このbotを使って、Priyaと私は、（San Franciscoにしては）お手頃価格の気に入ったワンベッドルームの部屋をおよそ1週間後に見つけることができました。思っていたよりもずっと早かったです。もしこの記事を読み進めていく中でこのコードに興味を持たれたら、完成したプロジェクトをこちらでご覧いただけます。また、README.mdへのリンクはこちらです。bot構築の最初のステップは、Craigslistから物件情報を取得することです。Craigslistには、残念ながらAPIがありませんが、python-Craigslistパッケージを使って投稿を取得することができます。python-craigslistがWebページのコンテンツを取得してくれるので、BeautifulSoupを使用してWebページから関連する項目を抽出して、構造化データに変換します。このパッケージのコードは比較的短く、目を通す価値があります。CraigslistのSan Franciscoのアパート物件は、https://sfbay.craigslist.org/search/sfc/apaに掲載されています。次のことを実行するコードをその下に記載しておきました。bot構築のステップ1があっという間に終わりました。これでCraigslistからの物件情報を取得できます。各resultは、複数のフィールドを含むディクショナリです。以下が、フィールドの説明です。Craigslistから物件情報を取得することができたら、あとは結果に条件を追加して、見たいものだけを表示させるようにする必要があります。Priyaと私は、以下のエリアで物件を探したいと思っていました。地域を条件に追加するためには、まず、境界ボックス、つまりそのエリア周辺のボックスを定義する必要があります。
Lower Pacific Heights周辺にボックスを描いています。上の境界ボックスは、BoundingBoxを使って作成したものです。必ず左下のcsvを選んで、ボックスの座標を取得してください。Google Mapsのようなツールを使って左下と右上の座標が分かれば、自分で境界ボックスを定義することも可能です。ボックスが決まれば、地域と座標のディクショナリを作成します。各ディクショナリのキーは地域名で、各キーはリストのリストを含んでいます。最初の内部リストは境界ボックスの左下の座標で、2つ目は右上の座標です。そして、ある物件の座標がこのボックスの中に位置するかどうかによって、条件に該当するかどうかを確認することができます。次のことを実行するコードをその下に記載しておきました。残念ながら、Craigslistから取得した結果全てに、付随する座標があるとは限りません。座標を計算することができる位置情報を指定しているかどうかは、物件を投稿する人によります。物件を投稿する人がCraigslistに慣れているほど、位置情報を含んでいる可能性が高くなります。通常、高い家賃を設定しがちである業者が投稿した物件には、位置情報が掲載されています。物件の所有者の投稿には座標情報がない場合が多いですが、大抵契約条件が良いです。そのため、希望する地域にある座標情報のない物件が分かれば確実と言えます。地域のリストを作って文字列を照合し、希望する地域にある座標情報のない物件かどうかを確認します。多くの物件情報が間違った地域を示しているので、座標を利用するよりも正確性は劣りますが、ないよりはマシです。NEIGHBORHOODSの1つ1つにループすることによって、名前で照合することができます。これまでに書いた2つのコードで結果が処理されれば、住みたい地域に入っていない物件情報が除外されています。誤判定のものがいくつかあったり、地域や位置が指定されていない物件を見落としたりするかもしれませんが、このシステムは、物件情報の大部分を取得してくれます。Priyaも私も頻繁にSan Franciscoを訪れることは分かっていたので、San Franciscoに住まないのであれば、交通の便が良いところに住みたいと思っていました。Bay Areaの主な公共輸送はBARTです。Oakland、Berkeley、San Francisco、近郊エリアを結ぶ高速鉄道で、一部の区間では地下を走っています。botにこの機能を構築するためには、まず駅のリストを定義する必要があります。駅の座標はGoogle Mapから入手し、それらのディクショナリを作成します。全てのキーは駅の名前で、駅がある場所の緯度と経度が示された関連したリストを持っています。ディクショナリを作成したら、それぞれの結果に対して最寄駅を探します。次のことを実行するコードをその下に記載しておきました。これで、各物件情報の最寄り駅を知ることができました。
.signup-button{font-size: 2.25rem; line-height: 1em!important; background-color: #3c9; border-color: #3c9; padding: 0.75em 20px; border: 0; border-radius: 20px; color: #fff;  font-weight: 700; text-decoration: none; margin-left: 4em; display: inline-block; cursor: pointer;} .signup-button:hover{ background-color: #7878b3; border-color: #7878b3; color: #fff;} .signup-block{background-color: #f7f7f9; background-image: url(https://www.dataquest.io/blog/images/signup-block-background.png); background-repeat: no-repeat; background-position: 100% 0; padding: 2%!important; border-style: solid; border-width: 1px; border-color: #3A4145;}

結果に条件を追加し終わったら、これまで準備してきたものをSlackに投稿します。Slackとは、チーム内でチャットができるアプリケーションのことです。Slack内にチームを作成すると、他のメンバーをそのチームに招待することができます。Slackの各チームには、メンバー同士がメッセージをやり取りできる複数のチャンネルが用意されています。チャンネル内にいる他のメンバーは、それぞれのメッセージに「いいね」や絵文字などの注釈を付けることができます。Slackに関する詳細はこちらをご覧ください。もしSlackを体験したいようであれば、私たちが運営するデータサイエンスSlackコミュニティに参加してみてください。結果をSlackに投稿することによって、他の人たちと協力し合うことができ、どの物件が最適かを見極めることができます。結果を投稿するには、以下のことが必要です。これらのステップが完了したら、物件情報をSlackに投稿するためのコード作成に入ります。適切なチャンネル名とトークンが入手できたら、結果をSlackに投稿することができます。投稿には、python-slackclientを使用します。これはPythonのパッケージで、Slack APIの使用が一段と楽になります。python-slackclientはSlackのトークンを使用することで初期化され、チームやメッセージを管理する多くのAPIエンドポイントにアクセスできるようになります。次のことを実行するコードをその下に記載しておきました。全てが接続されたら、botがSlackに物件情報を投稿するようになり、以下のように表示されます。botが実行されると物件情報がこのように表示されます。物件情報に絵文字や「いいね」が付いているのがお分かりいただけると思います。基本的な要素が全て揃ったので、コードを継続的に実行させる必要があります。最終的には、結果をリアルタイムでSlackに投稿できるようにするか、それに近い状態にしたいと思っています。全てを運用可能にするためには、幾つかのステップを行う必要があります。まずは、SQLAlchemyというPythonパッケージを利用し、物件情報を保存します。SQLAlchemyはORマッパー（ORM）で、Pythonでのデータベースの作業を簡単にしてくれます。SQLAlchemyを使うことで物件情報を保存するデータベースのテーブルやテーブルにデータを追加しやすくするデータベースコネクションを作成することができます。SQLAlchemyをSQLiteのデータベースエンジンと併せて使用し、listings.dbという1つのファイルに全てのデータを保存します。次のことを実行するコードをその下に記載しておきました。データベースのモデルが出来上がったので、後は各物件情報をデータベースに保存する必要があります。重複したものは省いてくれます。次に、コードからコンフィギュレーションを独立させます。まず、コンフィギュレーションを保存することができるsettings.pyというファイルを作成します。コンフィギュレーションには隠れたSLACK_TOKENが含まれていますが、うっかりこれをgitにコミットしてしまったり、Githubにプッシュしたりしたくはありません。また、隠されていないBOXESといった他の設定も同様です。しかし、簡単に編集できるようにはしたいと思っています。そこで以下の設定をsettings.pyに移動させます。また、gitによって無視されるprivate.pyというファイルを作成します。これには、以下のキーが含まれています。完成したsettings.pyファイルは、こちらでご覧いただけます。最後に、取得したコードが継続的に実行されるループを作成する必要があります。次のことを実行するコードをその下に記載しておきました。また、コードを取得する頻度をコントロールするために、SLEEP_INTERVALをsettings.pyに追加する必要があります。初期設定は20分になっています。これでコードは完成しました。Slack botがどのように実行されるかご自身で確認してみてください。Githubにあるこちらから、今回のプロジェクトを確認できます。README.mdには、インストール方法が細かく記載されています。ただし、プログラムのインストールを経験したことがない方やLinuxを使っていない方は、Dockerの説明を参照することをお勧めします。Dockerとは、アプリケーションを簡単に作成したりデプロイしたりできるツールで、Slackのbotをローカルコンピュータで素早く実行させることができます。DockerでSlackのbotをインストール並びに実行させる基本的な説明を以下に明記しておきます。常にコンピュータを起動させておきたくないのであれば、botをサーバにデプロイするのもよいです。そうすれば、継続的に実行しておくことができます。DigitalOceanというホスティングプロバイダでサーバを作成することができます。DigitalOceanはインストールされたDockerを使って、自動的にサーバを作成してくれます。DigitalOceanでDockerを使う方法は、こちらに説明が記載されています。著者が言うところの”shell”を知らないのであれば、DigitalOceanのドロップレットにSSH接続する方法がこちらに記述されています。手引書に沿いたくない場合は、こちらから始めてみてもいいでしょう。DigitalOceanでサーバが作成できたら、SSH接続し、Dockerのインストール方法と上記にある使用説明書に沿って作業してみてください。上記のステップが完了すれば、Slackのbotが自動的にアパートを探し出してくれるはずです。このbotを利用して、Priyaと私は素敵なアパートを見つけることができました。希望価格よりは高くなりましたが、私たちが思っていたSan Franciscoのワンベッドルームの価格よりも、最終的には安く借りられました。また、想像以上に大幅な時間削減にもなりました。私たちの場合はうまく行きましたが、botの改善点は幾つかあります。Githubにあるプロジェクトに対して自由にプルリクエストを申請してください。また、もしこのツールが役立つと感じたようであれば、是非コメントを投稿してください。皆さんがどのようにこのツールを活用しているのかお伺いしたいです。
