<p><a href="https://research.swtch.com/version-sat" rel="nofollow" title="" class="ext-link">Version SAT</a> （2016/12/13） by <a href="https://swtch.com/~rsc/" rel="nofollow" title="" class="ext-link">Russ Cox</a></p><p><small>(注：2017/02/06、いただいたフィードバックを元に翻訳を修正いたしました。)</small></p><p>Dependency HellとはNP完全のことですが、この状態から脱することができるかもしれません。</p><p>パッケージにおけるバージョン選択の問題は、完全である（全ての依存関係を満たしている）かつ互換性のある（2つの非互換性のパッケージが選択されていない）トップレベルパッケージPをビルドするのに使うことができる依存関係のセットを見つけることです。ただし、菱形依存問題があるので、このようなセットは存在しない可能性があります。菱形依存問題とは、AはBとCが必要、BはDのバージョン2ではなくバージョン1が必要、CはDのバージョン1ではなくバージョン2が必要といったような問題のことです。この場合、Dの両方のバージョンを選択することはできないため、Aをビルドすることができないわけです。</p><p><img src="https://research.swtch.com/version-sat.svg"><br>
パッケージのバージョンを選択するために、パッケージ管理システムにはアルゴリズムが必要となります。つまり、<code>apt-get install perl</code>を実行する際、システムがPerlの最新バージョンのことを指していると決めてかかるかもしれません。しかしこの場合、Perlの推移的依存関係を満たす方法を見つけるか、なぜPerlがインストールできないのか納得のいく説明を出力しなければなりません。この問題を解決するのに、最悪どのくらいのコストがかかるのかと、疑問に思うことでしょう。Perlをインストールすることができるかどうか判断するのに、パッケージ管理システムが何時間または何日、もしくは何年という時間を費やしてほしくないはずです。</p><p>残念ながら、バージョンを選択する問題はNP完全で、全ての入力に対して素早い実行が保証されたアルゴリズムを見つけられる見込みは非常に低いのです。この記事では、バージョン選択におけるNP完全性の検証を紹介するとともに、既存のパッケージ管理がどのように対処しているのかを見ていきながら、NP完全のタスクを避けるための有用なアプローチ方法を簡単にお話ししていきたいと思います。</p><p>NP完全性を検証するためには、多様な出力のあるアルゴリズムの現代的な世界から、yesもしくはnoのどちらかを取るブーリアン出力を持つアルゴリズムである、複雑性理論の限定的な世界へと移行する必要があります。複雑性理論の世界では、VERSION問題（VERSIONは常に大文字）を定義し、有効なバージョン選択があるかどうかを要求します。ブーリアンのVERSION問題は私たちが持つ元々の問題の半分でしかなく、これがNP完全であることは証明可能です。この証明を行うには、VERSIONがNPに属していることと、そのVERSIONがNP困難であることの2つの異なる事実を証明する必要があります。</p><p>解 “yes” の全てに、検証が容易な多項式サイズの説明が含まれている場合、ある問題はNPに属することになります。</p><p>選択されたパッケージのバージョンをリストすることによって、解 “yes” のどれも説明することができるので、VERSIONはNPに属することになります。このリストは入力よりも大きくなることはなく、時間内に正確性を確認することができ、入力内の二次式よりも悪くなることはありません（計算モデルの詳細により、一次式の可能性もあります）。</p><p>ある問題に対する有効な解決策が、NPに属する全ての他の問題に対する有効な解決策に適合することができる場合、問題はNP困難となります。これは非常に難しい注文ではありますが、VERSIONにおける有効な解決策を、もう1つのNP困難の問題（HARDと呼びます）における有効な解決策に適応させることを証明するだけで十分です。そして、他の誰かが証明したHARDにおける有効な解決策が、NPに属するその他全ての問題における有効な解決策に適応できるという事実に依存すればいいのです。</p><p>NP完全（NPとNP困難）の有用な例に、充足可能性問題があります。充足可能性問題では、入力は、変数もしくはその変数の否定である、3つそれぞれのリテラルを論理和（OR）で結び、それらを論理積（AND）で結ぶように制限されたブーリアン変数のブーリアン方程式となります。充足可能性問題の入力として以下の例を挙げておきます（∧はAND、∨はOR、¬はNOT）。</p><p>(¬ x1 ∨ ¬ x2 ∨ ¬ x3) ∧ (¬ x2 ∨ ¬ x3 ∨ ¬ x4) ∧ (¬ x2 ∨ ¬ x2 ∨ x3) ∧ (x2 ∨ x2 ∨ x2)</p><p>x1 = 0、x2 = 1、x3 = 1、x4 = 0のように、変数にこのような組み合わせの数値を代入することによって充足可能になります。よって解はyesです。</p><p>以下のように、項をもう1つ追加した場合はどうでしょうか。</p><p>(¬ x1 ∨ ¬ x2 ∨ ¬ x3) ∧ (¬ x2 ∨ ¬ x3 ∨ ¬ x4) ∧ (¬ x2 ∨ ¬ x2 ∨ x3) ∧ (x2 ∨ x2 ∨ x2) ∧ (x1 ∨ ¬ x2 ∨ x4)</p><p>この場合、変数にどのような値を代入しても充足不可能なので、解はnoです。</p><p>充足可能性問題のインスタンスにおける一般的な形式は、変数V1からVm,に対する項C1からCnの論理積で、各Ciは3つのリテラル、各xjまたは、いくつかの変数xjにおける¬ xjの論理和である方程式Fとなります。項にある重複したリテラルは、上記にある(¬ x2 ∨ ¬ x2 ∨ x3)や(x2 ∨ x2 ∨ x2)のようにすることができます。</p><p>どのような充足可能性問題のインスタンスでも、同じ解となるVERSIONのインスタンスに置き換えることができます。パッケージ管理については、以下についてのみ仮定することとします。</p><p>バージョンVのパッケージPをP:V（方程式の標準数式イタリックと区別するためにパッケージについては等幅フォントを使用しています）という形に省略します。P:Vの依存関係は、V-1やV+1ではなく、バージョンVによって完全に満たされなくてはなりません。</p><p>充足可能性問題の方程式が与えられれば、パッケージFを作成することができます。このFは、パッケージC1、C2、C<em>n</em>といった全体の方程式を表しており、C<em>n</em>は各項を、パッケージX1、X2、X<em>m</em>などは各変数を表しています。</p><p>各パッケージX<em>j</em>はX<em>j</em>:0とX<em>j</em>:1という2つのバージョンを持っています。上記のことを仮定した場合、X<em>j</em>:0とX<em>j</em>:1は競合関係にあり、両方をインストールすることはできません。元々の方程式では、インストールされているX<em>j</em>:1がx<em>j</em>=1に対応しています。</p><p>パッケージC<em>i</em>は数字0、1、2という3つのバージョンを持っていて、それぞれのバージョンは対応する項のリテラルによって決まります。例えば、<i>C</i><sub>5</sub>が(<i>x</i><sub>1</sub> ∨ ¬ <em>x</em><sub>2</sub> ∨ <em>x</em><sub>4</sub>)である場合、C5:0がX1:1に、C5:1がX2:0に、C5:2がX4:1によって決まります。元々の方程式では、インストールされているC<em>i:k</em>は、真である<em>C</em><sub>i</sub>の<em>k</em>番目のリテラルに対応します（結果、<em>C</em><sub>i</sub>が真となります）。</p><p>パッケージFは、C1、C2、…、C<em>n</em>によって決まります。インストールされているFは、全てのC<sub>i</sub>がインストールされることを示しており、これによって真となる全ての<em>C</em><sub>i</sub>に対応することになるので、結果、<em>F</em>が真となります。</p><p>パッケージ管理がパッケージFをインストールする方法を見つけることができれば、元々の方程式における満足する代入は、各変数<em>x</em><sub>j</sub>に対するX<em>j</em>のインストール状態から読み出すことができます。同様に、方程式が充足可能なのであれば、満足できる代入は、パッケージ管理がFのインストールを問題なく実行する1つの方法を与えてくれるでしょう。それ故に私たちは、同じ解法を用いることで、充足可能性問題のインスタンスを、一致するVERSIONのインスタンスに置き換えました。これにより、充足可能性問題はVERSIONを使うことで解決できると定めることができ、VERSIONはNP困難ということになります。</p><p>VERSIONがNPに属していてNP困難であることから、VERSIONはNP完全となります。</p><p>上記はかなり最低限の場合を想定しています。パッケージは依存関係のリストを持っていて、パッケージの依存関係は独自のバージョンからバージョンに変更することが可能。パッケージの依存関係は特定の依存関係のバージョンを制限し、2つのパッケージのバージョンをお互いに競合関係にすることが可能。これはパッケージ管理システムを役立たせるには最低限必要なことでしょう。いくつかのパッケージ管理では、依存関係が特定のバージョンをリストすることを許可しない代わりに、範囲を必要とします。しかし、バージョンの必要条件0と1は≤ 0と≥ 1へと簡単に変更することができます。いくつかのパッケージ管理は、初期設定でパッケージの異なるバージョンの競合を想定できないかもしれませんが、最低でも次に挙げるようなことは特定することは可能かもしれません。Unixシステムに2つの<code>/bin/bash</code>が存在することはない、または、<code>printf</code>という2つの定義がCプログラムに組み込まれている。</p><p>仮定は、調べた全てのパッケージ管理システムにおいて真です。調べたシステムは、DebianのAPT、RedHatのRPM、RustのCargo、Nodeのnpmjs、JavaのMaven、HaskellのCabal、またその他複数です。どうやらパッケージ管理の実装で直面するのは、NP完全のタスクのようです。インストールの方法を決めるために長い時間を要する可能性があるのか、それともインストールできないものとしてインストール可能なパッケージのレポートするのかを、それぞれが選択しなくてはなりません（もちろん、何らかの事情により、所与の実装が両方を行うこともあります）。</p><p>Knuthは<a href="http://ptgmedia.pearsoncmg.com/images/9780134397603/samplepages/9780134397603.pdf" rel="nofollow" title="" class="ext-link">The Art of Computer Programming Volume 4, Fascicle 6</a>で以下のように記述しています。</p><p>充足可能性の話は、美しい数学を織り交ぜたソフトウェアエンジニアリングの勝利を語るものです。見事な新しいデータ構造やその他のテクニックのおかげです。このような問題は数年前まで不可能と考えられていましたが、現代のSATソルバは、多くの変数が絡んだ現実の問題に当たり前のように対処できるようになっています。</p><p>実際のところ、現代のパッケージ管理はSATソルバの使用へと移行し始めています。</p><p><a href="http://0install.net/" rel="nofollow" title="" class="ext-link">0install</a>はヒューリスティックから開始しましたが、<a href="http://0install.net/solver.html" rel="nofollow" title="" class="ext-link">SATソルバ</a>に移行することが<a href="https://mail.mozilla.org/pipermail/rust-dev/2012-February/001378.html" rel="nofollow" title="" class="ext-link">必要だと分かりました</a>。</p><p>システム統合フレームワークである<a href="https://www.chef.io/" rel="nofollow" title="" class="ext-link">Chef</a>は、<a href="http://www.gecode.org/" rel="nofollow" title="" class="ext-link">Gecodeの制約ソルバ</a>のための<a href="https://github.com/chef/dep-selector" rel="nofollow" title="" class="ext-link">Rubyバインディングのdep-selectgor</a>を使っています。</p><p><a href="https://github.com/chef/dep-selector" rel="nofollow" title="" class="ext-link">Dartのpub</a>には、<a href="https://github.com/dart-lang/pub/issues/912" rel="nofollow" title="" class="ext-link">しばしば長い時間を要する</a><a href="https://github.com/dart-lang/pub/blob/master/lib/src/solver/backtracking_solver.dart" rel="nofollow" title="" class="ext-link">バックトラッキングのソルバ</a>が含まれています。</p><p><a href="https://wiki.debian.org/apt-get" rel="nofollow" title="" class="ext-link">Debianのapt-get</a>は、初期設定でヒューリスティックを使っていますが、<a href="http://www.dicosmo.org/MyOpinions/index.php?post/2014/10/30/139-saved-yet-another-time-by-an-external-solver-for-apt" rel="nofollow" title="" class="ext-link">SATソルバを呼び出す</a>ことができ、<a href="http://www.dicosmo.org/MyOpinions/index.php?post/2014/03/05/137-user-preferences-for-dependency-solvers-a-short-survey-and-new-features-added-in-the-latest-aspcud-solver" rel="nofollow" title="" class="ext-link">ユーザプリファレンスを考慮する</a>こともできます。また、Debianの品質保証チームは、リポジトリ内でインストールできないパッケージを特定するために<a href="http://www.dicosmo.org/MyOpinions/index.php?post/2014/05/21/138-static-analysis-of-software-component-repositories-from-debian-to-opam" rel="nofollow" title="" class="ext-link">ソルバを実行しています</a>。</p><p><a href="https://www.eclipse.org/" rel="nofollow" title="" class="ext-link">Eclipse</a>は、<a href="https://forge.ow2.org/forum/forum.php?forum_id=1369" rel="nofollow" title="" class="ext-link">プラグインの実装を管理する</a>ために、<a href="http://www.sat4j.org/" rel="nofollow" title="" class="ext-link">sat4j SATソルバ</a>を使っています。</p><p><a href="https://lwn.net/Articles/503581/" rel="nofollow" title="" class="ext-link">FedoraのDNF</a>（または “Dandified yum” ）では、実験モードで<a href="https://fedoraproject.org/wiki/Features/DNF#Detailed_Description" rel="nofollow" title="" class="ext-link">SATソルバ</a>を使っています。</p><p><a href="https://github.com/freebsd/pkg" rel="nofollow" title="" class="ext-link">FreeBSDのpkg</a>（DragonflyBSDでも使われています）では、<a href="https://github.com/freebsd/pkg/tree/master/external/picosat" rel="nofollow" title="" class="ext-link">picosat SATソルバ</a>を使っています。</p><p><a href="https://opam.ocaml.org/" rel="nofollow" title="" class="ext-link">OCamlのOPAM</a>は、<a href="https://opam.ocaml.org/doc/Specifying_Solver_Preferences.html" rel="nofollow" title="" class="ext-link">ローカルまたはネットワークを介してリモートでSATソルバを呼び出す</a>ことができます。Debianのapt-getのように、OPAMのソルバはユーザプリファレンスを考慮することができ、OPAMのリポジトリはインストールできないパッケージに対してスキャンが実行されます。</p><p><a href="https://www.opensuse.org/" rel="nofollow" title="" class="ext-link">Open SUSE</a>のパッケージ管理は、 “充足可能性のアルゴリズムを使っているフリーパッケージの依存関係ソルバ” である<a href="https://github.com/openSUSE/libsolv" rel="nofollow" title="" class="ext-link">libsolv</a>を使っています。また、独自の<a href="https://en.opensuse.org/openSUSE:Libzypp_satsolver" rel="nofollow" title="" class="ext-link">libzypp</a>SATソルバを使うOpenSUSEのzypperもあります。</p><p><a href="https://www.continuum.io/anaconda-overview" rel="nofollow" title="" class="ext-link">PythonのAnaconda</a>は、<a href="https://www.continuum.io/blog/developer/new-advances-conda-0" rel="nofollow" title="" class="ext-link">SATソルバ</a>を使っていますが、<a href="https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/CT7viK-fFDI" rel="nofollow" title="" class="ext-link">長い時間を要します</a>。</p><p><a href="https://blog.rust-lang.org/2016/05/05/cargo-pillars.html" rel="nofollow" title="" class="ext-link">RustのCargo</a>では、<a href="https://github.com/rust-lang/cargo/blob/8b5aec111926d1d03d2da32dd494e0fff073f870/src/cargo/core/resolver/mod.rs#L426" rel="nofollow" title="" class="ext-link">基本的なバックトラッキングソルバ</a>を使っています。これは、複数のバージョンが最終的なバイナリにリンクされることを許可します。</p><p>Illumosでも使用され、またIPSとしても知られる<a href="https://docs.oracle.com/cd/E36784_01/html/E36856/docinfo.html#scrolltoc" rel="nofollow" title="" class="ext-link">Solarisのpkg</a>は、<a href="https://blogs.oracle.com/barts/entry/satisfaction" rel="nofollow" title="" class="ext-link">minisat SATソルバを使っています</a>。</p><p><a href="https://github.com/apple/swift-package-manager" rel="nofollow" title="" class="ext-link">Swiftのパッケージ管理</a>では、<a href="https://github.com/apple/swift-package-manager/blob/master/Sources/PackageGraph/DependencyResolver.swift#L518" rel="nofollow" title="" class="ext-link">基本的なバックトラッキングソルバ</a>を使っています。</p><p>（こちらに他のパッケージ管理を追加したいと思っているので、詳細をご存じの方（または記載されている内容に間違いがある場合）は<a href="mailto:rsc@swtch.com">私宛にメールしていただくか</a>、<a href="https://twitter.com/_rsc" rel="nofollow" title="" class="ext-link">ツイートを送ってください</a>。よろしくお願いします）</p><p>パッケージのバージョン選択がNP完全であるという事実に、私たちはどう反応すべきでしょうか？　1つの反応としては、複雑性を受け入れ、SATソルバが有能であることに感謝することでしょう。別の反応としては、これが良い方法なかどうかを問いかけてみることです。この問題を解決することを要求するようなツールをビルドすべきではないかもしれませんし、またソフトウェアを開発する過程で何か不具合が起こる可能性もあります。</p><p>パッケージのバージョン選択がNP完全問題なのであれば、それはつまり、考えられるパッケージの組み合わせの探索空間が大きく、効率の良い体系的分析が複雑だということです。効率の良い統計的テストはどうでしょうか？　もし、探索で競合しない組み合わせを見つけた場合、組み合わせが機能するとなぜ信じることができるのでしょう？　バージョンの競合がないということは、組み合わせがテストされていないということだけを意味します。探索が競合しない組み合わせを見つけられなかった場合、次のステップを明確にするために、開発者にその失敗をどのように説明することができるでしょう？　NP完全を自らのソフトウェアのコンフィギュレーションの決定に受け入れることをせずに、ソフトウェアをきちんと理解するのは非常に難しいものです。それでは、ここまでのおさらいと、どのように回避できるかを検証していきましょう。</p><p>上に示した証明は、前述の仮定に左右されます。その仮定をもう一度、以下に示しておきます。</p><p>先に私が提示したように、これらは “パッケージ管理を役立つものとするための必要最低限” に相当する、と一般に通用しています。しかし、最終的にはこの仮定を削減する方法を見つけることができるかもしれません。</p><p>NP完全性を回避するための1つの方法は、仮定1に取り組むことです。もし仮に、依存関係に、特定のパッケージのバージョンをリストするのではなく、最小バージョンしか明記できないとしたらどうなるでしょう？ この場合は、使用するパッケージを見つけるために、次のようなちょっとしたアルゴリズムがあります。インストールしたいものの最新バージョンから始めて、その全ての依存関係の最新バージョンを、再帰的に入手します。この記事の冒頭、最初の菱形依存問題で、AはBとCを必要とし、BとCは異なるバージョンのDを必要とします。BはD 1.5を必要とし、CはD 1.6が必要とするなら、ビルドは両方に対しD 1.6を使うことができます。もし、BがD 1.6で動作しないなら、BのバージョンあるいはD 1.6のどちらかにバグがあると考えられます。バグのあるバージョンは配布から完全に削除しなければなりません。またその後、新しくリリースしたバージョンで問題を修正する必要があります。逆に依存関係グラフに競合を加えることは、問題を修正せずにバグを添付しているようなものです。</p><p>NP完全性を回避するもう1つの方法は、仮定4に取り組むことです。もし仮に、2つの異なるバージョンのパッケージを同時にインストールすることができるとしたらどうなるでしょう。ほとんど全ての探索アルゴリズムは、プログラムをビルドするためのパッケージの組み合わせを見つけるでしょう。それは、もしかすると最小限の組み合わせではないかもしれません（それはまだNP完全です）。BがD 1.5を必要とし、CがD 2.2を必要とするなら、ビルドは、両方を最終的なバイナリに含めて、個別のパッケージとして扱うことができます。上述のように、2種類の<code>printf</code>の定義をCプログラムに組み込むことはあり得ませんが、明示的モジュールシステムを有する言語は、（完全修飾が異なるという保証の下）Dの個別のバージョンをプログラムに含めることに、何の問題もありません。</p><p>NP完全性を回避する別の方法は、上で述べた2つを組み合わせることです。すでに示した例のように、もしパッケージが<a href="http://semver.org/" rel="nofollow" title="" class="ext-link">セマンティック バージョニング</a>に従えば、パッケージ管理は自動的にメジャーバージョンの中から最新バージョンの依存関係を使うでしょう。しかしその一方で、異なるメジャーバージョンを別のパッケージとして扱います。</p><p>このような制限の根本原理の1つは、開発者がソフトウェアをビルドしたりテストしたりする際に、全ての考え得るパッケージの組み合わせ全体について考えていない可能性があるということです。この考えは、ソフトウェアがどのようにビルドされているかについて開発者とそのツールの整合性を保つために、重要です。これらのアプローチのいずれかが、実際に実行されるようになれば、言語のパッケージ管理の動作と理解性の簡素化に大いに効果があるでしょう。</p><p>DebianとRedHatのパッケージのインストレーションがNP完全であるという証明は、<a href="https://hal.inria.fr/hal-00697463" rel="nofollow" title="" class="ext-link">EDOS dekuveravke WP2-D2.1、ソフトウェア依存関係の形式的管理に関する報告書</a>（2005年）の49～50ページに掲載されています。インストレーションをパッケージ化するための充足可能性問題の削減における、困難な手順は論理和をどのように構成するかということです。EDOSの証明は、単一の依存関係に対する代替リストを特定するパッケージ管理の機能を使って、直接に（Debianの場合）、あるいは “provides” 名令（RedHatの場合）を用いて、論理和をエンコードします。例えば、これらのシステムでは、実際のパッケージ、<code>ed</code>や<code>vi</code>、<code>acme</code>のいずれかがインストールされる際に、pseudo-packageの<code>text-editor</code>がインストール済とみなされる、と定義することができます。</p><p>RustのCargoのような言語のパッケージ管理の、依存関係の仕様書はDebianやRedHatの仕様書よりもはるかに簡素なものです。ですから、EDOSの証明は当てはまりません。そのため、言語のパッケージ管理はより簡単な（NP完全ではない）ジョブに直面することが望まれるかもしれません。上述の新しい証明はその望みをはねのけてくれるでしょう。（この証明を確認するための1つの方法は、<code>ed</code>、<code>vi</code>、<code>acme</code>のそれぞれに由来する3つのバージョンの<code>text-editor</code>パッケージを定義して、最後の例で述べた “provides” 命令をシミュレートすることです。）</p><p>パッケージの異なるバージョンの依存関係を変更して論理和をエンコーディングすれば、DebianやRedHatのパッケージ管理の両方に対して、修正することなく新しい証明が機能するだけでなく、いかなる予見可能なオペレーティングシステムや言語パッケージ管理に本質的に適用できるのです。言語のパッケージ管理の作成者のほとんどは、自分たちが直面した問題をNP完全とみなしていたと想像していますが、その事実が以前に証明された書面を見つけることはできていません。</p><p>依存関係を持つ、いくつかのシステムではSATソルバの代わりに制約ソルバを使っています。しかし、根本的な問題は、<a href="https://en.wikipedia.org/wiki/Schaefer%27s_dichotomy_theorem" rel="nofollow" title="" class="ext-link">やはりNP完全</a>です。</p><p>2008年、Daniel Burrowsは<a href="http://web.archive.org/web/20160326062818/http:/algebraicthunk.net/~dburrows/blog/entry/package-management-sudoku/" rel="nofollow" title="" class="ext-link">dpkgを用いた数独問題の解法</a>に関する記事をブログに投稿しました。</p><p>EDOS報告書を私に示唆してくれたSam Boyerと、彼の優れた<a href="https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527#.ec2150tqp" rel="nofollow" title="" class="ext-link">パッケージマネージメントの概要</a>に感謝します。</p><p>Roberto Di Cosmoは、EDOS報告書に続くものをたくさん書いています。<a href="http://www.dicosmo.org/Publications/publi-by-topic.html" rel="nofollow" title="" class="ext-link">こちらがそのリストです</a>。特に、<a href="http://www.dicosmo.org/Articles/2012-AbateDiCosmoTreinenZacchiroli-Jss.pdf" rel="nofollow" title="" class="ext-link">依存関係の解法、コンポーネントの進化するマネジメントでの個別の懸念</a>には、最新版の証明が含まれています。その一連の研究はSATソルバに適用するだけでなく、ユーザプリファレンスを考慮に入れて動作します。</p><p>また別の関連著書には、2007年ICSEで発表されたTuckerらの<br>
<a href="https://cseweb.ucsd.edu/~lerner/papers/opium.pdf" rel="nofollow" title="" class="ext-link">OPIUM、最適なパッケージのインストール／アンインストール管理</a>、があります。OPIUMは<a href="http://0install.net/solver.html#idp172528" rel="nofollow" title="" class="ext-link">0installソルバの出発点</a>です。</p><p>Jaroslav Tulachは<a href="http://wiki.apidesign.org/wiki/LibraryReExportIsNPComplete" rel="nofollow" title="" class="ext-link">2009年に、上で述べたのと同じ証明</a>を発見しました。ハンドル名<a href="https://news.ycombinator.com/item?id=13167981" rel="nofollow" title="" class="ext-link">edwintorokという読者のリンク</a>に感謝します。</p><p>Webサイト、<a href="http://lambda-the-ultimate.org/node/3588" rel="nofollow" title="" class="ext-link">LtUでのTulachの証明に関する議論</a>では、2005年のDaniel Burrowsの論文「<a href="https://people.debian.org/~dburrows/model.pdf" rel="nofollow" title="" class="ext-link">ソフトウェア依存関係のモデリングとリゾルビング</a>」に触れていますが、この論文の証明は、Tulachの証明／上述の証明よりもEDOSの証明に近いでしょう。</p><p>多くの読者が、参考文献や、SATソルバを有するパッケージ管理の追加のリンクを送ってくれました。みなさんどうもありがとうございます。</p>
