Some REST best practices （2014-11-15） by Pierre-Olivier Bourgeois現在ではREST APIはとても一般的な話題です。ほとんどすべてのWebアプリケーションの一部分となっています。シンプルで一貫性があり実際的なインターフェースは必須です。これは皆さんのAPIを他の人が使うことをとても容易にします。皆さんにとってはRESTの実践が日常的に感じられるかもしれませんが、RESTをあまり尊重しない人々もよく見かけます。これがRESTについて投稿するきっかけでした。この記事にはRESTfulなAPIを設計する時に考慮すべきベストプラクティスがあります。注意: ここでのベストプラクティスは、私が過去の経験に基づいて良いと考える事例です。もし違う考えをお持ちであれば、お気軽にメールをくだされば意見交換できると思います。APIのバージョンは必須であるべきです。これがあると時間が経ってAPIが変わっても影響を受けません。その方法の1つはURLでAPIのバージョンを渡すことです（/api/v1/...）。もう1つのうまいトリックは希望するバージョンを渡すAccept HTTPヘッダの利用です。Githubはそうしています。バージョンを利用すれば古いクライアントとの互換性を損なわずにAPI構造を変更できるようになります。私がよく見かけるのはリソース名の中に名詞の代わりに動詞を使っている人々です。以下は悪い例です。クリーンで一貫性のある構造のために、常に名詞を使うべきです。さらに、HTTPメソッドをうまく使えばリソース名からアクションを取り除けるようになります。以下はもっとすっきりした例です。私の考えでは、単一のリソースを命名する時に、単数形と複数形を混ぜることはあまり良い考えではありません。すぐに混乱して一貫性がなくなる可能性があります。表示・削除・更新のアクションであっても、/artistの代わりに/artistsを使いましょう。RFC2616はHEADとGETメソッドが常に安全に呼び出されるべきだと明記しています（言い換えれば、この記述は変更されるべきではありません）。これは悪い例です。GET /deleteProduct?id=1もし検索エンジンがそのページをインデックスしたらどうなるでしょうか。もしサブコレクション（他のもののコレクション）を取得したいなら、クリーンな設計のためにも入れ子になったルーチンを使いましょう。例えば、あるアーティストの全アルバムのリストを手に入れたいなら、以下のようにします。HTTPを使って非常に大きな結果セットを返すのもあまり良い考えではありません。大規模なJSONのシリアライズはすぐにコストがかかるようになるかもしれないので、結局はパフォーマンスの問題にぶつかることになります。その回避策は結果のページングでしょう。FacebookやTwitter、Githubなどではそれが行われています。完了までにあまり時間がかからない呼び出しをたくさん行う方が、実行するのが非常に遅い大きな呼び出し1つよりはるかに効率的です。また、ページネーションを使用している場合、次と前のページのリンクを示すのにいい方法はLink HTTPヘッダを通して行うことです。Githubではそれも行われています。コンテンツを返す際には（リクエストが成功してもしなくても）常に適切なHTTPステータスコードを使用してください。皆さんが自分のアプリケーションで使いたいと思う可能性のある一般的なコードを手短にまとめました。ステータスコードのもっと詳しいリストはRFC2616にあります。例外が発生した時は、エラーが記述された一貫性のあるペイロードを常に返すべきです。そうすることで、他の人がエラーメッセージをもっと解析しやすくなります（どんなエラーでも構造は常に同じになります）。私がWebアプリケーションでよく使っている1つをご紹介します。明確かつ単純で自己記述的なものです。
